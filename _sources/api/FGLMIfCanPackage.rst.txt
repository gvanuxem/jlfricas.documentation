.. index:: FGLMIfCanPackage

.. _l46474c4d496643616e5061636b616765:

FGLMIfCanPackage(R, ls)
=======================

:viewcode:`zerodim.spad line 1 <zerodim.spad#L1>` :editcode:`[edit on github] <zerodim.spad#L1>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* ls: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


This is just an interface between several packages and domains. The goal is to compute lexicographical Groebner bases of sets of polynomial with type Polynomial R by the \ *FGLM*\  algorithm if this is possible (i.e. if the input system generates a zero-dimensional ideal).


.. _l46474c4d496643616e5061636b616765-66676c6d496643616e:

.. index::
   pair: FGLMIfCanPackage; fglmIfCan

:spadfun:`fglmIfCan`\: \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R, failed) 
  \ ``fglmIfCan(lq1)``\  returns the lexicographical Groebner basis of \ ``lq1``\  by using the \ *FGLM*\  strategy, if \ ``zeroDimensional?(lq1)``\  holds.

.. _l46474c4d496643616e5061636b616765-67726f65626e6572:

.. index::
   pair: FGLMIfCanPackage; groebner

:spadfun:`groebner`\: \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R 
  \ ``groebner(lq1)``\  returns the lexicographical Groebner basis of \ ``lq1``\ . If \ ``lq1``\  generates a zero-dimensional ideal then the \ *FGLM*\  strategy is used, otherwise the \ *Sugar*\  strategy is used.

.. _l46474c4d496643616e5061636b616765-7a65726f44696d656e73696f6e616c3f:

.. index::
   pair: FGLMIfCanPackage; zeroDimensional?

:spadfun:`zeroDimensional?`\: \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``zeroDimensional?(lq1)``\  returns \ ``true``\  iff \ ``lq1``\  generates a zero-dimensional ideal \ ``w``\ .\ ``r``\ .\ ``t``\ . the variables of \ ``ls``\ .


