.. index:: MomentPackage

.. _l4d6f6d656e745061636b616765:

MomentPackage R
===============

:viewcode:`distro.spad line 252 <distro.spad#L252>` :editcode:`[edit on github] <distro.spad#L252>`

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


An auxiliary package for various moment and cumulant transformations used in \ ``Distribution``\ .


.. _l4d6f6d656e745061636b616765-626f6f6c65616e43756d756c616e74326d6f6d656e74:

.. index::
   pair: MomentPackage; booleanCumulant2moment

:spadfun:`booleanCumulant2moment`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``booleanCumulant2moment(cc)``\  computes the sequence of moments from the sequence of boolean cumulants \ ``cc``\ 

.. _l4d6f6d656e745061636b616765-63756d756c616e74326d6f6d656e74:

.. index::
   pair: MomentPackage; cumulant2moment

:spadfun:`cumulant2moment`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``cumulant2moment(cc)``\  computes the sequence of moments from the sequence of classical cumulants \ ``cc``\ 

.. _l4d6f6d656e745061636b616765-6672656543756d756c616e74326d6f6d656e74:

.. index::
   pair: MomentPackage; freeCumulant2moment

:spadfun:`freeCumulant2moment`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``freeCumulant2moment(cc)``\  computes the sequence of moments from the sequence of free cumulants \ ``cc``\ 

.. _l4d6f6d656e745061636b616765-68616e6b656c44657465726d696e616e74:

.. index::
   pair: MomentPackage; hankelDeterminant

:spadfun:`hankelDeterminant`\: (\ :ref:`Sequence <l53657175656e6365>`\  R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> R 
  \ ``hankelDeterminant(x, n)``\  returns the \ ``n``\ th Hankel determinant of the sequence \ ``x``\ .

.. _l4d6f6d656e745061636b616765-6a61636f626932706f6c79:

.. index::
   pair: MomentPackage; jacobi2poly

:spadfun:`jacobi2poly`\: (\ :ref:`Stream <l53747265616d>`\  R, \ :ref:`Stream <l53747265616d>`\  R) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  \ ``jacobi2poly(aa, bb)``\  returns the stream of orthogonal polynomials corresponding to the Jacobi parameters \ ``a_n``\  and \ ``b_n``\ .

.. _l4d6f6d656e745061636b616765-6d6f6d656e7432626f6f6c65616e43756d756c616e74:

.. index::
   pair: MomentPackage; moment2booleanCumulant

:spadfun:`moment2booleanCumulant`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``moment2booleanCumulant(mm)``\  computes the sequence of boolean cumulants from the sequence of moments \ ``mm``\ 

.. _l4d6f6d656e745061636b616765-6d6f6d656e743263756d756c616e74:

.. index::
   pair: MomentPackage; moment2cumulant

:spadfun:`moment2cumulant`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``moment2cumulant(mm)``\  computes the sequence of classical cumulants from the sequence of moments \ ``mm``\ 

.. _l4d6f6d656e745061636b616765-6d6f6d656e74326672656543756d756c616e74:

.. index::
   pair: MomentPackage; moment2freeCumulant

:spadfun:`moment2freeCumulant`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``moment2freeCumulant(mm)``\  computes the sequence of free cumulants from the sequence of moments \ ``mm``\ 

.. _l4d6f6d656e745061636b616765-6d6f6d656e74326a61636f626932:

.. index::
   pair: MomentPackage; moment2jacobi2

:spadfun:`moment2jacobi2`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Stream <l53747265616d>`\  Record(an: R, bn: R) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``moment2jacobi2(mm)``\  computes the Jacobi parameters as stream of pairs \$(an, \ ``bn``\ )\$.

.. _l4d6f6d656e745061636b616765-6d6f6d656e74326a61636f6269:

.. index::
   pair: MomentPackage; moment2jacobi

:spadfun:`moment2jacobi`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> Record(an: \ :ref:`Stream <l53747265616d>`\  R, bn: \ :ref:`Stream <l53747265616d>`\  R) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``moment2jacobi(mm)``\  computes the Jacobi parameters as pair of streams.

.. _l4d6f6d656e745061636b616765-6d6f6d656e74326d6f6e6f746f6e6543756d756c616e74:

.. index::
   pair: MomentPackage; moment2monotoneCumulant

:spadfun:`moment2monotoneCumulant`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``moment2monotoneCumulant(mm)``\  computes the sequence of monotone cumulants from the sequence of moments \ ``mm``\ 

.. _l4d6f6d656e745061636b616765-6d6f6d656e74326e74684a61636f6269:

.. index::
   pair: MomentPackage; moment2nthJacobi

:spadfun:`moment2nthJacobi`\: \ :ref:`List <l4c697374>`\  R -> Record(an: \ :ref:`List <l4c697374>`\  R, bn: \ :ref:`List <l4c697374>`\  R) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``moment2nthJacobi(mm)``\  computes the list of Jacobi parameters from the list of moments \ ``mm``\  as far as possible.

.. _l4d6f6d656e745061636b616765-6d6f6d656e7432537472616e73666f726d:

.. index::
   pair: MomentPackage; moment2Stransform

:spadfun:`moment2Stransform`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> Record(puiseux: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , laurent: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , coef: \ :ref:`Sequence <l53657175656e6365>`\  R) if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``moment2Stransform(x)``\  returns the Puiseux and Laurent order and coefficients of the \ ``S``\  transform of \ ``x``\ 

.. _l4d6f6d656e745061636b616765-6d6f6e6f746f6e6543756d756c616e74326d6f6d656e74:

.. index::
   pair: MomentPackage; monotoneCumulant2moment

:spadfun:`monotoneCumulant2moment`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``monotoneCumulant2moment(hh)``\  computes the sequence of moments from the sequence of monotone cumulants \ ``hh``\ 

.. _l4d6f6d656e745061636b616765-6d6f6e6f746f6e6543756d756c616e74326d6f6d656e74506f6c79:

.. index::
   pair: MomentPackage; monotoneCumulant2momentPoly

:spadfun:`monotoneCumulant2momentPoly`\: \ :ref:`Sequence <l53657175656e6365>`\  R -> \ :ref:`Sequence <l53657175656e6365>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  \ ``monotoneCumulant2momentPoly(hh)``\  computes the sequence of moment polynomials \$\ ``m_n``\ (\ ``t``\ )\$ from the sequence of monotone cumulants \ ``hh``\ 


