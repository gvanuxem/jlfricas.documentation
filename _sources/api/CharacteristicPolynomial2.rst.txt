.. index:: CharacteristicPolynomial2

.. _l4368617261637465726973746963506f6c796e6f6d69616c32:

CharacteristicPolynomial2 F
===========================

:viewcode:`charpol.spad line 1 <charpol.spad#L1>` :editcode:`[edit on github] <charpol.spad#L1>`

* F: \ :ref:`Field <l4669656c64>`\ 


This package computes characteristic polynomial using Danilewski method.


.. _l4368617261637465726973746963506f6c796e6f6d69616c32-636861725f706f6c:

.. index::
   pair: CharacteristicPolynomial2; char_pol

:spadfun:`char_pol`\: \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F 
  \ ``char_pol(m)``\  computes characteristic polynomial of \ ``m``\ .

.. _l4368617261637465726973746963506f6c796e6f6d69616c32-64616e696c6577736b69:

.. index::
   pair: CharacteristicPolynomial2; danilewski

:spadfun:`danilewski`\: \ :ref:`Matrix <l4d6174726978>`\  F -> Record(matrix: \ :ref:`Matrix <l4d6174726978>`\  F, block_list: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``danilewski(m)``\  converts \ ``m``\  to block form where each block represents transposition of multiplication by a polynomial.


