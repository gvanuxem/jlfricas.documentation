.. index:: RadicalEigenPackage

.. _l5261646963616c456967656e5061636b616765:

RadicalEigenPackage
===================

:viewcode:`radeigen.spad line 1 <radeigen.spad#L1>` :editcode:`[edit on github] <radeigen.spad#L1>`


Package for the computation of eigenvalues and eigenvectors. This package works for matrices with coefficients which are rational functions over the integers. (see Fraction Polynomial Integer). The eigenvalues and eigenvectors are expressed in terms of radicals.


.. _l5261646963616c456967656e5061636b616765-656967656e4d6174726978:

.. index::
   pair: RadicalEigenPackage; eigenMatrix

:spadfun:`eigenMatrix`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``eigenMatrix(m)``\  returns the matrix \ ``b``\  such that \ ``b*m*(inverse b)``\  is diagonal, or "failed" if no such \ ``b``\  exists.

.. _l5261646963616c456967656e5061636b616765-6772616d7363686d696474:

.. index::
   pair: RadicalEigenPackage; gramschmidt

:spadfun:`gramschmidt`\: \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``gramschmidt(lv)``\  converts the list of column vectors \ ``lv``\  into a set of orthogonal column vectors of euclidean length 1 using the Gram-Schmidt algorithm.

.. _l5261646963616c456967656e5061636b616765-6e6f726d616c697365:

.. index::
   pair: RadicalEigenPackage; normalise

:spadfun:`normalise`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``normalise(v)``\  returns the column vector \ ``v``\  divided by its euclidean norm; when possible, the vector \ ``v``\  is expressed in terms of radicals.

.. _l5261646963616c456967656e5061636b616765-6f7274686f6e6f726d616c4261736973:

.. index::
   pair: RadicalEigenPackage; orthonormalBasis

:spadfun:`orthonormalBasis`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``orthonormalBasis(m)``\  returns the orthogonal matrix \ ``b``\  such that \ ``b*m*(inverse b)``\  is diagonal. Error: if \ ``m``\  is not a symmetric matrix.

.. _l5261646963616c456967656e5061636b616765-7261646963616c456967656e76616c756573:

.. index::
   pair: RadicalEigenPackage; radicalEigenvalues

:spadfun:`radicalEigenvalues`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``radicalEigenvalues(m)``\  computes the eigenvalues of the matrix \ ``m``\ ; when possible, the eigenvalues are expressed in terms of radicals.

.. _l5261646963616c456967656e5061636b616765-7261646963616c456967656e766563746f72:

.. index::
   pair: RadicalEigenPackage; radicalEigenvector

:spadfun:`radicalEigenvector`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``radicalEigenvector(c, m)``\  computes the eigenvector(\ ``s``\ ) of the matrix \ ``m``\  corresponding to the eigenvalue \ ``c``\ ; when possible, values are expressed in terms of radicals.

.. _l5261646963616c456967656e5061636b616765-7261646963616c456967656e766563746f7273:

.. index::
   pair: RadicalEigenPackage; radicalEigenvectors

:spadfun:`radicalEigenvectors`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  Record(radval: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , radmult: \ :ref:`Integer <l496e7465676572>`\ , radvect: \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``radicalEigenvectors(m)``\  computes the eigenvalues and the corresponding eigenvectors of the matrix \ ``m``\ ; when possible, values are expressed in terms of radicals.


