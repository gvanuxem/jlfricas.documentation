.. index:: CRApackage

.. _l4352417061636b616765:

CRApackage R
============

:viewcode:`cra.spad line 1 <cra.spad#L1>` :editcode:`[edit on github] <cra.spad#L1>`

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


This package implements asymptotically efficient Chinese reconstruction


.. _l4352417061636b616765-6368696e65736552656d61696e646572:

.. index::
   pair: CRApackage; chineseRemainder

:spadfun:`chineseRemainder`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> \ :ref:`List <l4c697374>`\  R 
  \ ``chineseRemainder(llv, lm)``\  returns a list of values, each of which corresponds to the Chinese remainder of the associated element of \ ``llv``\  and \ ``lm``\ . This is more efficient than applying chineseRemainder several times.


.. index::
   pair: CRApackage; chineseRemainder

:spadfun:`chineseRemainder`\: (\ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> R 
  \ ``chineseRemainder(lv, lm)``\  returns a value \ ``v``\  such that, if \ ``x``\  is \ ``lv.i``\  modulo \ ``lm.i``\  for all \ ``i``\ , then \ ``x``\  is \ ``v``\  modulo \ ``lm(1)*lm(2)*...*lm(n)``\ .

.. _l4352417061636b616765-6d6f6454726565:

.. index::
   pair: CRApackage; modTree

:spadfun:`modTree`\: (R, \ :ref:`List <l4c697374>`\  R) -> \ :ref:`List <l4c697374>`\  R 
  \ ``modTree(r, l)``\  is undocumented.

.. _l4352417061636b616765-6d756c74694575636c696465616e54726565:

.. index::
   pair: CRApackage; multiEuclideanTree

:spadfun:`multiEuclideanTree`\: (\ :ref:`List <l4c697374>`\  R, R) -> \ :ref:`List <l4c697374>`\  R 
  \ ``multiEuclideanTree(l, r)``\  is undocumented.


