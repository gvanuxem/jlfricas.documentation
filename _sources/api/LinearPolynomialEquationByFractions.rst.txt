.. index:: LinearPolynomialEquationByFractions

.. _l4c696e656172506f6c796e6f6d69616c4571756174696f6e42794672616374696f6e73:

LinearPolynomialEquationByFractions R
=====================================

:viewcode:`fraction.spad line 552 <fraction.spad#L552>` :editcode:`[edit on github] <fraction.spad#L552>`

* R: \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 


Given a PolynomialFactorizationExplicit ring, this package provides a defaulting rule for the \ ``solveLinearPolynomialEquation``\  operation, by moving into the field of fractions, and solving it there via the \ ``multiEuclidean``\  operation.


.. _l4c696e656172506f6c796e6f6d69616c4571756174696f6e42794672616374696f6e73-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e42794672616374696f6e73:

.. index::
   pair: LinearPolynomialEquationByFractions; solveLinearPolynomialEquationByFractions

:spadfun:`solveLinearPolynomialEquationByFractions`\: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, failed) 
  \ ``solveLinearPolynomialEquationByFractions([f1, ..., fn], g)``\  (where the \ ``fi``\  are relatively prime to each other) returns a list of \ ``ai``\  such that \ ``g/prod fi = sum ai/fi``\  or returns "failed" if no such exists.


