.. index:: MatrixManipulation

.. _l4d61747269784d616e6970756c6174696f6e:

MatrixManipulation(R, Row, Col, M)
==================================

:viewcode:`mama.spad line 1 <mama.spad#L1>` :editcode:`[edit on github] <mama.spad#L1>`

* R: \ :ref:`Type <l54797065>`\ 

* Row: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R

* Col: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R

* M: \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


Some functions for manipulating (dense) matrices. Supported are various kinds of slicing, splitting and stacking of matrices. The functions resemble operations often used in numerical linear algebra algorithms.


.. _l4d61747269784d616e6970756c6174696f6e-62616e644d6174726978:

.. index::
   pair: MatrixManipulation; bandMatrix

:spadfun:`bandMatrix`\: (M, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M if R has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 
  \ ``bandMatrix``\  returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals, negative ones lower off-diagonals.


.. index::
   pair: MatrixManipulation; bandMatrix

:spadfun:`bandMatrix`\: (M, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M if R has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 
  \ ``bandMatrix``\  returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals, negative ones lower off-diagonals.

.. _l4d61747269784d616e6970756c6174696f6e-626c6f636b53706c6974:

.. index::
   pair: MatrixManipulation; blockSplit

:spadfun:`blockSplit`\: (M, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  M 
  \ ``blockSplit``\  splits a matrix into multiple submatrices row and column wise, dividing a matrix into blocks.


.. index::
   pair: MatrixManipulation; blockSplit

:spadfun:`blockSplit`\: (M, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  M 
  \ ``blockSplit``\  splits a matrix into multiple submatrices row and column wise, dividing a matrix into blocks.

.. _l4d61747269784d616e6970756c6174696f6e-636f6c756d6e4d6174726978:

.. index::
   pair: MatrixManipulation; columnMatrix

:spadfun:`columnMatrix`\: (M, \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``columnMatrix``\  returns a single column out of a matrix. The column is put into a one by \ ``N``\  matrix.

.. _l4d61747269784d616e6970756c6174696f6e-636f6c756d6e73:

.. index::
   pair: MatrixManipulation; columns

:spadfun:`columns`\: (M, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``columns``\  returns several columns out of a matrix. The columns are stacked into a matrix.


.. index::
   pair: MatrixManipulation; columns

:spadfun:`columns`\: (M, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``columns``\  returns several columns out of a matrix. The columns are stacked into a matrix.

.. _l4d61747269784d616e6970756c6174696f6e-646961676f6e616c4d6174726978:

.. index::
   pair: MatrixManipulation; diagonalMatrix

:spadfun:`diagonalMatrix`\: (M, \ :ref:`Integer <l496e7465676572>`\ ) -> M if R has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 
  \ ``diagonalMatrix``\  returns a diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals, negative ones lower off-diagonals.


.. index::
   pair: MatrixManipulation; diagonalMatrix

:spadfun:`diagonalMatrix`\: M -> M if R has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 
  \ ``diagonalMatrix``\  returns the main diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one.

.. _l4d61747269784d616e6970756c6174696f6e-656c656d656e74:

.. index::
   pair: MatrixManipulation; element

:spadfun:`element`\: (M, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``element``\  returns a single element out of a matrix. The element is put into a one by one matrix.

.. _l4d61747269784d616e6970756c6174696f6e-726f774d6174726978:

.. index::
   pair: MatrixManipulation; rowMatrix

:spadfun:`rowMatrix`\: (M, \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``rowMatrix``\  returns a single row out of a matrix. The row is put into a one by \ ``N``\  matrix.

.. _l4d61747269784d616e6970756c6174696f6e-726f7773:

.. index::
   pair: MatrixManipulation; rows

:spadfun:`rows`\: (M, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``rows``\  returns several rows out of a matrix. The rows are stacked into a matrix.


.. index::
   pair: MatrixManipulation; rows

:spadfun:`rows`\: (M, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``rows``\  returns several rows out of a matrix. The rows are stacked into a matrix.

.. _l4d61747269784d616e6970756c6174696f6e-7375624d6174726978:

.. index::
   pair: MatrixManipulation; subMatrix

:spadfun:`subMatrix`\: (M, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``subMatrix``\  returns several elements out of a matrix. The elements are stacked into a submatrix.


.. index::
   pair: MatrixManipulation; subMatrix

:spadfun:`subMatrix`\: (M, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``subMatrix``\  returns several elements out of a matrix. The elements are stacked into a submatrix.


