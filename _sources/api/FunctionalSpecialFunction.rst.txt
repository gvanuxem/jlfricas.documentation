.. index:: FunctionalSpecialFunction

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e:

FunctionalSpecialFunction(R, F)
===============================

:viewcode:`combfunc.spad line 443 <combfunc.spad#L443>` :editcode:`[edit on github] <combfunc.spad#L443>`

* R: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ )

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


Provides some special functions over an integral domain.


.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-616273:

.. index::
   pair: FunctionalSpecialFunction; abs

:spadfun:`abs`\: F -> F 
  \ ``abs(f)``\  returns the absolute value operator applied to \ ``f``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-616972794169:

.. index::
   pair: FunctionalSpecialFunction; airyAi

:spadfun:`airyAi`\: F -> F 
  \ ``airyAi(x)``\  returns the Airy \ ``Ai``\  function applied to \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6169727941695072696d65:

.. index::
   pair: FunctionalSpecialFunction; airyAiPrime

:spadfun:`airyAiPrime`\: F -> F 
  \ ``airyAiPrime(x)``\  returns the derivative of Airy \ ``Ai``\  function applied to \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-616972794269:

.. index::
   pair: FunctionalSpecialFunction; airyBi

:spadfun:`airyBi`\: F -> F 
  \ ``airyBi(x)``\  returns the Airy \ ``Bi``\  function applied to \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6169727942695072696d65:

.. index::
   pair: FunctionalSpecialFunction; airyBiPrime

:spadfun:`airyBiPrime`\: F -> F 
  \ ``airyBiPrime(x)``\  returns the derivative of Airy \ ``Bi``\  function applied to \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-616e6765724a:

.. index::
   pair: FunctionalSpecialFunction; angerJ

:spadfun:`angerJ`\: (F, F) -> F 
  \ ``angerJ(v, z)``\  is the Anger \ ``J``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-62656c6f6e673f:

.. index::
   pair: FunctionalSpecialFunction; belong?

:spadfun:`belong?`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``belong?(op)``\  returns \ ``true``\  if \ ``op``\  is a special function operator.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-62657373656c49:

.. index::
   pair: FunctionalSpecialFunction; besselI

:spadfun:`besselI`\: (F, F) -> F 
  \ ``besselI(x, y)``\  returns the Bessel \ ``I``\  function applied to \ ``x``\  and \ ``y``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-62657373656c4a:

.. index::
   pair: FunctionalSpecialFunction; besselJ

:spadfun:`besselJ`\: (F, F) -> F 
  \ ``besselJ(x, y)``\  returns the Bessel \ ``J``\  function applied to \ ``x``\  and \ ``y``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-62657373656c4b:

.. index::
   pair: FunctionalSpecialFunction; besselK

:spadfun:`besselK`\: (F, F) -> F 
  \ ``besselK(x, y)``\  returns the Bessel \ ``K``\  function applied to \ ``x``\  and \ ``y``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-62657373656c59:

.. index::
   pair: FunctionalSpecialFunction; besselY

:spadfun:`besselY`\: (F, F) -> F 
  \ ``besselY(x, y)``\  returns the Bessel \ ``Y``\  function applied to \ ``x``\  and \ ``y``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-42657461:

.. index::
   pair: FunctionalSpecialFunction; Beta

:spadfun:`Beta`\: (F, F) -> F 
  \ ``Beta(x, y)``\  returns the beta function applied to \ ``x``\  and \ ``y``\ .


.. index::
   pair: FunctionalSpecialFunction; Beta

:spadfun:`Beta`\: (F, F, F) -> F 
  \ ``Beta(x, a, b)``\  is incomplete Beta function applied to \ ``x``\ , a and \ ``b``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6365696c696e67:

.. index::
   pair: FunctionalSpecialFunction; ceiling

:spadfun:`ceiling`\: F -> F 
  \ ``ceiling(x)``\  returns the smallest integer above or equal \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-636861726c69657243:

.. index::
   pair: FunctionalSpecialFunction; charlierC

:spadfun:`charlierC`\: (F, F, F) -> F 
  \ ``charlierC(n, a, z)``\  is the Charlier polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-636f657263655f51:

.. index::
   pair: FunctionalSpecialFunction; coerce_Q

:spadfun:`coerce_Q`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> F 
  \ ``coerce_Q(x)``\  should be local but conditional

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-636f6e6a7567617465:

.. index::
   pair: FunctionalSpecialFunction; conjugate

:spadfun:`conjugate`\: F -> F 
  \ ``conjugate(f)``\  returns the conjugate value operator applied to \ ``f``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-646967616d6d61:

.. index::
   pair: FunctionalSpecialFunction; digamma

:spadfun:`digamma`\: F -> F 
  \ ``digamma(x)``\  returns the digamma function applied to \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-646972616344656c7461:

.. index::
   pair: FunctionalSpecialFunction; diracDelta

:spadfun:`diracDelta`\: F -> F 
  \ ``diracDelta(x)``\  is unit mass at zeros of \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-656c6c697074696345:

.. index::
   pair: FunctionalSpecialFunction; ellipticE

:spadfun:`ellipticE`\: (F, F) -> F 
  \ ``ellipticE(z, m)``\  is the incomplete elliptic integral of the second kind: \ ``ellipticE(z, m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..z)``\ .


.. index::
   pair: FunctionalSpecialFunction; ellipticE

:spadfun:`ellipticE`\: F -> F 
  \ ``ellipticE(m)``\  is the complete elliptic integral of the second kind: \ ``ellipticE(m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..1)``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-656c6c697074696346:

.. index::
   pair: FunctionalSpecialFunction; ellipticF

:spadfun:`ellipticF`\: (F, F) -> F 
  \ ``ellipticF(z, m)``\  is the incomplete elliptic integral of the first kind : \ ``ellipticF(z, m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..z)``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-656c6c69707469634b:

.. index::
   pair: FunctionalSpecialFunction; ellipticK

:spadfun:`ellipticK`\: F -> F 
  \ ``ellipticK(m)``\  is the complete elliptic integral of the first kind: \ ``ellipticK(m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..1)``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-656c6c69707469635069:

.. index::
   pair: FunctionalSpecialFunction; ellipticPi

:spadfun:`ellipticPi`\: (F, F, F) -> F 
  \ ``ellipticPi(z, n, m)``\  is the incomplete elliptic integral of the third kind: \ ``ellipticPi(z, n, m) = integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))), t = 0..z)``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-666c6f6f72:

.. index::
   pair: FunctionalSpecialFunction; floor

:spadfun:`floor`\: F -> F 
  \ ``floor(x)``\  returns the largest integer below or equal \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6672616374696f6e50617274:

.. index::
   pair: FunctionalSpecialFunction; fractionPart

:spadfun:`fractionPart`\: F -> F 
  \ ``fractionPart(x)``\  returns the fractional part of \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-47616d6d61:

.. index::
   pair: FunctionalSpecialFunction; Gamma

:spadfun:`Gamma`\: (F, F) -> F 
  \ ``Gamma(a, x)``\  returns the incomplete Gamma function applied to a and \ ``x``\ .


.. index::
   pair: FunctionalSpecialFunction; Gamma

:spadfun:`Gamma`\: F -> F 
  \ ``Gamma(f)``\  returns the formal Gamma function applied to \ ``f``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6861686e5f70:

.. index::
   pair: FunctionalSpecialFunction; hahn_p

:spadfun:`hahn_p`\: (F, F, F, F, F) -> F 
  \ ``hahn_p(n, a, b, bar_a, bar_b, z)``\  is the continuous Hahn polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6861686e51:

.. index::
   pair: FunctionalSpecialFunction; hahnQ

:spadfun:`hahnQ`\: (F, F, F, F, F) -> F 
  \ ``hahnQ(n, a, b, N, z)``\  \ ``s``\  the Hahn polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6861686e52:

.. index::
   pair: FunctionalSpecialFunction; hahnR

:spadfun:`hahnR`\: (F, F, F, F, F) -> F 
  \ ``hahnR(n, c, d, N, z)``\  is the dual Hahn polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6861686e53:

.. index::
   pair: FunctionalSpecialFunction; hahnS

:spadfun:`hahnS`\: (F, F, F, F, F) -> F 
  \ ``hahnS(n, a, b, c, z)``\  is the continuous dual Hahn polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-68616e6b656c4831:

.. index::
   pair: FunctionalSpecialFunction; hankelH1

:spadfun:`hankelH1`\: (F, F) -> F 
  \ ``hankelH1(v, z)``\  is first Hankel function (Bessel function of the third kind).

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-68616e6b656c4832:

.. index::
   pair: FunctionalSpecialFunction; hankelH2

:spadfun:`hankelH2`\: (F, F) -> F 
  \ ``hankelH2(v, z)``\  is the second Hankel function (Bessel function of the third kind).

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6865726d69746548:

.. index::
   pair: FunctionalSpecialFunction; hermiteH

:spadfun:`hermiteH`\: (F, F) -> F 
  \ ``hermiteH(n, z)``\  is the Hermite polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-687970657267656f6d657472696346:

.. index::
   pair: FunctionalSpecialFunction; hypergeometricF

:spadfun:`hypergeometricF`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  F, F) -> F 
  \ ``hypergeometricF(la, lb, z)``\  is the generalized hypergeometric function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-69416972794169:

.. index::
   pair: FunctionalSpecialFunction; iAiryAi

:spadfun:`iAiryAi`\: F -> F 
  \ ``iAiryAi(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-694169727941695072696d65:

.. index::
   pair: FunctionalSpecialFunction; iAiryAiPrime

:spadfun:`iAiryAiPrime`\: F -> F 
  \ ``iAiryAiPrime(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-69416972794269:

.. index::
   pair: FunctionalSpecialFunction; iAiryBi

:spadfun:`iAiryBi`\: F -> F 
  \ ``iAiryBi(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-694169727942695072696d65:

.. index::
   pair: FunctionalSpecialFunction; iAiryBiPrime

:spadfun:`iAiryBiPrime`\: F -> F 
  \ ``iAiryBiPrime(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969616273:

.. index::
   pair: FunctionalSpecialFunction; iiabs

:spadfun:`iiabs`\: F -> F 
  \ ``iiabs(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969416972794169:

.. index::
   pair: FunctionalSpecialFunction; iiAiryAi

:spadfun:`iiAiryAi`\: F -> F 
  \ ``iiAiryAi(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-69694169727941695072696d65:

.. index::
   pair: FunctionalSpecialFunction; iiAiryAiPrime

:spadfun:`iiAiryAiPrime`\: F -> F 
  \ ``iiAiryAiPrime(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969416972794269:

.. index::
   pair: FunctionalSpecialFunction; iiAiryBi

:spadfun:`iiAiryBi`\: F -> F 
  \ ``iiAiryBi(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-69694169727942695072696d65:

.. index::
   pair: FunctionalSpecialFunction; iiAiryBiPrime

:spadfun:`iiAiryBiPrime`\: F -> F 
  \ ``iiAiryBiPrime(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696942657373656c49:

.. index::
   pair: FunctionalSpecialFunction; iiBesselI

:spadfun:`iiBesselI`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiBesselI(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696942657373656c4a:

.. index::
   pair: FunctionalSpecialFunction; iiBesselJ

:spadfun:`iiBesselJ`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiBesselJ(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696942657373656c4b:

.. index::
   pair: FunctionalSpecialFunction; iiBesselK

:spadfun:`iiBesselK`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiBesselK(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696942657373656c59:

.. index::
   pair: FunctionalSpecialFunction; iiBesselY

:spadfun:`iiBesselY`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiBesselY(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696942657461:

.. index::
   pair: FunctionalSpecialFunction; iiBeta

:spadfun:`iiBeta`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiBeta(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969636f6e6a7567617465:

.. index::
   pair: FunctionalSpecialFunction; iiconjugate

:spadfun:`iiconjugate`\: F -> F 
  \ ``iiconjugate(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969646967616d6d61:

.. index::
   pair: FunctionalSpecialFunction; iidigamma

:spadfun:`iidigamma`\: F -> F 
  \ ``iidigamma(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-696947616d6d61:

.. index::
   pair: FunctionalSpecialFunction; iiGamma

:spadfun:`iiGamma`\: F -> F 
  \ ``iiGamma(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969487970657267656f6d657472696346:

.. index::
   pair: FunctionalSpecialFunction; iiHypergeometricF

:spadfun:`iiHypergeometricF`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiHypergeometricF(l)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969706f6c7967616d6d61:

.. index::
   pair: FunctionalSpecialFunction; iipolygamma

:spadfun:`iipolygamma`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iipolygamma(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6969506f6c796c6f67:

.. index::
   pair: FunctionalSpecialFunction; iiPolylog

:spadfun:`iiPolylog`\: (F, F) -> F 
  \ ``iiPolylog(x, s)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-694c616d6265727457:

.. index::
   pair: FunctionalSpecialFunction; iLambertW

:spadfun:`iLambertW`\: F -> F 
  \ ``iLambertW(x)``\  should be local but conditional.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f6269436e:

.. index::
   pair: FunctionalSpecialFunction; jacobiCn

:spadfun:`jacobiCn`\: (F, F) -> F 
  \ ``jacobiCn(z, m)``\  is the Jacobi elliptic \ ``cn``\  function, defined by \ ``jacobiCn(z, m)^2 + jacobiSn(z, m)^2 = 1``\  and \ ``jacobiCn(0, m) = 1``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f6269446e:

.. index::
   pair: FunctionalSpecialFunction; jacobiDn

:spadfun:`jacobiDn`\: (F, F) -> F 
  \ ``jacobiDn(z, m)``\  is the Jacobi elliptic \ ``dn``\  function, defined by \ ``jacobiDn(z, m)^2 + m*jacobiSn(z, m)^2 = 1``\  and \ ``jacobiDn(0, m) = 1``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f626950:

.. index::
   pair: FunctionalSpecialFunction; jacobiP

:spadfun:`jacobiP`\: (F, F, F, F) -> F 
  \ ``jacobiP(n, a, b, z)``\  is the Jacobi polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f6269536e:

.. index::
   pair: FunctionalSpecialFunction; jacobiSn

:spadfun:`jacobiSn`\: (F, F) -> F 
  \ ``jacobiSn(z, m)``\  is the Jacobi elliptic \ ``sn``\  function, defined by the formula \ ``jacobiSn(ellipticF(z, m), m) = z``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f62695468657461:

.. index::
   pair: FunctionalSpecialFunction; jacobiTheta

:spadfun:`jacobiTheta`\: (F, F) -> F 
  \ ``jacobiTheta(z, m)``\  is the Jacobi Theta function in Jacobi notation.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6a61636f62695a657461:

.. index::
   pair: FunctionalSpecialFunction; jacobiZeta

:spadfun:`jacobiZeta`\: (F, F) -> F 
  \ ``jacobiZeta(z, m)``\  is the Jacobi elliptic zeta function, defined by \ ``D(jacobiZeta(z, m), z) = jacobiDn(z, m)^2 - ellipticE(m)/ellipticK(m)``\  and \ ``jacobiZeta(0, m) = 0``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b656c76696e426569:

.. index::
   pair: FunctionalSpecialFunction; kelvinBei

:spadfun:`kelvinBei`\: (F, F) -> F 
  \ ``kelvinBei(v, z)``\  is the Kelvin bei function defined by equality. \ ``kelvinBei(v, z) = imag(besselJ(v, exp(3*\%pi*\%i/4)*z))``\ . for \ ``z``\  and \ ``v``\  real.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b656c76696e426572:

.. index::
   pair: FunctionalSpecialFunction; kelvinBer

:spadfun:`kelvinBer`\: (F, F) -> F 
  \ ``kelvinBer(v, z)``\  is the Kelvin ber function defined by equality \ ``kelvinBer(v, z) = real(besselJ(v, exp(3*\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b656c76696e4b6569:

.. index::
   pair: FunctionalSpecialFunction; kelvinKei

:spadfun:`kelvinKei`\: (F, F) -> F 
  \ ``kelvinKei(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKei(v, z) = imag(exp(-v*\%pi*\%i/2)*besselK(v, exp(\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b656c76696e4b6572:

.. index::
   pair: FunctionalSpecialFunction; kelvinKer

:spadfun:`kelvinKer`\: (F, F) -> F 
  \ ``kelvinKer(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKer(v, z) = real(exp(-v*\%pi*\%i/2)*besselK(v, exp(\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b7261777463686f756b4b:

.. index::
   pair: FunctionalSpecialFunction; krawtchoukK

:spadfun:`krawtchoukK`\: (F, F, F, F) -> F 
  \ ``krawtchoukK(n, p, N, z)``\  is the Krawtchouk polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b756d6d65724d:

.. index::
   pair: FunctionalSpecialFunction; kummerM

:spadfun:`kummerM`\: (F, F, F) -> F 
  \ ``kummerM(a, b, z)``\  is the Kummer \ ``M``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6b756d6d657255:

.. index::
   pair: FunctionalSpecialFunction; kummerU

:spadfun:`kummerU`\: (F, F, F) -> F 
  \ ``kummerU(a, b, z)``\  is the Kummer \ ``U``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c616775657272654c:

.. index::
   pair: FunctionalSpecialFunction; laguerreL

:spadfun:`laguerreL`\: (F, F, F) -> F 
  \ ``laguerreL(n, a, z)``\  is the Laguerre polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c616d6265727457:

.. index::
   pair: FunctionalSpecialFunction; lambertW

:spadfun:`lambertW`\: F -> F 
  \ ``lambertW(x)``\  is the Lambert \ ``W``\  function at \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c6567656e64726550:

.. index::
   pair: FunctionalSpecialFunction; legendreP

:spadfun:`legendreP`\: (F, F, F) -> F 
  \ ``legendreP(nu, mu, z)``\  is the Legendre \ ``P``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c6567656e64726551:

.. index::
   pair: FunctionalSpecialFunction; legendreQ

:spadfun:`legendreQ`\: (F, F, F) -> F 
  \ ``legendreQ(nu, mu, z)``\  is the Legendre \ ``Q``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c65726368506869:

.. index::
   pair: FunctionalSpecialFunction; lerchPhi

:spadfun:`lerchPhi`\: (F, F, F) -> F 
  \ ``lerchPhi(z, s, a)``\  is the Lerch Phi function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c6f6d6d656c5331:

.. index::
   pair: FunctionalSpecialFunction; lommelS1

:spadfun:`lommelS1`\: (F, F, F) -> F 
  \ ``lommelS1(mu, nu, z)``\  is the Lommel \ ``s``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6c6f6d6d656c5332:

.. index::
   pair: FunctionalSpecialFunction; lommelS2

:spadfun:`lommelS2`\: (F, F, F) -> F 
  \ ``lommelS2(mu, nu, z)``\  is the Lommel \ ``S``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6d65696a657247:

.. index::
   pair: FunctionalSpecialFunction; meijerG

:spadfun:`meijerG`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  F, F) -> F 
  \ ``meijerG(la, lb, lc, ld, z)``\  is the meijerG function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6d6569786e65724d:

.. index::
   pair: FunctionalSpecialFunction; meixnerM

:spadfun:`meixnerM`\: (F, F, F, F) -> F 
  \ ``meixnerM(n, b, c, z)``\  is the Meixner polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6d6569786e657250:

.. index::
   pair: FunctionalSpecialFunction; meixnerP

:spadfun:`meixnerP`\: (F, F, F, F) -> F 
  \ ``meixnerP(n, phi, lambda, z)``\  is the Meixner-Pollaczek polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-6f70657261746f72:

.. index::
   pair: FunctionalSpecialFunction; operator

:spadfun:`operator`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operator(op)``\  returns a copy of \ ``op``\  with the domain-dependent properties appropriate for \ ``F``\ ; error if \ ``op``\  is not a special function operator.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-706f6c7967616d6d61:

.. index::
   pair: FunctionalSpecialFunction; polygamma

:spadfun:`polygamma`\: (F, F) -> F 
  \ ``polygamma(x, y)``\  returns the polygamma function applied to \ ``x``\  and \ ``y``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-706f6c796c6f67:

.. index::
   pair: FunctionalSpecialFunction; polylog

:spadfun:`polylog`\: (F, F) -> F 
  \ ``polylog(s, x)``\  is the polylogarithm of order \ ``s``\  at \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-726163616852:

.. index::
   pair: FunctionalSpecialFunction; racahR

:spadfun:`racahR`\: (F, F, F, F, F, F) -> F 
  \ ``racahR(n, a, b, c, d, z)``\  is the Racah polynomial.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-726574726163745f51:

.. index::
   pair: FunctionalSpecialFunction; retract_Q

:spadfun:`retract_Q`\: F -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``retract_Q(x)``\  should be local but conditional

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7269656d616e6e5a657461:

.. index::
   pair: FunctionalSpecialFunction; riemannZeta

:spadfun:`riemannZeta`\: F -> F 
  \ ``riemannZeta(z)``\  is the Riemann Zeta function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7369676e:

.. index::
   pair: FunctionalSpecialFunction; sign

:spadfun:`sign`\: F -> F 
  \ ``sign(x)``\  returns the sign of \ ``x``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-73747275766548:

.. index::
   pair: FunctionalSpecialFunction; struveH

:spadfun:`struveH`\: (F, F) -> F 
  \ ``struveH(v, z)``\  is the Struve \ ``H``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7374727576654c:

.. index::
   pair: FunctionalSpecialFunction; struveL

:spadfun:`struveL`\: (F, F) -> F 
  \ ``struveL(v, z)``\  is the Struve \ ``L``\  function defined by the formula \ ``struveL(v, z) = -\%i^exp(-v*\%pi*\%i/2)*struveH(v, \%i*z)``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-756e697453746570:

.. index::
   pair: FunctionalSpecialFunction; unitStep

:spadfun:`unitStep`\: F -> F 
  \ ``unitStep(x)``\  is 0 for \ ``x``\  less than 0, 1 for \ ``x``\  bigger or equal 0.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-776562657245:

.. index::
   pair: FunctionalSpecialFunction; weberE

:spadfun:`weberE`\: (F, F) -> F 
  \ ``weberE(v, z)``\  is the Weber \ ``E``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-776569657273747261737350:

.. index::
   pair: FunctionalSpecialFunction; weierstrassP

:spadfun:`weierstrassP`\: (F, F, F) -> F 
  \ ``weierstrassP(g2, g3, x)``\  is the Weierstrass \ ``P``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-776569657273747261737350496e7665727365:

.. index::
   pair: FunctionalSpecialFunction; weierstrassPInverse

:spadfun:`weierstrassPInverse`\: (F, F, F) -> F 
  \ ``weierstrassPInverse(g2, g3, z)``\  is the inverse of Weierstrass \ ``P``\  function, defined by the formula \ ``weierstrassP(g2, g3, weierstrassPInverse(g2, g3, z)) = z``\ .

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7765696572737472617373505072696d65:

.. index::
   pair: FunctionalSpecialFunction; weierstrassPPrime

:spadfun:`weierstrassPPrime`\: (F, F, F) -> F 
  \ ``weierstrassPPrime(g2, g3, x)``\  is the derivative of Weierstrass \ ``P``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-77656965727374726173735369676d61:

.. index::
   pair: FunctionalSpecialFunction; weierstrassSigma

:spadfun:`weierstrassSigma`\: (F, F, F) -> F 
  \ ``weierstrassSigma(g2, g3, x)``\  is the Weierstrass Sigma function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-77656965727374726173735a657461:

.. index::
   pair: FunctionalSpecialFunction; weierstrassZeta

:spadfun:`weierstrassZeta`\: (F, F, F) -> F 
  \ ``weierstrassZeta(g2, g3, x)``\  is the Weierstrass Zeta function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7768697474616b65724d:

.. index::
   pair: FunctionalSpecialFunction; whittakerM

:spadfun:`whittakerM`\: (F, F, F) -> F 
  \ ``whittakerM(k, m, z)``\  is the Whittaker \ ``M``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-7768697474616b657257:

.. index::
   pair: FunctionalSpecialFunction; whittakerW

:spadfun:`whittakerW`\: (F, F, F) -> F 
  \ ``whittakerW(k, m, z)``\  is the Whittaker \ ``W``\  function.

.. _l46756e6374696f6e616c5370656369616c46756e6374696f6e-77696c736f6e57:

.. index::
   pair: FunctionalSpecialFunction; wilsonW

:spadfun:`wilsonW`\: (F, F, F, F, F, F) -> F 
  \ ``wilsonW(n, a, b, c, d, z)``\  is the Wilson polynomial.


