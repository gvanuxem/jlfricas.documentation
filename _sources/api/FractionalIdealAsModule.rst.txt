.. index:: FractionalIdealAsModule

.. _l4672616374696f6e616c496465616c41734d6f64756c65:

FractionalIdealAsModule(R, F, UP, A, ibasis)
============================================

:viewcode:`divisor.spad line 462 <divisor.spad#L462>` :editcode:`[edit on github] <divisor.spad#L462>`

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

* F: \ :ref:`QuotientFieldCategory <l51756f7469656e744669656c6443617465676f7279>`\  R

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* A: \ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (F, UP)

* ibasis: \ :ref:`Vector <l566563746f72>`\  A


Module representation of fractional ideals.


.. _l4672616374696f6e616c496465616c41734d6f64756c65-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6261736973:

.. index::
   pair: FractionalIdealAsModule; basis

:spadfun:`basis`\: % -> \ :ref:`Vector <l566563746f72>`\  A 
  \ ``basis((f1, ..., fn))``\  = the vector \ ``[f1, ..., fn]``\ .

.. _l4672616374696f6e616c496465616c41734d6f64756c65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6d6f64756c65:

.. index::
   pair: FractionalIdealAsModule; module

:spadfun:`module`\: \ :ref:`FractionalIdeal <l4672616374696f6e616c496465616c>`\ (R, F, UP, A) -> % if A has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  F
  \ ``module(I)``\  returns \ ``I``\  viewed has a module over \ ``R``\ .


.. index::
   pair: FractionalIdealAsModule; module

:spadfun:`module`\: \ :ref:`Vector <l566563746f72>`\  A -> % 
  \ ``module([f1, ..., fn])``\  = the module generated by \ ``(f1, ..., fn)``\  over \ ``R``\ .

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6e6f726d:

.. index::
   pair: FractionalIdealAsModule; norm

:spadfun:`norm`\: % -> F 
  \ ``norm(f)``\  returns the norm of the module \ ``f``\ .

.. _l4672616374696f6e616c496465616c41734d6f64756c65-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c41734d6f64756c65-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

