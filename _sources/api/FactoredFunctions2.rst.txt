.. index:: FactoredFunctions2

.. _l466163746f72656446756e6374696f6e7332:

FactoredFunctions2(R, S)
========================

:viewcode:`fr.spad line 635 <fr.spad#L635>` :editcode:`[edit on github] <fr.spad#L635>`

* R: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

* S: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 


\ :ref:`FactoredFunctions2 <l466163746f72656446756e6374696f6e7332>`\  contains functions that involve factored objects whose underlying domains may not be the same. For example, \ :spadfun:`map`\  might be used to coerce an object of type Factored(Integer) to Factored(Complex(Integer)).


.. _l466163746f72656446756e6374696f6e7332-6d6170:

.. index::
   pair: FactoredFunctions2; map

:spadfun:`map`\: (R -> S, \ :ref:`Factored <l466163746f726564>`\  R) -> \ :ref:`Factored <l466163746f726564>`\  S 
  \ ``map(fn, u)``\  is used to apply the function \userfun{\ ``fn``\ } to every factor of \spadvar{\ ``u``\ }. The new factored object will have all its information flags set to "nil". This function is used, for example, to coerce every factor base to another type.

.. _l466163746f72656446756e6374696f6e7332-6d61705f70726573657276696e67:

.. index::
   pair: FactoredFunctions2; map_preserving

:spadfun:`map_preserving`\: (R -> S, \ :ref:`Factored <l466163746f726564>`\  R) -> \ :ref:`Factored <l466163746f726564>`\  S 
  \ ``map_preserving(fn, u)``\  is used to apply the function \userfun{\ ``fn``\ } to every factor of \spadvar{\ ``u``\ }. The new factored object will have the same flags as original.


