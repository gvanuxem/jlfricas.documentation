.. index:: PoincareBirkhoffWittLyndonBasis

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973:

PoincareBirkhoffWittLyndonBasis VarSet
======================================

:viewcode:`xlpoly.spad line 647 <xlpoly.spad#L647>` :editcode:`[edit on github] <xlpoly.spad#L647>`

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


This domain provides the internal representation of polynomials in non-commutative variables written over the Poincare-Birkhoff-Witt basis. See the \ :ref:`XPBWPolynomial <l58504257506f6c796e6f6d69616c>`\  domain constructor. See Free Lie Algebras by \ ``C``\ . Reutenauer (Oxford science publications).   Author: Michel Petitot (petitot@lifl.\ ``fr``\ ).


.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-31:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; 1

:spadfun:`1`\: % 
  \ ``1``\  returns the empty list.

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-636f65726365:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; coerce

:spadfun:`coerce`\: % -> \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet 
  \ ``coerce([l1]*[l2]*...[ln])``\  returns the word \ ``l1*l2*...*ln``\ , where \ ``[l_i]``\  is the backeted form of the Lyndon word \ ``l_i``\ .


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet


.. index::
   pair: PoincareBirkhoffWittLyndonBasis; coerce

:spadfun:`coerce`\: VarSet -> % 
  \ ``coerce(v)``\  return \ ``v``\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6669727374:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; first

:spadfun:`first`\: % -> \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 
  \ ``first([l1]*[l2]*...[ln])``\  returns the Lyndon word \ ``l1``\ .

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6c656e677468:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; length

:spadfun:`length`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``length([l1]*[l2]*...[ln])``\  returns the length of the word \ ``l1*l2*...*ln``\ .

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6c6973744f665465726d73:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; listOfTerms

:spadfun:`listOfTerms`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 
  \ ``listOfTerms([l1]*[l2]*...[ln])``\  returns the list of words \ ``l1, l2, .... ln``\ .

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-72657374:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; rest

:spadfun:`rest`\: % -> % 
  \ ``rest([l1]*[l2]*...[ln])``\  returns the list \ ``l2, .... ln``\ .

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-7265747261637461626c653f:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; retractable?

:spadfun:`retractable?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``retractable?([l1]*[l2]*...[ln])``\  returns \ ``true``\  iff \ ``n``\  equals \ ``1``\ .

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l506f696e636172654269726b686f6666576974744c796e646f6e4261736973-7661724c697374:

.. index::
   pair: PoincareBirkhoffWittLyndonBasis; varList

:spadfun:`varList`\: % -> \ :ref:`List <l4c697374>`\  VarSet 
  \ ``varList([l1]*[l2]*...[ln])``\  returns the list of variables in the word \ ``l1*l2*...*ln``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

