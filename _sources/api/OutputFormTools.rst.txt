.. index:: OutputFormTools

.. _l4f7574707574466f726d546f6f6c73:

OutputFormTools
===============

:viewcode:`outform2.spad line 13 <outform2.spad#L13>` :editcode:`[edit on github] <outform2.spad#L13>`


This package implements tools form handling \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. _l4f7574707574466f726d546f6f6c73-617267756d656e7473:

.. index::
   pair: OutputFormTools; arguments

:spadfun:`arguments`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``arguments(f)``\  gives arguments of form \ ``f``\ . Valid only when atom?(\ ``f``\ ) is \ ``false``\ 

.. _l4f7574707574466f726d546f6f6c73-61746f6d3f:

.. index::
   pair: OutputFormTools; atom?

:spadfun:`atom?`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``atom?(f)``\  checks if form \ ``f``\  is atomic, \ ``false``\  means composite

.. _l4f7574707574466f726d546f6f6c73-61746f6d5f746f5f737472696e67:

.. index::
   pair: OutputFormTools; atom_to_string

:spadfun:`atom_to_string`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``atom_to_string(f)``\  converts \ ``f``\  to string form.

.. _l4f7574707574466f726d546f6f6c73-636f6e737472756374:

.. index::
   pair: OutputFormTools; construct

:spadfun:`construct`\: (\ :ref:`OutputForm <l4f7574707574466f726d>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``construct(op, la)``\  creates OutputForm with operator \ ``op``\  and arguments la

.. _l4f7574707574466f726d546f6f6c73-656d7074793f:

.. index::
   pair: OutputFormTools; empty?

:spadfun:`empty?`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``empty?(f)``\  checks if form \ ``f``\  is empty.

.. _l4f7574707574466f726d546f6f6c73-6861735f6f703f:

.. index::
   pair: OutputFormTools; has_op?

:spadfun:`has_op?`\: (\ :ref:`OutputForm <l4f7574707574466f726d>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``has_op?(f, s)``\  returns \ ``true``\  is \ ``f``\  is a composite from with operator \ ``s``\ , otherwise returns \ ``false``\ 

.. _l4f7574707574466f726d546f6f6c73-696e74656765723f:

.. index::
   pair: OutputFormTools; integer?

:spadfun:`integer?`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``integer?(f)``\  checks if \ ``f``\  is an integer, this implies atom?(\ ``f``\ )

.. _l4f7574707574466f726d546f6f6c73-696e7465676572:

.. index::
   pair: OutputFormTools; integer

:spadfun:`integer`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``integer(f)``\  gives integer corresponding to \ ``f``\ . Valid only when integer?(\ ``f``\ ) is \ ``true``\ 

.. _l4f7574707574466f726d546f6f6c73-69735f73796d626f6c3f:

.. index::
   pair: OutputFormTools; is_symbol?

:spadfun:`is_symbol?`\: (\ :ref:`OutputForm <l4f7574707574466f726d>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is_symbol?(f, s)``\  returns \ ``true``\  if form is symbol \ ``s``\ , otherwise returns \ ``false``\ 

.. _l4f7574707574466f726d546f6f6c73-6f70657261746f72:

.. index::
   pair: OutputFormTools; operator

:spadfun:`operator`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``operator(f)``\  gives operator (head) of form \ ``f``\ . Valid only when atom?(\ ``f``\ ) is \ ``false``\ 

.. _l4f7574707574466f726d546f6f6c73-707265636f6e646974696f6e:

.. index::
   pair: OutputFormTools; precondition

:spadfun:`precondition`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``precondition(f)``\  prepares form for formatting.

.. _l4f7574707574466f726d546f6f6c73-737472696e673f:

.. index::
   pair: OutputFormTools; string?

:spadfun:`string?`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``string?(f)``\  checks if \ ``f``\  is a string, this implies atom?(\ ``f``\ )

.. _l4f7574707574466f726d546f6f6c73-737472696e67:

.. index::
   pair: OutputFormTools; string

:spadfun:`string`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``string(f)``\  gives string corresponding to \ ``f``\ . Valid only when string?(\ ``f``\ ) is \ ``true``\ 

.. _l4f7574707574466f726d546f6f6c73-73796d626f6c3f:

.. index::
   pair: OutputFormTools; symbol?

:spadfun:`symbol?`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``symbol?(f)``\  checks if \ ``f``\  is a symbol, this implies atom?(\ ``f``\ )

.. _l4f7574707574466f726d546f6f6c73-73796d626f6c:

.. index::
   pair: OutputFormTools; symbol

:spadfun:`symbol`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``symbol(f)``\  gives symbol corresponding to \ ``f``\ . Valid only when symbol?(\ ``f``\ ) is \ ``true``\ 


