.. index:: DeltaComplex

.. _l44656c7461436f6d706c6578:

DeltaComplex VS
===============

:viewcode:`alg_top.spad line 2909 <alg_top.spad#L2909>` :editcode:`[edit on github] <alg_top.spad#L2909>`

* VS: \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


Similar to Simplicial Complex but faces (edges, triangles, etc.) are indexed by 'face maps' into the next lower face map until we get down to the vertices. for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/delta/ Date Created: Feb 2016 Basic Operations: Related packages: Related categories: Related Domains: FiniteSimplicialComplex is a simpler and more compact representation which can be used if edges, triangles, etc. don\ ``'t``\  need to be indexed. Also See: AMS Classifications:


.. _l44656c7461436f6d706c6578-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44656c7461436f6d706c6578-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44656c7461436f6d706c6578-636861696e:

.. index::
   pair: DeltaComplex; chain

:spadfun:`chain`\: % -> \ :ref:`ChainComplex <l436861696e436f6d706c6578>`\  
  returns a matrix sequence representing the face maps in linear algebra form

.. _l44656c7461436f6d706c6578-636f436861696e:

.. index::
   pair: DeltaComplex; coChain

:spadfun:`coChain`\: % -> \ :ref:`CoChainComplex <l436f436861696e436f6d706c6578>`\  VS 
  returns a matrix sequence representing the face maps in linear algebra form

.. _l44656c7461436f6d706c6578-636f65726365:

.. index::
   pair: DeltaComplex; coerce

:spadfun:`coerce`\: % -> \ :ref:`FiniteSimplicialComplex <l46696e69746553696d706c696369616c436f6d706c6578>`\  VS 
  \ ``coerce DeltaComplex``\  to FiniteSimplicialComplex


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l44656c7461436f6d706c6578-636f486f6d6f6c6f6779:

.. index::
   pair: DeltaComplex; coHomology

:spadfun:`coHomology`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Homology <l486f6d6f6c6f6779>`\  
  calculate cohomology using SmithNormalForm

.. _l44656c7461436f6d706c6578-64656c7461436f6d706c6578:

.. index::
   pair: DeltaComplex; deltaComplex

:spadfun:`deltaComplex`\: (\ :ref:`FiniteSimplicialComplex <l46696e69746553696d706c696369616c436f6d706c6578>`\  VS, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  


.. index::
   pair: DeltaComplex; deltaComplex

:spadfun:`deltaComplex`\: (\ :ref:`List <l4c697374>`\  VS, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  constructor where the simplices are supplied


.. index::
   pair: DeltaComplex; deltaComplex

:spadfun:`deltaComplex`\: \ :ref:`FiniteCubicalComplex <l46696e6974654375626963616c436f6d706c6578>`\  VS -> % 
  construct from FiniteCubicalComplex. This builds indexes of edges, squares and so on.


.. index::
   pair: DeltaComplex; deltaComplex

:spadfun:`deltaComplex`\: \ :ref:`FiniteSimplicialComplex <l46696e69746553696d706c696369616c436f6d706c6578>`\  VS -> % 
  construct from FiniteSimplicialComplex. This builds indexes of edges, triangles and so on.

.. _l44656c7461436f6d706c6578-666163654d6170:

.. index::
   pair: DeltaComplex; faceMap

:spadfun:`faceMap`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  returns an individual face map specified by \ ``n``\ . Where \ ``'n'``\  is the dimension required, so \ ``n=1``\  returns one dimensional faces (edges), \ ``n=2``\  returns two dimensional faces (triamgles), and so on. used by fundamentalGroup.

.. _l44656c7461436f6d706c6578-66756e64616d656e74616c47726f7570:

.. index::
   pair: DeltaComplex; fundamentalGroup

:spadfun:`fundamentalGroup`\: % -> \ :ref:`GroupPresentation <l47726f757050726573656e746174696f6e>`\  
  Generates fundamental group from this simplicial complex.


.. index::
   pair: DeltaComplex; fundamentalGroup

:spadfun:`fundamentalGroup`\: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`GroupPresentation <l47726f757050726573656e746174696f6e>`\  
  Generates fundamental group from this simplicial complex.

.. _l44656c7461436f6d706c6578-686f6d6f6c6f6779:

.. index::
   pair: DeltaComplex; homology

:spadfun:`homology`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Homology <l486f6d6f6c6f6779>`\  
  calculate homology using SmithNormalForm

.. _l44656c7461436f6d706c6578-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l44656c7461436f6d706c6578-6c696e6b:

.. index::
   pair: DeltaComplex; link

:spadfun:`link`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  a simplicial complex with one link

.. _l44656c7461436f6d706c6578-6f6e65536b656c65746f6e:

.. index::
   pair: DeltaComplex; oneSkeleton

:spadfun:`oneSkeleton`\: % -> \ :ref:`UndirectedGraph <l556e64697265637465644772617068>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  generates graph AKA 1-skeleton

.. _l44656c7461436f6d706c6578-747269616e676c65:

.. index::
   pair: DeltaComplex; triangle

:spadfun:`triangle`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  a simplicial complex with one triangle


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

