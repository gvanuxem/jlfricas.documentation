.. index:: FreeMagma

.. _l467265654d61676d61:

FreeMagma VarSet
================

:viewcode:`xlpoly.spad line 1 <xlpoly.spad#L1>` :editcode:`[edit on github] <xlpoly.spad#L1>`

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


This type is the basic representation of parenthesized words (binary trees over arbitrary symbols) useful in \ :ref:`LiePolynomial <l4c6965506f6c796e6f6d69616c>`\ .   Author: Michel Petitot (petitot@lifl.\ ``fr``\ ).


.. _l467265654d61676d61-2a:

.. index::
   pair: FreeMagma; *

:spadfun:`\*`\: (%, %) -> % 
  \ ``x*y``\  returns the tree \ ``[x, y]``\ .

.. _l467265654d61676d61-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d61676d61-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d61676d61-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d61676d61-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d61676d61-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d61676d61-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d61676d61-636f65726365:

.. index::
   pair: FreeMagma; coerce

:spadfun:`coerce`\: % -> \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet 
  \ ``coerce(x)``\  returns the element of \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\ (VarSet) corresponding to \ ``x``\  by removing parentheses.


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: VarSet -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  VarSet

.. _l467265654d61676d61-6669727374:

.. index::
   pair: FreeMagma; first

:spadfun:`first`\: % -> VarSet 
  \ ``first(x)``\  returns the first entry of the tree \ ``x``\ .

.. _l467265654d61676d61-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l467265654d61676d61-6c656674:

.. index::
   pair: FreeMagma; left

:spadfun:`left`\: % -> % 
  \ ``left(x)``\  returns left subtree of \ ``x``\  or error if \ :ref:`retractable? <l467265654d61676d61-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\ .

.. _l467265654d61676d61-6c656e677468:

.. index::
   pair: FreeMagma; length

:spadfun:`length`\: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``length(x)``\  returns the number of entries in \ ``x``\ .

.. _l467265654d61676d61-6c657869636f:

.. index::
   pair: FreeMagma; lexico

:spadfun:`lexico`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lexico(x, y)``\  returns \ ``true``\  iff \ ``x``\  is smaller than \ ``y``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the lexicographical ordering induced by \ ``VarSet``\ . \ ``N``\ .\ ``B``\ . This operation does not take into account the tree structure of its arguments. Thus this is not a total ordering.

.. _l467265654d61676d61-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l467265654d61676d61-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l467265654d61676d61-6d6972726f72:

.. index::
   pair: FreeMagma; mirror

:spadfun:`mirror`\: % -> % 
  \ ``mirror(x)``\  returns the reversed word of \ ``x``\ . That is \ ``x``\  itself if \ :ref:`retractable? <l467265654d61676d61-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\  and \ ``mirror(z) * mirror(y)``\  if \ ``x``\  is \ ``y*z``\ .

.. _l467265654d61676d61-72657374:

.. index::
   pair: FreeMagma; rest

:spadfun:`rest`\: % -> % 
  \ ``rest(x)``\  return \ ``x``\  without the first entry or error if \ :ref:`retractable? <l467265654d61676d61-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\ .

.. _l467265654d61676d61-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> VarSet 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet

.. _l467265654d61676d61-7265747261637461626c653f:

.. index::
   pair: FreeMagma; retractable?

:spadfun:`retractable?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``retractable?(x)``\  tests if \ ``x``\  is a tree with only one entry.

.. _l467265654d61676d61-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(VarSet, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet

.. _l467265654d61676d61-7269676874:

.. index::
   pair: FreeMagma; right

:spadfun:`right`\: % -> % 
  \ ``right(x)``\  returns right subtree of \ ``x``\  or error if \ :ref:`retractable? <l467265654d61676d61-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\ .

.. _l467265654d61676d61-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l467265654d61676d61-7661724c697374:

.. index::
   pair: FreeMagma; varList

:spadfun:`varList`\: % -> \ :ref:`List <l4c697374>`\  VarSet 
  \ ``varList(x)``\  returns the list of distinct entries of \ ``x``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  VarSet 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

