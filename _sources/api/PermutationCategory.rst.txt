.. index:: PermutationCategory

.. _l5065726d75746174696f6e43617465676f7279:

PermutationCategory S
=====================

:viewcode:`perm.spad line 1 <perm.spad#L1>` :editcode:`[edit on github] <perm.spad#L1>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


PermutationCategory provides a categorical environment for subgroups of bijections of a set (i.e. permutations)


.. _l5065726d75746174696f6e43617465676f7279-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e43617465676f7279-2f:

\ :ref:`/ <l47726f7570-2f>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e43617465676f7279-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e43617465676f7279-3c:

.. index::
   pair: PermutationCategory; <

:spadfun:`<`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``p < q``\  is an order relation on permutations. Note: this order is only total if and only if \ ``S``\  is totally ordered or \ ``S``\  is finite.

.. _l5065726d75746174696f6e43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e43617465676f7279-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e43617465676f7279-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e43617465676f7279-5e:

\ :ref:`^ <l47726f7570-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`Group <l47726f7570>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e43617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5065726d75746174696f6e43617465676f7279-636f6d6d757461746f72:

\ :ref:`commutator <l47726f7570-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e43617465676f7279-636f6e6a7567617465:

\ :ref:`conjugate <l47726f7570-636f6e6a7567617465>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6379636c65:

.. index::
   pair: PermutationCategory; cycle

:spadfun:`cycle`\: \ :ref:`List <l4c697374>`\  S -> % 
  \ ``cycle(ls)``\  coerces a cycle \ *ls*\ , i.e. a list with not repetitions to a permutation, which maps \ *ls.i*\  to \ *ls.i+1*\ , indices modulo the length of the list. Error: if repetitions occur.

.. _l5065726d75746174696f6e43617465676f7279-6379636c6573:

.. index::
   pair: PermutationCategory; cycles

:spadfun:`cycles`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> % 
  \ ``cycles(lls)``\  coerces a list list of cycles \ *lls*\  to a permutation, each cycle being a list with not repetitions, is coerced to the permutation, which maps \ *ls.i*\  to \ *ls.i+1*\ , indices modulo the length of the list, then these permutations are multiplied. Error: if repetitions occur in one cycle.

.. _l5065726d75746174696f6e43617465676f7279-656c74:

.. index::
   pair: PermutationCategory; elt

:spadfun:`elt`\: (%, S) -> S 
  \ ``elt(p, el)``\  returns the image of \ *el*\  under the permutation \ ``p``\ .

.. _l5065726d75746174696f6e43617465676f7279-6576616c:

.. index::
   pair: PermutationCategory; eval

:spadfun:`eval`\: (%, S) -> S 
  \ ``eval(p, el)``\  returns the image of \ *el*\  under the permutation \ ``p``\ .

.. _l5065726d75746174696f6e43617465676f7279-696e76:

\ :ref:`inv <l47726f7570-696e76>`\ \: % -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-6f72626974:

.. index::
   pair: PermutationCategory; orbit

:spadfun:`orbit`\: (%, S) -> \ :ref:`Set <l536574>`\  S 
  \ ``orbit(p, el)``\  returns the orbit of \ *el*\  under the permutation \ ``p``\ , i.e. the set which is given by applications of the powers of \ ``p``\  to \ *el*\ .

.. _l5065726d75746174696f6e43617465676f7279-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e43617465676f7279-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e43617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`Group <l47726f7570>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

