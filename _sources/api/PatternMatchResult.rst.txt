.. index:: PatternMatchResult

.. _l5061747465726e4d61746368526573756c74:

PatternMatchResult(R, S)
========================

:viewcode:`patmatch1.spad line 1 <patmatch1.spad#L1>` :editcode:`[edit on github] <patmatch1.spad#L1>`

* R: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


A PatternMatchResult is an object internally returned by the pattern matcher; It is either a failed match, or a list of matches of the form (var, expr) meaning that the variable var matches the expression expr.


.. _l5061747465726e4d61746368526573756c74-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5061747465726e4d61746368526573756c74-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5061747465726e4d61746368526573756c74-6164644d61746368:

.. index::
   pair: PatternMatchResult; addMatch

:spadfun:`addMatch`\: (\ :ref:`Pattern <l5061747465726e>`\  R, S, %) -> % 
  \ ``addMatch(var, expr, r)``\  adds the match (\ ``var``\ , \ ``expr``\ ) in \ ``r``\ , provided that \ ``expr``\  satisfies the predicates attached to \ ``var``\ , and that \ ``var``\  is not matched to another expression already.

.. _l5061747465726e4d61746368526573756c74-6164644d6174636852657374726963746564:

.. index::
   pair: PatternMatchResult; addMatchRestricted

:spadfun:`addMatchRestricted`\: (\ :ref:`Pattern <l5061747465726e>`\  R, S, %, S) -> % 
  \ ``addMatchRestricted(var, expr, r, val)``\  adds the match (\ ``var``\ , \ ``expr``\ ) in \ ``r``\ , provided that \ ``expr``\  satisfies the predicates attached to \ ``var``\ , that \ ``var``\  is not matched to another expression already, and that either \ ``var``\  is an optional pattern variable or that \ ``expr``\  is not equal to val (usually an identity).

.. _l5061747465726e4d61746368526573756c74-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5061747465726e4d61746368526573756c74-636f6e737472756374:

.. index::
   pair: PatternMatchResult; construct

:spadfun:`construct`\: \ :ref:`List <l4c697374>`\  Record(key: \ :ref:`Symbol <l53796d626f6c>`\ , entry: S) -> % 
  \ ``construct([v1, e1], ..., [vn, en])``\  returns the match result containing the matches (\ ``v1``\ , \ ``e1``\ ), ..., (\ ``vn``\ , en).

.. _l5061747465726e4d61746368526573756c74-6465737472756374:

.. index::
   pair: PatternMatchResult; destruct

:spadfun:`destruct`\: % -> \ :ref:`List <l4c697374>`\  Record(key: \ :ref:`Symbol <l53796d626f6c>`\ , entry: S) 
  \ ``destruct(r)``\  returns the list of matches (var, expr) in \ ``r``\ . Error: if \ ``r``\  is a failed match.

.. _l5061747465726e4d61746368526573756c74-6661696c65643f:

.. index::
   pair: PatternMatchResult; failed?

:spadfun:`failed?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``failed?(r)``\  tests if \ ``r``\  is a failed match.

.. _l5061747465726e4d61746368526573756c74-6661696c6564:

.. index::
   pair: PatternMatchResult; failed

:spadfun:`failed`\: () -> % 
  \ ``failed()``\  returns a failed match.

.. _l5061747465726e4d61746368526573756c74-6765744d61746368:

.. index::
   pair: PatternMatchResult; getMatch

:spadfun:`getMatch`\: (\ :ref:`Pattern <l5061747465726e>`\  R, %) -> Union(S, failed) 
  \ ``getMatch(var, r)``\  returns the expression that \ ``var``\  matches in the result \ ``r``\ , and "failed" if \ ``var``\  is not matched in \ ``r``\ .

.. _l5061747465726e4d61746368526573756c74-696e736572744d61746368:

.. index::
   pair: PatternMatchResult; insertMatch

:spadfun:`insertMatch`\: (\ :ref:`Pattern <l5061747465726e>`\  R, S, %) -> % 
  \ ``insertMatch(var, expr, r)``\  adds the match (\ ``var``\ , \ ``expr``\ ) in \ ``r``\ , without checking predicates or previous matches for \ ``var``\ .

.. _l5061747465726e4d61746368526573756c74-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5061747465726e4d61746368526573756c74-6e6577:

.. index::
   pair: PatternMatchResult; new

:spadfun:`new`\: () -> % 
  \ ``new()``\  returns a new empty match result.

.. _l5061747465726e4d61746368526573756c74-736174697366793f:

.. index::
   pair: PatternMatchResult; satisfy?

:spadfun:`satisfy?`\: (%, \ :ref:`Pattern <l5061747465726e>`\  R) -> Union(\ :ref:`Boolean <l426f6f6c65616e>`\ , failed) 
  \ ``satisfy?(r, p)``\  returns \ ``true``\  if the matches satisfy the top-level predicate of \ ``p``\ , \ ``false``\  if they don\ ``'t``\ , and "failed" if not enough variables of \ ``p``\  are matched in \ ``r``\  to decide.

.. _l5061747465726e4d61746368526573756c74-756e696f6e:

.. index::
   pair: PatternMatchResult; union

:spadfun:`union`\: (%, %) -> % 
  \ ``union(a, b)``\  makes the set-union of two match results.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

