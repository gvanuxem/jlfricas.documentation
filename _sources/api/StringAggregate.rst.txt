.. index:: StringAggregate

.. _l537472696e67416767726567617465:

StringAggregate
===============

:viewcode:`aggcat.spad line 2529 <aggcat.spad#L2529>` :editcode:`[edit on github] <aggcat.spad#L2529>`


A string aggregate is a category for strings, that is, one dimensional arrays of characters.


.. _l537472696e67416767726567617465-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l537472696e67416767726567617465-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l537472696e67416767726567617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l537472696e67416767726567617465-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l537472696e67416767726567617465-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l537472696e67416767726567617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l537472696e67416767726567617465-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: StringAggregate; coerce

:spadfun:`coerce`\: \ :ref:`Character <l436861726163746572>`\  -> % 
  \ ``coerce(c)``\  returns \ ``c``\  as a string \ ``s``\  with the character \ ``c``\ .

.. _l537472696e67416767726567617465-636f6e636174:

\ :ref:`concat <l4c696e656172416767726567617465-636f6e636174>`\ \: (%, %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`concat <l4c696e656172416767726567617465-636f6e636174>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`concat <l4c696e656172416767726567617465-636f6e636174>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`concat <l4c696e656172416767726567617465-636f6e636174>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-636f6e737472756374:

\ :ref:`construct <l436f6c6c656374696f6e-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\  -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l537472696e67416767726567617465-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-636f7079496e746f21:

\ :ref:`copyInto! <l4c696e656172416767726567617465-636f7079496e746f21>`\ \: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-64656c657465:

\ :ref:`delete <l4c696e656172416767726567617465-64656c657465>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`delete <l4c696e656172416767726567617465-64656c657465>`\ \: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-656c74:

.. index::
   pair: StringAggregate; elt

:spadfun:`elt`\: (%, %) -> % 
  \ ``elt(s, t)``\  returns the concatenation of \ ``s``\  and \ ``t``\ . It is provided to allow juxtaposition of strings to work as concatenation. For example, \ ``"smoo" "shed"``\  returns \ ``"smooshed"``\ .


\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`elt <l456c7461626c65416767726567617465-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %)

.. _l537472696e67416767726567617465-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-656e7472696573:

\ :ref:`entries <l496e6465786564416767726567617465-656e7472696573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-656e7472793f:

\ :ref:`entry? <l496e6465786564416767726567617465-656e7472793f>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> % if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`Character <l436861726163746572>`\ ) -> % if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\ ) -> % if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`Character <l436861726163746572>`\ ) -> % if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-66696c6c21:

\ :ref:`fill! <l496e6465786564416767726567617465-66696c6c21>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-66696e64:

\ :ref:`find <l436f6c6c656374696f6e-66696e64>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> Union(\ :ref:`Character <l436861726163746572>`\ , failed) 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6669727374:

\ :ref:`first <l496e6465786564416767726567617465-6669727374>`\ \: % -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`first <l4c696e656172416767726567617465-6669727374>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l537472696e67416767726567617465-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l537472696e67416767726567617465-696e6465783f:

\ :ref:`index? <l496e6465786564416767726567617465-696e6465783f>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-696e6469636573:

\ :ref:`indices <l496e6465786564416767726567617465-696e6469636573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-696e73657274:

\ :ref:`insert <l4c696e656172416767726567617465-696e73657274>`\ \: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`insert <l4c696e656172416767726567617465-696e73657274>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l537472696e67416767726567617465-6c6566745472696d:

\ :ref:`leftTrim <l4c696e656172416767726567617465-6c6566745472696d>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


.. index::
   pair: StringAggregate; leftTrim

:spadfun:`leftTrim`\: (%, \ :ref:`CharacterClass <l436861726163746572436c617373>`\ ) -> % 
  \ ``leftTrim(s, cc)``\  returns \ ``s``\  with all leading characters in \ ``cc``\  deleted. For example, \ ``leftTrim("(abc)", charClass "()")``\  returns \ ``"abc)"``\ .

.. _l537472696e67416767726567617465-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-6c6f7765724361736521:

.. index::
   pair: StringAggregate; lowerCase!

:spadfun:`lowerCase!`\: % -> % 
  \ ``lowerCase!(s)``\  destructively replaces the alphabetic characters in \ ``s``\  by lower case.

.. _l537472696e67416767726567617465-6c6f77657243617365:

.. index::
   pair: StringAggregate; lowerCase

:spadfun:`lowerCase`\: % -> % 
  \ ``lowerCase(s)``\  returns the string with all characters in lower case.

.. _l537472696e67416767726567617465-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Character <l436861726163746572>`\ , %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d6170:

\ :ref:`map <l4c696e656172416767726567617465-6d6170>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\ , %, %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Character <l436861726163746572>`\ , %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d617463683f:

.. index::
   pair: StringAggregate; match?

:spadfun:`match?`\: (%, %, \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``match?(s, t, c)``\  tests if \ ``s``\  matches \ ``t``\  except perhaps for multiple and consecutive occurrences of character \ ``c``\ . Typically \ ``c``\  is the blank character.

.. _l537472696e67416767726567617465-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d6178496e646578:

\ :ref:`maxIndex <l496e6465786564416767726567617465-6d6178496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d65726765:

\ :ref:`merge <l4c696e656172416767726567617465-6d65726765>`\ \: (%, %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`merge <l4c696e656172416767726567617465-6d65726765>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %, %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l537472696e67416767726567617465-6d696e496e646578:

\ :ref:`minIndex <l496e6465786564416767726567617465-6d696e496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-6e6577:

\ :ref:`new <l4c696e656172416767726567617465-6e6577>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-706f736974696f6e:

.. index::
   pair: StringAggregate; position

:spadfun:`position`\: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``position(s, t, i)``\  returns the position \ ``j``\  of the substring \ ``s``\  in string \ ``t``\ , beginning at index \ ``i``\ . Returns \ ``minIndex(s) - 1``\  if there is no such \ ``j``\ .


\ :ref:`position <l4c696e656172416767726567617465-706f736974696f6e>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`position <l4c696e656172416767726567617465-706f736974696f6e>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`position <l4c696e656172416767726567617465-706f736974696f6e>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


.. index::
   pair: StringAggregate; position

:spadfun:`position`\: (\ :ref:`CharacterClass <l436861726163746572436c617373>`\ , %, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``position(cc, t, i)``\  returns the position \ ``j``\  in string \ ``t``\  of the first character belonging to \ ``cc``\ , beginning at index \ ``i``\ . Returns \ ``minIndex(t) - 1``\  if there is no such \ ``j``\ .

.. _l537472696e67416767726567617465-7072656669783f:

.. index::
   pair: StringAggregate; prefix?

:spadfun:`prefix?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``prefix?(s, t)``\  tests if the string \ ``s``\  is the initial substring of \ ``t``\ . Note: \ ``prefix?(s, t) = reduce(and, [s.i = t.i for i in indices s])``\ .

.. _l537472696e67416767726567617465-71656c74:

\ :ref:`qelt <l456c7461626c65416767726567617465-71656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-71736574656c7421:

\ :ref:`qsetelt! <l456c7461626c65416767726567617465-71736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-726564756365:

\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\ , %) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\ , %, \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\ , %, \ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-72656d6f7665:

\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (\ :ref:`Character <l436861726163746572>`\ , %) -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-72656d6f76654475706c696361746573:

\ :ref:`removeDuplicates <l436f6c6c656374696f6e-72656d6f76654475706c696361746573>`\ \: % -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-7265706c616365:

.. index::
   pair: StringAggregate; replace

:spadfun:`replace`\: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``replace(s, i..j, t)``\  replaces the substring \ ``s(i..j)``\  of \ ``s``\  by string \ ``t``\ .

.. _l537472696e67416767726567617465-7265766572736521:

\ :ref:`reverse! <l4c696e656172416767726567617465-7265766572736521>`\ \: % -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-72657665727365:

\ :ref:`reverse <l4c696e656172416767726567617465-72657665727365>`\ \: % -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-72696768745472696d:

\ :ref:`rightTrim <l4c696e656172416767726567617465-72696768745472696d>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


.. index::
   pair: StringAggregate; rightTrim

:spadfun:`rightTrim`\: (%, \ :ref:`CharacterClass <l436861726163746572436c617373>`\ ) -> % 
  \ ``rightTrim(s, cc)``\  returns \ ``s``\  with all trailing occurrences of characters in \ ``cc``\  deleted. For example, \ ``rightTrim("(abc)", charClass "()")``\  returns \ ``"(abc"``\ .

.. _l537472696e67416767726567617465-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-73656c656374:

\ :ref:`select <l436f6c6c656374696f6e-73656c656374>`\ \: (\ :ref:`Character <l436861726163746572>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-736574656c7421:

\ :ref:`setelt! <l456c7461626c65416767726567617465-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )


\ :ref:`setelt! <l4c696e656172416767726567617465-736574656c7421>`\ \: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Character <l436861726163746572>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l537472696e67416767726567617465-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l537472696e67416767726567617465-736f727421:

\ :ref:`sort! <l4c696e656172416767726567617465-736f727421>`\ \: % -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`sort! <l4c696e656172416767726567617465-736f727421>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-736f7274:

\ :ref:`sort <l4c696e656172416767726567617465-736f7274>`\ \: % -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`sort <l4c696e656172416767726567617465-736f7274>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-736f727465643f:

\ :ref:`sorted? <l4c696e656172416767726567617465-736f727465643f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


\ :ref:`sorted? <l4c696e656172416767726567617465-736f727465643f>`\ \: ((\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 

.. _l537472696e67416767726567617465-73706c6974:

.. index::
   pair: StringAggregate; split

:spadfun:`split`\: (%, \ :ref:`Character <l436861726163746572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``split(s, c)``\  returns a list of substrings delimited by character \ ``c``\ .


.. index::
   pair: StringAggregate; split

:spadfun:`split`\: (%, \ :ref:`CharacterClass <l436861726163746572436c617373>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``split(s, cc)``\  returns a list of substrings delimited by characters in \ ``cc``\ .

.. _l537472696e67416767726567617465-737562737472696e673f:

.. index::
   pair: StringAggregate; substring?

:spadfun:`substring?`\: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``substring?(s, t, i)``\  tests if \ ``s``\  is a substring of \ ``t``\  beginning at index \ ``i``\ . Note: \ ``substring?(s, t, 0) = prefix?(s, t)``\ .

.. _l537472696e67416767726567617465-7375666669783f:

.. index::
   pair: StringAggregate; suffix?

:spadfun:`suffix?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``suffix?(s, t)``\  tests if the string \ ``s``\  is the final substring of \ ``t``\ . Note: \ ``suffix?(s, t) = reduce(and, [s.i = t.(n - m + i) for i indices s])``\  where \ ``m``\  and \ ``n``\  denote the maxIndex of \ ``s``\  and \ ``t``\  respectively.

.. _l537472696e67416767726567617465-7377617021:

\ :ref:`swap! <l496e6465786564416767726567617465-7377617021>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ )

.. _l537472696e67416767726567617465-7472696d:

\ :ref:`trim <l4c696e656172416767726567617465-7472696d>`\ \: (%, \ :ref:`Character <l436861726163746572>`\ ) -> % 
  from \ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\ 


.. index::
   pair: StringAggregate; trim

:spadfun:`trim`\: (%, \ :ref:`CharacterClass <l436861726163746572436c617373>`\ ) -> % 
  \ ``trim(s, cc)``\  returns \ ``s``\  with all characters in \ ``cc``\  deleted from right and left ends. For example, \ ``trim("(abc)", charClass "()")``\  returns \ ``"abc"``\ .

.. _l537472696e67416767726567617465-75707065724361736521:

.. index::
   pair: StringAggregate; upperCase!

:spadfun:`upperCase!`\: % -> % 
  \ ``upperCase!(s)``\  destructively replaces the alphabetic characters in \ ``s``\  by corresponding upper case characters.

.. _l537472696e67416767726567617465-757070657243617365:

.. index::
   pair: StringAggregate; upperCase

:spadfun:`upperCase`\: % -> % 
  \ ``upperCase(s)``\  returns the string with all characters in upper case.


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Collection <l436f6c6c656374696f6e>`\  \ :ref:`Character <l436861726163746572>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) 

\ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) 

\ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) 

\ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\  if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\  

\ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Character <l436861726163746572>`\ ) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Character <l436861726163746572>`\ , \ :ref:`Character <l436861726163746572>`\ ) if \ :ref:`Character <l436861726163746572>`\  has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`Character <l436861726163746572>`\ 

\ :ref:`LinearAggregate <l4c696e656172416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\  

\ :ref:`OneDimensionalArrayAggregate <l4f6e6544696d656e73696f6e616c4172726179416767726567617465>`\  \ :ref:`Character <l436861726163746572>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

