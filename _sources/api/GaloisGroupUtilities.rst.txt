.. index:: GaloisGroupUtilities

.. _l47616c6f697347726f75705574696c6974696573:

GaloisGroupUtilities R
======================

:viewcode:`galfact.spad line 1 <galfact.spad#L1>` :editcode:`[edit on github] <galfact.spad#L1>`

* R: \ :ref:`Ring <l52696e67>`\ 


\ :ref:`GaloisGroupUtilities <l47616c6f697347726f75705574696c6974696573>`\  provides several useful functions.


.. _l47616c6f697347726f75705574696c6974696573-66696c6c50617363616c547269616e676c65:

.. index::
   pair: GaloisGroupUtilities; fillPascalTriangle

:spadfun:`fillPascalTriangle`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``fillPascalTriangle()``\  fills the stored table.

.. _l47616c6f697347726f75705574696c6974696573-70617363616c547269616e676c65:

.. index::
   pair: GaloisGroupUtilities; pascalTriangle

:spadfun:`pascalTriangle`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``pascalTriangle(n, r)``\  returns the binomial coefficient \ ``C(n, r)=n!/(r! (n-r)!)``\  and stores it in a table to prevent recomputation.

.. _l47616c6f697347726f75705574696c6974696573-72616e676550617363616c547269616e676c65:

.. index::
   pair: GaloisGroupUtilities; rangePascalTriangle

:spadfun:`rangePascalTriangle`\: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rangePascalTriangle()``\  returns the maximal number of lines stored.


.. index::
   pair: GaloisGroupUtilities; rangePascalTriangle

:spadfun:`rangePascalTriangle`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rangePascalTriangle(n)``\  sets the maximal number of lines which are stored and returns the previous value.

.. _l47616c6f697347726f75705574696c6974696573-736166654365696c696e67:

.. index::
   pair: GaloisGroupUtilities; safeCeiling

:spadfun:`safeCeiling`\: R -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 
  \ ``safeCeiling(x)``\  returns the integer which is greater than any integer with the same floating point number representation.

.. _l47616c6f697347726f75705574696c6974696573-73616665466c6f6f72:

.. index::
   pair: GaloisGroupUtilities; safeFloor

:spadfun:`safeFloor`\: R -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 
  \ ``safeFloor(x)``\  returns the integer which is lower or equal to the largest integer which has the same floating point number representation.

.. _l47616c6f697347726f75705574696c6974696573-7361666574794d617267696e:

.. index::
   pair: GaloisGroupUtilities; safetyMargin

:spadfun:`safetyMargin`\: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 
  \ ``safetyMargin()``\  returns the number of low weight digits we do not trust in the floating point representation (used by \ :spadfun:`safeCeiling`\ ).


.. index::
   pair: GaloisGroupUtilities; safetyMargin

:spadfun:`safetyMargin`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 
  \ ``safetyMargin(n)``\  sets to \ ``n``\  the number of low weight digits we do not trust in the floating point representation and returns the previous value (for use by \ :spadfun:`safeCeiling`\ ).

.. _l47616c6f697347726f75705574696c6974696573-73697a6550617363616c547269616e676c65:

.. index::
   pair: GaloisGroupUtilities; sizePascalTriangle

:spadfun:`sizePascalTriangle`\: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``sizePascalTriangle()``\  returns the number of entries currently stored in the table.


