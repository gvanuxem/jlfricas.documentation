.. index:: ThreeDimensionalMatrix

.. _l546872656544696d656e73696f6e616c4d6174726978:

ThreeDimensionalMatrix R
========================

:viewcode:`fortran.spad line 948 <fortran.spad#L948>` :editcode:`[edit on github] <fortran.spad#L948>`

* R: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


This domain represents three dimensional matrices over a general object type


.. _l546872656544696d656e73696f6e616c4d6174726978-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: ThreeDimensionalMatrix; coerce

:spadfun:`coerce`\: % -> \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  R 
  \ ``coerce(x)``\  moves from the domain to the representation type


.. index::
   pair: ThreeDimensionalMatrix; coerce

:spadfun:`coerce`\: \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  R -> % 
  \ ``coerce(p)``\  moves from the representation type (PrimitiveArray PrimitiveArray PrimitiveArray \ ``R``\ ) to the domain

.. _l546872656544696d656e73696f6e616c4d6174726978-636f6e737472756374:

.. index::
   pair: ThreeDimensionalMatrix; construct

:spadfun:`construct`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R -> % 
  \ ``construct(lll)``\  creates a 3-\ ``D``\  matrix from a List List List \ ``R``\  \ ``lll``\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-656c74:

.. index::
   pair: ThreeDimensionalMatrix; elt

:spadfun:`elt`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> R 
  \ ``elt(x, i, j, k)``\  extract an element from the matrix \ ``x``\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, R, R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)

.. _l546872656544696d656e73696f6e616c4d6174726978-6964656e746974794d6174726978:

.. index::
   pair: ThreeDimensionalMatrix; identityMatrix

:spadfun:`identityMatrix`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``identityMatrix(n)``\  create an identity matrix we note that this must be square

.. _l546872656544696d656e73696f6e616c4d6174726978-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-6d6170:

\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (R -> R, %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l546872656544696d656e73696f6e616c4d6174726978-6d6174726978436f6e6361743344:

.. index::
   pair: ThreeDimensionalMatrix; matrixConcat3D

:spadfun:`matrixConcat3D`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %) -> % 
  \ ``matrixConcat3D(s, x, y)``\  concatenates two 3-\ ``D``\  matrices along a specified axis

.. _l546872656544696d656e73696f6e616c4d6174726978-6d617472697844696d656e73696f6e73:

.. index::
   pair: ThreeDimensionalMatrix; matrixDimensions

:spadfun:`matrixDimensions`\: % -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``matrixDimensions(x)``\  returns the dimensions of a matrix

.. _l546872656544696d656e73696f6e616c4d6174726978-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> R if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  and R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l546872656544696d656e73696f6e616c4d6174726978-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> R if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  and R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l546872656544696d656e73696f6e616c4d6174726978-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-706c7573:

.. index::
   pair: ThreeDimensionalMatrix; plus

:spadfun:`plus`\: (%, %) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``plus(x, y)``\  adds two matrices, term by term we note that they must be the same size

.. _l546872656544696d656e73696f6e616c4d6174726978-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-736574656c7421:

.. index::
   pair: ThreeDimensionalMatrix; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , R) -> R 
  \ ``setelt!(x, i, j, k, s)``\  (or \ ``x``\ .\ ``i``\ .\ ``j``\ .\ ``k``\  \ ``:=``\  \ ``s``\ ) sets a specific element of the array to some value of type \ ``R``\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l546872656544696d656e73696f6e616c4d6174726978-7a65726f4d6174726978:

.. index::
   pair: ThreeDimensionalMatrix; zeroMatrix

:spadfun:`zeroMatrix`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``zeroMatrix(i, j, k)``\  create a matrix with all zero terms


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  R if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R) if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`SetCategory <l53657443617465676f7279>`\  

