.. index:: Product

.. _l50726f64756374:

Product(A, B)
=============

:viewcode:`product.spad line 1 <product.spad#L1>` :editcode:`[edit on github] <product.spad#L1>`

* A: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* B: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


This domain implements cartesian product. If the underlying domains are both Finite then the resulting Product is also Finite and can be enumerated via size(), index(), location(), etc. The index of the second component (\ ``B``\ ) varies most quickly.


.. _l50726f64756374-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l50726f64756374-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l50726f64756374-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l50726f64756374-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l50726f64756374-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % if B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % if B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l50726f64756374-2f:

\ :ref:`/ <l47726f7570-2f>`\ \: (%, %) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l50726f64756374-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f64756374-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f64756374-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l50726f64756374-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f64756374-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f64756374-5e:

\ :ref:`^ <l47726f7570-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l50726f64756374-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l50726f64756374-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l50726f64756374-636f6d6d757461746f72:

\ :ref:`commutator <l47726f7570-636f6d6d757461746f72>`\ \: (%, %) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l50726f64756374-636f6e6a7567617465:

\ :ref:`conjugate <l47726f7570-636f6e6a7567617465>`\ \: (%, %) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l50726f64756374-636f6e737472756374:

.. index::
   pair: Product; construct

:spadfun:`construct`\: (A, B) -> % 
  \ ``construct(a, b)``\  creates element of the product with components a and \ ``b``\ .

.. _l50726f64756374-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l50726f64756374-656e756d6572617465:

\ :ref:`enumerate <l46696e697465-656e756d6572617465>`\ \: () -> \ :ref:`List <l4c697374>`\  % if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l50726f64756374-6669727374:

.. index::
   pair: Product; first

:spadfun:`first`\: % -> A 
  \ ``first(x)``\  selects first component of the product

.. _l50726f64756374-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if A has \ :ref:`Hashable <l4861736861626c65>`\  and B has \ :ref:`Hashable <l4861736861626c65>`\  or B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l50726f64756374-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if A has \ :ref:`Hashable <l4861736861626c65>`\  and B has \ :ref:`Hashable <l4861736861626c65>`\  or B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l50726f64756374-696e646578:

\ :ref:`index <l46696e697465-696e646578>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l50726f64756374-696e66:

\ :ref:`inf <l4f7264657265644162656c69616e4d6f6e6f6964537570-696e66>`\ \: (%, %) -> % if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

.. _l50726f64756374-696e76:

\ :ref:`inv <l47726f7570-696e76>`\ \: % -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l50726f64756374-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l50726f64756374-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l50726f64756374-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l50726f64756374-6c6f6f6b7570:

\ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ \: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l50726f64756374-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l50726f64756374-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l50726f64756374-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l50726f64756374-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l50726f64756374-72616e646f6d:

\ :ref:`random <l46696e697465-72616e646f6d>`\ \: () -> % if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l50726f64756374-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l50726f64756374-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l50726f64756374-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l50726f64756374-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % if A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l50726f64756374-7365636f6e64:

.. index::
   pair: Product; second

:spadfun:`second`\: % -> B 
  \ ``second(x)``\  selects second component of the product

.. _l50726f64756374-73697a65:

\ :ref:`size <l46696e697465-73697a65>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l50726f64756374-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`Comparable <l436f6d70617261626c65>`\  and A has \ :ref:`Comparable <l436f6d70617261626c65>`\  or B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  or B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l50726f64756374-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  or B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l50726f64756374-737570:

\ :ref:`sup <l4f7264657265644162656c69616e4d6f6e6f6964537570-737570>`\ \: (%, %) -> % if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

.. _l50726f64756374-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  if B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if B has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  and A has \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  or B has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  and A has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\  or B has \ :ref:`Comparable <l436f6d70617261626c65>`\  and A has \ :ref:`Comparable <l436f6d70617261626c65>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`Finite <l46696e697465>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`Group <l47726f7570>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 

\ :ref:`Hashable <l4861736861626c65>`\  if B has \ :ref:`Finite <l46696e697465>`\  and A has \ :ref:`Finite <l46696e697465>`\  or A has \ :ref:`Hashable <l4861736861626c65>`\  and B has \ :ref:`Hashable <l4861736861626c65>`\ 

\ :ref:`Magma <l4d61676d61>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 

\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\  if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`OrderedCancellationAbelianMonoid <l4f72646572656443616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`OrderedSet <l4f726465726564536574>`\  if B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  or B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if B has \ :ref:`OrderedSet <l4f726465726564536574>`\  and A has \ :ref:`OrderedSet <l4f726465726564536574>`\  or B has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  and A has \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\  or A has \ :ref:`Monoid <l4d6f6e6f6964>`\  and B has \ :ref:`Monoid <l4d6f6e6f6964>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  if A has \ :ref:`Group <l47726f7570>`\  and B has \ :ref:`Group <l47726f7570>`\ 

