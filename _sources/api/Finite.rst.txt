.. index:: Finite

.. _l46696e697465:

Finite
======

:viewcode:`catdef.spad line 610 <catdef.spad#L610>` :editcode:`[edit on github] <catdef.spad#L610>`


The category of domains composed of a finite set of elements. We include the functions \ :spadfun:`lookup`\  and \ :spadfun:`index`\  to give a bijection between the finite set and an initial segment of positive integers.  


.. _l46696e697465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e697465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e697465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l46696e697465-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l46696e697465-656e756d6572617465:

.. index::
   pair: Finite; enumerate

:spadfun:`enumerate`\: () -> \ :ref:`List <l4c697374>`\  % 
  \ ``enumerate()``\  returns list of elements of the set.

.. _l46696e697465-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l46696e697465-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l46696e697465-696e646578:

.. index::
   pair: Finite; index

:spadfun:`index`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``index(i)``\  takes a positive integer \ ``i``\  less than or equal to \ ``size()``\  and returns the \ ``i``\ \ ``-``\ th element of the set. This operation establishes a bijection between the elements of the finite set and \ ``1..size()``\ .

.. _l46696e697465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l46696e697465-6c6f6f6b7570:

.. index::
   pair: Finite; lookup

:spadfun:`lookup`\: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``lookup(x)``\  returns a positive integer such that \ ``x = index lookup x``\ .

.. _l46696e697465-72616e646f6d:

.. index::
   pair: Finite; random

:spadfun:`random`\: () -> % 
  \ ``random()``\  returns a random element from the set.

.. _l46696e697465-73697a65:

.. index::
   pair: Finite; size

:spadfun:`size`\: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``size()``\  returns the number of elements in the set.

.. _l46696e697465-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

