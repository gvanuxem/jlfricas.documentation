.. index:: LiePolynomial

.. _l4c6965506f6c796e6f6d69616c:

LiePolynomial(VarSet, R)
========================

:viewcode:`xlpoly.spad line 449 <xlpoly.spad#L449>` :editcode:`[edit on github] <xlpoly.spad#L449>`

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


This type supports Lie polynomials in Lyndon basis see Free Lie Algebras by \ ``C``\ . Reutenauer (Oxford science publications).   Author: Michel Petitot (petitot@lifl.\ ``fr``\ ).


.. _l4c6965506f6c796e6f6d69616c-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6965506f6c796e6f6d69616c-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l4c6965506f6c796e6f6d69616c-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4c6965506f6c796e6f6d69616c-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l4c6965506f6c796e6f6d69616c-2f:

\ :ref:`/ <l4c6965416c6765627261-2f>`\ \: (%, R) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  from \ :ref:`LieAlgebra <l4c6965416c6765627261>`\  R

.. _l4c6965506f6c796e6f6d69616c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c6965506f6c796e6f6d69616c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c6965506f6c796e6f6d69616c-636f6566:

\ :ref:`coef <l467265654c6965416c6765627261-636f6566>`\ \: (\ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R), %) -> R 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-636f656666696369656e74:

\ :ref:`coefficient <l467265654d6f64756c6543617465676f7279-636f656666696369656e74>`\ \: (%, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) -> R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-636f656666696369656e7473:

\ :ref:`coefficients <l467265654d6f64756c6543617465676f7279-636f656666696369656e7473>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l467265654c6965416c6765627261-636f65726365>`\ \: % -> \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VarSet, R) 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)


\ :ref:`coerce <l467265654c6965416c6765627261-636f65726365>`\ \: % -> \ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R) 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)


\ :ref:`coerce <l467265654c6965416c6765627261-636f65726365>`\ \: VarSet -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-636f6e737472756374:

\ :ref:`construct <l4c6965416c6765627261-636f6e737472756374>`\ \: (%, %) -> % 
  from \ :ref:`LieAlgebra <l4c6965416c6765627261>`\  R


.. index::
   pair: LiePolynomial; construct

:spadfun:`construct`\: (%, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) -> % 
  \ ``construct(x, y)``\  returns the Lie bracket \ ``[x, y]``\ .


.. index::
   pair: LiePolynomial; construct

:spadfun:`construct`\: (\ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, %) -> % 
  \ ``construct(x, y)``\  returns the Lie bracket \ ``[x, y]``\ .


.. index::
   pair: LiePolynomial; construct

:spadfun:`construct`\: (\ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) -> % 
  \ ``construct(x, y)``\  returns the Lie bracket \ ``[x, y]``\ .


\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-646567726565:

\ :ref:`degree <l467265654c6965416c6765627261-646567726565>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-6576616c:

\ :ref:`eval <l467265654c6965416c6765627261-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  VarSet, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)


\ :ref:`eval <l467265654c6965416c6765627261-6576616c>`\ \: (%, VarSet, %) -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4c6965506f6c796e6f6d69616c-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l496e646578656450726f6475637443617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> R 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l496e646578656450726f6475637443617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, c: R) 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-4c6965506f6c79:

\ :ref:`LiePoly <l467265654c6965416c6765627261-4c6965506f6c79>`\ \: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-4c6965506f6c79496643616e:

.. index::
   pair: LiePolynomial; LiePolyIfCan

:spadfun:`LiePolyIfCan`\: \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VarSet, R) -> Union(%, failed) 
  \ ``LiePolyIfCan(p)``\  returns \ ``p``\  in Lyndon basis if \ ``p``\  is a Lie polynomial, otherwise \ ``"failed"``\  is returned.

.. _l4c6965506f6c796e6f6d69616c-6c696e656172457874656e64:

\ :ref:`linearExtend <l467265654d6f64756c6543617465676f7279-6c696e656172457874656e64>`\ \: (\ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet -> R, %) -> R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6c6973744f665465726d73:

\ :ref:`listOfTerms <l496e646578656444697265637450726f6475637443617465676f7279-6c6973744f665465726d73>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(k: \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet, c: R) 
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6c71756f:

\ :ref:`lquo <l467265654c6965416c6765627261-6c71756f>`\ \: (\ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R), %) -> \ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R) 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-6d6170:

\ :ref:`map <l496e646578656450726f6475637443617465676f7279-6d6170>`\ \: (R -> R, %) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6d6972726f72:

\ :ref:`mirror <l467265654c6965416c6765627261-6d6972726f72>`\ \: % -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-6d6f6e6f6d69616c3f:

\ :ref:`monomial? <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6d6f6e6f6d69616c:

\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6d6f6e6f6d69616c73:

\ :ref:`monomials <l467265654d6f64756c6543617465676f7279-6d6f6e6f6d69616c73>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6e756d6265724f664d6f6e6f6d69616c73:

\ :ref:`numberOfMonomials <l496e646578656444697265637450726f6475637443617465676f7279-6e756d6265724f664d6f6e6f6d69616c73>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6965506f6c796e6f6d69616c-726564756374756d:

\ :ref:`reductum <l496e646578656450726f6475637443617465676f7279-726564756374756d>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-7271756f:

\ :ref:`rquo <l467265654c6965416c6765627261-7271756f>`\ \: (\ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R), %) -> \ :ref:`XRecursivePolynomial <l58526563757273697665506f6c796e6f6d69616c>`\ (VarSet, R) 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6965506f6c796e6f6d69616c-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4c6965506f6c796e6f6d69616c-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6965506f6c796e6f6d69616c-737570706f7274:

\ :ref:`support <l467265654d6f64756c6543617465676f7279-737570706f7274>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet)

.. _l4c6965506f6c796e6f6d69616c-7472756e63:

\ :ref:`trunc <l467265654c6965416c6765627261-7472756e63>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-7661724c697374:

\ :ref:`varList <l467265654c6965416c6765627261-7661724c697374>`\ \: % -> \ :ref:`List <l4c697374>`\  VarSet 
  from \ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R)

.. _l4c6965506f6c796e6f6d69616c-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  R 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`FreeLieAlgebra <l467265654c6965416c6765627261>`\ (VarSet, R) 

\ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) 

\ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, \ :ref:`LyndonWord <l4c796e646f6e576f7264>`\  VarSet) 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`LieAlgebra <l4c6965416c6765627261>`\  R 

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

