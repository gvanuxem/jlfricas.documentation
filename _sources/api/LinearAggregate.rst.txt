.. index:: LinearAggregate

.. _l4c696e656172416767726567617465:

LinearAggregate S
=================

:viewcode:`aggcat.spad line 1698 <aggcat.spad#L1698>` :editcode:`[edit on github] <aggcat.spad#L1698>`

* S: \ :ref:`Type <l54797065>`\ 


A linear aggregate is an aggregate whose elements are indexed by integers. Examples of linear aggregates are strings, lists, and arrays. Most of the exported operations for linear aggregates are non-destructive but are not always efficient for a particular aggregate. For example, \ :spadfun:`concat`\  of two lists needs only to copy its first argument, whereas \ :spadfun:`concat`\  of two arrays needs to copy both arguments. Most of the operations exported here apply to infinite objects (e.g. streams) as well to finite ones. If the aggregate is a finite aggregate then it has several additional exports such as \ :spadfun:`reverse`\ , \ :spadfun:`sort`\ , and so on.


.. _l4c696e656172416767726567617465-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c696e656172416767726567617465-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c696e656172416767726567617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  or S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c696e656172416767726567617465-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c696e656172416767726567617465-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c696e656172416767726567617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  or S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c696e656172416767726567617465-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4c696e656172416767726567617465-636f6e636174:

.. index::
   pair: LinearAggregate; concat

:spadfun:`concat`\: (%, %) -> % 
  \ ``concat(u, v)``\  returns an aggregate consisting of the elements of \ ``u``\  followed by the elements of \ ``v``\ . Note: if \ ``w = concat(u, v)``\  then \ ``w.i = u.i for i in indices u``\  and \ ``w.(j + maxIndex u) = v.j for j in indices v``\ .


.. index::
   pair: LinearAggregate; concat

:spadfun:`concat`\: (%, S) -> % 
  \ ``concat(u, x)``\  returns aggregate \ ``u``\  with additional element \ ``x``\  at the end. Note: for lists, \ ``concat(u, x) = concat(u, [x])``\ .


.. index::
   pair: LinearAggregate; concat

:spadfun:`concat`\: (S, %) -> % 
  \ ``concat(x, u)``\  returns aggregate \ ``u``\  with additional element \ ``x``\  at the front. Note: for lists: \ ``concat(x, u) = concat([x], u)``\ .


.. index::
   pair: LinearAggregate; concat

:spadfun:`concat`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``concat(u)``\ , where \ ``u``\  is a list of aggregates \ ``[a, b, ..., c]``\ , returns a single aggregate consisting of the elements of \ ``a``\  followed by those of \ ``b``\  followed ... by the elements of \ ``c``\ . Note: \ ``concat([a, b, ..., c]) = concat(a, concat([b, ..., c]))``\ .

.. _l4c696e656172416767726567617465-636f6e737472756374:

\ :ref:`construct <l436f6c6c656374696f6e-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  S -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l4c696e656172416767726567617465-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-636f7079496e746f21:

.. index::
   pair: LinearAggregate; copyInto!

:spadfun:`copyInto!`\: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``copyInto!(u, v, i)``\  returns aggregate \ ``u``\  containing a copy of \ ``v``\  inserted at element \ ``i``\ .

.. _l4c696e656172416767726567617465-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-64656c657465:

.. index::
   pair: LinearAggregate; delete

:spadfun:`delete`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``delete(u, i)``\  returns a copy of \ ``u``\  with the \ ``i``\ th element deleted. Note: \ ``delete(u, i) = concat(u(minIndex(u)..i - 1), u(i + 1..))``\ .


.. index::
   pair: LinearAggregate; delete

:spadfun:`delete`\: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``delete(u, i..j)``\  returns a copy of \ ``u``\  with the \ ``i``\ th through \ ``j``\ th element deleted. Note: \ ``delete(u, i..j) = concat(u(minIndex(u)..i-1), u(j+1..))``\ .

.. _l4c696e656172416767726567617465-656c74:

\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> S 
  from \ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)


\ :ref:`elt <l456c7461626c65416767726567617465-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , S) -> S 
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)


\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %)

.. _l4c696e656172416767726567617465-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-656e7472696573:

\ :ref:`entries <l496e6465786564416767726567617465-656e7472696573>`\ \: % -> \ :ref:`List <l4c697374>`\  S 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-656e7472793f:

\ :ref:`entry? <l496e6465786564416767726567617465-656e7472793f>`\ \: (S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, S, S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)

.. _l4c696e656172416767726567617465-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-66696c6c21:

\ :ref:`fill! <l496e6465786564416767726567617465-66696c6c21>`\ \: (%, S) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-66696e64:

\ :ref:`find <l436f6c6c656374696f6e-66696e64>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> Union(S, failed) 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-6669727374:

\ :ref:`first <l496e6465786564416767726567617465-6669727374>`\ \: % -> S 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)


.. index::
   pair: LinearAggregate; first

:spadfun:`first`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``first(u, n)``\  returns a copy of the first \ ``n``\  elements of \ ``u``\ . Error: if \ ``u``\  has less than \ ``n``\  elements.

.. _l4c696e656172416767726567617465-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l4c696e656172416767726567617465-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l4c696e656172416767726567617465-696e6465783f:

\ :ref:`index? <l496e6465786564416767726567617465-696e6465783f>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-696e6469636573:

\ :ref:`indices <l496e6465786564416767726567617465-696e6469636573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-696e73657274:

.. index::
   pair: LinearAggregate; insert

:spadfun:`insert`\: (%, %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``insert(v, u, i)``\  returns a copy of \ ``u``\  having \ ``v``\  inserted beginning at the \ ``i``\ th element. Note: \ ``insert(v, u, i) = concat(u(minIndex(u)..i-1), concat(v, u(i..)))``\ .


.. index::
   pair: LinearAggregate; insert

:spadfun:`insert`\: (S, %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``insert(x, u, i)``\  returns a copy of \ ``u``\  having \ ``x``\  as its \ ``i``\ th element. Note: \ ``insert(x, u, i) = concat(u(minIndex(u)..i-1), concat(x, u(i..)))``\ .

.. _l4c696e656172416767726567617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4c696e656172416767726567617465-6c6566745472696d:

.. index::
   pair: LinearAggregate; leftTrim

:spadfun:`leftTrim`\: (%, S) -> % if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``leftTrim(u, x)``\  returns a copy of \ ``u``\  with all leading \ ``x``\  deleted. For example, \ ``leftTrim(" abc ", char " ")``\  returns \ ``"abc "``\ .

.. _l4c696e656172416767726567617465-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (S -> S, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-6d6170:

.. index::
   pair: LinearAggregate; map

:spadfun:`map`\: ((S, S) -> S, %, %) -> % 
  \ ``map(f, u, v)``\  returns a new aggregate \ ``w``\  with elements \ ``z = f(x, y)``\  for corresponding elements \ ``x``\  and \ ``y``\  from \ ``u``\  and \ ``v``\ . Note: \ ``w.i = f(u.i, v.i)``\ .


\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (S -> S, %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-6d6178496e646578:

\ :ref:`maxIndex <l496e6465786564416767726567617465-6d6178496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-6d65726765:

.. index::
   pair: LinearAggregate; merge

:spadfun:`merge`\: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``merge(u, v)``\  merges \ ``u``\  and \ ``v``\  in ascending order. Note: \ ``merge(u, v) = merge(<=, u, v)``\ .


.. index::
   pair: LinearAggregate; merge

:spadfun:`merge`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %, %) -> % if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``merge(p, a, b)``\  returns an aggregate \ ``c``\  which merges \ ``a``\  and \ ``b``\ . The result is produced by examining each element \ ``x``\  of \ ``a``\  and \ ``y``\  of \ ``b``\  successively. If \ ``p(x, y)``\  is \ ``true``\ , then \ ``x``\  is inserted into the result; otherwise \ ``y``\  is inserted. If \ ``x``\  is chosen, the next element of \ ``a``\  is examined, and so on. When all the elements of one aggregate are examined, the remaining elements of the other are appended. For example, \ ``merge(<, [1, 3], [2, 7, 5])``\  returns \ ``[1, 2, 3, 7, 5]``\ .

.. _l4c696e656172416767726567617465-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4c696e656172416767726567617465-6d696e496e646578:

\ :ref:`minIndex <l496e6465786564416767726567617465-6d696e496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-6e6577:

.. index::
   pair: LinearAggregate; new

:spadfun:`new`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , S) -> % 
  \ ``new(n, x)``\  returns a new aggregate of size \ ``n``\  all of whose entries are \ ``x``\ .

.. _l4c696e656172416767726567617465-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l4c696e656172416767726567617465-706f736974696f6e:

.. index::
   pair: LinearAggregate; position

:spadfun:`position`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Integer <l496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``position(p, a)``\  returns the index \ ``i``\  of the first \ ``x``\  in \ ``a``\  such that \ ``p(x)``\  is \ ``true``\ , and \ ``minIndex(a) - 1``\  if there is no such \ ``x``\ .


.. index::
   pair: LinearAggregate; position

:spadfun:`position`\: (S, %) -> \ :ref:`Integer <l496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``position(x, a)``\  returns the index \ ``i``\  of the first occurrence of \ ``x``\  in a, and \ ``minIndex(a) - 1``\  if there is no such \ ``x``\ .


.. index::
   pair: LinearAggregate; position

:spadfun:`position`\: (S, %, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``position(x, a, n)``\  returns the index \ ``i``\  of the first occurrence of \ ``x``\  in \ ``a``\  where \ ``i >= n``\ , and \ ``minIndex(a) - 1``\  if no such \ ``x``\  is found.

.. _l4c696e656172416767726567617465-71656c74:

\ :ref:`qelt <l456c7461626c65416767726567617465-71656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> S 
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-71736574656c7421:

\ :ref:`qsetelt! <l456c7461626c65416767726567617465-71736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-726564756365:

\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %) -> S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %, S) -> S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %, S, S) -> S if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-72656d6f7665:

\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (S, %) -> % if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-72656d6f76654475706c696361746573:

\ :ref:`removeDuplicates <l436f6c6c656374696f6e-72656d6f76654475706c696361746573>`\ \: % -> % if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-7265766572736521:

.. index::
   pair: LinearAggregate; reverse!

:spadfun:`reverse!`\: % -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``reverse!(u)``\  returns \ ``u``\  with its elements in reverse order.

.. _l4c696e656172416767726567617465-72657665727365:

.. index::
   pair: LinearAggregate; reverse

:spadfun:`reverse`\: % -> % if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``reverse(a)``\  returns a copy of \ ``a``\  with elements in reverse order.

.. _l4c696e656172416767726567617465-72696768745472696d:

.. index::
   pair: LinearAggregate; rightTrim

:spadfun:`rightTrim`\: (%, S) -> % if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``rightTrim(u, x)``\  returns a copy of \ ``u``\  with all trailing occurrences of \ ``x``\  deleted. For example, \ ``rightTrim(" abc ", char " ")``\  returns \ ``" abc"``\ .

.. _l4c696e656172416767726567617465-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-73656c656374:

\ :ref:`select <l436f6c6c656374696f6e-73656c656374>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l4c696e656172416767726567617465-736574656c7421:

\ :ref:`setelt! <l456c7461626c65416767726567617465-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)


.. index::
   pair: LinearAggregate; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setelt!(u, i..j, x)``\  (also written: \ ``u(i..j) := x``\ ) destructively replaces each element in the segment \ ``u(i..j)``\  by \ ``x``\ . The value \ ``x``\  is returned. Note: \ ``u``\  is destructively changed so that \ ``u.k := x for k in i..j``\ ; its length remains unchanged.

.. _l4c696e656172416767726567617465-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4c696e656172416767726567617465-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  and S has \ :ref:`Comparable <l436f6d70617261626c65>`\  or S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4c696e656172416767726567617465-736f727421:

.. index::
   pair: LinearAggregate; sort!

:spadfun:`sort!`\: % -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``sort!(u)``\  returns \ ``u``\  with its elements in ascending order.


.. index::
   pair: LinearAggregate; sort!

:spadfun:`sort!`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``sort!(p, u)``\  returns \ ``u``\  with its elements ordered by \ ``p``\ .

.. _l4c696e656172416767726567617465-736f7274:

.. index::
   pair: LinearAggregate; sort

:spadfun:`sort`\: % -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``sort(u)``\  returns an \ ``u``\  with elements in ascending order. Note: \ ``sort(u) = sort(<, u)``\ .


.. index::
   pair: LinearAggregate; sort

:spadfun:`sort`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``sort(p, a)``\  returns a copy of \ ``a``\  sorted using total ordering predicate \ ``p``\ .

.. _l4c696e656172416767726567617465-736f727465643f:

.. index::
   pair: LinearAggregate; sorted?

:spadfun:`sorted?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``sorted?(u)``\  tests if the elements of \ ``u``\  are in ascending order.


.. index::
   pair: LinearAggregate; sorted?

:spadfun:`sorted?`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``sorted?(p, a)``\  tests if \ ``a``\  is sorted according to predicate \ ``p``\ .

.. _l4c696e656172416767726567617465-7377617021:

\ :ref:`swap! <l496e6465786564416767726567617465-7377617021>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S)

.. _l4c696e656172416767726567617465-7472696d:

.. index::
   pair: LinearAggregate; trim

:spadfun:`trim`\: (%, S) -> % if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``trim(u, x)``\  returns a copy of \ ``u``\  with all occurrences of \ ``x``\  deleted from right and left ends. For example, \ ``trim(" abc ", char " ")``\  returns \ ``"abc"``\ .


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

\ :ref:`Collection <l436f6c6c656374696f6e>`\  S 

\ :ref:`Comparable <l436f6d70617261626c65>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  and S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 

\ :ref:`Eltable <l456c7461626c65>`\ (\ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) 

\ :ref:`EltableAggregate <l456c7461626c65416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 

\ :ref:`Evalable <l4576616c61626c65>`\  S if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`Hashable <l4861736861626c65>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S 

\ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S) if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`OrderedSet <l4f726465726564536574>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

