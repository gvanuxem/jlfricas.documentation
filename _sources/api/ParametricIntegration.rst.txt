.. index:: ParametricIntegration

.. _l506172616d6574726963496e746567726174696f6e:

ParametricIntegration(R, F)
===========================

:viewcode:`intpar.spad line 1652 <intpar.spad#L1652>` :editcode:`[edit on github] <intpar.spad#L1652>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* F: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


This package implements general parametric integration. Most work is delegated to other packages.


.. _l506172616d6574726963496e746567726174696f6e-657874656e646564696e74:

.. index::
   pair: ParametricIntegration; extendedint

:spadfun:`extendedint`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  F) -> Record(particular: Union(Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), failed), basis: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F)) 
  \ ``extendedint(f, x, [g1, ..., gn])``\  returns solution of the system \ ``f = dh/dx + c1*g1 + ... + cn*gn``\  and and a basis of the associated homogeneous system \ ``dh/dx + c1*g1 + ... + cn*gn = 0``\ . Solutions are in the field generated by kernels of \ ``f``\  and \ ``g1``\ , ..., \ ``gn``\ .


.. index::
   pair: ParametricIntegration; extendedint

:spadfun:`extendedint`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, \ :ref:`List <l4c697374>`\  F) -> Record(particular: Union(Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), failed), basis: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F)) 
  \ ``extendedint(f, x, [k1, ..., kn], [g1, ..., gn])``\  is like extendedint(\ ``f``\ , [\ ``k1``\ , ..., \ ``kn``\ ], [\ ``g1``\ , ..., \ ``gn``\ ]) but looks for solutions in the field generated by \ ``k1``\ , ..., \ ``kn``\ .


.. index::
   pair: ParametricIntegration; extendedint

:spadfun:`extendedint`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, \ :ref:`List <l4c697374>`\  F) -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``extendedint(x, [k1, ..., kn], [g1, ..., gn])``\  returns a basis of the homogeneous system \ ``dh/dx + c1*g1 + ... + cn*gn = 0``\ . Solutions are in the field generated by \ ``k1``\ , ..., \ ``kn``\ .

.. _l506172616d6574726963496e746567726174696f6e-6c6f67657874696e74:

.. index::
   pair: ParametricIntegration; logextint

:spadfun:`logextint`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, \ :ref:`List <l4c697374>`\  F) -> Record(logands: \ :ref:`List <l4c697374>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``logextint(x, lk, lg)``\  returns [[\ ``u1``\ , ..., um], bas] giving basis of solution of the homogeneous systym \ ``c1*g1 + ... + cn*gn + c_{n+1}u1'/u1 + ... c_{n+m}um'/um = 0``\ 

.. _l506172616d6574726963496e746567726174696f6e-706f6c796c6f675f696e74:

.. index::
   pair: ParametricIntegration; polylog_int

:spadfun:`polylog_int`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Kernel <l4b65726e656c>`\  F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, F) -> Union(Record(ratpart: F, coeff: F, prim: F), failed) 
  \ ``polylog_int(f, x, k0, [k1, ..., kn], g)``\ 


