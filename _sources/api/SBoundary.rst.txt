.. index:: SBoundary

.. _l53426f756e64617279:

SBoundary PT
============

:viewcode:`scene.spad line 3322 <scene.spad#L3322>` :editcode:`[edit on github] <scene.spad#L3322>`

* PT: \ :ref:`SPointCategory <l53506f696e7443617465676f7279>`\ 


SBoundary implements boundaries for use in scene graph This defines the outer extent of the scene, or of an element in the scene, or of some branch in the scene. The difference between this boundary and an \ ``n``\ -dimensional surface, such as IFS, is that boundary must always have a well defined inside and an outside. SBoundary does not necessarily follow the exact outer contours of the shape but just constructs a simple boundary shape where all points of the shape are guaranteed to be inside the boundary. Currently there are the following boundary forms: Simple types: "box"::Symbol which is a \ ``n``\ -dimensional axis-aligned rectangle. "ellipoid"::Symbol which is a \ ``n``\ -dimensional axis-aligned ellipse. Compound types: This is a combination of simple and other compound types such as union or intersection. "union"::Symbol represents union of supplied list "intersection"::Symbol represents intersection of supplied list Null types: "none" is used for a node which does not have a boundary in space, for example, when the boundary of a material node is requested. The uses of SBoundary are: 1) So we know how much to scale a given scene to fit in a given size. 2) So that we know where to terminate arrows going in out out of of the shape. 3) To detect if objects intersect (collision detect), or if one object is contained completely inside another.


.. _l53426f756e64617279-626f78426f756e64617279:

.. index::
   pair: SBoundary; boxBoundary

:spadfun:`boxBoundary`\: (PT, PT) -> % 
  \ ``boxBoundary(c1, c2)``\  constructs a box boundary (\ ``n``\ -dimensional axis-aligned rectangle) with given parameters \ ``c1:``\  \ ``PT``\  holds minimum coordinates \ ``c2:``\  \ ``PT``\  holds maximum coordinates

.. _l53426f756e64617279-636f65726365:

.. index::
   pair: SBoundary; coerce

:spadfun:`coerce`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``coerce(bd)``\  outputs description of \ ``bd``\  as formatted text

.. _l53426f756e64617279-636f6e7461696e73506f696e743f:

.. index::
   pair: SBoundary; containsPoint?

:spadfun:`containsPoint?`\: (%, PT) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``containsPoint?(n, p)``\  returns \ ``true``\  if the point is inside the boundary. \ ``n``\  is the boundary \ ``p``\  is the point

.. _l53426f756e64617279-656c6c69707365426f756e64617279:

.. index::
   pair: SBoundary; ellipseBoundary

:spadfun:`ellipseBoundary`\: (PT, PT) -> % 
  \ ``ellipseBoundary(c1, c2)``\  constructs an ellipse boundary \ ``n``\ -dimensional axis-aligned ellipoid with given parameters \ ``c1:``\  \ ``PT``\  holds centre point \ ``c2:``\  \ ``PT``\  holds extent (radius for each coordinate)

.. _l53426f756e64617279-657874656e64546f506f696e74:

.. index::
   pair: SBoundary; extendToPoint

:spadfun:`extendToPoint`\: (%, PT) -> % 
  \ ``extendToPoint(n, p)``\  creates a boundary that is the union of a boundary and a point. \ ``n``\  is the boundary \ ``p``\  is the point

.. _l53426f756e64617279-67657443656e747265:

.. index::
   pair: SBoundary; getCentre

:spadfun:`getCentre`\: % -> PT 
  \ ``getCentre(n)``\  returns centre coordinate of the boundary. \ ``n:``\  \% is the boundary

.. _l53426f756e64617279-6765744d6178:

.. index::
   pair: SBoundary; getMax

:spadfun:`getMax`\: % -> PT 
  \ ``getMax(n)``\  returns maximum coordinate of the boundary. \ ``n``\  is the boundary

.. _l53426f756e64617279-6765744d696e:

.. index::
   pair: SBoundary; getMin

:spadfun:`getMin`\: % -> PT 
  \ ``getMin(n)``\  returns minimum coordinate of the boundary. \ ``n``\  is the boundary

.. _l53426f756e64617279-696e74657273656374696f6e:

.. index::
   pair: SBoundary; intersection

:spadfun:`intersection`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``intersection(x)``\  constructs a compound boundary from the intersection of \ ``x``\  \ ``x:``\  List \% is supplied list of boundaries to form intersection.

.. _l53426f756e64617279-6973426f783f:

.. index::
   pair: SBoundary; isBox?

:spadfun:`isBox?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``isBox?(n)``\  returns \ ``true``\  if this is a rectangular boundary.

.. _l53426f756e64617279-6973456c6c697073653f:

.. index::
   pair: SBoundary; isEllipse?

:spadfun:`isEllipse?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``isEllipse?(n)``\  returns \ ``true``\  if this is a ellipsoid boundary.

.. _l53426f756e64617279-69734e756c6c3f:

.. index::
   pair: SBoundary; isNull?

:spadfun:`isNull?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``isNull?(n)``\  returns \ ``true``\  if this is a null boundary, that is no boundary

.. _l53426f756e64617279-6c696e65496e74657273656374:

.. index::
   pair: SBoundary; lineIntersect

:spadfun:`lineIntersect`\: (%, PT) -> PT 
  \ ``lineIntersect(n, p)``\  returns the point where a line, from the centre of the boundary to the point \ ``p``\ , intersects with the boundary. \ ``n:``\  \% is the boundary \ ``p:``\  \ ``PT``\  is the point at the end of the line (outside boundary)

.. _l53426f756e64617279-6c696e6b:

.. index::
   pair: SBoundary; link

:spadfun:`link`\: (%, %) -> \ :ref:`List <l4c697374>`\  PT 
  \ ``link(m, n)``\  returns a line which is the shortest distance between the two boundaries. The line is represented by its two endpoints. \ ``m:``\  \% is the first boundary to be linked \ ``n:``\  \% is the second boundary to be linked

.. _l53426f756e64617279-6e756c6c426f756e64617279:

.. index::
   pair: SBoundary; nullBoundary

:spadfun:`nullBoundary`\: () -> % 
  \ ``nullBoundary()``\  constructs a null boundary, for example, when the boundary of a material node is requested.

.. _l53426f756e64617279-73756e696f6e:

.. index::
   pair: SBoundary; sunion

:spadfun:`sunion`\: (%, %) -> % 
  \ ``sunion(x, y)``\  gives the union of two boundaries as a box, that is it gives a box that is external to both. \ ``x:``\  \% is first boundary to be combined \ ``y:``\  \% is second boundary to be combined

.. _l53426f756e64617279-756e696f6e:

.. index::
   pair: SBoundary; union

:spadfun:`union`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``union(x)``\  constructs a compound boundary from the union of \ ``x``\  \ ``x:``\  List \% is supplied list of boundaries to form union


