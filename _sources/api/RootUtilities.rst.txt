.. index:: RootUtilities

.. _l526f6f745574696c6974696573:

RootUtilities(R, F)
===================

:viewcode:`rsimp.spad line 1 <rsimp.spad#L1>` :editcode:`[edit on github] <rsimp.spad#L1>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* F: Join(\ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  R, \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ )


This package implements 'complex_roots'.


.. _l526f6f745574696c6974696573-636f6d706c65785f726f6f7473:

.. index::
   pair: RootUtilities; complex_roots

:spadfun:`complex_roots`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F -> Union(Record(reals: \ :ref:`List <l4c697374>`\  F, complexes: \ :ref:`List <l4c697374>`\  Record(real: F, imag: F)), failed) 
  \ ``complex_roots(p)``\  computes roots of \ ``p``\  in terms of radicals separating real and complex roots. Returns "failed" when unsuccessful.

.. _l526f6f745574696c6974696573-6d795f726f6f7433:

.. index::
   pair: RootUtilities; my_root3

:spadfun:`my_root3`\: F -> F 
  \ ``my_root3(a)``\  should be local but conditional

.. _l526f6f745574696c6974696573-6d795f73717274:

.. index::
   pair: RootUtilities; my_sqrt

:spadfun:`my_sqrt`\: F -> F 
  \ ``my_sqrt(a)``\  should be local but conditional

.. _l526f6f745574696c6974696573-7175617274696332:

.. index::
   pair: RootUtilities; quartic2

:spadfun:`quartic2`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F, F) -> Union(Record(reals: \ :ref:`List <l4c697374>`\  F, complexes: \ :ref:`List <l4c697374>`\  Record(real: F, imag: F)), failed) 
  \ ``quartic2(p, a0)``\  should be local but conditional

.. _l526f6f745574696c6974696573-7261646963616c5f736f6c7665:

.. index::
   pair: RootUtilities; radical_solve

:spadfun:`radical_solve`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F -> Union(\ :ref:`List <l4c697374>`\  F, failed) 
  \ ``radical_solve(p)``\  tries to solve polynomial \ ``p``\  in terms of radicals. Returns "failed" when unsuccessful.


