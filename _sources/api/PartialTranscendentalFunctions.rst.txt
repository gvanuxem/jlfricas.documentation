.. index:: PartialTranscendentalFunctions

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73:

PartialTranscendentalFunctions K
================================

:viewcode:`ptranfn.spad line 1 <ptranfn.spad#L1>` :editcode:`[edit on github] <ptranfn.spad#L1>`

* K: \ :ref:`Type <l54797065>`\ 


This is the description of any package which provides partial functions on a domain belonging to TranscendentalFunctionCategory.


.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61636f7368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acoshIfCan

:spadfun:`acoshIfCan`\: K -> Union(K, failed) 
  \ ``acoshIfCan(z)``\  returns acosh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61636f73496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acosIfCan

:spadfun:`acosIfCan`\: K -> Union(K, failed) 
  \ ``acosIfCan(z)``\  returns acos(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61636f7468496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acothIfCan

:spadfun:`acothIfCan`\: K -> Union(K, failed) 
  \ ``acothIfCan(z)``\  returns acoth(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61636f74496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acotIfCan

:spadfun:`acotIfCan`\: K -> Union(K, failed) 
  \ ``acotIfCan(z)``\  returns acot(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6163736368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acschIfCan

:spadfun:`acschIfCan`\: K -> Union(K, failed) 
  \ ``acschIfCan(z)``\  returns acsch(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61637363496643616e:

.. index::
   pair: PartialTranscendentalFunctions; acscIfCan

:spadfun:`acscIfCan`\: K -> Union(K, failed) 
  \ ``acscIfCan(z)``\  returns acsc(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6173656368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; asechIfCan

:spadfun:`asechIfCan`\: K -> Union(K, failed) 
  \ ``asechIfCan(z)``\  returns asech(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-61736563496643616e:

.. index::
   pair: PartialTranscendentalFunctions; asecIfCan

:spadfun:`asecIfCan`\: K -> Union(K, failed) 
  \ ``asecIfCan(z)``\  returns asec(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6173696e68496643616e:

.. index::
   pair: PartialTranscendentalFunctions; asinhIfCan

:spadfun:`asinhIfCan`\: K -> Union(K, failed) 
  \ ``asinhIfCan(z)``\  returns asinh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6173696e496643616e:

.. index::
   pair: PartialTranscendentalFunctions; asinIfCan

:spadfun:`asinIfCan`\: K -> Union(K, failed) 
  \ ``asinIfCan(z)``\  returns asin(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6174616e68496643616e:

.. index::
   pair: PartialTranscendentalFunctions; atanhIfCan

:spadfun:`atanhIfCan`\: K -> Union(K, failed) 
  \ ``atanhIfCan(z)``\  returns atanh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6174616e496643616e:

.. index::
   pair: PartialTranscendentalFunctions; atanIfCan

:spadfun:`atanIfCan`\: K -> Union(K, failed) 
  \ ``atanIfCan(z)``\  returns atan(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-636f7368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; coshIfCan

:spadfun:`coshIfCan`\: K -> Union(K, failed) 
  \ ``coshIfCan(z)``\  returns cosh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-636f73496643616e:

.. index::
   pair: PartialTranscendentalFunctions; cosIfCan

:spadfun:`cosIfCan`\: K -> Union(K, failed) 
  \ ``cosIfCan(z)``\  returns cos(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-636f7468496643616e:

.. index::
   pair: PartialTranscendentalFunctions; cothIfCan

:spadfun:`cothIfCan`\: K -> Union(K, failed) 
  \ ``cothIfCan(z)``\  returns coth(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-636f74496643616e:

.. index::
   pair: PartialTranscendentalFunctions; cotIfCan

:spadfun:`cotIfCan`\: K -> Union(K, failed) 
  \ ``cotIfCan(z)``\  returns cot(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-63736368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; cschIfCan

:spadfun:`cschIfCan`\: K -> Union(K, failed) 
  \ ``cschIfCan(z)``\  returns csch(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-637363496643616e:

.. index::
   pair: PartialTranscendentalFunctions; cscIfCan

:spadfun:`cscIfCan`\: K -> Union(K, failed) 
  \ ``cscIfCan(z)``\  returns \ ``csc``\ (\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-657870496643616e:

.. index::
   pair: PartialTranscendentalFunctions; expIfCan

:spadfun:`expIfCan`\: K -> Union(K, failed) 
  \ ``expIfCan(z)``\  returns exp(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6c6f67496643616e:

.. index::
   pair: PartialTranscendentalFunctions; logIfCan

:spadfun:`logIfCan`\: K -> Union(K, failed) 
  \ ``logIfCan(z)``\  returns log(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-6e7468526f6f74496643616e:

.. index::
   pair: PartialTranscendentalFunctions; nthRootIfCan

:spadfun:`nthRootIfCan`\: (K, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(K, failed) 
  \ ``nthRootIfCan(z, n)``\  returns the \ ``n``\ th root of \ ``z``\  if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-73656368496643616e:

.. index::
   pair: PartialTranscendentalFunctions; sechIfCan

:spadfun:`sechIfCan`\: K -> Union(K, failed) 
  \ ``sechIfCan(z)``\  returns sech(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-736563496643616e:

.. index::
   pair: PartialTranscendentalFunctions; secIfCan

:spadfun:`secIfCan`\: K -> Union(K, failed) 
  \ ``secIfCan(z)``\  returns sec(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-73696e68496643616e:

.. index::
   pair: PartialTranscendentalFunctions; sinhIfCan

:spadfun:`sinhIfCan`\: K -> Union(K, failed) 
  \ ``sinhIfCan(z)``\  returns sinh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-73696e496643616e:

.. index::
   pair: PartialTranscendentalFunctions; sinIfCan

:spadfun:`sinIfCan`\: K -> Union(K, failed) 
  \ ``sinIfCan(z)``\  returns sin(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-74616e68496643616e:

.. index::
   pair: PartialTranscendentalFunctions; tanhIfCan

:spadfun:`tanhIfCan`\: K -> Union(K, failed) 
  \ ``tanhIfCan(z)``\  returns tanh(\ ``z``\ ) if possible, and "failed" otherwise.

.. _l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73-74616e496643616e:

.. index::
   pair: PartialTranscendentalFunctions; tanIfCan

:spadfun:`tanIfCan`\: K -> Union(K, failed) 
  \ ``tanIfCan(z)``\  returns tan(\ ``z``\ ) if possible, and "failed" otherwise.


