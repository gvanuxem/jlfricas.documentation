.. index:: GeneralPolynomialGcdPackage

.. _l47656e6572616c506f6c796e6f6d69616c4763645061636b616765:

GeneralPolynomialGcdPackage(E, OV, R, P)
========================================

:viewcode:`gpgcd.spad line 1 <gpgcd.spad#L1>` :editcode:`[edit on github] <gpgcd.spad#L1>`

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* OV: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, OV)


This package provides operations for \ ``GCD``\  computations on polynomials


.. _l47656e6572616c506f6c796e6f6d69616c4763645061636b616765-676364506f6c796e6f6d69616c:

.. index::
   pair: GeneralPolynomialGcdPackage; gcdPolynomial

:spadfun:`gcdPolynomial`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P 
  \ ``gcdPolynomial(p, q)``\  returns the \ ``GCD``\  of \ ``p``\  and \ ``q``\ 

.. _l47656e6572616c506f6c796e6f6d69616c4763645061636b616765-72616e646f6d52:

.. index::
   pair: GeneralPolynomialGcdPackage; randomR

:spadfun:`randomR`\: () -> R 
  \ ``randomR()``\  should be local but conditional


