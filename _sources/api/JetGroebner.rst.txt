.. index:: JetGroebner

.. _l4a657447726f65626e6572:

JetGroebner(R, JB, LJV, P, E)
=============================

:viewcode:`jet.spad line 6809 <jet.spad#L6809>` :editcode:`[edit on github] <jet.spad#L6809>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* JB: \ :ref:`JetBundleCategory <l4a657442756e646c6543617465676f7279>`\ 

* LJV: \ :ref:`List <l4c697374>`\  JB

* P: Join(\ :ref:`JetBundleFunctionCategory <l4a657442756e646c6546756e6374696f6e43617465676f7279>`\  JB, \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, \ :ref:`IndexedExponents <l496e64657865644578706f6e656e7473>`\  JB, JB))

* E: \ :ref:`DirectProductCategory <l44697265637450726f6475637443617465676f7279>`\ (# LJV, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )


\ :ref:`JetGroebner <l4a657447726f65626e6572>`\  provides a procedure to compute Groebner bases for arbitrary domains of jet polynomials. Two internal procedures transform to and from \ :ref:`DistributedJetBundlePolynomial <l44697374726962757465644a657442756e646c65506f6c796e6f6d69616c>`\  where the actual computation is done. The argument \ ``LJV``\  contains all jet variables effectively occurring in the polynomials. The ordering is determined by the ordering in \ ``P``\ .


.. _l4a657447726f65626e6572-67726f65626e6572:

.. index::
   pair: JetGroebner; groebner

:spadfun:`groebner`\: \ :ref:`List <l4c697374>`\  P -> \ :ref:`List <l4c697374>`\  P 
  \ ``groebner(lp)``\  computes a Groebner basis for the ideal generated by the polynomials \ ``lp``\ .


