.. index:: HomogeneousAggregate

.. _l486f6d6f67656e656f7573416767726567617465:

HomogeneousAggregate S
======================

:viewcode:`aggcat.spad line 56 <aggcat.spad#L56>` :editcode:`[edit on github] <aggcat.spad#L56>`

* S: \ :ref:`Type <l54797065>`\ 


A homogeneous aggregate is an aggregate of elements all of the same type. In the current system, all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  have a finite number of members. Of course, such a domain may have an infinite number of elements, like, for example \ :ref:`List <l4c697374>`\ . Those domains with attribute \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  allow an element to be modified or updated without changing its overall value.


.. _l486f6d6f67656e656f7573416767726567617465-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-616e793f:

.. index::
   pair: HomogeneousAggregate; any?

:spadfun:`any?`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``any?(p, u)``\  tests if \ ``p(x)``\  is \ ``true``\  for any element \ ``x``\  of \ ``u``\ . Note: for collections, \ ``any?(p, u) = reduce(or, map(p, u), false, true)``\ . However, \ ``any?(p, u)``\  returns as soon as it finds an element for which \ ``p``\  gives \ ``true``\ .

.. _l486f6d6f67656e656f7573416767726567617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-636f756e74:

.. index::
   pair: HomogeneousAggregate; count

:spadfun:`count`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``count(p, u)``\  returns the number of elements \ ``x``\  in \ ``u``\  such that \ ``p(x)``\  is \ ``true``\ . For collections, \ ``count(p, u) = reduce(+, [1 for x in u | p(x)], 0)``\ .


.. index::
   pair: HomogeneousAggregate; count

:spadfun:`count`\: (S, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``count(x, u)``\  returns the number of occurrences of \ ``x``\  in \ ``u``\ . For collections, \ ``count(x, u) = reduce(+, [1 for y in u | x = y], 0)``\ .

.. _l486f6d6f67656e656f7573416767726567617465-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, S, S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)

.. _l486f6d6f67656e656f7573416767726567617465-65766572793f:

.. index::
   pair: HomogeneousAggregate; every?

:spadfun:`every?`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``every?(p, u)``\  tests if \ ``p``\ (\ ``x``\ ) is \ ``true``\  for all elements \ ``x``\  of \ ``u``\ . Note: for collections, \ ``every?(p, u) = reduce(and, map(p, u), true, false)``\ . However, \ ``every?(p, u)``\  returns as soon as it finds an element for which \ ``p``\  gives \ ``false``\ .

.. _l486f6d6f67656e656f7573416767726567617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-6d617021:

.. index::
   pair: HomogeneousAggregate; map!

:spadfun:`map!`\: (S -> S, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``map!(f, u)``\  destructively replaces each element \ ``x``\  of \ ``u``\  by \ ``f(x)``\ .

.. _l486f6d6f67656e656f7573416767726567617465-6d6170:

.. index::
   pair: HomogeneousAggregate; map

:spadfun:`map`\: (S -> S, %) -> % 
  \ ``map(f, u)``\  returns a copy of \ ``u``\  with each element \ ``x``\  replaced by \ ``f``\ (\ ``x``\ ). For collections, \ ``map(f, u) = [f(x) for x in u]``\ .

.. _l486f6d6f67656e656f7573416767726567617465-6d6178:

.. index::
   pair: HomogeneousAggregate; max

:spadfun:`max`\: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``max(u)``\  returns maximal element of \ ``u``\ . Error if \ ``u``\  is empty.


.. index::
   pair: HomogeneousAggregate; max

:spadfun:`max`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``max(p, u)``\  returns maximal element of \ ``u``\  with respect to total ordering predicate \ ``p``\ . Error if \ ``u``\  is empty.

.. _l486f6d6f67656e656f7573416767726567617465-6d656d6265723f:

.. index::
   pair: HomogeneousAggregate; member?

:spadfun:`member?`\: (S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``member?(x, u)``\  tests if \ ``x``\  is a member of \ ``u``\ . For collections, \ ``member?(x, u) = reduce(or, [x=y for y in u], false)``\ . However, \ ``member?(x, u)``\  returns as soon as it finds a member.

.. _l486f6d6f67656e656f7573416767726567617465-6d656d62657273:

.. index::
   pair: HomogeneousAggregate; members

:spadfun:`members`\: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``members(u)``\  returns a list of the consecutive elements of \ ``u``\ . For multisets \ :spadfun:`members`\  gives result with no repetition. See also \ :spadfun:`parts`\ .

.. _l486f6d6f67656e656f7573416767726567617465-6d696e:

.. index::
   pair: HomogeneousAggregate; min

:spadfun:`min`\: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``min(u)``\  returns minimal element of \ ``u``\ . Error if \ ``u``\  is empty.

.. _l486f6d6f67656e656f7573416767726567617465-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-7061727473:

.. index::
   pair: HomogeneousAggregate; parts

:spadfun:`parts`\: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  \ ``parts(u)``\  returns a list of the consecutive elements of \ ``u``\ . For finite collections, \ ``construct(parts(u)) = u``\ .

.. _l486f6d6f67656e656f7573416767726567617465-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l486f6d6f67656e656f7573416767726567617465-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  or S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  S if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S) if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

