.. index:: SplittingTree

.. _l53706c697474696e6754726565:

SplittingTree(V, C)
===================

:viewcode:`newdata.spad line 295 <newdata.spad#L295>` :editcode:`[edit on github] <newdata.spad#L295>`

* V: Join(\ :ref:`SetCategory <l53657443617465676f7279>`\ , \ :ref:`Aggregate <l416767726567617465>`\ )

* C: Join(\ :ref:`SetCategory <l53657443617465676f7279>`\ , \ :ref:`Aggregate <l416767726567617465>`\ )


This domain exports a modest implementation of splitting trees. Splitting trees are needed when the evaluation of some quantity under some hypothesis requires to split the hypothesis into sub-cases. For instance by adding some new hypothesis on one hand and its negation on another hand. The computations are terminated for a splitting tree \ ``a``\  when \ ``status(value(a))``\  is \ ``true``\ . Thus, if for the splitting tree \ ``a``\  the flag \ ``status(value(a))``\  is \ ``true``\ , then \ ``status(value(d))``\  is \ ``true``\  for any subtree \ ``d``\  of \ ``a``\ . This property of splitting trees is called the termination condition. If no vertex in a splitting tree \ ``a``\  is equal to another, \ ``a``\  is said to satisfy the no-duplicates condition. The splitting tree \ ``a``\  will satisfy this condition if nodes are added to \ ``a``\  by means of \ ``splitNodeOf!``\  and if \ ``construct``\  is only used to create the root of \ ``a``\  with no children.


.. _l53706c697474696e6754726565-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l53706c697474696e6754726565-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l53706c697474696e6754726565-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6368696c643f:

\ :ref:`child? <l526563757273697665416767726567617465-6368696c643f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6368696c6472656e:

\ :ref:`children <l526563757273697665416767726567617465-6368696c6472656e>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l53706c697474696e6754726565-636f6e646974696f6e73:

.. index::
   pair: SplittingTree; conditions

:spadfun:`conditions`\: % -> \ :ref:`List <l4c697374>`\  C 
  \ ``conditions(a)``\  returns the list of the conditions of the leaves of a

.. _l53706c697474696e6754726565-636f6e737472756374:

.. index::
   pair: SplittingTree; construct

:spadfun:`construct`\: (V, C, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``construct(v, t, la)``\  creates a splitting tree with value (i.e. root vertex) given by \ ``[v, t]\$S``\  and with \ ``la``\  as children list.


.. index::
   pair: SplittingTree; construct

:spadfun:`construct`\: (V, C, \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % 
  \ ``construct(v, t, ls)``\  creates a splitting tree with value (i.e. root vertex) given by \ ``[v, t]\$S``\  and with children list given by \ ``[[s]\$\% for s in ls]``\ .


.. index::
   pair: SplittingTree; construct

:spadfun:`construct`\: (V, C, V, \ :ref:`List <l4c697374>`\  C) -> % 
  \ ``construct(v1, t, v2, lt)``\  creates a splitting tree with value (i.e. root vertex) given by \ ``[v, t]\$S``\  and with children list given by \ ``[[[v, t]\$S]\$\% for s in ls]``\ .


.. index::
   pair: SplittingTree; construct

:spadfun:`construct`\: \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> % 
  \ ``construct(s)``\  creates a splitting tree with value (i.e. root vertex) given by \ ``s``\  and no children. Thus, if the status of \ ``s``\  is \ ``false``\ , \ ``[s]``\  represents the starting point of the evaluation \ ``value(s)``\  under the hypothesis \ ``condition(s)``\ .

.. _l53706c697474696e6754726565-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6379636c69633f:

\ :ref:`cyclic? <l526563757273697665416767726567617465-6379636c69633f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-64697374616e6365:

\ :ref:`distance <l526563757273697665416767726567617465-64697374616e6365>`\ \: (%, %) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-656c74:

\ :ref:`elt <l526563757273697665416767726567617465-656c74>`\ \: (%, value) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)
  from \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)
  from \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C))


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C))

.. _l53706c697474696e6754726565-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6578747261637453706c697474696e674c656166:

.. index::
   pair: SplittingTree; extractSplittingLeaf

:spadfun:`extractSplittingLeaf`\: % -> Union(%, failed) 
  \ ``extractSplittingLeaf(a)``\  returns the left most leaf (as a tree) whose status is \ ``false``\  if any, else "failed" is returned.

.. _l53706c697474696e6754726565-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l53706c697474696e6754726565-6c6561663f:

\ :ref:`leaf? <l526563757273697665416767726567617465-6c6561663f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6c6561766573:

\ :ref:`leaves <l526563757273697665416767726567617465-6c6561766573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d6170:

\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-6e6f64653f:

\ :ref:`node? <l526563757273697665416767726567617465-6e6f64653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-6e6f64654f663f:

.. index::
   pair: SplittingTree; nodeOf?

:spadfun:`nodeOf?`\: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``nodeOf?(s, a)``\  returns \ ``true``\  iff some node of \ ``a``\  is equal to \ ``s``\ 

.. _l53706c697474696e6754726565-6e6f646573:

\ :ref:`nodes <l526563757273697665416767726567617465-6e6f646573>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-72656d6f766521:

.. index::
   pair: SplittingTree; remove!

:spadfun:`remove!`\: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> % 
  \ ``remove!(s, a)``\  replaces a by remove(\ ``s``\ , a)

.. _l53706c697474696e6754726565-72656d6f7665:

.. index::
   pair: SplittingTree; remove

:spadfun:`remove`\: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %) -> % 
  \ ``remove(s, a)``\  returns the splitting tree obtained from a by removing every sub-tree \ ``b``\  such that \ ``value(b)``\  and \ ``s``\  have the same value, condition and status.

.. _l53706c697474696e6754726565-726573756c74:

.. index::
   pair: SplittingTree; result

:spadfun:`result`\: % -> \ :ref:`List <l4c697374>`\  Record(val: V, tower: C) 
  \ ``result(a)``\  where \ ``ls``\  is the leaves list of \ ``a``\  returns \ ``[[value(s), condition(s)]\$VT for s in ls]``\  if the computations are terminated in \ ``a``\  else an error is produced.

.. _l53706c697474696e6754726565-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-7365746368696c6472656e21:

\ :ref:`setchildren! <l526563757273697665416767726567617465-7365746368696c6472656e21>`\ \: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-736574656c7421:

\ :ref:`setelt! <l526563757273697665416767726567617465-736574656c7421>`\ \: (%, value, \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-73657476616c756521:

\ :ref:`setvalue! <l526563757273697665416767726567617465-73657476616c756521>`\ \: (%, \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

.. _l53706c697474696e6754726565-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l53706c697474696e6754726565-73706c69744e6f64654f6621:

.. index::
   pair: SplittingTree; splitNodeOf!

:spadfun:`splitNodeOf!`\: (%, %, \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) -> % 
  \ ``splitNodeOf!(l, a, ls)``\  returns \ ``a``\  where the children list of \ ``l``\  has been set to \ ``[[s]\$\% for s in ls | not nodeOf?(s, a)]``\ . Thus, if \ ``l``\  is not a node of \ ``a``\ , this latter splitting tree is unchanged.


.. index::
   pair: SplittingTree; splitNodeOf!

:spadfun:`splitNodeOf!`\: (%, %, \ :ref:`List <l4c697374>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), (C, C) -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``splitNodeOf!(l, a, ls, sub?)``\  returns \ ``a``\  where the children list of \ ``l``\  has been set to \ ``[[s]\$\% for s in ls | not subNodeOf?(s, a, sub?)]``\ . Thus, if \ ``l``\  is not a node of \ ``a``\ , this latter splitting tree is unchanged.

.. _l53706c697474696e6754726565-7375624e6f64654f663f:

.. index::
   pair: SplittingTree; subNodeOf?

:spadfun:`subNodeOf?`\: (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), %, (C, C) -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subNodeOf?(s, a, sub?)``\  returns \ ``true``\  iff for some node \ ``n``\  in \ ``a``\  we have \ ``s = n``\  or \ ``status(n)``\  and \ ``subNode?(s, n, sub?)``\ .

.. _l53706c697474696e6754726565-75706461746553746174757321:

.. index::
   pair: SplittingTree; updateStatus!

:spadfun:`updateStatus!`\: % -> % 
  \ ``updateStatus!(a)``\  returns a where the status of the vertices are updated to satisfy the "termination condition".

.. _l53706c697474696e6754726565-76616c7565:

\ :ref:`value <l526563757273697665416767726567617465-76616c7565>`\ \: % -> \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C), \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)) if \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) has \ :ref:`Evalable <l4576616c61626c65>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C)

\ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  \ :ref:`SplittingNode <l53706c697474696e674e6f6465>`\ (V, C) 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

