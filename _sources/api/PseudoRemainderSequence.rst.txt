.. index:: PseudoRemainderSequence

.. _l50736575646f52656d61696e64657253657175656e6365:

PseudoRemainderSequence(R, polR)
================================

:viewcode:`prs.spad line 1 <prs.spad#L1>` :editcode:`[edit on github] <prs.spad#L1>`

* R: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

* polR: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  R


This package contains some functions: \ :ref:`discriminant <l50736575646f52656d61696e64657253657175656e6365-6469736372696d696e616e74>`\ , \ :ref:`resultant <l50736575646f52656d61696e64657253657175656e6365-726573756c74616e74>`\ , \ :ref:`subResultantGcd <l50736575646f52656d61696e64657253657175656e6365-737562526573756c74616e74476364>`\ , \ :ref:`chainSubResultants <l50736575646f52656d61696e64657253657175656e6365-636861696e537562526573756c74616e7473>`\ , \ :ref:`degreeSubResultant <l50736575646f52656d61696e64657253657175656e6365-646567726565537562526573756c74616e74>`\ , \ :ref:`lastSubResultant <l50736575646f52656d61696e64657253657175656e6365-6c617374537562526573756c74616e74>`\ , \ :ref:`resultantEuclidean <l50736575646f52656d61696e64657253657175656e6365-726573756c74616e744575636c696465616e>`\ , \ :ref:`subResultantGcdEuclidean <l50736575646f52656d61696e64657253657175656e6365-737562526573756c74616e744763644575636c696465616e>`\ , \ :ref:`\\ ``semiSubResultantGcdEuclidean1``\\  <l50736575646f52656d61696e64657253657175656e6365-5c20606073656d69537562526573756c74616e744763644575636c696465616e3160605c20>`\ , \ :ref:`\\ ``semiSubResultantGcdEuclidean2``\\  <l50736575646f52656d61696e64657253657175656e6365-5c20606073656d69537562526573756c74616e744763644575636c696465616e3260605c20>`\ , etc. These procedures are coming from improvements of the subresultants algorithm.


.. _l50736575646f52656d61696e64657253657175656e6365-636861696e537562526573756c74616e7473:

.. index::
   pair: PseudoRemainderSequence; chainSubResultants

:spadfun:`chainSubResultants`\: (polR, polR) -> \ :ref:`List <l4c697374>`\  polR 
  \ ``chainSubResultants(P, Q)``\  computes the list of non zero subresultants of \ ``P``\  and \ ``Q``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-646567726565537562526573756c74616e74:

.. index::
   pair: PseudoRemainderSequence; degreeSubResultant

:spadfun:`degreeSubResultant`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> polR 
  \ ``degreeSubResultant(P, Q, d)``\  computes a subresultant of degree \ ``d``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-646567726565537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; degreeSubResultantEuclidean

:spadfun:`degreeSubResultantEuclidean`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(coef1: polR, coef2: polR, subResultant: polR) 
  \ ``degreeSubResultantEuclidean(P, Q, d)``\  returns a subresultant \ ``S_i``\  of degree \ ``d``\  and carries out the equality \ ``coef1*P + coef2*Q = S_i``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-6469736372696d696e616e74:

.. index::
   pair: PseudoRemainderSequence; discriminant

:spadfun:`discriminant`\: polR -> R 
  \ ``discriminant(P)``\  returns the discriminant of \ ``P``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-6469736372696d696e616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; discriminantEuclidean

:spadfun:`discriminantEuclidean`\: polR -> Record(coef1: polR, coef2: polR, discriminant: R) 
  \ ``discriminantEuclidean(P)``\  carries out the equality \ ``coef1 * P + coef2 * D(P) = discriminant(P)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-646976696465:

.. index::
   pair: PseudoRemainderSequence; divide

:spadfun:`divide`\: (polR, polR) -> Record(quotient: polR, remainder: polR) 
  \ ``divide(F, G)``\  computes quotient and rest of the exact euclidean division of \ ``F``\  by \ ``G``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-676364:

.. index::
   pair: PseudoRemainderSequence; gcd

:spadfun:`gcd`\: (polR, polR) -> polR if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``gcd(P, Q)``\  returns the \ ``gcd``\  of \ ``P``\  and \ ``Q``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-696e64696365537562526573756c74616e74:

.. index::
   pair: PseudoRemainderSequence; indiceSubResultant

:spadfun:`indiceSubResultant`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> polR 
  \ ``indiceSubResultant(P, Q, i)``\  returns the subresultant of indice \ ``i``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-696e64696365537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; indiceSubResultantEuclidean

:spadfun:`indiceSubResultantEuclidean`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(coef1: polR, coef2: polR, subResultant: polR) 
  \ ``indiceSubResultant(P, Q, i)``\  returns the subresultant \ ``S_i(P, Q)``\  and carries out the equality \ ``coef1*P + coef2*Q = S_i(P, Q)``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-6c617374537562526573756c74616e74:

.. index::
   pair: PseudoRemainderSequence; lastSubResultant

:spadfun:`lastSubResultant`\: (polR, polR) -> polR 
  \ ``lastSubResultant(P, Q)``\  computes the last non zero subresultant of \ ``P``\  and \ ``Q``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-6c617374537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; lastSubResultantEuclidean

:spadfun:`lastSubResultantEuclidean`\: (polR, polR) -> Record(coef1: polR, coef2: polR, subResultant: polR) 
  \ ``lastSubResultantEuclidean(P, Q)``\  computes the last non zero subresultant \ ``S``\  and carries out the equality \ ``coef1*P + coef2*Q = S``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-4c617a61726451756f7469656e7432:

.. index::
   pair: PseudoRemainderSequence; LazardQuotient2

:spadfun:`LazardQuotient2`\: (polR, R, R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> polR 
  \ ``LazardQuotient2(F, x, y, n)``\  computes \ ``(x^(n-1) * F) exquo y^(n-1)``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-4c617a61726451756f7469656e74:

.. index::
   pair: PseudoRemainderSequence; LazardQuotient

:spadfun:`LazardQuotient`\: (R, R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> R 
  \ ``LazardQuotient(x, y, n)``\  computes \ ``x^n exquo y^(n-1)``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-6e6578745f736f7573526573756c74616e7432:

.. index::
   pair: PseudoRemainderSequence; next_sousResultant2

:spadfun:`next_sousResultant2`\: (polR, polR, polR, R) -> polR 
  \ ``next_sousResultant2(P, Q, Z, s)``\  returns the subresultant \ ``S_{e-1}``\  where \ ``P ~ S_d, Q = S_{d-1}, Z = S_e, s = lc(S_d)``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-726573756c74616e74:

.. index::
   pair: PseudoRemainderSequence; resultant

:spadfun:`resultant`\: (polR, polR) -> R 
  \ ``resultant(P, Q)``\  returns the resultant of \ ``P``\  and \ ``Q``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-726573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; resultantEuclidean

:spadfun:`resultantEuclidean`\: (polR, polR) -> Record(coef1: polR, coef2: polR, resultant: R) 
  \ ``resultantEuclidean(P, Q)``\  carries out the equality \ ``coef1*P + coef2*Q = resultant(P, Q)``\ 

.. _l50736575646f52656d61696e64657253657175656e6365-726573756c74616e74526564756974:

.. index::
   pair: PseudoRemainderSequence; resultantReduit

:spadfun:`resultantReduit`\: (polR, polR) -> R if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``resultantReduit(P,Q)``\  returns the "reduce resultant" of \ ``P``\  and \ ``Q``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-726573756c74616e745265647569744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; resultantReduitEuclidean

:spadfun:`resultantReduitEuclidean`\: (polR, polR) -> Record(coef1: polR, coef2: polR, resultantReduit: R) if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``resultantReduitEuclidean(P, Q)``\  returns the "reduce resultant" and carries out the equality \ ``coef1*P + coef2*Q = resultantReduit(P, Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-736368656d61:

.. index::
   pair: PseudoRemainderSequence; schema

:spadfun:`schema`\: (polR, polR) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``schema(P, Q)``\  returns the list of degrees of non zero subresultants of \ ``P``\  and \ ``Q``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69446567726565537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; semiDegreeSubResultantEuclidean

:spadfun:`semiDegreeSubResultantEuclidean`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(coef2: polR, subResultant: polR) 
  \ ``semiDegreeSubResultantEuclidean(P, Q, d)``\  returns a subresultant \ ``S_i``\  of degree \ ``d``\  and carries out the equality \ ``... P + coef2*Q = S_i``\ . Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d694469736372696d696e616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; semiDiscriminantEuclidean

:spadfun:`semiDiscriminantEuclidean`\: polR -> Record(coef2: polR, discriminant: R) 
  \ ``discriminantEuclidean(P)``\  carries out the equality \ ``... P + coef2 * D(P) = discriminant(P)``\ . Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69496e64696365537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; semiIndiceSubResultantEuclidean

:spadfun:`semiIndiceSubResultantEuclidean`\: (polR, polR, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(coef2: polR, subResultant: polR) 
  \ ``semiIndiceSubResultantEuclidean(P, Q, i)``\  returns the subresultant \ ``S_i(P, Q)``\  and carries out the equality \ ``... P + coef2*Q = S_i(P, Q)``\  Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d694c617374537562526573756c74616e744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; semiLastSubResultantEuclidean

:spadfun:`semiLastSubResultantEuclidean`\: (polR, polR) -> Record(coef2: polR, subResultant: polR) 
  \ ``semiLastSubResultantEuclidean(P, Q)``\  computes the last non zero subresultant \ ``S``\  and carries out the equality \ ``... P + coef2*Q = S``\ . Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69526573756c74616e744575636c696465616e31:

.. index::
   pair: PseudoRemainderSequence; semiResultantEuclidean1

:spadfun:`semiResultantEuclidean1`\: (polR, polR) -> Record(coef1: polR, resultant: R) 
  \ ``semiResultantEuclidean1(P, Q)``\  carries out the equality \ ``coef1.P + ... Q = resultant(P, Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69526573756c74616e744575636c696465616e32:

.. index::
   pair: PseudoRemainderSequence; semiResultantEuclidean2

:spadfun:`semiResultantEuclidean2`\: (polR, polR) -> Record(coef2: polR, resultant: R) 
  \ ``semiResultantEuclidean2(P, Q)``\  carries out the equality \ ``... P + coef2*Q = resultant(P, Q)``\ . Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69526573756c74616e745265647569744575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; semiResultantReduitEuclidean

:spadfun:`semiResultantReduitEuclidean`\: (polR, polR) -> Record(coef2: polR, resultantReduit: R) if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``semiResultantReduitEuclidean(P, Q)``\  returns the "reduce resultant" and carries out the equality \ ``... P + coef2*Q = resultantReduit(P, Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69537562526573756c74616e744763644575636c696465616e31:

.. index::
   pair: PseudoRemainderSequence; semiSubResultantGcdEuclidean1

:spadfun:`semiSubResultantGcdEuclidean1`\: (polR, polR) -> Record(coef1: polR, gcd: polR) 
  \ ``semiSubResultantGcdEuclidean1(P, Q)``\  carries out the equality \ ``coef1*P + ... Q = +/- S_i(P, Q)``\  where the degree (not the indice) of the subresultant \ ``S_i(P, Q)``\  is as small as possible.

.. _l50736575646f52656d61696e64657253657175656e6365-73656d69537562526573756c74616e744763644575636c696465616e32:

.. index::
   pair: PseudoRemainderSequence; semiSubResultantGcdEuclidean2

:spadfun:`semiSubResultantGcdEuclidean2`\: (polR, polR) -> Record(coef2: polR, gcd: polR) 
  \ ``semiSubResultantGcdEuclidean2(P, Q)``\  carries out the equality \ ``... P + coef2*Q = +/- S_i(P, Q)``\  where the degree (not the indice) of the subresultant \ ``S_i(P, Q)``\  is as small as possible. Warning: \ ``degree(P) >= degree(Q)``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-737562526573756c74616e74476364:

.. index::
   pair: PseudoRemainderSequence; subResultantGcd

:spadfun:`subResultantGcd`\: (polR, polR) -> polR 
  \ ``subResultantGcd(P, Q)``\  returns the \ ``gcd``\  of two primitive polynomials \ ``P``\  and \ ``Q``\ .

.. _l50736575646f52656d61696e64657253657175656e6365-737562526573756c74616e744763644575636c696465616e:

.. index::
   pair: PseudoRemainderSequence; subResultantGcdEuclidean

:spadfun:`subResultantGcdEuclidean`\: (polR, polR) -> Record(coef1: polR, coef2: polR, gcd: polR) 
  \ ``subResultantGcdEuclidean(P, Q)``\  carries out the equality \ ``coef1*P + coef2*Q = +/- S_i(P, Q)``\  where the degree (not the indice) of the subresultant \ ``S_i(P, Q)``\  is as small as possible.


