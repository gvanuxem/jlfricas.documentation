.. index:: StreamExponentialSeriesOperations

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73:

StreamExponentialSeriesOperations Coef
======================================

:viewcode:`expps.spad line 22 <expps.spad#L22>` :editcode:`[edit on github] <expps.spad#L22>`

* Coef: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


StreamExponentialSeriesOperations implements arithmetic of exponential power series, where a power series is represented by a stream of its coefficients.


.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-2a:

.. index::
   pair: StreamExponentialSeriesOperations; *

:spadfun:`\*`\: (\ :ref:`Stream <l53747265616d>`\  Coef, \ :ref:`Stream <l53747265616d>`\  Coef) -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``a * b``\  returns the power series (Cauchy) product of \ ``a``\  and \ ``b:``\  \ ``[a0, a1, ...] * [b0, b1, ...] = [c0, c1, ...]``\  where \ ``ck = sum(i + j = k, binomial(k, i) * ai * bj)``\ .

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-6465726976:

.. index::
   pair: StreamExponentialSeriesOperations; deriv

:spadfun:`deriv`\: \ :ref:`Stream <l53747265616d>`\  Coef -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``deriv(f)``\  is the derivative, which simply coincides with left shift

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-65787030:

.. index::
   pair: StreamExponentialSeriesOperations; exp0

:spadfun:`exp0`\: \ :ref:`Stream <l53747265616d>`\  Coef -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``exp0(f)``\  returns the exponential of the power series represented by cons(0, \ ``f``\ ), i.e. assuming zero constant term and therefore transcendentality is not involved.

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-696e74656772617465:

.. index::
   pair: StreamExponentialSeriesOperations; integrate

:spadfun:`integrate`\: (Coef, \ :ref:`Stream <l53747265616d>`\  Coef) -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``integrate(c, f)``\  integrates with constant term \ ``c``\ , this is simply the right shift

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-6c617a79496e74656772617465:

.. index::
   pair: StreamExponentialSeriesOperations; lazyIntegrate

:spadfun:`lazyIntegrate`\: (Coef, () -> \ :ref:`Stream <l53747265616d>`\  Coef) -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``lazyIntegrate(c, f)``\  integrates with constant term \ ``c``\ , this is simply the right shift

.. _l53747265616d4578706f6e656e7469616c5365726965734f7065726174696f6e73-6c6f6731:

.. index::
   pair: StreamExponentialSeriesOperations; log1

:spadfun:`log1`\: \ :ref:`Stream <l53747265616d>`\  Coef -> \ :ref:`Stream <l53747265616d>`\  Coef 
  \ ``log1(f)``\  returns the logarithm of the power series represented by cons(1, \ ``f``\ ), i.e. assuming that the constant term is 1 and therefore transcendentality is not involved.


