.. index:: Permutation

.. _l5065726d75746174696f6e:

Permutation S
=============

:viewcode:`perm.spad line 43 <perm.spad#L43>` :editcode:`[edit on github] <perm.spad#L43>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


Permutation(\ ``S``\ ) implements the group of all bijections on a set \ ``S``\ , which move only a finite number of points. A permutation is considered as a map from \ ``S``\  into \ ``S``\ . In particular multiplication is defined as composition of maps: \ *pi1 * pi2 = pi1 o pi2*\ . The internal representation of permutations are two lists of equal length representing preimages and images.


.. _l5065726d75746174696f6e-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e-2f:

\ :ref:`/ <l47726f7570-2f>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e-3c:

\ :ref:`< <l5065726d75746174696f6e43617465676f7279-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l5065726d75746174696f6e-5e:

\ :ref:`^ <l47726f7570-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`Group <l47726f7570>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: Permutation; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> % 
  \ ``coerce(lls)``\  coerces a list of cycles \ *lls*\  to a permutation, each cycle being a list with no repetitions, is coerced to the permutation, which maps \ *ls.i*\  to \ *ls.i+1*\ , indices modulo the length of the list, then these permutations are multiplied. Error: if repetitions occur in one cycle.


.. index::
   pair: Permutation; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  S -> % 
  \ ``coerce(ls)``\  coerces a cycle \ *ls*\ , i.e. a list with not repetitions to a permutation, which maps \ *ls.i*\  to \ *ls.i+1*\ , indices modulo the length of the list. Error: if repetitions occur.

.. _l5065726d75746174696f6e-636f65726365496d61676573:

.. index::
   pair: Permutation; coerceImages

:spadfun:`coerceImages`\: \ :ref:`List <l4c697374>`\  S -> % if S has \ :ref:`Finite <l46696e697465>`\  or S has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``coerceImages(ls)``\  coerces the list \ *ls*\  to a permutation whose image is given by \ *ls*\  and the preimage is fixed to be \ *[1, ..., n]*\ . Note: {coerceImages(\ ``ls``\ )=coercePreimagesImages([1, ..., \ ``n``\ ], \ ``ls``\ )}. We assume that both preimage and image do not contain repetitions.

.. _l5065726d75746174696f6e-636f657263654c6973744f665061697273:

.. index::
   pair: Permutation; coerceListOfPairs

:spadfun:`coerceListOfPairs`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> % 
  \ ``coerceListOfPairs(lls)``\  coerces a list of pairs \ *lls*\  to a permutation. Error: if not consistent, i.e. the set of the first elements coincides with the set of second elements. coerce(\ ``p``\ ) generates output of the permutation \ ``p``\  with domain OutputForm.

.. _l5065726d75746174696f6e-636f65726365507265696d61676573496d61676573:

.. index::
   pair: Permutation; coercePreimagesImages

:spadfun:`coercePreimagesImages`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> % 
  \ ``coercePreimagesImages(lls)``\  coerces the representation \ *lls*\  of a permutation as a list of preimages and images to a permutation. We assume that both preimage and image do not contain repetitions.

.. _l5065726d75746174696f6e-636f6d6d757461746f72:

\ :ref:`commutator <l47726f7570-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e-636f6e6a7567617465:

\ :ref:`conjugate <l47726f7570-636f6e6a7567617465>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e-6379636c65:

\ :ref:`cycle <l5065726d75746174696f6e43617465676f7279-6379636c65>`\ \: \ :ref:`List <l4c697374>`\  S -> % 
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-6379636c65506172746974696f6e:

.. index::
   pair: Permutation; cyclePartition

:spadfun:`cyclePartition`\: % -> \ :ref:`Partition <l506172746974696f6e>`\  
  \ ``cyclePartition(p)``\  returns the cycle structure of a permutation \ ``p``\  including cycles of length 1 only if \ ``S``\  is finite.

.. _l5065726d75746174696f6e-6379636c6573:

\ :ref:`cycles <l5065726d75746174696f6e43617465676f7279-6379636c6573>`\ \: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> % 
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-646567726565:

.. index::
   pair: Permutation; degree

:spadfun:`degree`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``degree(p)``\  returns the number of points moved by the permutation \ ``p``\ .

.. _l5065726d75746174696f6e-656c74:

\ :ref:`elt <l5065726d75746174696f6e43617465676f7279-656c74>`\ \: (%, S) -> S 
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-6576616c:

\ :ref:`eval <l5065726d75746174696f6e43617465676f7279-6576616c>`\ \: (%, S) -> S 
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-6576656e3f:

.. index::
   pair: Permutation; even?

:spadfun:`even?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``even?(p)``\  returns \ ``true``\  if and only if \ ``p``\  is an even permutation, i.e. \ *sign(p)*\  is 1.

.. _l5065726d75746174696f6e-6669786564506f696e7473:

.. index::
   pair: Permutation; fixedPoints

:spadfun:`fixedPoints`\: % -> \ :ref:`Set <l536574>`\  S if S has \ :ref:`Finite <l46696e697465>`\ 
  \ ``fixedPoints(p)``\  returns the points fixed by the permutation \ ``p``\ .

.. _l5065726d75746174696f6e-696e76:

\ :ref:`inv <l47726f7570-696e76>`\ \: % -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l5065726d75746174696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5065726d75746174696f6e-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-6c697374526570726573656e746174696f6e:

.. index::
   pair: Permutation; listRepresentation

:spadfun:`listRepresentation`\: % -> Record(preimage: \ :ref:`List <l4c697374>`\  S, image: \ :ref:`List <l4c697374>`\  S) 
  \ ``listRepresentation(p)``\  produces a representation \ *rep*\  of the permutation \ ``p``\  as a list of preimages and images, \ ``i``\ .\ ``e``\  \ ``p``\  maps \ *(rep.preimage).k*\  to \ *(rep.image).k*\  for all indices \ ``k``\ . Elements of \ ``S``\  not in \ *(rep.preimage).k*\  are fixed points, and these are the only fixed points of the permutation.

.. _l5065726d75746174696f6e-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l5065726d75746174696f6e-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l5065726d75746174696f6e-6d6f766564506f696e7473:

.. index::
   pair: Permutation; movedPoints

:spadfun:`movedPoints`\: % -> \ :ref:`Set <l536574>`\  S 
  \ ``movedPoints(p)``\  returns the set of points moved by the permutation \ ``p``\ .

.. _l5065726d75746174696f6e-6e756d6265724f664379636c6573:

.. index::
   pair: Permutation; numberOfCycles

:spadfun:`numberOfCycles`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``numberOfCycles(p)``\  returns the number of non-trivial cycles of the permutation \ ``p``\ .

.. _l5065726d75746174696f6e-6f64643f:

.. index::
   pair: Permutation; odd?

:spadfun:`odd?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``odd?(p)``\  returns \ ``true``\  if and only if \ ``p``\  is an odd permutation i.e. \ *sign(p)*\  is \ *-1*\ .

.. _l5065726d75746174696f6e-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-6f72626974:

\ :ref:`orbit <l5065726d75746174696f6e43617465676f7279-6f72626974>`\ \: (%, S) -> \ :ref:`Set <l536574>`\  S 
  from \ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S

.. _l5065726d75746174696f6e-6f72646572:

.. index::
   pair: Permutation; order

:spadfun:`order`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``order(p)``\  returns the order of a permutation \ ``p``\  as a group element.

.. _l5065726d75746174696f6e-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l5065726d75746174696f6e-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l5065726d75746174696f6e-7369676e:

.. index::
   pair: Permutation; sign

:spadfun:`sign`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``sign(p)``\  returns the signum of the permutation \ ``p``\ , \ ``+1``\  or \ ``-1``\ .

.. _l5065726d75746174696f6e-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l5065726d75746174696f6e-736f7274:

.. index::
   pair: Permutation; sort

:spadfun:`sort`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  % 
  \ ``sort(lp)``\  sorts a list of permutations \ *lp*\  according to cycle structure first according to length of cycles, second, if \ ``S``\  has \ :ref:`Finite <l46696e697465>`\  or \ ``S``\  has \ :ref:`OrderedSet <l4f726465726564536574>`\  according to lexicographical order of entries in cycles of equal length.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`Group <l47726f7570>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  or S has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`PermutationCategory <l5065726d75746174696f6e43617465676f7279>`\  S 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

