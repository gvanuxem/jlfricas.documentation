.. index:: MultivariateSquareFree

.. _l4d756c74697661726961746553717561726546726565:

MultivariateSquareFree(E, OV, R, P)
===================================

:viewcode:`multsqfr.spad line 1 <multsqfr.spad#L1>` :editcode:`[edit on github] <multsqfr.spad#L1>`

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* OV: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, OV)


Author : \ ``P``\ .Gianni This package provides the functions for the computation of the square free decomposition of a multivariate polynomial. It uses modular reduction and the package \ ``MultivariateLifting``\  for the "multivariate" lifting.


.. _l4d756c74697661726961746553717561726546726565-636865636b:

.. index::
   pair: MultivariateSquareFree; check

:spadfun:`check`\: (\ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``check should``\  be local

.. _l4d756c74697661726961746553717561726546726565-636f656643686f6f7365:

.. index::
   pair: MultivariateSquareFree; coefChoose

:spadfun:`coefChoose`\: (\ :ref:`Integer <l496e7465676572>`\ , P, \ :ref:`List <l4c697374>`\  Record(factor: P, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> P 
  \ ``coefChoose should``\  be local

.. _l4d756c74697661726961746553717561726546726565-636f6d7064656764:

.. index::
   pair: MultivariateSquareFree; compdegd

:spadfun:`compdegd`\: \ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``compdegd should``\  be local

.. _l4d756c74697661726961746553717561726546726565-636f6e736e6577706f6c:

.. index::
   pair: MultivariateSquareFree; consnewpol

:spadfun:`consnewpol`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`Integer <l496e7465676572>`\ ) -> Record(pol: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, polval: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R) 
  \ ``consnewpol should``\  be local

.. _l4d756c74697661726961746553717561726546726565-696e7443686f6f7365:

.. index::
   pair: MultivariateSquareFree; intChoose

:spadfun:`intChoose`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R) -> Record(upol: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, Lval: \ :ref:`List <l4c697374>`\  R, Lfact: \ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), ctpol: R) 
  \ ``intChoose should``\  be local

.. _l4d756c74697661726961746553717561726546726565-6c696674:

.. index::
   pair: MultivariateSquareFree; lift

:spadfun:`lift`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  R, R) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, failed) 
  \ ``lift should``\  be local

.. _l4d756c74697661726961746553717561726546726565-6d79446567726565:

.. index::
   pair: MultivariateSquareFree; myDegree

:spadfun:`myDegree`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``myDegree should``\  be local

.. _l4d756c74697661726961746553717561726546726565-6e6f726d446572697632:

.. index::
   pair: MultivariateSquareFree; normDeriv2

:spadfun:`normDeriv2`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  \ ``normDeriv2 should``\  be local

.. _l4d756c74697661726961746553717561726546726565-6e737166726565:

.. index::
   pair: MultivariateSquareFree; nsqfree

:spadfun:`nsqfree`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R) -> Record(unitPart: P, suPart: \ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``nsqfree should``\  be local

.. _l4d756c74697661726961746553717561726546726565-73717561726546726565:

.. index::
   pair: MultivariateSquareFree; squareFree

:spadfun:`squareFree`\: P -> \ :ref:`Factored <l466163746f726564>`\  P 
  \ ``squareFree(p)``\  computes the square free decomposition of a multivariate polynomial \ ``p``\ .


.. index::
   pair: MultivariateSquareFree; squareFree

:spadfun:`squareFree`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P 
  \ ``squareFree(p)``\  computes the square free decomposition of a multivariate polynomial \ ``p``\  presented as a univariate polynomial with multivariate coefficients.

.. _l4d756c74697661726961746553717561726546726565-756e697663617365:

.. index::
   pair: MultivariateSquareFree; univcase

:spadfun:`univcase`\: (P, OV) -> \ :ref:`Factored <l466163746f726564>`\  P 
  \ ``univcase should``\  be local


