.. index:: FreeMonoid

.. _l467265654d6f6e6f6964:

FreeMonoid S
============

:viewcode:`free.spad line 110 <free.spad#L110>` :editcode:`[edit on github] <free.spad#L110>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


The free monoid on a set \ ``S``\  is the monoid of finite products of the form \ ``reduce(*, [si ^ ni])``\  where the \ ``si``\ \ ``'s``\  are in \ ``S``\ , and the \ ``ni``\ \ ``'s``\  are nonnegative integers. The multiplication is not commutative. When \ ``S``\  is an OrderedSet, then FreeMonoid(\ ``S``\ ) has order: for two elements \ ``x``\  and \ ``y``\  the relation \ ``x < y``\  holds if either \ ``length(x) < length(y)``\  holds or if these lengths are equal and if \ ``x``\  is smaller than \ ``y``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the lexicographical ordering induced by \ ``S``\ .


.. _l467265654d6f6e6f6964-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


.. index::
   pair: FreeMonoid; *

:spadfun:`\*`\: (%, S) -> % 
  \ ``x * s``\  returns the product of \ ``x``\  by \ ``s``\  on the right.


.. index::
   pair: FreeMonoid; *

:spadfun:`\*`\: (S, %) -> % 
  \ ``s * x``\  returns the product of \ ``x``\  by \ ``s``\  on the left.

.. _l467265654d6f6e6f6964-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d6f6e6f6964-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d6f6e6f6964-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d6f6e6f6964-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d6f6e6f6964-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l467265654d6f6e6f6964-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


.. index::
   pair: FreeMonoid; ^

:spadfun:`^`\: (S, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``s ^ n``\  returns the product of \ ``s``\  by itself \ ``n``\  times.

.. _l467265654d6f6e6f6964-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d6f6e6f6964-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: S -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  S

.. _l467265654d6f6e6f6964-646976696465:

.. index::
   pair: FreeMonoid; divide

:spadfun:`divide`\: (%, %) -> Union(Record(lm: %, rm: %), failed) 
  \ ``divide(x, y)``\  returns the left and right exact quotients of \ ``x``\  by \ ``y``\ , i.e. \ ``[l, r]``\  such that \ ``x = l * y * r``\ , "failed" if \ ``x``\  is not of the form \ ``l * y * r``\ .

.. _l467265654d6f6e6f6964-666163746f7273:

.. index::
   pair: FreeMonoid; factors

:spadfun:`factors`\: % -> \ :ref:`List <l4c697374>`\  Record(gen: S, exp: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``factors(a1\^e1, ..., an\^en)``\  returns \ ``[[a1, e1], ..., [an, en]]``\ .

.. _l467265654d6f6e6f6964-6669727374:

.. index::
   pair: FreeMonoid; first

:spadfun:`first`\: % -> S 
  \ ``first(x)``\  returns the first letter of \ ``x``\ .

.. _l467265654d6f6e6f6964-68636c66:

.. index::
   pair: FreeMonoid; hclf

:spadfun:`hclf`\: (%, %) -> % 
  \ ``hclf(x, y)``\  returns the highest common left factor of \ ``x``\  and \ ``y``\ , i.e. the largest \ ``d``\  such that \ ``x = d a``\  and \ ``y = d b``\ .

.. _l467265654d6f6e6f6964-68637266:

.. index::
   pair: FreeMonoid; hcrf

:spadfun:`hcrf`\: (%, %) -> % 
  \ ``hcrf(x, y)``\  returns the highest common right factor of \ ``x``\  and \ ``y``\ , i.e. the largest \ ``d``\  such that \ ``x = a d``\  and \ ``y = b d``\ .

.. _l467265654d6f6e6f6964-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l467265654d6f6e6f6964-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l467265654d6f6e6f6964-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-6c656e677468:

.. index::
   pair: FreeMonoid; length

:spadfun:`length`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``length(x)``\  returns the length of \ ``x``\ .

.. _l467265654d6f6e6f6964-6c657869636f:

.. index::
   pair: FreeMonoid; lexico

:spadfun:`lexico`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``lexico(x, y)``\  returns \ ``true``\  iff \ ``x``\  is smaller than \ ``y``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the pure lexicographical ordering induced by \ ``S``\ .

.. _l467265654d6f6e6f6964-6c71756f:

.. index::
   pair: FreeMonoid; lquo

:spadfun:`lquo`\: (%, %) -> Union(%, failed) 
  \ ``lquo(x, y)``\  returns the exact left quotient of \ ``x``\  by \ ``y``\  i.e. \ ``q``\  such that \ ``x = y * q``\ , "failed" if \ ``x``\  is not of the form \ ``y * q``\ .


.. index::
   pair: FreeMonoid; lquo

:spadfun:`lquo`\: (%, S) -> Union(%, failed) 
  \ ``lquo(x, s)``\  returns the exact left quotient of \ ``x``\  by \ ``s``\ .

.. _l467265654d6f6e6f6964-6d61704578706f6e:

.. index::
   pair: FreeMonoid; mapExpon

:spadfun:`mapExpon`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  \ ``mapExpon(f, a1\^e1 ... an\^en)``\  returns \ ``a1\^f(e1) ... an\^f(en)``\ .

.. _l467265654d6f6e6f6964-6d617047656e:

.. index::
   pair: FreeMonoid; mapGen

:spadfun:`mapGen`\: (S -> S, %) -> % 
  \ ``mapGen(f, a1\^e1 ... an\^en)``\  returns \ ``f(a1)\^e1 ... f(an)\^en``\ .

.. _l467265654d6f6e6f6964-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l467265654d6f6e6f6964-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l467265654d6f6e6f6964-6d6972726f72:

.. index::
   pair: FreeMonoid; mirror

:spadfun:`mirror`\: % -> % 
  \ ``mirror(x)``\  returns the reversed word of \ ``x``\ .

.. _l467265654d6f6e6f6964-6e74684578706f6e:

.. index::
   pair: FreeMonoid; nthExpon

:spadfun:`nthExpon`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``nthExpon(x, n)``\  returns the exponent of the n^th monomial of \ ``x``\ .

.. _l467265654d6f6e6f6964-6e7468466163746f72:

.. index::
   pair: FreeMonoid; nthFactor

:spadfun:`nthFactor`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> S 
  \ ``nthFactor(x, n)``\  returns the factor of the n^th monomial of \ ``x``\ .

.. _l467265654d6f6e6f6964-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-6f7665726c6170:

.. index::
   pair: FreeMonoid; overlap

:spadfun:`overlap`\: (%, %) -> Record(lm: %, mm: %, rm: %) 
  \ ``overlap(x, y)``\  returns \ ``[l, m, r]``\  such that \ ``x = l * m``\ , \ ``y = m * r``\  and \ ``l``\  and \ ``r``\  have no overlap, i.e. \ ``overlap(l, r) = [l, 1, r]``\ .

.. _l467265654d6f6e6f6964-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-72657374:

.. index::
   pair: FreeMonoid; rest

:spadfun:`rest`\: % -> % 
  \ ``rest(x)``\  returns \ ``x``\  except the first letter.

.. _l467265654d6f6e6f6964-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> S 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S

.. _l467265654d6f6e6f6964-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(S, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S

.. _l467265654d6f6e6f6964-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l467265654d6f6e6f6964-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-7271756f:

.. index::
   pair: FreeMonoid; rquo

:spadfun:`rquo`\: (%, %) -> Union(%, failed) 
  \ ``rquo(x, y)``\  returns the exact right quotient of \ ``x``\  by \ ``y``\  i.e. \ ``q``\  such that \ ``x = q * y``\ , "failed" if \ ``x``\  is not of the form \ ``q * y``\ .


.. index::
   pair: FreeMonoid; rquo

:spadfun:`rquo`\: (%, S) -> Union(%, failed) 
  \ ``rquo(x, s)``\  returns the exact right quotient of \ ``x``\  by \ ``s``\ .

.. _l467265654d6f6e6f6964-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l467265654d6f6e6f6964-73697a65:

.. index::
   pair: FreeMonoid; size

:spadfun:`size`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``size(x)``\  returns the number of monomials in \ ``x``\ .

.. _l467265654d6f6e6f6964-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l467265654d6f6e6f6964-7661724c697374:

.. index::
   pair: FreeMonoid; varList

:spadfun:`varList`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``varList(x)``\  returns the list of variables of \ ``x``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  S 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`OrderedSet <l4f726465726564536574>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

