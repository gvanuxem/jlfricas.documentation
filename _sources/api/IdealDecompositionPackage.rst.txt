.. index:: IdealDecompositionPackage

.. _l496465616c4465636f6d706f736974696f6e5061636b616765:

IdealDecompositionPackage vl
============================

:viewcode:`idecomp.spad line 1 <idecomp.spad#L1>` :editcode:`[edit on github] <idecomp.spad#L1>`

* vl: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


This package provides functions for the primary decomposition of polynomial ideals over the rational numbers. The ideals are members of the \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\  domain, and the polynomial generators are required to be from the \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\  domain.


.. _l496465616c4465636f6d706f736974696f6e5061636b616765-636f6e7472616374:

.. index::
   pair: IdealDecompositionPackage; contract

:spadfun:`contract`\: (\ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )), \ :ref:`List <l4c697374>`\  \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl) -> \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) 
  \ ``contract(I, lvar)``\  contracts the ideal \ ``I``\  to the polynomial ring \ ``F[lvar]``\ .

.. _l496465616c4465636f6d706f736974696f6e5061636b616765-7072696d6172794465636f6d70:

.. index::
   pair: IdealDecompositionPackage; primaryDecomp

:spadfun:`primaryDecomp`\: \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> \ :ref:`List <l4c697374>`\  \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) 
  \ ``primaryDecomp(I)``\  returns a list of primary ideals such that their intersection is the ideal \ ``I``\ .

.. _l496465616c4465636f6d706f736974696f6e5061636b616765-7072696d653f:

.. index::
   pair: IdealDecompositionPackage; prime?

:spadfun:`prime?`\: \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``prime?(I)``\  tests if the ideal \ ``I``\  is prime.

.. _l496465616c4465636f6d706f736974696f6e5061636b616765-7261646963616c:

.. index::
   pair: IdealDecompositionPackage; radical

:spadfun:`radical`\: \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) 
  \ ``radical(I)``\  returns the radical of the ideal \ ``I``\ .

.. _l496465616c4465636f6d706f736974696f6e5061636b616765-7a65726f44696d5072696d6172793f:

.. index::
   pair: IdealDecompositionPackage; zeroDimPrimary?

:spadfun:`zeroDimPrimary?`\: \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``zeroDimPrimary?(I)``\  tests if the ideal \ ``I``\  is 0-dimensional primary.

.. _l496465616c4465636f6d706f736974696f6e5061636b616765-7a65726f44696d5072696d653f:

.. index::
   pair: IdealDecompositionPackage; zeroDimPrime?

:spadfun:`zeroDimPrime?`\: \ :ref:`PolynomialIdeal <l506f6c796e6f6d69616c496465616c>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl, \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ (vl, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``zeroDimPrime?(I)``\  tests if the ideal \ ``I``\  is a 0-dimensional prime.


