.. index:: LinearDependence

.. _l4c696e656172446570656e64656e6365:

LinearDependence(S, R)
======================

:viewcode:`lindep.spad line 1 <lindep.spad#L1>` :editcode:`[edit on github] <lindep.spad#L1>`

* S: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

* R: \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  S


Test for linear dependence.


.. _l4c696e656172446570656e64656e6365-6c696e656172446570656e64656e6365:

.. index::
   pair: LinearDependence; linearDependence

:spadfun:`linearDependence`\: \ :ref:`Vector <l566563746f72>`\  R -> Union(\ :ref:`Vector <l566563746f72>`\  S, failed) 
  \ ``linearDependence([v1, ..., vn])``\  returns \ ``[c1, ..., cn]``\  if \ ``c1*v1 + ... + cn*vn = 0``\  and not all the \ ``ci``\ \ ``'s``\  are 0, "failed" if the \ ``vi``\ \ ``'s``\  are linearly independent over \ ``S``\ .

.. _l4c696e656172446570656e64656e6365-6c696e6561726c79446570656e64656e743f:

.. index::
   pair: LinearDependence; linearlyDependent?

:spadfun:`linearlyDependent?`\: \ :ref:`Vector <l566563746f72>`\  R -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``linearlyDependent?([v1, ..., vn])``\  returns \ ``true``\  if the \ ``vi``\ \ ``'s``\  are linearly dependent over \ ``S``\ , \ ``false``\  otherwise.

.. _l4c696e656172446570656e64656e6365-706172746963756c6172536f6c7574696f6e:

.. index::
   pair: LinearDependence; particularSolution

:spadfun:`particularSolution`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S, failed) if S hasn't \ :ref:`Field <l4669656c64>`\ 
  \ ``particularSolution([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such \ ``ci``\ \ ``'s``\  exist in the quotient field of \ ``S``\ .


.. index::
   pair: LinearDependence; particularSolution

:spadfun:`particularSolution`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Union(\ :ref:`Vector <l566563746f72>`\  S, failed) if S has \ :ref:`Field <l4669656c64>`\ 
  \ ``particularSolution([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such \ ``ci``\ \ ``'s``\  exist in \ ``S``\ .


.. index::
   pair: LinearDependence; particularSolution

:spadfun:`particularSolution`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S, failed) if S hasn't \ :ref:`Field <l4669656c64>`\ 
  \ ``particularSolution([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such \ ``ci``\ \ ``'s``\  exist in the quotient field of \ ``S``\ .


.. index::
   pair: LinearDependence; particularSolution

:spadfun:`particularSolution`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Union(\ :ref:`Vector <l566563746f72>`\  S, failed) if S has \ :ref:`Field <l4669656c64>`\ 
  \ ``particularSolution([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such \ ``ci``\ \ ``'s``\  exist in \ ``S``\ .

.. _l4c696e656172446570656e64656e6365-736f6c76654c696e656172:

.. index::
   pair: LinearDependence; solveLinear

:spadfun:`solveLinear`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S) if S hasn't \ :ref:`Field <l4669656c64>`\ 
  \ ``solveLinear([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


.. index::
   pair: LinearDependence; solveLinear

:spadfun:`solveLinear`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  S, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  S) if S has \ :ref:`Field <l4669656c64>`\ 
  \ ``solveLinear([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


.. index::
   pair: LinearDependence; solveLinear

:spadfun:`solveLinear`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  S) if S hasn't \ :ref:`Field <l4669656c64>`\ 
  \ ``solveLinear([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


.. index::
   pair: LinearDependence; solveLinear

:spadfun:`solveLinear`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  S, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  S) if S has \ :ref:`Field <l4669656c64>`\ 
  \ ``solveLinear([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


