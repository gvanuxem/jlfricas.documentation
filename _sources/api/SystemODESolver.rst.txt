.. index:: SystemODESolver

.. _l53797374656d4f4445536f6c766572:

SystemODESolver(F, LO)
======================

:viewcode:`odeef.spad line 1 <odeef.spad#L1>` :editcode:`[edit on github] <odeef.spad#L1>`

* F: \ :ref:`Field <l4669656c64>`\ 

* LO: \ :ref:`LinearOrdinaryDifferentialOperatorCategory <l4c696e6561724f7264696e617279446966666572656e7469616c4f70657261746f7243617465676f7279>`\  F


SystemODESolver provides tools for triangulating and solving some systems of linear ordinary differential equations.


.. _l53797374656d4f4445536f6c766572-736f6c7665:

.. index::
   pair: SystemODESolver; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, (LO, \ :ref:`List <l4c697374>`\  F) -> Record(particular: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), basis: \ :ref:`List <l4c697374>`\  F)) -> Record(particular: \ :ref:`List <l4c697374>`\  Record(ratpart: \ :ref:`Vector <l566563746f72>`\  F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solve(m, lv, solve)``\  is a parametric version of solve(\ ``m``\ , \ ``v``\ , solve)


.. index::
   pair: SystemODESolver; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F, (LO, F) -> Union(Record(particular: F, basis: \ :ref:`List <l4c697374>`\  F), failed)) -> Union(Record(particular: \ :ref:`Vector <l566563746f72>`\  F, basis: \ :ref:`Matrix <l4d6174726978>`\  F), failed) 
  \ ``solve(m, v, solve)``\  returns \ ``[v_p, bm]``\  such that the solutions in \ ``F``\  of the system \ ``D x = m x + v``\  are \ ``v_p + c_1 v_1 + ... + c_m v_m``\  where the \ ``c_i's``\  are constants, and the \ ``v_i's``\  are columns of \ ``bm``\  and form a basis for the solutions of \ ``D x = m x``\ . Argument \ ``solve``\  is a function for solving a single linear ordinary differential equation in \ ``F``\ .

.. _l53797374656d4f4445536f6c766572-736f6c7665496e4669656c64:

.. index::
   pair: SystemODESolver; solveInField

:spadfun:`solveInField`\: (\ :ref:`Matrix <l4d6174726978>`\  LO, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, (LO, \ :ref:`List <l4c697374>`\  F) -> Record(particular: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), basis: \ :ref:`List <l4c697374>`\  F)) -> Record(particular: \ :ref:`List <l4c697374>`\  Record(ratpart: \ :ref:`Vector <l566563746f72>`\  F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solveInField(m, lv, solve)``\  is a parametric version of solveInField(\ ``m``\ , \ ``v``\ , solve)


.. index::
   pair: SystemODESolver; solveInField

:spadfun:`solveInField`\: (\ :ref:`Matrix <l4d6174726978>`\  LO, \ :ref:`Vector <l566563746f72>`\  F, (LO, F) -> Record(particular: Union(F, failed), basis: \ :ref:`List <l4c697374>`\  F)) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solveInField(m, v, solve)``\  returns \ ``[[v_1, ..., v_m], v_p]``\  such that the solutions in \ ``F``\  of the system \ ``m x = v``\  are \ ``v_p + c_1 v_1 + ... + c_m v_m``\  where the \ ``c_i's``\  are constants, and the \ ``v_i's``\  form a basis for the solutions of \ ``m x = 0``\ . Argument \ ``solve``\  is a function for solving a single linear ordinary differential equation in \ ``F``\ .

.. _l53797374656d4f4445536f6c766572-747269616e67756c617465:

.. index::
   pair: SystemODESolver; triangulate

:spadfun:`triangulate`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> Record(A: \ :ref:`Matrix <l4d6174726978>`\  F, eqs: \ :ref:`List <l4c697374>`\  Record(C: \ :ref:`Matrix <l4d6174726978>`\  F, lg: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, eq: LO, lrh: \ :ref:`List <l4c697374>`\  F)) 
  \ ``triangulate(A, lv)``\  is a parametric version of triangulate(A, \ ``v``\ ).


.. index::
   pair: SystemODESolver; triangulate

:spadfun:`triangulate`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> Record(A: \ :ref:`Matrix <l4d6174726978>`\  F, eqs: \ :ref:`List <l4c697374>`\  Record(C: \ :ref:`Matrix <l4d6174726978>`\  F, g: \ :ref:`Vector <l566563746f72>`\  F, eq: LO, rh: F)) 
  \ ``triangulate(M, v)``\  returns \ ``A, [[C_1, g_1, L_1, h_1], ..., [C_k, g_k, L_k, h_k]]``\  such that under the change of variable \ ``y = A z``\ , the first order linear system \ ``D y = M y + v``\  is uncoupled as \ ``D z_i = C_i z_i + g_i``\  and each \ ``C_i``\  is a companion matrix corresponding to the scalar equation \ ``L_i z_j = h_i``\ .


.. index::
   pair: SystemODESolver; triangulate

:spadfun:`triangulate`\: (\ :ref:`Matrix <l4d6174726978>`\  LO, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  LO, vecs: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``triangulate(m, [v1, ..., vn])``\  returns \ ``[m_0, [w1, ..., wn]]``\  such that for any constant \ ``c1, ..., cn``\  the system \ ``m_0 x = c1*w1 + ... + cn*wn``\  is equivalent to to \ ``m x = c1*v1 + ... + cn*vn``\ 


.. index::
   pair: SystemODESolver; triangulate

:spadfun:`triangulate`\: (\ :ref:`Matrix <l4d6174726978>`\  LO, \ :ref:`Vector <l566563746f72>`\  F) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  LO, vec: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``triangulate(m, v)``\  returns \ ``[m_0, v_0]``\  such that \ ``m_0``\  is upper triangular and the system \ ``m_0 x = v_0``\  is equivalent to \ ``m x = v``\ .


