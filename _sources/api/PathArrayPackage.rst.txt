.. index:: PathArrayPackage

.. _l5061746841727261795061636b616765:

PathArrayPackage R
==================

:viewcode:`distro.spad line 168 <distro.spad#L168>` :editcode:`[edit on github] <distro.spad#L168>`

* R: \ :ref:`Ring <l52696e67>`\ 


A package for weighted Motzkin paths over a ring.


.. _l5061746841727261795061636b616765-626f74746f6d:

.. index::
   pair: PathArrayPackage; bottom

:spadfun:`bottom`\: \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  R -> \ :ref:`Stream <l53747265616d>`\  R 
  \ ``bottom(x)``\  returns the bottom entry of each column.

.. _l5061746841727261795061636b616765-6a61636f6269506174684172726179:

.. index::
   pair: PathArrayPackage; jacobiPathArray

:spadfun:`jacobiPathArray`\: (\ :ref:`Stream <l53747265616d>`\  R, \ :ref:`Stream <l53747265616d>`\  R) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  R 
  \ ``jacobiPathArray([b0, b1, ...], [c1, c2, ...])``\  computes Flajolet\ ``'s``\  Motzkin path array from the sequences [1, 1, ...], \ ``bi``\ , \ ``ci``\ .

.. _l5061746841727261795061636b616765-6d6f747a6b696e506174684172726179:

.. index::
   pair: PathArrayPackage; motzkinPathArray

:spadfun:`motzkinPathArray`\: (\ :ref:`Stream <l53747265616d>`\  R, \ :ref:`Stream <l53747265616d>`\  R, \ :ref:`Stream <l53747265616d>`\  R) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  R 
  \ ``motzkinPathArray([a0, a1, ...], [b0, b1, ...], [c1, c2, ...])``\  computes Flajolet\ ``'s``\  Motzkin path array from the sequences \ ``ai``\ , \ ``bi``\ , \ ``ci``\ .


