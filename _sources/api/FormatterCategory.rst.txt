.. index:: FormatterCategory

.. _l466f726d617474657243617465676f7279:

FormatterCategory
=================

:viewcode:`fmt.spad line 416 <fmt.spad#L416>` :editcode:`[edit on github] <fmt.spad#L416>`


undocumented


.. _l466f726d617474657243617465676f7279-616c747375706572737562:

.. index::
   pair: FormatterCategory; altsupersub

:spadfun:`altsupersub`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``altsupersub(p)``\  returns a handler such that \ ``altsupersub(p)(prec, args)``\  formats the first argument with respect to the precedence \ ``p``\ . The remaining arguments are formatted without parentheses and interpreted as subscript, superscript, subscript, superscript, etc. where the subscripts and superscripts are pairwise aligned. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-62696e617279:

.. index::
   pair: FormatterCategory; binary

:spadfun:`binary`\: ((\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``binary(h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument according to \ ``h1``\  and the second argument by \ ``h2``\ . Both boxes will be horizontally concatenated. binary(\ ``h1``\ , \ ``h2``\ ) is equal to infix(\ ``""``\ , maxPrecedence(), \ ``h1``\ , \ ``h2``\ )

.. _l466f726d617474657243617465676f7279-62696e6f6d69616c:

.. index::
   pair: FormatterCategory; binomial

:spadfun:`binomial`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``binomial``\  is a handler such that \ ``binomial(prec,args)``\  formats a binomial expression of the first two arguments.

.. _l466f726d617474657243617465676f7279-626f78:

.. index::
   pair: FormatterCategory; box

:spadfun:`box`\: ((\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``box(hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the arguments via \ ``hh(prec, args)``\  and then draws a box frame around the resulting box.

.. _l466f726d617474657243617465676f7279-627261636b6574:

.. index::
   pair: FormatterCategory; bracket

:spadfun:`bracket`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``bracket(lb, rb, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats its first argument according to \ ``hh``\  and then put left and right brackets given by \ ``lb``\  and \ ``rb``\  around the resulting box.

.. _l466f726d617474657243617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l466f726d617474657243617465676f7279-64656661756c744570696c6f677565:

.. index::
   pair: FormatterCategory; defaultEpilogue

:spadfun:`defaultEpilogue`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``defaultEpilogue(label)``\  returns a box that is used at the end of every format.

.. _l466f726d617474657243617465676f7279-64656661756c7450726f6c6f677565:

.. index::
   pair: FormatterCategory; defaultPrologue

:spadfun:`defaultPrologue`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``defaultPrologue(label)``\  returns a box that is used at the beginning of every format.

.. _l466f726d617474657243617465676f7279-666f726d6174436f6e7374616e74:

.. index::
   pair: FormatterCategory; formatConstant

:spadfun:`formatConstant`\: \ :ref:`String <l537472696e67>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatConstant(op)``\  is a handler to format constant operators.

.. _l466f726d617474657243617465676f7279-666f726d617445787072657373696f6e:

.. index::
   pair: FormatterCategory; formatExpression

:spadfun:`formatExpression`\: (\ :ref:`OutputForm <l4f7574707574466f726d>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatExpression(o, p)``\  returns an \ :ref:`OutputBox <l4f7574707574426f78>`\  that represent the expression \ ``o``\  in the respective format when considered in a context with outer precedence \ ``p``\ . This function is the main dispatcher function. It first checks whether \ ``o``\  is an integer or a string and treats these cases. Then, if the number \ ``n``\  of arguments is less than 3, it tries to find a handler for the top-level operator of \ ``o``\ . If none is found, it checks for a handler of an \ ``n``\ -ary operator. If no handler is found, the operator is treated as a function symbol and formatted as such.


.. index::
   pair: FormatterCategory; formatExpression

:spadfun:`formatExpression`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatExpression(p)``\  returns a handler \ ``h``\  that \ ``h(prec, args)``\  returns \ ``formatExpression(first args, p)``\ . This handler is used to change the precedence context in which the argument is formatted.


.. index::
   pair: FormatterCategory; formatExpression

:spadfun:`formatExpression`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatExpression(o)``\  returns \ ``formatExpression(o, minPrecedence())``\ .

.. _l466f726d617474657243617465676f7279-666f726d6174466c6f6174:

.. index::
   pair: FormatterCategory; formatFloat

:spadfun:`formatFloat`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatFloat(s)``\  formats a floating point number from it string representation in \ :ref:`OutputForm <l4f7574707574466f726d>`\ .

.. _l466f726d617474657243617465676f7279-666f726d617446756e6374696f6e:

.. index::
   pair: FormatterCategory; formatFunction

:spadfun:`formatFunction`\: (\ :ref:`OutputBox <l4f7574707574426f78>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatFunction(b, args)``\  is supposed to create a box for \ ``"b``\ (args)", i.e. format the list of arguments given by args an put it into a format that represents a function application.

.. _l466f726d617474657243617465676f7279-666f726d617446756e6374696f6e53796d626f6c:

.. index::
   pair: FormatterCategory; formatFunctionSymbol

:spadfun:`formatFunctionSymbol`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatFunctionSymbol(s)``\  formats an otherwise unknown function symbol.

.. _l466f726d617474657243617465676f7279-666f726d6174496e7465676572:

.. index::
   pair: FormatterCategory; formatInteger

:spadfun:`formatInteger`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatInteger(n)``\  formats an integer.

.. _l466f726d617474657243617465676f7279-666f726d6174537472696e67:

.. index::
   pair: FormatterCategory; formatString

:spadfun:`formatString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatString(s)``\  formats a string.

.. _l466f726d617474657243617465676f7279-666f726d617453796d626f6c:

.. index::
   pair: FormatterCategory; formatSymbol

:spadfun:`formatSymbol`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``formatSymbol(s)``\  formats a symbol.

.. _l466f726d617474657243617465676f7279-6672616374696f6e:

.. index::
   pair: FormatterCategory; fraction

:spadfun:`fraction`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  Format a fraction. \ ``fraction(p, h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument by \ ``h1``\  and the second argument by \ ``h2``\ . Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-66756e6374696f6e:

.. index::
   pair: FormatterCategory; function

:spadfun:`function`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``function(s, p, hh)``\  is meant to typeset function applications. It defaults to prefix(\ ``s``\ ,\ ``p``\ ,bracket("(",")",\ ``hh``\ )).

.. _l466f726d617474657243617465676f7279-696e666978:

.. index::
   pair: FormatterCategory; infix

:spadfun:`infix`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``infix(op, p, h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument by \ ``h1``\  and the second argument by \ ``h2``\ . Both boxes will be horizontally concatenated with \ ``box op``\  in the middle. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-696e74656772616c:

.. index::
   pair: FormatterCategory; integral

:spadfun:`integral`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``integral(p)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the expression as an integral with integral sign and respective limits. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-6d6174726978:

.. index::
   pair: FormatterCategory; matrix

:spadfun:`matrix`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``matrix(left, right)``\  returns a handler that typesets a matrix with parentheses given by \ ``left``\  and right where rows are formatted using \ ``h``\ .

.. _l466f726d617474657243617465676f7279-6d6178507265636564656e6365:

.. index::
   pair: FormatterCategory; maxPrecedence

:spadfun:`maxPrecedence`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxPrecedence()``\  returns the maximal precedence value,

.. _l466f726d617474657243617465676f7279-6d696e507265636564656e6365:

.. index::
   pair: FormatterCategory; minPrecedence

:spadfun:`minPrecedence`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minPrecedence()``\  returns the minimal precedence value.

.. _l466f726d617474657243617465676f7279-6e617279:

.. index::
   pair: FormatterCategory; nary

:spadfun:`nary`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``nary(s, p, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats each argument according to \ ``hh``\ . All resulting boxes will be horizontally concatenated with \ ``box s``\  inbetween. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-6e617279506c7573:

.. index::
   pair: FormatterCategory; naryPlus

:spadfun:`naryPlus`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``nary(plus, minus, p, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats each argument according to \ ``hh``\ . All resulting boxes will be horizontally concatenated with \ ``box minus``\  or \ ``box plus``\  inbetween depending on whether the respective argument starts with a unary \ ``minus``\  or not. Outer parentheses are added if \ ``p < prec``\ . This is a special handler that treats the case that a sum is represented as a nary expression that contains unary subexpressions that are unary \ ``minus``\  expressions. This handler transforms something like (+ a (- \ ``b``\ )) into a - \ ``b``\ .

.. _l466f726d617474657243617465676f7279-6e6f7468696e67:

.. index::
   pair: FormatterCategory; nothing

:spadfun:`nothing`\: () -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``nothing()``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  returns an empty box. This corresponds to NOTHING in \ ``OutputForm``\ .

.. _l466f726d617474657243617465676f7279-6e7468526f6f74:

.. index::
   pair: FormatterCategory; nthRoot

:spadfun:`nthRoot`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  Format square roots and \ ``n``\ th roots. \ ``nthRoot(p, h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument according to \ ``h1``\ . If there is no second argument, then the \ ``n``\ th root is a square root and formatted accordingly. Otherwise the second argument is formatted by \ ``h2``\ . Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-6e756d6265724f665072696d6573:

.. index::
   pair: FormatterCategory; numberOfPrimes

:spadfun:`numberOfPrimes`\: \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``numberOfPrimes(e)``\  counts the number of commas in \ ``e``\  and returns it. If \ ``s``\  does not only contain commas, but has a parenthesis at the beginning and the end of the string, then the part between the parentheses is interpreted as a roman numeral and translated into an integer. For any other format the function returns \ ``-1``\ .

.. _l466f726d617474657243617465676f7279-6f70657261746f7248616e646c657273:

.. index::
   pair: FormatterCategory; operatorHandlers

:spadfun:`operatorHandlers`\: () -> \ :ref:`OperatorHandlers <l4f70657261746f7248616e646c657273>`\ ((\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) 
  \ ``operatorHandlers()``\  returns an internal data structure that is used for the selection of respective handlers.

.. _l466f726d617474657243617465676f7279-6f766572626172:

.. index::
   pair: FormatterCategory; overbar

:spadfun:`overbar`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``overbar(p, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats arguments via \ ``hh(p, args)``\  and then draws a bar over the resulting box. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-706172656e74686573697a65:

.. index::
   pair: FormatterCategory; parenthesize

:spadfun:`parenthesize`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``parenthesize(lb, rb, bx)``\  returns the box \ ``bx``\  with left and right brackets (\ ``lb``\  and \ ``rb``\ ) around it.

.. _l466f726d617474657243617465676f7279-706172656e74686573697a654966:

.. index::
   pair: FormatterCategory; parenthesizeIf

:spadfun:`parenthesizeIf`\: (\ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``parenthesizeIf(paren?, bx)``\  returns parentheses (of appropriate size if \ ``paren?``\  is \ ``true``\ . Otherwise, \ ``bx``\  is returned.

.. _l466f726d617474657243617465676f7279-70696c65:

.. index::
   pair: FormatterCategory; pile

:spadfun:`pile`\: ((\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``pile()``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats args according to \ ``hh``\  and then puts them on top of each other left adjusted. The baseline corresponds to the baseline of the first argument.

.. _l466f726d617474657243617465676f7279-706f776572:

.. index::
   pair: FormatterCategory; power

:spadfun:`power`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``power(op, p, h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats \ ``args.1``\  and \ ``args.2``\  according to \ ``h1``\  and \ ``h2``\ , respectively. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-707265636564656e6365:

.. index::
   pair: FormatterCategory; precedence

:spadfun:`precedence`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``precedence(p, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  returns \ ``hh(p, args)``\ . This handler can be used to change the context in which an expression is formatted.

.. _l466f726d617474657243617465676f7279-707265666978:

.. index::
   pair: FormatterCategory; prefix

:spadfun:`prefix`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``prefix(s, p, hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats args according to \ ``hh``\  and then prefixes this box by \ ``box s``\ . Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-7072696d65:

.. index::
   pair: FormatterCategory; prime

:spadfun:`prime`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``prime(p)``\  returns a handler that treats the typesetting of primes. Note that differentiate(a, 3) gives the following \ ``s``\ -expression in OutputForm: (PRIME a ",,,") whereas differentiate(a+b, 4) gives: (PRIME (+ a \ ``b``\ ) (PAREN "iv")). the precedence \ ``p1``\ . Outer parentheses are added if \ ``p < prec``\ . See also the auxiliary function \ ``numberOfPrimes``\ .

.. _l466f726d617474657243617465676f7279-70726f64756374:

.. index::
   pair: FormatterCategory; product

:spadfun:`product`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``product(p)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats a product with product sign and respective limits. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-73637269707473:

.. index::
   pair: FormatterCategory; scripts

:spadfun:`scripts`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  Formats super- and subscripts also presuper and presub. \ ``scripts(p)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument with respect to the precedence \ ``p``\ . The other arguments are interpreted as subscript, superscript, presuperscript, and presubscript (in this order). Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-736c617368:

.. index::
   pair: FormatterCategory; slash

:spadfun:`slash`\: (\ :ref:`Integer <l496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  Format a fraction linearly. \ ``slash(p, h1, h2)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats the first argument according to \ ``h1``\  and the second argument by \ ``h2``\ . Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-737562736372697074:

.. index::
   pair: FormatterCategory; subscript

:spadfun:`subscript`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``subscript(p)``\  returns a handler such that \ ``subscript(p)(prec, args)``\  formats the first argument with respect to the precedence \ ``p``\ . The other arguments are formatted without parentheses and interpreted as subscripts separated by commas. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-73756d:

.. index::
   pair: FormatterCategory; sum

:spadfun:`sum`\: \ :ref:`Integer <l496e7465676572>`\  -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``sum(p)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats a sum expression with summation sign and respective limits. Outer parentheses are added if \ ``p < prec``\ .

.. _l466f726d617474657243617465676f7279-7468654d6170:

.. index::
   pair: FormatterCategory; theMap

:spadfun:`theMap`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``theMap``\  is a special handler to format a function.

.. _l466f726d617474657243617465676f7279-76636f6e636174:

.. index::
   pair: FormatterCategory; vconcat

:spadfun:`vconcat`\: ((\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\ ) -> (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``vconcat(hh)``\  returns a handler \ ``h``\  such that \ ``h(prec, args)``\  formats args according to \ ``hh``\  and then puts them on top of each other where the lines are centered. The baseline corresponds to the baseline of the first argument.

.. _l466f726d617474657243617465676f7279-7a6167:

.. index::
   pair: FormatterCategory; zag

:spadfun:`zag`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> \ :ref:`OutputBox <l4f7574707574426f78>`\  
  \ ``zag``\  is a handler such that \ ``zag(prec, args)``\  formats one part of a continued fraction.


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

