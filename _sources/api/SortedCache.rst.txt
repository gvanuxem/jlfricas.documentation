.. index:: SortedCache

.. _l536f727465644361636865:

SortedCache S
=============

:viewcode:`kl.spad line 14 <kl.spad#L14>` :editcode:`[edit on github] <kl.spad#L14>`

* S: \ :ref:`CachableSet <l4361636861626c65536574>`\ 


A sorted cache of a cachable set \ ``S``\  is a dynamic structure that keeps the elements of \ ``S``\  sorted and assigns an integer to each element of \ ``S``\  once it is in the cache. This way, equality and ordering on \ ``S``\  are tested directly on the integers associated with the elements of \ ``S``\ , once they have been entered in the cache.


.. _l536f727465644361636865-62696e617279536561726368:

.. index::
   pair: SortedCache; binarySearch

:spadfun:`binarySearch`\: (S, (S, S) -> \ :ref:`Integer <l496e7465676572>`\ ) -> Union(S, failed) 
  \ ``binarySearch(x, f)``\  searches \ ``x``\  in the cache, calling \ ``f(x, y)``\  to determine order. It returns \ ``y``\  from cache if \ ``f``\ (\ ``x``\ , \ ``y``\ ) is 0 or "failed" if no such \ ``y``\  exists.

.. _l536f727465644361636865-636c6561724361636865:

.. index::
   pair: SortedCache; clearCache

:spadfun:`clearCache`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``clearCache()``\  empties the cache.

.. _l536f727465644361636865-656e746572496e4361636865:

.. index::
   pair: SortedCache; enterInCache

:spadfun:`enterInCache`\: (S, (S, S) -> \ :ref:`Integer <l496e7465676572>`\ ) -> S 
  \ ``enterInCache(x, f)``\  enters \ ``x``\  in the cache, calling \ ``f(x, y)``\  to determine whether \ ``x < y (f(x, y) < 0), x = y (f(x, y) = 0)``\ , or \ ``x > y (f(x, y) > 0)``\ . It returns \ ``x``\  with an integer associated with it.


.. index::
   pair: SortedCache; enterInCache

:spadfun:`enterInCache`\: (S, S -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> S 
  \ ``enterInCache(x, f)``\  enters \ ``x``\  in the cache, calling \ ``f(y)``\  to determine whether \ ``x``\  is equal to \ ``y``\ . It returns \ ``x``\  with an integer associated with it.

.. _l536f727465644361636865-6c696e656172536561726368:

.. index::
   pair: SortedCache; linearSearch

:spadfun:`linearSearch`\: (S, S -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(S, failed) 
  \ ``linearSearch(x, f)``\  searches \ ``x``\  in the cache, calling \ ``f(y)``\  to determine whether \ ``x``\  is equal to \ ``y``\ . It returns \ ``y``\  from cache if \ ``f``\ (\ ``y``\ ) is \ ``true``\  or "failed" if no such \ ``y``\  exists.


