.. index:: LinearSystemMatrixPackage

.. _l4c696e65617253797374656d4d61747269785061636b616765:

LinearSystemMatrixPackage(F, Row, Col, M)
=========================================

:viewcode:`solvelin.spad line 1 <solvelin.spad#L1>` :editcode:`[edit on github] <solvelin.spad#L1>`

* F: \ :ref:`Field <l4669656c64>`\ 

* Row: Join(\ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  F, \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ )

* Col: Join(\ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  F, \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ )

* M: \ :ref:`MatrixCategory <l4d617472697843617465676f7279>`\ (F, Row, Col)


This package solves linear system in the matrix form \ ``AX = B``\ .


.. _l4c696e65617253797374656d4d61747269785061636b616765-686173536f6c7574696f6e3f:

.. index::
   pair: LinearSystemMatrixPackage; hasSolution?

:spadfun:`hasSolution?`\: (M, Col) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hasSolution?(A, B)``\  tests if the linear system \ ``AX = B``\  has a solution.

.. _l4c696e65617253797374656d4d61747269785061636b616765-706172746963756c6172536f6c7574696f6e:

.. index::
   pair: LinearSystemMatrixPackage; particularSolution

:spadfun:`particularSolution`\: (M, Col) -> Union(Col, failed) 
  \ ``particularSolution(A, B)``\  finds a particular solution of the linear system \ ``AX = B``\ .

.. _l4c696e65617253797374656d4d61747269785061636b616765-72616e6b:

.. index::
   pair: LinearSystemMatrixPackage; rank

:spadfun:`rank`\: (M, Col) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rank(A, B)``\  computes the rank of the complete matrix \ ``(A|B)``\  of the linear system \ ``AX = B``\ .

.. _l4c696e65617253797374656d4d61747269785061636b616765-736f6c7665:

.. index::
   pair: LinearSystemMatrixPackage; solve

:spadfun:`solve`\: (M, Col) -> Record(particular: Union(Col, failed), basis: \ :ref:`List <l4c697374>`\  Col) 
  \ ``solve(A, B)``\  finds a particular solution of the system \ ``AX = B``\  and a basis of the associated homogeneous system \ ``AX = 0``\ .


.. index::
   pair: LinearSystemMatrixPackage; solve

:spadfun:`solve`\: (M, \ :ref:`List <l4c697374>`\  Col) -> \ :ref:`List <l4c697374>`\  Record(particular: Union(Col, failed), basis: \ :ref:`List <l4c697374>`\  Col) 
  \ ``solve(A, LB)``\  finds a particular soln of the systems \ ``AX = B``\  and a basis of the associated homogeneous systems \ ``AX = 0``\  where \ ``B``\  varies in the list of column vectors \ ``LB``\ .


