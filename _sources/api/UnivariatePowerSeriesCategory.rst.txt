.. index:: UnivariatePowerSeriesCategory

.. _l556e6976617269617465506f77657253657269657343617465676f7279:

UnivariatePowerSeriesCategory(Coef, Expon)
==========================================

:viewcode:`pscat.spad line 51 <pscat.spad#L51>` :editcode:`[edit on github] <pscat.spad#L51>`

* Coef: \ :ref:`Ring <l52696e67>`\ 

* Expon: \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\ 


\ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\  is the most general univariate power series category with exponents in an ordered abelian monoid. Note: this category exports a substitution function if it is possible to multiply exponents. Note: this category exports a derivative operation if it is possible to multiply coefficients by exponents.


.. _l556e6976617269617465506f77657253657269657343617465676f7279-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, Coef) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  Coef


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (Coef, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  Coef


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-2f:

\ :ref:`/ <l4162656c69616e4d6f6e6f696452696e67-2f>`\ \: (%, Coef) -> % if Coef has \ :ref:`Field <l4669656c64>`\ 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-617070726f78696d617465:

.. index::
   pair: UnivariatePowerSeriesCategory; approximate

:spadfun:`approximate`\: (%, Expon) -> Coef if Coef has ^\: (Coef, Expon) -> Coef and Coef has coerce\: \ :ref:`Symbol <l53796d626f6c>`\  -> Coef
  \ ``approximate(f)``\  returns a truncated power series with the series variable viewed as an element of the coefficient domain.

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-63656e746572:

.. index::
   pair: UnivariatePowerSeriesCategory; center

:spadfun:`center`\: % -> Coef 
  \ ``center(f)``\  returns the point about which the series \ ``f``\  is expanded.

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636861727468526f6f74:

\ :ref:`charthRoot <l43686172616374657269737469634e6f6e5a65726f-636861727468526f6f74>`\ \: % -> Union(%, failed) if Coef has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 
  from \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f656666696369656e74:

\ :ref:`coefficient <l4162656c69616e4d6f6e6f696452696e67-636f656666696369656e74>`\ \: (%, Expon) -> Coef 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: Coef -> % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  Coef


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f6d706c657465:

\ :ref:`complete <l506f77657253657269657343617465676f7279-636f6d706c657465>`\ \: % -> % 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f6e737472756374:

\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: Expon, c: Coef) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: Expon, c: Coef) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % if Coef has \*\: (Expon, Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-646567726565:

\ :ref:`degree <l506f77657253657269657343617465676f7279-646567726565>`\ \: % -> Expon 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l556e6976617269617465506f77657253657269657343617465676f7279-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: % -> % if Coef has \*\: (Expon, Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-656c74:

\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, %) -> % if Expon has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`Eltable <l456c7461626c65>`\ (%, %)


.. index::
   pair: UnivariatePowerSeriesCategory; elt

:spadfun:`elt`\: (%, Expon) -> Coef 
  \ ``elt(f(x), r)``\  returns the coefficient of the term of degree \ ``r``\  in \ ``f(x)``\ . This is the same as the function \ :spadfun:`coefficient`\ .

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6576616c:

.. index::
   pair: UnivariatePowerSeriesCategory; eval

:spadfun:`eval`\: (%, Coef) -> \ :ref:`Stream <l53747265616d>`\  Coef if Coef has ^\: (Coef, Expon) -> Coef
  \ ``eval(f, a)``\  evaluates a power series at a value in the ground ring by returning a stream of partial sums.

.. _l556e6976617269617465506f77657253657269657343617465676f7279-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-657874656e64:

.. index::
   pair: UnivariatePowerSeriesCategory; extend

:spadfun:`extend`\: (%, Expon) -> % 
  \ ``extend(f, n)``\  causes all terms of \ ``f``\  of degree \ ``<=``\  \ ``n``\  to be computed.

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l506f77657253657269657343617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> Coef 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l506f77657253657269657343617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> Expon 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: Expon, c: Coef) 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6d6170:

\ :ref:`map <l496e646578656450726f6475637443617465676f7279-6d6170>`\ \: (Coef -> Coef, %) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6d6f6e6f6d69616c3f:

\ :ref:`monomial? <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6d6f6e6f6d69616c:

\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (Coef, Expon) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6d756c7469706c794578706f6e656e7473:

.. index::
   pair: UnivariatePowerSeriesCategory; multiplyExponents

:spadfun:`multiplyExponents`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``multiplyExponents(f, n)``\  multiplies all exponents of the power series \ ``f``\  by the positive integer \ ``n``\ .

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-6f72646572:

.. index::
   pair: UnivariatePowerSeriesCategory; order

:spadfun:`order`\: % -> Expon 
  \ ``order(f)``\  is the degree of the lowest order non-zero term in \ ``f``\ . This will result in an infinite loop if \ ``f``\  has no non-zero terms.


.. index::
   pair: UnivariatePowerSeriesCategory; order

:spadfun:`order`\: (%, Expon) -> Expon 
  \ ``order(f, n) = min(m, n)``\ , where \ ``m``\  is the degree of the lowest order non-zero term in \ ``f``\ .

.. _l556e6976617269617465506f77657253657269657343617465676f7279-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  or Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-706f6c653f:

\ :ref:`pole? <l506f77657253657269657343617465676f7279-706f6c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-726564756374756d:

\ :ref:`reductum <l496e646578656450726f6475637443617465676f7279-726564756374756d>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon)

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7465726d73:

.. index::
   pair: UnivariatePowerSeriesCategory; terms

:spadfun:`terms`\: % -> \ :ref:`Stream <l53747265616d>`\  Record(k: Expon, c: Coef) 
  \ ``terms(f(x))``\  returns a stream of non-zero terms, where a a term is an exponent-coefficient pair. The terms in the stream are ordered by increasing order of exponents. Warning: If the series \ ``f``\  has only finitely many non-zero terms, then accessing the resulting stream might lead to an infinite search for the next non-zero coefficient.

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7472756e63617465:

.. index::
   pair: UnivariatePowerSeriesCategory; truncate

:spadfun:`truncate`\: (%, Expon) -> % 
  \ ``truncate(f, k)``\  returns a (finite) power series consisting of the sum of all terms of \ ``f``\  of degree \ ``<= k``\ .


.. index::
   pair: UnivariatePowerSeriesCategory; truncate

:spadfun:`truncate`\: (%, Expon, Expon) -> % 
  \ ``truncate(f, k1, k2)``\  returns a (finite) power series consisting of the sum of all terms of \ ``f``\  of degree \ ``d``\  with \ ``k1 <= d <= k2``\ .

.. _l556e6976617269617465506f77657253657269657343617465676f7279-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7661726961626c65:

.. index::
   pair: UnivariatePowerSeriesCategory; variable

:spadfun:`variable`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``variable(f)``\  returns the (unique) power series variable of the power series \ ``f``\ .

.. _l556e6976617269617465506f77657253657269657343617465676f7279-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, Expon) 

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  Coef 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Algebra <l416c6765627261>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (Coef, Coef) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  if Coef has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  if Coef has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\  if Coef has \*\: (Expon, Coef) -> Coef

\ :ref:`Eltable <l456c7461626c65>`\ (%, %) if Expon has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 

\ :ref:`EntireRing <l456e7469726552696e67>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, Expon) 

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  Coef 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Module <l4d6f64756c65>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  if Coef has \*\: (Expon, Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

\ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ ) 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  Coef 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

\ :ref:`VariablesCommuteWithCoefficients <l5661726961626c6573436f6d6d75746557697468436f656666696369656e7473>`\  

