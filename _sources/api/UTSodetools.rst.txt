.. index:: UTSodetools

.. _l5554536f6465746f6f6c73:

UTSodetools(F, UP, L, UTS)
==========================

:viewcode:`oderf.spad line 247 <oderf.spad#L247>` :editcode:`[edit on github] <oderf.spad#L247>`

* F: \ :ref:`Ring <l52696e67>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* L: \ :ref:`LinearOrdinaryDifferentialOperatorCategory <l4c696e6561724f7264696e617279446966666572656e7469616c4f70657261746f7243617465676f7279>`\  UP

* UTS: \ :ref:`UnivariateTaylorSeriesCategory <l556e69766172696174655461796c6f7253657269657343617465676f7279>`\  F


\ ``RUTSodetools``\  provides tools to interface with the series ODE solver when presented with linear ODEs.


.. _l5554536f6465746f6f6c73-4c4f444f3246554e:

.. index::
   pair: UTSodetools; LODO2FUN

:spadfun:`LODO2FUN`\: L -> \ :ref:`List <l4c697374>`\  UTS -> UTS 
  \ ``LODO2FUN(op)``\  returns the function to pass to the series ODE solver in order to solve \ ``op y = 0``\ .

.. _l5554536f6465746f6f6c73-524632555453:

.. index::
   pair: UTSodetools; RF2UTS

:spadfun:`RF2UTS`\: \ :ref:`Fraction <l4672616374696f6e>`\  UP -> UTS if F has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``RF2UTS(f)``\  converts \ ``f``\  to a Taylor series.

.. _l5554536f6465746f6f6c73-555032555453:

.. index::
   pair: UTSodetools; UP2UTS

:spadfun:`UP2UTS`\: UP -> UTS 
  \ ``UP2UTS(p)``\  converts \ ``p``\  to a Taylor series.

.. _l5554536f6465746f6f6c73-555453325550:

.. index::
   pair: UTSodetools; UTS2UP

:spadfun:`UTS2UP`\: (UTS, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> UP 
  \ ``UTS2UP(s, n)``\  converts the first \ ``n``\  terms of \ ``s``\  to a univariate polynomial.


