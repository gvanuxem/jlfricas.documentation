.. index:: ExpressionToOpenMath

.. _l45787072657373696f6e546f4f70656e4d617468:

ExpressionToOpenMath R
======================

:viewcode:`openmath.spad line 1 <openmath.spad#L1>` :editcode:`[edit on github] <openmath.spad#L1>`

* R: Join(\ :ref:`OpenMath <l4f70656e4d617468>`\ , \ :ref:`OrderedSet <l4f726465726564536574>`\ , \ :ref:`Ring <l52696e67>`\ )


\ :ref:`ExpressionToOpenMath <l45787072657373696f6e546f4f70656e4d617468>`\  provides support for converting objects of type \ :ref:`Expression <l45787072657373696f6e>`\  into OpenMath.


.. _l45787072657373696f6e546f4f70656e4d617468-4f4d7772697465:

.. index::
   pair: ExpressionToOpenMath; OMwrite

:spadfun:`OMwrite`\: (\ :ref:`Expression <l45787072657373696f6e>`\  R, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`String <l537472696e67>`\  
  


.. index::
   pair: ExpressionToOpenMath; OMwrite

:spadfun:`OMwrite`\: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  R) -> \ :ref:`Void <l566f6964>`\  
  


.. index::
   pair: ExpressionToOpenMath; OMwrite

:spadfun:`OMwrite`\: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  R, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  


.. index::
   pair: ExpressionToOpenMath; OMwrite

:spadfun:`OMwrite`\: \ :ref:`Expression <l45787072657373696f6e>`\  R -> \ :ref:`String <l537472696e67>`\  
  


