.. index:: MultivariateLifting

.. _l4d756c7469766172696174654c696674696e67:

MultivariateLifting(E, OV, R, P)
================================

:viewcode:`mlift.spad line 1 <mlift.spad#L1>` :editcode:`[edit on github] <mlift.spad#L1>`

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* OV: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, OV)


This package provides the functions for the multivariate "lifting", using an algorithm of Paul Wang. This package will work for every euclidean domain \ ``R``\  which has property \ ``F``\ , i.e. there exists a factor operation in \ ``R[x]``\ .


.. _l4d756c7469766172696174654c696674696e67-636f7272506f6c79:

.. index::
   pair: MultivariateLifting; corrPoly

:spadfun:`corrPoly`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, failed)) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, failed) 
  \ ``corrPoly(u, lv, lr, ln, lu, bsolv)``\  solves polynomial equation system u/f = sum(ai/lu(\ ``i``\ )) where \ ``f``\  is product of \ ``lu``\ (\ ``i``\ ) and deg(\ ``ai``\ ) < deg(\ ``lu``\ (\ ``i``\ )) using modular method. corrPoly returns "failed" if there are no solution. \ ``lv``\  is list of variables, \ ``lr``\  is list of corresponding evaluation points, bsolv is solver over \ ``R``\  specialized for modular images of \ ``lu``\ .

.. _l4d756c7469766172696174654c696674696e67-6c696674696e67:

.. index::
   pair: MultivariateLifting; lifting

:spadfun:`lifting`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R -> Union(\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, failed), failed)) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, failed) 
  \ ``lifting(u, lv, lu, lr, lp, ln, gen_solv)``\  lifts univariate factorization, returning recovered factors or "failed" in case of bad reduction. \ ``u``\  is multivariate polynomial to factor, \ ``lu``\  is list of univariate factors, \ ``lv``\  is list of variables, \ ``ln``\  is list of degrees corresponding to variables, \ ``lr``\  is list of evaluation points, \ ``lp``\  is list of leading coefficients of factors if known, empty otherwise, gen_solv delivers solver for polynomial equations


.. index::
   pair: MultivariateLifting; lifting

:spadfun:`lifting`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`List <l4c697374>`\  OV, \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , R) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, failed) if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``lifting(u, lv, lu, lr, lp, ln, r)``\  is lifting(\ ``u``\ , \ ``lv``\ , \ ``lu``\ , \ ``lr``\ , \ ``lp``\ , \ ``ln``\ , solv(\ ``r``\ )) where solv(\ ``r``\ ) is solver using reduction modulo \ ``r``\  and lifting. Memberes of \ ``lu``\  must be relatively prime modulo \ ``r``\ 


