.. index:: PatternFunctions1

.. _l5061747465726e46756e6374696f6e7331:

PatternFunctions1(R, D)
=======================

:viewcode:`pattern.spad line 374 <pattern.spad#L374>` :editcode:`[edit on github] <pattern.spad#L374>`

* R: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* D: \ :ref:`Type <l54797065>`\ 


Tools for patterns.


.. _l5061747465726e46756e6374696f6e7331-61646442616456616c7565:

.. index::
   pair: PatternFunctions1; addBadValue

:spadfun:`addBadValue`\: (\ :ref:`Pattern <l5061747465726e>`\  R, D) -> \ :ref:`Pattern <l5061747465726e>`\  R 
  \ ``addBadValue(p, v)``\  adds \ ``v``\  to the list of "bad values" for \ ``p``\ ; \ ``p``\  is not allowed to match any of its "bad values".

.. _l5061747465726e46756e6374696f6e7331-62616456616c756573:

.. index::
   pair: PatternFunctions1; badValues

:spadfun:`badValues`\: \ :ref:`Pattern <l5061747465726e>`\  R -> \ :ref:`List <l4c697374>`\  D 
  \ ``badValues(p)``\  returns the list of "bad values" for \ ``p``\ ; \ ``p``\  is not allowed to match any of its "bad values".

.. _l5061747465726e46756e6374696f6e7331-707265646963617465:

.. index::
   pair: PatternFunctions1; predicate

:spadfun:`predicate`\: \ :ref:`Pattern <l5061747465726e>`\  R -> D -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``predicate(p)``\  returns the predicate attached to \ ``p``\ , the constant function \ ``true``\  if \ ``p``\  has no predicates attached to it.

.. _l5061747465726e46756e6374696f6e7331-736174697366793f:

.. index::
   pair: PatternFunctions1; satisfy?

:spadfun:`satisfy?`\: (D, \ :ref:`Pattern <l5061747465726e>`\  R) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``satisfy?(v, p)``\  returns \ ``f``\ (\ ``v``\ ) where \ ``f``\  is the predicate attached to \ ``p``\ .


.. index::
   pair: PatternFunctions1; satisfy?

:spadfun:`satisfy?`\: (\ :ref:`List <l4c697374>`\  D, \ :ref:`Pattern <l5061747465726e>`\  R) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``satisfy?([v1, ..., vn], p)``\  returns \ ``f(v1, ..., vn)``\  where \ ``f``\  is the top-level predicate attached to \ ``p``\ .

.. _l5061747465726e46756e6374696f6e7331-7375636854686174:

.. index::
   pair: PatternFunctions1; suchThat

:spadfun:`suchThat`\: (\ :ref:`Pattern <l5061747465726e>`\  R, D -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Pattern <l5061747465726e>`\  R 
  \ ``suchThat(p, f)``\  makes a copy of \ ``p``\  and adds the predicate \ ``f``\  to the copy, which is returned.


.. index::
   pair: PatternFunctions1; suchThat

:spadfun:`suchThat`\: (\ :ref:`Pattern <l5061747465726e>`\  R, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  D -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Pattern <l5061747465726e>`\  R 
  \ ``suchThat(p, [a1, ..., an], f)``\  returns a copy of \ ``p``\  with the top-level predicate set to \ ``f(a1, ..., an)``\ .


.. index::
   pair: PatternFunctions1; suchThat

:spadfun:`suchThat`\: (\ :ref:`Pattern <l5061747465726e>`\  R, \ :ref:`List <l4c697374>`\ (D -> \ :ref:`Boolean <l426f6f6c65616e>`\ )) -> \ :ref:`Pattern <l5061747465726e>`\  R 
  \ ``suchThat(p, [f1, ..., fn])``\  makes a copy of \ ``p``\  and adds the predicate \ ``f1``\  and ... and \ ``fn``\  to the copy, which is returned.


