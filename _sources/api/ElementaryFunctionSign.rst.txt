.. index:: ElementaryFunctionSign

.. _l456c656d656e7461727946756e6374696f6e5369676e:

ElementaryFunctionSign(R, F)
============================

:viewcode:`limitps.spad line 673 <limitps.spad#L673>` :editcode:`[edit on github] <limitps.spad#L673>`

* R: Join(\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`GcdDomain <l476364446f6d61696e>`\ )

* F: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


This package provides functions to determine the sign of an elementary function around a point or infinity.


.. _l456c656d656e7461727946756e6374696f6e5369676e-7369676e:

.. index::
   pair: ElementaryFunctionSign; sign

:spadfun:`sign`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ , F, \ :ref:`String <l537472696e67>`\ ) -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``sign(f, x, a, s)``\  returns the sign of \ ``f``\  as \ ``x``\  nears \ ``a``\  from below if \ ``s``\  is "left", or above if \ ``s``\  is "right".


.. index::
   pair: ElementaryFunctionSign; sign

:spadfun:`sign`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  F) -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``sign(f, x, a)``\  returns the sign of \ ``f``\  as \ ``x``\  nears \ ``a``\ , from both sides if \ ``a``\  is finite.


.. index::
   pair: ElementaryFunctionSign; sign

:spadfun:`sign`\: F -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``sign(f)``\  returns 1 if \ ``f``\  is always non-negative; returns \ ``-1``\  is \ ``f``\  is always non-positive; returns 0 if \ ``f``\  is always 0; returns "failed" if the sign of \ ``f``\  varies or can\ ``'t``\  be determined.


