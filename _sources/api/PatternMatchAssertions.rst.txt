.. index:: PatternMatchAssertions

.. _l5061747465726e4d61746368417373657274696f6e73:

PatternMatchAssertions
======================

:viewcode:`expr.spad line 1050 <expr.spad#L1050>` :editcode:`[edit on github] <expr.spad#L1050>`


Attaching assertions to symbols for pattern matching. Date Created: 21 Mar 1989


.. _l5061747465726e4d61746368417373657274696f6e73-636f6e7374616e74:

.. index::
   pair: PatternMatchAssertions; constant

:spadfun:`constant`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``constant(x)``\  tells the pattern matcher that \ ``x``\  should match only the symbol \ ``'x``\  and no other quantity.

.. _l5061747465726e4d61746368417373657274696f6e73-6d756c7469706c65:

.. index::
   pair: PatternMatchAssertions; multiple

:spadfun:`multiple`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``multiple(x)``\  tells the pattern matcher that \ ``x``\  should preferably match a multi-term quantity in a sum or product. For matching on lists, multiple(\ ``x``\ ) tells the pattern matcher that \ ``x``\  should match a list instead of an element of a list.

.. _l5061747465726e4d61746368417373657274696f6e73-6f7074696f6e616c:

.. index::
   pair: PatternMatchAssertions; optional

:spadfun:`optional`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``optional(x)``\  tells the pattern matcher that \ ``x``\  can match an identity (0 in a sum, 1 in a product or exponentiation).


