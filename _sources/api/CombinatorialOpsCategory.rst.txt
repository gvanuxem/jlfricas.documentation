.. index:: CombinatorialOpsCategory

.. _l436f6d62696e61746f7269616c4f707343617465676f7279:

CombinatorialOpsCategory
========================

:viewcode:`combfunc.spad line 1 <combfunc.spad#L1>` :editcode:`[edit on github] <combfunc.spad#L1>`


CombinatorialOpsCategory is the category obtaining by adjoining summations and products to the usual combinatorial operations.


.. _l436f6d62696e61746f7269616c4f707343617465676f7279-62696e6f6d69616c:

\ :ref:`binomial <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-62696e6f6d69616c>`\ \: (%, %) -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l436f6d62696e61746f7269616c4f707343617465676f7279-666163746f7269616c:

\ :ref:`factorial <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-666163746f7269616c>`\ \: % -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l436f6d62696e61746f7269616c4f707343617465676f7279-666163746f7269616c73:

.. index::
   pair: CombinatorialOpsCategory; factorials

:spadfun:`factorials`\: % -> % 
  \ ``factorials(f)``\  rewrites the permutations and binomials in \ ``f``\  in terms of factorials.


.. index::
   pair: CombinatorialOpsCategory; factorials

:spadfun:`factorials`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``factorials(f, x)``\  rewrites the permutations and binomials in \ ``f``\  involving \ ``x``\  in terms of factorials.

.. _l436f6d62696e61746f7269616c4f707343617465676f7279-7065726d75746174696f6e:

\ :ref:`permutation <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-7065726d75746174696f6e>`\ \: (%, %) -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l436f6d62696e61746f7269616c4f707343617465676f7279-70726f64756374:

.. index::
   pair: CombinatorialOpsCategory; product

:spadfun:`product`\: (%, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  %) -> % 
  \ ``product(f(n), n = a..b)``\  returns \ ``f``\ (a) * ... * \ ``f``\ (\ ``b``\ ) as a formal product.


.. index::
   pair: CombinatorialOpsCategory; product

:spadfun:`product`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``product(f(n), n)``\  returns the formal product \ ``P``\ (\ ``n``\ ) which verifies \ ``P``\ (\ ``n+1``\ )\ ``/P``\ (\ ``n``\ ) = \ ``f``\ (\ ``n``\ ).

.. _l436f6d62696e61746f7269616c4f707343617465676f7279-73756d6d6174696f6e:

.. index::
   pair: CombinatorialOpsCategory; summation

:spadfun:`summation`\: (%, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  %) -> % 
  \ ``summation(f(n), n = a..b)``\  returns \ ``f``\ (a) + ... + \ ``f``\ (\ ``b``\ ) as a formal sum.


.. index::
   pair: CombinatorialOpsCategory; summation

:spadfun:`summation`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``summation(f(n), n)``\  returns the formal sum \ ``S``\ (\ ``n``\ ) which verifies \ ``S``\ (\ ``n+1``\ ) - \ ``S``\ (\ ``n``\ ) = \ ``f``\ (\ ``n``\ ).


\ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\  

