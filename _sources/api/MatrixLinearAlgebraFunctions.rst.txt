.. index:: MatrixLinearAlgebraFunctions

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73:

MatrixLinearAlgebraFunctions(R, Row, Col, M)
============================================

:viewcode:`matfuns.spad line 456 <matfuns.spad#L456>` :editcode:`[edit on github] <matfuns.spad#L456>`

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

* Row: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R

* Col: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R

* M: \ :ref:`MatrixCategory <l4d617472697843617465676f7279>`\ (R, Row, Col)


\ :ref:`MatrixLinearAlgebraFunctions <l4d61747269784c696e656172416c676562726146756e6374696f6e73>`\  provides functions to compute inverses and canonical forms.


.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-61646a6f696e74:

.. index::
   pair: MatrixLinearAlgebraFunctions; adjoint

:spadfun:`adjoint`\: M -> Record(adjMat: M, detMat: R) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``adjoint(m)``\  returns the ajoint matrix of \ ``m``\  (i.e. the matrix \ ``n``\  such that \ ``m*n``\  = determinant(\ ``m``\ )*id) and the detrminant of \ ``m``\ .

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-64657465726d696e616e74:

.. index::
   pair: MatrixLinearAlgebraFunctions; determinant

:spadfun:`determinant`\: M -> R 
  \ ``determinant(m)``\  returns the determinant of the matrix \ ``m``\ . an error message is returned if the matrix is not square.

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-656c436f6c756d6e3221:

.. index::
   pair: MatrixLinearAlgebraFunctions; elColumn2!

:spadfun:`elColumn2!`\: (M, R, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``elColumn2!(m, a, i, j)``\  adds to column \ ``i``\  a*column(\ ``m``\ , \ ``j``\ ) : elementary operation of second kind. (\ ``i``\  \ ``~=j``\ )

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-656c526f773121:

.. index::
   pair: MatrixLinearAlgebraFunctions; elRow1!

:spadfun:`elRow1!`\: (M, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``elRow1!(m, i, j)``\  swaps rows \ ``i``\  and \ ``j``\  of matrix \ ``m``\  : elementary operation of first kind

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-656c526f773221:

.. index::
   pair: MatrixLinearAlgebraFunctions; elRow2!

:spadfun:`elRow2!`\: (M, R, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> M 
  \ ``elRow2!(m, a, i, j)``\  adds to row \ ``i``\  a*row(\ ``m``\ , \ ``j``\ ) : elementary operation of second kind. (\ ``i``\  \ ``~=j``\ )

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-6672616374696f6e46726565476175737321:

.. index::
   pair: MatrixLinearAlgebraFunctions; fractionFreeGauss!

:spadfun:`fractionFreeGauss!`\: M -> M if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``fractionFreeGauss(m)``\  performs the fraction free gaussian elimination on the matrix \ ``m``\ , also known as Bareiss algorithm.

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-696e7665727365:

.. index::
   pair: MatrixLinearAlgebraFunctions; inverse

:spadfun:`inverse`\: M -> Union(M, failed) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``inverse(m)``\  returns the inverse of the matrix. If the matrix is not invertible, "failed" is returned. Error: if the matrix is not square.

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-696e76657274496643616e:

.. index::
   pair: MatrixLinearAlgebraFunctions; invertIfCan

:spadfun:`invertIfCan`\: M -> Union(M, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``invertIfCan(m)``\  returns the inverse of \ ``m``\  over \ ``R``\ 

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-6d696e6f72646574:

.. index::
   pair: MatrixLinearAlgebraFunctions; minordet

:spadfun:`minordet`\: M -> R 
  \ ``minordet(m)``\  computes the determinant of the matrix \ ``m``\  using minors. Error: if the matrix is not square.

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-6e6f726d616c697a6564446976696465:

.. index::
   pair: MatrixLinearAlgebraFunctions; normalizedDivide

:spadfun:`normalizedDivide`\: (R, R) -> Record(quotient: R, remainder: R) if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``normalizedDivide(n, d)``\  returns a normalized quotient and remainder such that consistently unique representatives for the residue class are chosen, e.g. positive remainders

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-6e756c6c697479:

.. index::
   pair: MatrixLinearAlgebraFunctions; nullity

:spadfun:`nullity`\: M -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullity(m)``\  returns the mullity of the matrix \ ``m``\ . This is the dimension of the null space of the matrix \ ``m``\ .

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-6e756c6c5370616365:

.. index::
   pair: MatrixLinearAlgebraFunctions; nullSpace

:spadfun:`nullSpace`\: M -> \ :ref:`List <l4c697374>`\  Col if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullSpace(m)``\  returns a basis for the null space of the matrix \ ``m``\ .

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-72616e6b:

.. index::
   pair: MatrixLinearAlgebraFunctions; rank

:spadfun:`rank`\: M -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rank(m)``\  returns the rank of the matrix \ ``m``\ .

.. _l4d61747269784c696e656172416c676562726146756e6374696f6e73-726f77456368656c6f6e:

.. index::
   pair: MatrixLinearAlgebraFunctions; rowEchelon

:spadfun:`rowEchelon`\: M -> M if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``rowEchelon(m)``\  returns the row echelon form of the matrix \ ``m``\ .


