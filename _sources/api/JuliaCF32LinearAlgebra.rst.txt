.. index:: JuliaCF32LinearAlgebra

.. _l4a756c6961434633324c696e656172416c6765627261:

JuliaCF32LinearAlgebra
======================

:viewcode:`jla32.spad line 391 <jla32.spad#L391>` :editcode:`[edit on github] <jla32.spad#L391>`


Linear Algebra functions computed using Julia and its algorithms. 32 bits version.


.. _l4a756c6961434633324c696e656172416c6765627261-636f6e646974696f6e4e756d626572:

.. index::
   pair: JuliaCF32LinearAlgebra; conditionNumber

:spadfun:`conditionNumber`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``conditionNumber(m)``\  computes the \ ``p``\ -condition number of \ ``m``\ .


.. index::
   pair: JuliaCF32LinearAlgebra; conditionNumber

:spadfun:`conditionNumber`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``conditionNumber(m)``\  computes the condition number of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-636f6e64536b65656c:

.. index::
   pair: JuliaCF32LinearAlgebra; condSkeel

:spadfun:`condSkeel`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  condsKeel(\ ``m``\ ) computes the Skeel condition number of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-656967656e21:

.. index::
   pair: JuliaCF32LinearAlgebra; eigen!

:spadfun:`eigen!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(values: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\ , vectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``eigen!(m)``\  computes the spectral decomposition of \ ``m``\  but overwrites \ ``m``\  to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-656967656e:

.. index::
   pair: JuliaCF32LinearAlgebra; eigen

:spadfun:`eigen`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(values: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\ , vectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``eigen(m)``\  computes the spectral decomposition of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-656967656e53797374656d21:

.. index::
   pair: JuliaCF32LinearAlgebra; eigenSystem!

:spadfun:`eigenSystem!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(values: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\ , leftVectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , rightVectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``eigenSystem!(m)``\  computes the spectral decomposition of \ ``m``\  but overwrites \ ``m``\  to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-656967656e53797374656d:

.. index::
   pair: JuliaCF32LinearAlgebra; eigenSystem

:spadfun:`eigenSystem`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(values: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\ , leftVectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , rightVectors: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``eigenSystem(m)``\  computes the spectral decomposition of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-65696776616c7321:

.. index::
   pair: JuliaCF32LinearAlgebra; eigvals!

:spadfun:`eigvals!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  
  \ ``eigvals!(m)``\  returns the eigen values of \ ``m``\  but overwrites \ ``m``\  to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-65696776616c73:

.. index::
   pair: JuliaCF32LinearAlgebra; eigvals

:spadfun:`eigvals`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  
  \ ``eigvals(m)``\  returns the eigen values of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-65696776656373:

.. index::
   pair: JuliaCF32LinearAlgebra; eigvecs

:spadfun:`eigvecs`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``eigvecs(m)``\  returns the eigen vectors of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-657870:

.. index::
   pair: JuliaCF32LinearAlgebra; exp

:spadfun:`exp`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``exp(m)``\  returns the matrix exponential of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-6c6f67:

.. index::
   pair: JuliaCF32LinearAlgebra; log

:spadfun:`log`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``log(m)``\  tries to compute the principal matrix logarithm of \ ``m``\ . Otherwise, returns a non pricipal matrix logarithm of \ ``m``\  if possible.

.. _l4a756c6961434633324c696e656172416c6765627261-6d70496e7665727365:

.. index::
   pair: JuliaCF32LinearAlgebra; mpInverse

:spadfun:`mpInverse`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``mpInverse(m)``\  returns the Moore-Penrose pseudo inverse of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-6e6f726d:

.. index::
   pair: JuliaCF32LinearAlgebra; norm

:spadfun:`norm`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``norm(m,p)``\  computes the \ ``p``\ -norm of \ ``m``\ .


.. index::
   pair: JuliaCF32LinearAlgebra; norm

:spadfun:`norm`\: (\ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``norm(v,p)``\  computes th \ ``p``\ -norm of \ ``v``\ .


.. index::
   pair: JuliaCF32LinearAlgebra; norm

:spadfun:`norm`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``norm(m)``\  computes the 2-norm of \ ``m``\ , also known as the Frobenius norm.


.. index::
   pair: JuliaCF32LinearAlgebra; norm

:spadfun:`norm`\: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``norm(v)``\  computes the 2-norm of \ ``v``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-6e6f726d616c697a6521:

.. index::
   pair: JuliaCF32LinearAlgebra; normalize!

:spadfun:`normalize!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``normalize!(m)``\  destructively normalize \ ``m``\  such that its norm equals to 1.


.. index::
   pair: JuliaCF32LinearAlgebra; normalize!

:spadfun:`normalize!`\: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  -> \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  
  \ ``normalize!(v)``\  destructively normalize \ ``v``\  such that norm(\ ``v``\ ) equals to 1.

.. _l4a756c6961434633324c696e656172416c6765627261-6e6f726d616c697a65:

.. index::
   pair: JuliaCF32LinearAlgebra; normalize

:spadfun:`normalize`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``normalize(m)``\  returns normalized \ ``m``\  such that its norm equals to 1.


.. index::
   pair: JuliaCF32LinearAlgebra; normalize

:spadfun:`normalize`\: \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  -> \ :ref:`JuliaComplexF32Vector <l4a756c6961436f6d706c6578463332566563746f72>`\  
  \ ``normalize(v)``\  returns normalized \ ``v``\  such that its norm equals to 1.

.. _l4a756c6961434633324c696e656172416c6765627261-6f70657261746f724e6f726d:

.. index::
   pair: JuliaCF32LinearAlgebra; operatorNorm

:spadfun:`operatorNorm`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``operatorNorm(m,p)``\  computes the operator norm of \ ``m``\  induced by the vector \ ``p``\ -norm.


.. index::
   pair: JuliaCF32LinearAlgebra; operatorNorm

:spadfun:`operatorNorm`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\  
  \ ``operatorNorm(m)``\  computes the operator norm of \ ``m``\  induced by the vector 2-norm.

.. _l4a756c6961434633324c696e656172416c6765627261-72616e6b21:

.. index::
   pair: JuliaCF32LinearAlgebra; rank!

:spadfun:`rank!`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rank!(m, tol)``\  computes rank of \ ``m``\ . Counts singular value with magnitude greater than tol but overwrites \ ``m``\  to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-72616e6b:

.. index::
   pair: JuliaCF32LinearAlgebra; rank

:spadfun:`rank`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaFloat32 <l4a756c6961466c6f61743332>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rank(m, tol)``\  computes rank of \ ``m``\ . Counts singular value with magnitude greater than tol.

.. _l4a756c6961434633324c696e656172416c6765627261-736f6c766521:

.. index::
   pair: JuliaCF32LinearAlgebra; solve!

:spadfun:`solve!`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``solve!(A,B)``\  solves the matrix equation A*X=B. Overwrites \ ``B``\  with matrix \ ``X``\  and returns \ ``X``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-736f6c7665:

.. index::
   pair: JuliaCF32LinearAlgebra; solve

:spadfun:`solve`\: (\ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``solve(A,B)``\  solves the matrix equation A*X=B, and returns \ ``X``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-73717274:

.. index::
   pair: JuliaCF32LinearAlgebra; sqrt

:spadfun:`sqrt`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  
  \ ``sqrt(m)``\  returns the principal square root of \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-73766421:

.. index::
   pair: JuliaCF32LinearAlgebra; svd!

:spadfun:`svd!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(U: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , sv: \ :ref:`JuliaFloat32Vector <l4a756c6961466c6f61743332566563746f72>`\ , Vt: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``svd!(m)``\  is the same as \ ``svd``\ (\ ``m``\ ) but overwites a to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-737664:

.. index::
   pair: JuliaCF32LinearAlgebra; svd

:spadfun:`svd`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> Record(U: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ , sv: \ :ref:`JuliaFloat32Vector <l4a756c6961466c6f61743332566563746f72>`\ , Vt: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\ ) 
  \ ``svd(m)``\  computes the singular value decomposition \ ``SVD``\  of \ ``m``\  such that \ ``SVD``\ .\ ``U``\  * diagonalMatrix(\ ``sv``\ ) * \ ``SVD``\ .\ ``Vt``\  = \ ``m``\ .

.. _l4a756c6961434633324c696e656172416c6765627261-73766476616c7321:

.. index::
   pair: JuliaCF32LinearAlgebra; svdvals!

:spadfun:`svdvals!`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32Vector <l4a756c6961466c6f61743332566563746f72>`\  
  \ ``svdvals!(m)``\  returns the singular values of \ ``m``\  but overwrites \ ``m``\  to save memory space.

.. _l4a756c6961434633324c696e656172416c6765627261-73766476616c73:

.. index::
   pair: JuliaCF32LinearAlgebra; svdvals

:spadfun:`svdvals`\: \ :ref:`JuliaComplexF32Matrix <l4a756c6961436f6d706c65784633324d6174726978>`\  -> \ :ref:`JuliaFloat32Vector <l4a756c6961466c6f61743332566563746f72>`\  
  \ ``svdvals(m)``\  returns the singular values of \ ``m``\ .


