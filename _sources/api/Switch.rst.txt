.. index:: Switch

.. _l537769746368:

Switch
======

:viewcode:`fortran.spad line 1255 <fortran.spad#L1255>` :editcode:`[edit on github] <fortran.spad#L1255>`


This domain builds representations of boolean expressions for use with the \ :ref:`FortranCode <l466f727472616e436f6465>`\  domain.


.. _l537769746368-414e44:

.. index::
   pair: Switch; AND

:spadfun:`AND`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``AND(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x and y``\ .

.. _l537769746368-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: Switch; coerce

:spadfun:`coerce`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``coerce(s)``\  is undocumented.

.. _l537769746368-4551:

.. index::
   pair: Switch; EQ

:spadfun:`EQ`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``EQ(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x = y``\ .

.. _l537769746368-4745:

.. index::
   pair: Switch; GE

:spadfun:`GE`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``GE(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x>=y``\ .

.. _l537769746368-4754:

.. index::
   pair: Switch; GT

:spadfun:`GT`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``GT(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x>y``\ .

.. _l537769746368-4c45:

.. index::
   pair: Switch; LE

:spadfun:`LE`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``LE(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x<=y``\ .

.. _l537769746368-4c54:

.. index::
   pair: Switch; LT

:spadfun:`LT`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``LT(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x<y``\ .

.. _l537769746368-4e4f54:

.. index::
   pair: Switch; NOT

:spadfun:`NOT`\: % -> % 
  \ ``NOT(x)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``\~~x``\ .


.. index::
   pair: Switch; NOT

:spadfun:`NOT`\: Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %) -> % 
  \ ``NOT(x)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``\~~x``\ .

.. _l537769746368-4f52:

.. index::
   pair: Switch; OR

:spadfun:`OR`\: (Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %), Union(I: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ , CF: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , switch: %)) -> % 
  \ ``OR(x, y)``\  returns the \ :ref:`Switch <l537769746368>`\  expression representing \ ``x or y``\ .


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

