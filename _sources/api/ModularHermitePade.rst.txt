.. index:: ModularHermitePade

.. _l4d6f64756c61724865726d69746550616465:

ModularHermitePade
==================

:viewcode:`modhpsol.spad line 1035 <modhpsol.spad#L1035>` :editcode:`[edit on github] <modhpsol.spad#L1035>`


This package provides modular Hermite-Pade solvers for a few rings. Solver over integers is implemented in this package. Also it contains interfaces to solver over \$\ ``Z_p``\ \$ and solver over ring of integer polynomials.


.. _l4d6f64756c61724865726d69746550616465-636865636b5f736f6c3161:

.. index::
   pair: ModularHermitePade; check_sol1a

:spadfun:`check_sol1a`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`U32Vector <l553332566563746f72>`\  
  \ ``check_sol1a performs``\  one round of modular Monte Carlo check for solutions.

.. _l4d6f64756c61724865726d69746550616465-6765745f7661726961626c6573:

.. index::
   pair: ModularHermitePade; get_variables

:spadfun:`get_variables`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  

.. _l4d6f64756c61724865726d69746550616465-48505f736f6c76655f41:

.. index::
   pair: ModularHermitePade; HP_solve_A

:spadfun:`HP_solve_A`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\  -> Union(good, reject, no_solution)) -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  HP_solve_A is a fake solver over algebraic numbers.

.. _l4d6f64756c61724865726d69746550616465-48505f736f6c76655f49:

.. index::
   pair: ModularHermitePade; HP_solve_I

:spadfun:`HP_solve_I`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(good, reject, no_solution)) -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``HP_solve_I implements``\  HP_solve over integers.

.. _l4d6f64756c61724865726d69746550616465-48505f736f6c76655f4d:

.. index::
   pair: ModularHermitePade; HP_solve_M

:spadfun:`HP_solve_M`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(good, reject, no_solution)) -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``HP_solve_M implements``\  HP_solve over \$\ ``Z_p``\ \$ with machine-sized \$\ ``p``\ \$.

.. _l4d6f64756c61724865726d69746550616465-48505f736f6c76655f50:

.. index::
   pair: ModularHermitePade; HP_solve_P

:spadfun:`HP_solve_P`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(good, reject, no_solution)) -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``HP_solve_P implements``\  HP_solve over integer polynomials.

.. _l4d6f64756c61724865726d69746550616465-48505f736f6c76655f5041:

.. index::
   pair: ModularHermitePade; HP_solve_PA

:spadfun:`HP_solve_PA`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\  -> Union(good, reject, no_solution)) -> Union(\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  HP_solve_PA is a fake solver over polynomials having algebraic coefficients.

.. _l4d6f64756c61724865726d69746550616465-4c4c46495f746f5f4c5041:

.. index::
   pair: ModularHermitePade; LLFI_to_LPA

:spadfun:`LLFI_to_LPA`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , failed) 
  evaluation routine

.. _l4d6f64756c61724865726d69746550616465-4c4c4650495f746f5f4c5041:

.. index::
   pair: ModularHermitePade; LLFPI_to_LPA

:spadfun:`LLFPI_to_LPA`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , failed) 
  evaluation routine

.. _l4d6f64756c61724865726d69746550616465-756e7061636b5f706f6c79:

.. index::
   pair: ModularHermitePade; unpack_poly

:spadfun:`unpack_poly`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`SortedExponentVector <l536f727465644578706f6e656e74566563746f72>`\ , \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``unpack_poly(vars, exps, coeffs, lo, hi)``\  converts polynomial from packed to sparse representation. Coefficients of packed polynomial are stored in \ ``coeffs``\ (\ ``l0``\ ) up to \ ``coeffs``\ (\ ``hi``\ ) Exponents are stored in corresponding elements of \ ``exps``\ .

.. _l4d6f64756c61724865726d69746550616465-56535550495f746f5f565041:

.. index::
   pair: ModularHermitePade; VSUPI_to_VPA

:spadfun:`VSUPI_to_VPA`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\  
  evaluation routine

.. _l4d6f64756c61724865726d69746550616465-5653555050495f746f5f565041:

.. index::
   pair: ModularHermitePade; VSUPPI_to_VPA

:spadfun:`VSUPPI_to_VPA`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\  
  evaluation routine


