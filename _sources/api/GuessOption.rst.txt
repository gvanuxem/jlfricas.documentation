.. index:: GuessOption

.. _l47756573734f7074696f6e:

GuessOption
===========

:viewcode:`mantepse.spad line 63 <mantepse.spad#L63>` :editcode:`[edit on github] <mantepse.spad#L63>`


GuessOption is a domain whose elements are various options used by \ :ref:`Guess <l4775657373>`\ .


.. _l47756573734f7074696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47756573734f7074696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47756573734f7074696f6e-616c6c44656772656573:

.. index::
   pair: GuessOption; allDegrees

:spadfun:`allDegrees`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> % 
  \ ``allDegrees(d)``\  specifies whether all possibilities of the degree vector - taking into account maxDegree - should be tried. This is mainly interesting for rational interpolation. This option is expressed in the form \ ``allDegrees == d``\ .

.. _l47756573734f7074696f6e-636865636b:

.. index::
   pair: GuessOption; check

:spadfun:`check`\: Union(skip, MonteCarlo, deterministic) -> % 
  \ ``check(d)``\  specifies how we want to check the solution. If the value is "skip", we return the solutions found by the interpolation routine without checking. If the value is "MonteCarlo", we use a probabilistic check. This option is expressed in the form \ ``check == d``\ 

.. _l47756573734f7074696f6e-636865636b457874726156616c756573:

.. index::
   pair: GuessOption; checkExtraValues

:spadfun:`checkExtraValues`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> % 
  \ ``checkExtraValues(d)``\  specifies whether we want to check the solution beyond the order given by the degree bounds. This option is expressed in the form \ ``checkExtraValues == d``\ 

.. _l47756573734f7074696f6e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l47756573734f7074696f6e-6465627567:

.. index::
   pair: GuessOption; debug

:spadfun:`debug`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> % 
  \ ``debug(d)``\  specifies whether we want additional output on the progress. This option is expressed in the form \ ``debug == d``\ .

.. _l47756573734f7074696f6e-646973706c61794b696e64:

.. index::
   pair: GuessOption; displayKind

:spadfun:`displayKind`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``displayKind(d)``\  specifies kind of the result: generating function, recurrence or equation. This option should not be set by the user, but rather by the \ ``HP``\ -specification.

.. _l47756573734f7074696f6e-66756e6374696f6e4e616d65:

.. index::
   pair: GuessOption; functionName

:spadfun:`functionName`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``functionName(d)``\  specifies the name of the function given by the algebraic differential equation or recurrence. This option is expressed in the form \ ``functionName == d``\ .

.. _l47756573734f7074696f6e-66756e6374696f6e4e616d6573:

.. index::
   pair: GuessOption; functionNames

:spadfun:`functionNames`\: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``functionNames(d)``\  specifies the names for the function in algebraic dependence. This option is expressed in the form \ ``functionNames == d``\ .

.. _l47756573734f7074696f6e-686f6d6f67656e656f7573:

.. index::
   pair: GuessOption; homogeneous

:spadfun:`homogeneous`\: Union(\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``homogeneous(d)``\  specifies whether we allow only homogeneous algebraic differential equations. This option is expressed in the form \ ``homogeneous == d``\ . If \ ``true``\ , then maxPower must be set, too, and ADEs with constant total degree are allowed. If a PositiveInteger is given, only ADE\ ``'s``\  with this total degree are allowed.

.. _l47756573734f7074696f6e-696e6465784e616d65:

.. index::
   pair: GuessOption; indexName

:spadfun:`indexName`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``indexName(d)``\  specifies the index variable used for the formulas. This option is expressed in the form \ ``indexName == d``\ .

.. _l47756573734f7074696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l47756573734f7074696f6e-6d6178446567726565:

.. index::
   pair: GuessOption; maxDegree

:spadfun:`maxDegree`\: Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxDegree(d)``\  specifies the maximum degree of the coefficient polynomials in an algebraic differential equation or a recursion with polynomial coefficients. For rational functions with an exponential term, \ ``maxDegree``\  bounds the degree of the denominator polynomial. This option is expressed in the form \ ``maxDegree == d``\ .

.. _l47756573734f7074696f6e-6d617844657269766174697665:

.. index::
   pair: GuessOption; maxDerivative

:spadfun:`maxDerivative`\: Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxDerivative(d)``\  specifies the maximum derivative in an algebraic differential equation. This option is expressed in the form \ ``maxDerivative == d``\ .

.. _l47756573734f7074696f6e-6d61784c6576656c:

.. index::
   pair: GuessOption; maxLevel

:spadfun:`maxLevel`\: Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxLevel(d)``\  specifies the maximum number of recursion levels operators guessProduct and guessSum will be applied. This option is expressed in the form spad{maxLevel \ ``==``\  \ ``d``\ }.

.. _l47756573734f7074696f6e-6d61784d69786564446567726565:

.. index::
   pair: GuessOption; maxMixedDegree

:spadfun:`maxMixedDegree`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``maxMixedDegree(d)``\  specifies the maximum \ ``q``\ -degree of the coefficient polynomials in a recurrence with polynomial coefficients, in the case of mixed shifts. Although slightly inconsistent, maxMixedDegree(0) specifies that no mixed shifts are allowed. This option is expressed in the form \ ``maxMixedDegree == d``\ .

.. _l47756573734f7074696f6e-6d6178506f776572:

.. index::
   pair: GuessOption; maxPower

:spadfun:`maxPower`\: Union(\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxPower(d)``\  specifies the maximum degree in an algebraic differential equation. For example, the degree of (\ ``f``\ \ ``''``\ )\ ``^3``\  \ ``f'``\  is 4. maxPower(\ ``-1``\ ) specifies that the maximum exponent can be arbitrary. This option is expressed in the form \ ``maxPower == d``\ .

.. _l47756573734f7074696f6e-6d61785368696674:

.. index::
   pair: GuessOption; maxShift

:spadfun:`maxShift`\: Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxShift(d)``\  specifies the maximum shift in a recurrence equation. This option is expressed in the form \ ``maxShift == d``\ .

.. _l47756573734f7074696f6e-6d61785375627374:

.. index::
   pair: GuessOption; maxSubst

:spadfun:`maxSubst`\: Union(\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , arbitrary) -> % 
  \ ``maxSubst(d)``\  specifies the maximum degree of the monomial substituted into the function we are looking for. That is, if \ ``maxSubst == d``\ , we look for polynomials such that \$\ ``p``\ (\ ``f``\ (\ ``x``\ ), \ ``f``\ (\ ``x^2``\ ), ..., \ ``f``\ (\ ``x^d``\ ))\ ``=0``\ \$. equation. This option is expressed in the form \ ``maxSubst == d``\ .

.. _l47756573734f7074696f6e-6f6e65:

.. index::
   pair: GuessOption; one

:spadfun:`one`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> % 
  \ ``one(d)``\  specifies whether we are happy with one solution. This option is expressed in the form \ ``one == d``\ .

.. _l47756573734f7074696f6e-6f7074696f6e:

.. index::
   pair: GuessOption; option

:spadfun:`option`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(\ :ref:`Any <l416e79>`\ , failed) 
  \ ``option(l, option)``\  returns which options are given.

.. _l47756573734f7074696f6e-736166657479:

.. index::
   pair: GuessOption; safety

:spadfun:`safety`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``safety(d)``\  specifies the number of values reserved for testing any solutions found. This option is expressed in the form \ ``safety == d``\ .

.. _l47756573734f7074696f6e-536f6d6f73:

.. index::
   pair: GuessOption; Somos

:spadfun:`Somos`\: Union(\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``Somos(d)``\  specifies whether we want that the total degree of the differential operators is constant, and equal to \ ``d``\ , or maxDerivative if \ ``true``\ . If \ ``true``\ , maxDerivative must be set, too.

.. _l47756573734f7074696f6e-7661726961626c654e616d65:

.. index::
   pair: GuessOption; variableName

:spadfun:`variableName`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``variableName(d)``\  specifies the variable used in by the algebraic differential equation. This option is expressed in the form \ ``variableName == d``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

