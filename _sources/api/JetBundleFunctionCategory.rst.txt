.. index:: JetBundleFunctionCategory

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279:

JetBundleFunctionCategory JB
============================

:viewcode:`jet.spad line 494 <jet.spad#L494>` :editcode:`[edit on github] <jet.spad#L494>`

* JB: \ :ref:`JetBundleCategory <l4a657442756e646c6543617465676f7279>`\ 


\ :ref:`JetBundleFunctionCategory <l4a657442756e646c6546756e6374696f6e43617465676f7279>`\  defines the category of functions (local sections) over a jet bundle. The formal derivative is defined already here. It uses the Jacobi matrix of the functions. The columns of the matrices are enumerated by jet variables. Thus they are represented as a \ :fricasapi:`Record <Record.html>`\  of the matrix and a list of the jet variables. Several simplification routines are implemented already here.


.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6175746f526564756365:

.. index::
   pair: JetBundleFunctionCategory; autoReduce

:spadfun:`autoReduce`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  % 
  \ ``autoReduce(sys)``\  tries to simplify a system by solving each equation for its leading term and substituting it into the other equations.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-636c617373:

.. index::
   pair: JetBundleFunctionCategory; class

:spadfun:`class`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``class(f)``\  is defined as the highest class of the jet variables effectively occurring in \ ``f``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


.. index::
   pair: JetBundleFunctionCategory; coerce

:spadfun:`coerce`\: JB -> % 
  \ ``coerce(jv)``\  coerces the jet variable \ ``jv``\  into a local section.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-636f6e73743f:

.. index::
   pair: JetBundleFunctionCategory; const?

:spadfun:`const?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``const?(f)``\  checks whether \ ``f``\  depends of jet variables.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-44:

\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-64656e6f6d696e61746f72:

.. index::
   pair: JetBundleFunctionCategory; denominator

:spadfun:`denominator`\: % -> % 
  \ ``denominator(f)``\  yields the denominator of \ ``f``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-646966666572656e7469617465:

.. index::
   pair: JetBundleFunctionCategory; differentiate

:spadfun:`differentiate`\: (%, JB) -> % 
  \ ``differentiate(f, jv)``\  differentiates the function \ ``f``\  \ ``wrt``\  the jet variable \ ``jv``\ .


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-64696d656e73696f6e:

.. index::
   pair: JetBundleFunctionCategory; dimension

:spadfun:`dimension`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %), \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``dimension(sys, jm, q)``\  computes the dimension of the manifold described by the system \ ``sys``\  with Jacobi matrix \ ``jm``\  in the jet bundle of order \ ``q``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-645375627374:

.. index::
   pair: JetBundleFunctionCategory; dSubst

:spadfun:`dSubst`\: (%, JB, %) -> % 
  \ ``dSubst(f, jv, exp)``\  is like \ ``subst(f, jv, exp)``\ . But additionally for all derivatives of \ ``jv``\  the corresponding substitutions are performed.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6578747261637453796d626f6c:

.. index::
   pair: JetBundleFunctionCategory; extractSymbol

:spadfun:`extractSymbol`\: \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %) -> \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %) 
  \ ``extractSymbol(jm)``\  extracts the highest order part of the Jacobi matrix.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-666f726d616c4469666632:

.. index::
   pair: JetBundleFunctionCategory; formalDiff2

:spadfun:`formalDiff2`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %)) -> Record(DPhi: %, JVars: \ :ref:`List <l4c697374>`\  JB) 
  \ ``formalDiff2(f, i, jm)``\  formally differentiates the function \ ``f``\  with the Jacobi matrix \ ``jm``\  \ ``wrt``\  the \ ``i``\ \ ``-``\ th independent variable. \ ``JVars``\  is a list of the jet variables effectively in the result \ ``DPhi``\  (might be too large).


.. index::
   pair: JetBundleFunctionCategory; formalDiff2

:spadfun:`formalDiff2`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %)) -> Record(DSys: \ :ref:`List <l4c697374>`\  %, JVars: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  JB) 
  \ ``formalDiff2(sys, i, jm)``\  is like the other \ :spadfun:`\ ``formalDiff2``\ `\  but for systems.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-666f726d616c44696666:

.. index::
   pair: JetBundleFunctionCategory; formalDiff

:spadfun:`formalDiff`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``formalDiff(f, mu)``\  formally differentiates \ ``f``\  as indicated by the multi-index \ ``mu``\ .


.. index::
   pair: JetBundleFunctionCategory; formalDiff

:spadfun:`formalDiff`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``formalDiff(f, i)``\  formally (totally) differentiates \ ``f``\  \ ``wrt``\  the \ ``i``\ \ ``-``\ th independent variable.


.. index::
   pair: JetBundleFunctionCategory; formalDiff

:spadfun:`formalDiff`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``formalDiff(sys, i)``\  formally differentiates a family \ ``sys``\  of functions \ ``wrt``\  the \ ``i``\ \ ``-``\ th independent variable.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-667265654f663f:

.. index::
   pair: JetBundleFunctionCategory; freeOf?

:spadfun:`freeOf?`\: (%, JB) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``freeOf?(fun, jv)``\  checks whether \ ``fun``\  contains the jet variable \ ``jv``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6765744e6f746174696f6e:

.. index::
   pair: JetBundleFunctionCategory; getNotation

:spadfun:`getNotation`\: () -> \ :ref:`Symbol <l53796d626f6c>`\  
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6a61636f62694d6174726978:

.. index::
   pair: JetBundleFunctionCategory; jacobiMatrix

:spadfun:`jacobiMatrix`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  JB) -> \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %) 
  \ ``jacobiMatrix(sys, jvars)``\  constructs the Jacobi matrix of the family \ ``sys``\  of functions. \ ``jvars``\  contains for each function the effectively occurring jet variables. The columns of the matrix are ordered.


.. index::
   pair: JetBundleFunctionCategory; jacobiMatrix

:spadfun:`jacobiMatrix`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %) 
  \ ``jacobiMatrix(sys)``\  constructs the Jacobi matrix of the family \ ``sys``\  of functions.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6a65745661726961626c6573:

.. index::
   pair: JetBundleFunctionCategory; jetVariables

:spadfun:`jetVariables`\: % -> \ :ref:`List <l4c697374>`\  JB 
  \ ``jetVariables(f)``\  yields all jet variables effectively occurring in \ ``f``\  in an ordered list.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c656164696e67446572:

.. index::
   pair: JetBundleFunctionCategory; leadingDer

:spadfun:`leadingDer`\: % -> JB 
  \ ``leadingDer(fun)``\  yields the leading derivative of \ ``fun``\ . If \ ``fun``\  contains no derivatives \ ``1``\  is returned.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6e756d446570566172:

.. index::
   pair: JetBundleFunctionCategory; numDepVar

:spadfun:`numDepVar`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6e756d657261746f72:

.. index::
   pair: JetBundleFunctionCategory; numerator

:spadfun:`numerator`\: % -> % 
  \ ``numerator(f)``\  yields the numerator of \ ``f``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6e756d496e64566172:

.. index::
   pair: JetBundleFunctionCategory; numIndVar

:spadfun:`numIndVar`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6f72646572:

.. index::
   pair: JetBundleFunctionCategory; order

:spadfun:`order`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``order(f)``\  gives highest order of the jet variables effectively occurring in \ ``f``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-6f7264657244696d:

.. index::
   pair: JetBundleFunctionCategory; orderDim

:spadfun:`orderDim`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %), \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``orderDim(sys, jm, q)``\  computes the dimension of the manifold described by the system \ ``sys``\  with Jacobi matrix \ ``jm``\  in the jet bundle of order \ ``q``\  over the jet bundle of order \ ``q-1``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-50:

.. index::
   pair: JetBundleFunctionCategory; P

:spadfun:`P`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  


.. index::
   pair: JetBundleFunctionCategory; P

:spadfun:`P`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  


.. index::
   pair: JetBundleFunctionCategory; P

:spadfun:`P`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  


.. index::
   pair: JetBundleFunctionCategory; P

:spadfun:`P`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7265647563654d6f64:

.. index::
   pair: JetBundleFunctionCategory; reduceMod

:spadfun:`reduceMod`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`List <l4c697374>`\  % 
  \ ``reduceMod(sys1, sys2)``\  reduces the system \ ``sys1``\  modulo the system \ ``sys2``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> JB 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  JB

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(JB, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  JB

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7365744e6f746174696f6e:

.. index::
   pair: JetBundleFunctionCategory; setNotation

:spadfun:`setNotation`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-73696d706c696679:

.. index::
   pair: JetBundleFunctionCategory; simplify

:spadfun:`simplify`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %)) -> Record(Sys: \ :ref:`List <l4c697374>`\  %, JM: \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %), Depend: Union(failed, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``simplify(sys, jm)``\  simplifies a system with given Jacobi matrix. The Jacobi matrix of the simplified system is returned, too. \ ``Depend``\  contains for each equation of the simplified system the numbers of the equations of the original system out of which it is build, if it is possible to obtain this information. If one can generate equations of lower order by purely algebraic operations, then \ ``simplify``\  should do this.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-73696d704d6f64:

.. index::
   pair: JetBundleFunctionCategory; simpMod

:spadfun:`simpMod`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`List <l4c697374>`\  % 
  \ ``simpMod(sys1, sys2)``\  simplifies the system \ ``sys1``\  modulo the system \ ``sys2``\ .


.. index::
   pair: JetBundleFunctionCategory; simpMod

:spadfun:`simpMod`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %), \ :ref:`List <l4c697374>`\  %) -> Record(Sys: \ :ref:`List <l4c697374>`\  %, JM: \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %), Depend: Union(failed, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``simpMod(sys1, sys2)``\  simplifies the system \ ``sys1``\  modulo the system \ ``sys2``\ . Returns the same information as \ ``simplify``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-73696d704f6e65:

.. index::
   pair: JetBundleFunctionCategory; simpOne

:spadfun:`simpOne`\: % -> % 
  \ ``simpOne(f)``\  removes unnecessary coefficients and exponents, denominators etc.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-736f6c7665466f72:

.. index::
   pair: JetBundleFunctionCategory; solveFor

:spadfun:`solveFor`\: (%, JB) -> Union(%, failed) 
  \ ``solveFor(fun, jv)``\  tries to solve \ ``fun``\  for the jet variable \ ``jv``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-736f72744c44:

.. index::
   pair: JetBundleFunctionCategory; sortLD

:spadfun:`sortLD`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  % 
  \ ``sortLD(sys)``\  sorts the functions in \ ``sys``\  according to their leading derivatives.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7375627374:

.. index::
   pair: JetBundleFunctionCategory; subst

:spadfun:`subst`\: (%, JB, %) -> % 
  \ ``subst(f, jv, exp)``\  substitutes \ ``exp``\  for the jet variable \ ``jv``\  in the function \ ``f``\ .

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-73796d626f6c:

.. index::
   pair: JetBundleFunctionCategory; symbol

:spadfun:`symbol`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`SparseEchelonMatrix <l537061727365456368656c6f6e4d6174726978>`\ (JB, %) 
  \ ``symbol(sys)``\  computes directly the symbol of the family \ ``sys``\  of functions.

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-55:

.. index::
   pair: JetBundleFunctionCategory; U

:spadfun:`U`\: () -> % 
  


.. index::
   pair: JetBundleFunctionCategory; U

:spadfun:`U`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-58:

.. index::
   pair: JetBundleFunctionCategory; X

:spadfun:`X`\: () -> % 
  


.. index::
   pair: JetBundleFunctionCategory; X

:spadfun:`X`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  

.. _l4a657442756e646c6546756e6374696f6e43617465676f7279-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  JB 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`GcdDomain <l476364446f6d61696e>`\  

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  JB 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

