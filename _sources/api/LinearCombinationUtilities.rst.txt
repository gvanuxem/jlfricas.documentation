.. index:: LinearCombinationUtilities

.. _l4c696e656172436f6d62696e6174696f6e5574696c6974696573:

LinearCombinationUtilities(F, UP)
=================================

:viewcode:`intpar.spad line 130 <intpar.spad#L130>` :editcode:`[edit on github] <intpar.spad#L130>`

* F: \ :ref:`Field <l4669656c64>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F


This package implements frequently used operations on linear combinations.


.. _l4c696e656172436f6d62696e6174696f6e5574696c6974696573-6465686f6d6f67656e697a65:

.. index::
   pair: LinearCombinationUtilities; dehomogenize

:spadfun:`dehomogenize`\: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F) -> Record(particular: Union(Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), failed), basis: \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F)) 
  \ ``dehomogenize(ls)``\  converts list of solutions (a, [\ ``c0``\ , \ ``c1``\ , ..., \ ``cn``\ ]) to homogeneous equation \ ``L``\ (a) + \ ``c0``\  \ ``f``\  + \ ``c1``\  \ ``g1``\  + ... + \ ``cn``\  \ ``gn``\  = 0 into list of solutions of inhomogeneous equation \ ``L``\ (a) + \ ``f``\  + \ ``c1``\  \ ``g1``\  + ... + \ ``cn``\  \ ``gn``\  = 0. This transformation works the same for all equations, so we only need list of solutions as argument

.. _l4c696e656172436f6d62696e6174696f6e5574696c6974696573-6c696e5f636f6d6221:

.. index::
   pair: LinearCombinationUtilities; lin_comb!

:spadfun:`lin_comb!`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`Vector <l566563746f72>`\  F 
  \ ``lin_comb!(v, w, [f1, ..., fn])``\  computes linear combination \ ``w``\  + \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\  by modifying \ ``w``\  in place. Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.

.. _l4c696e656172436f6d62696e6174696f6e5574696c6974696573-6c696e5f636f6d62:

.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  F) -> F 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`Fraction <l4672616374696f6e>`\  UP 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`LaurentPolynomial <l4c617572656e74506f6c796e6f6d69616c>`\ (F, UP)) -> \ :ref:`LaurentPolynomial <l4c617572656e74506f6c796e6f6d69616c>`\ (F, UP) 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  UP) -> UP 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`Vector <l566563746f72>`\  F 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal positive length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  F) -> F 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


.. index::
   pair: LinearCombinationUtilities; lin_comb

:spadfun:`lin_comb`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`Fraction <l4672616374696f6e>`\  UP 
  \ ``lin_comb(v, [f1, ..., fn])``\  computes linear combination \ ``v``\ (1) \ ``f1``\  + ... \ ``v``\ (\ ``n``\ ) \ ``fn``\ . Vector \ ``v``\  and list [\ ``f1``\ , ..., \ ``fn``\ ] must be of equal length.


