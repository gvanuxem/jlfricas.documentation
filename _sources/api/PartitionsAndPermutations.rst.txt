.. index:: PartitionsAndPermutations

.. _l506172746974696f6e73416e645065726d75746174696f6e73:

PartitionsAndPermutations
=========================

:viewcode:`partperm.spad line 1 <partperm.spad#L1>` :editcode:`[edit on github] <partperm.spad#L1>`


PartitionsAndPermutations contains functions for generating streams of integer partitions, and streams of sequences of integers composed from a multi-set.


.. _l506172746974696f6e73416e645065726d75746174696f6e73-636f6e6a7567617465:

.. index::
   pair: PartitionsAndPermutations; conjugate

:spadfun:`conjugate`\: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``conjugate(pt)``\  is the conjugate of the partition \ ``pt``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-636f6e6a756761746573:

.. index::
   pair: PartitionsAndPermutations; conjugates

:spadfun:`conjugates`\: \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``conjugates(lp)``\  is the stream of conjugates of a stream of partitions \ ``lp``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-64697374696e63745f706172746974696f6e73:

.. index::
   pair: PartitionsAndPermutations; distinct_partitions

:spadfun:`distinct_partitions`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``distinct_partitions(p, l, n)``\  is the stream of partitions of \ ``n``\  into distinct numbers whose number of parts is no greater than \ ``p``\  and whose largest part is no greater than \ ``l``\ .


.. index::
   pair: PartitionsAndPermutations; distinct_partitions

:spadfun:`distinct_partitions`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``distinct_partitions(n)``\  is the stream of all partitions of \ ``n``\  into distinct numbers.

.. _l506172746974696f6e73416e645065726d75746174696f6e73-6f64645f706172746974696f6e73:

.. index::
   pair: PartitionsAndPermutations; odd_partitions

:spadfun:`odd_partitions`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``odd_partitions(p, l, n)``\  is the stream of partitions of \ ``n``\  into odd numbers whose number of parts is no greater than \ ``p``\  and whose largest part is no greater than \ ``l``\ .


.. index::
   pair: PartitionsAndPermutations; odd_partitions

:spadfun:`odd_partitions`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``odd_partitions(n)``\  is the stream of all partitions of \ ``n``\  into odd numbers.

.. _l506172746974696f6e73416e645065726d75746174696f6e73-706172746974696f6e73:

.. index::
   pair: PartitionsAndPermutations; partitions

:spadfun:`partitions`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``partitions(p, l)``\  is the stream of all partitions whose number of parts and largest part are no greater than \ ``p``\  and \ ``l``\ .


.. index::
   pair: PartitionsAndPermutations; partitions

:spadfun:`partitions`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``partitions(p, l, n)``\  is the stream of partitions of \ ``n``\  whose number of parts is no greater than \ ``p``\  and whose largest part is no greater than \ ``l``\ .


.. index::
   pair: PartitionsAndPermutations; partitions

:spadfun:`partitions`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``partitions(n)``\  is the stream of all partitions of \ ``n``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-7065726d75746174696f6e73:

.. index::
   pair: PartitionsAndPermutations; permutations

:spadfun:`permutations`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``permutations(n)``\  is the stream of permutations formed from \ ``1, 2, 3, ..., n``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-73657175656e636573:

.. index::
   pair: PartitionsAndPermutations; sequences

:spadfun:`sequences`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``sequences(l1, l2)``\  is the stream of all sequences that can be composed from the multiset defined from two lists of integers \ ``l1``\  and \ ``l2``\ . For example, the pair \ ``([1, 2, 4], [2, 3, 5])``\  represents multi-set with 1 \ ``2``\ , 2 \ ``3``\ \ ``'s``\ , and 4 \ ``5``\ \ ``'s``\ .


.. index::
   pair: PartitionsAndPermutations; sequences

:spadfun:`sequences`\: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``sequences([l0, l1, l2, .., ln])``\  is the set of all sequences formed from \ ``l0``\  0\ ``'s``\ , \ ``l1``\  1\ ``'s``\ , \ ``l2``\  2\ ``'s``\ , ..., \ ``ln``\  \ ``n``\ \ ``'s``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-73687566666c65:

.. index::
   pair: PartitionsAndPermutations; shuffle

:spadfun:`shuffle`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``shuffle(l1, l2)``\  forms the stream of all shuffles of \ ``l1``\  and \ ``l2``\ , i.e. all sequences that can be formed from merging \ ``l1``\  and \ ``l2``\ .

.. _l506172746974696f6e73416e645065726d75746174696f6e73-73687566666c65696e:

.. index::
   pair: PartitionsAndPermutations; shufflein

:spadfun:`shufflein`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``shufflein(l, st)``\  maps shuffle(\ ``l``\ , \ ``u``\ ) on to all members \ ``u``\  of st, concatenating the results.


