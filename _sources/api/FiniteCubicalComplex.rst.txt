.. index:: FiniteCubicalComplex

.. _l46696e6974654375626963616c436f6d706c6578:

FiniteCubicalComplex VS
=======================

:viewcode:`alg_top.spad line 2460 <alg_top.spad#L2460>` :editcode:`[edit on github] <alg_top.spad#L2460>`

* VS: \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


A Finite Cubical Complex for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/cubical/ Date Created: April 2016 Basic Operations: Related packages: Related categories: Related Domains: Also See: AMS Classifications:


.. _l46696e6974654375626963616c436f6d706c6578-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e6974654375626963616c436f6d706c6578-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e6974654375626963616c436f6d706c6578-61646443756265:

.. index::
   pair: FiniteCubicalComplex; addCube

:spadfun:`addCube`\: (%, \ :ref:`CubicalFacet <l4375626963616c4661636574>`\ ) -> % 
  Add a facet to this simplex If the facet is also in the list then, do not append, instead change the multiplier.

.. _l46696e6974654375626963616c436f6d706c6578-616464496d706c6965644661636573:

.. index::
   pair: FiniteCubicalComplex; addImpliedFaces

:spadfun:`addImpliedFaces`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`CubicalFacet <l4375626963616c4661636574>`\  
  a function to take a set of faces and add those that are implied by the cubicalComplex conventions (if they don\ ``'t``\  already exist). For example, if the input is a square [1..2, 1..2] then we would add its edges [1..1, 1..2], [2..2, 1..2], [1..2, 1..1], and [1..2, 2..2].

.. _l46696e6974654375626963616c436f6d706c6578-626f756e64617279:

.. index::
   pair: FiniteCubicalComplex; boundary

:spadfun:`boundary`\: % -> % 
  Boundary operator. Step down to the next lower dimension, this is like hollowing out the complex. It takes the highest dimension entries and replaces them with their boundaries, cancelling out where it can.

.. _l46696e6974654375626963616c436f6d706c6578-636861696e:

.. index::
   pair: FiniteCubicalComplex; chain

:spadfun:`chain`\: % -> \ :ref:`ChainComplex <l436861696e436f6d706c6578>`\  
  returns a matrix sequence representing the face maps in linear algebra form

.. _l46696e6974654375626963616c436f6d706c6578-636f65726365:

.. index::
   pair: FiniteCubicalComplex; coerce

:spadfun:`coerce`\: % -> \ :ref:`DeltaComplex <l44656c7461436f6d706c6578>`\  VS 
  \ ``coerce CubicalComplex``\  to DeltaComplex


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l46696e6974654375626963616c436f6d706c6578-6375626963616c436f6d706c6578:

.. index::
   pair: FiniteCubicalComplex; cubicalComplex

:spadfun:`cubicalComplex`\: (\ :ref:`List <l4c697374>`\  VS, \ :ref:`List <l4c697374>`\  \ :ref:`CubicalFacet <l4375626963616c4661636574>`\ ) -> % 
  constructor where the cubes are supplied


.. index::
   pair: FiniteCubicalComplex; cubicalComplex

:spadfun:`cubicalComplex`\: (\ :ref:`List <l4c697374>`\  VS, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  constructor where the cubes are supplied


.. index::
   pair: FiniteCubicalComplex; cubicalComplex

:spadfun:`cubicalComplex`\: (\ :ref:`List <l4c697374>`\  VS, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  constructor where the cubes are supplied


.. index::
   pair: FiniteCubicalComplex; cubicalComplex

:spadfun:`cubicalComplex`\: \ :ref:`List <l4c697374>`\  VS -> % 
  construct empty cubical complex

.. _l46696e6974654375626963616c436f6d706c6578-66756e64616d656e74616c47726f7570:

.. index::
   pair: FiniteCubicalComplex; fundamentalGroup

:spadfun:`fundamentalGroup`\: % -> \ :ref:`GroupPresentation <l47726f757050726573656e746174696f6e>`\  
  Generates fundamental group from this cubical complex. This works by converting to a DeltaComplex and then generating the fundamentalGroup from that. This is not the most efficient method because the conversion generates lots of higher order faceMaps which are not used. This will attempt to simplify the group presentation, if you don\ ``'t``\  want this use alternative function of same name. TODO write a faster implementation which only generates edge and square faceMaps.


.. index::
   pair: FiniteCubicalComplex; fundamentalGroup

:spadfun:`fundamentalGroup`\: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`GroupPresentation <l47726f757050726573656e746174696f6e>`\  
  Generates fundamental group from this cubical complex. This works by converting to a DeltaComplex and then generating the fundamentalGroup from that. This is not the most efficient method because the conversion generates lots of higher order faceMaps which are not used. TODO write a faster implementation which only generates edge and square faceMaps. This version has options to: simplify - if \ ``true``\  attempts to simplify the group presentation trace - if \ ``true``\  outputs trace of simplification rules used.

.. _l46696e6974654375626963616c436f6d706c6578-6772616465:

.. index::
   pair: FiniteCubicalComplex; grade

:spadfun:`grade`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`CubicalFacet <l4375626963616c4661636574>`\  
  A function to grade faces according to the number of non-degenerate intervals. This nests the lists according to their order Vertices, edges, squares and so on.

.. _l46696e6974654375626963616c436f6d706c6578-686f6d6f6c6f6779:

.. index::
   pair: FiniteCubicalComplex; homology

:spadfun:`homology`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Homology <l486f6d6f6c6f6779>`\  
  calculate homology using SmithNormalForm

.. _l46696e6974654375626963616c436f6d706c6578-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l46696e6974654375626963616c436f6d706c6578-6d6178496e646578:

.. index::
   pair: FiniteCubicalComplex; maxIndex

:spadfun:`maxIndex`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  find the maximum index.

.. _l46696e6974654375626963616c436f6d706c6578-70726f64756374:

.. index::
   pair: FiniteCubicalComplex; product

:spadfun:`product`\: (%, %) -> % 
  Forms product of two cubical complexes.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

