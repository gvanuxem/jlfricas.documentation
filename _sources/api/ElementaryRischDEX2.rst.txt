.. index:: ElementaryRischDEX2

.. _l456c656d656e74617279526973636844455832:

ElementaryRischDEX2(R, F)
=========================

:viewcode:`rdeefx.spad line 345 <rdeefx.spad#L345>` :editcode:`[edit on github] <rdeefx.spad#L345>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ , \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* F: Join(\ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


Risch differential equation, wrapper for extended version.


.. _l456c656d656e74617279526973636844455832-646f5f706172616d5f524445:

.. index::
   pair: ElementaryRischDEX2; do_param_RDE

:spadfun:`do_param_RDE`\: (F, F, \ :ref:`List <l4c697374>`\  F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F) -> Union(Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), failed) 
  \ ``do_param_RDE(f, h, lg, x, lk)``\  solves parametric Risch differential equation, that is returns \ ``[y, [c1, ..., ck]]``\  such that dy/dx + \ ``n``\  df/dx \ ``y``\  + \ ``c1``\  \ ``g1``\  + ... \ ``cn``\  \ ``gn``\  = \ ``h``\  where \ ``y``\  is in the is in field generated by \ ``lk``\  and \ ``ci``\  are constants or "failed" if there is no solution.

.. _l456c656d656e74617279526973636844455832-646f5f72697363685f4445:

.. index::
   pair: ElementaryRischDEX2; do_risch_DE

:spadfun:`do_risch_DE`\: (F, F, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F) -> Record(ans: F, right: F, primpart: F, sol?: \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``do_risch_DE(f, g, x, lk)``\  returns \ ``[y, h, 0, b]``\  such that \ ``dy/dx + df/dx y = h``\  and \ ``b := h = g``\ . The equation \ ``dy/dx + df/dx y = g``\  has no solution in the field generated by \ ``lk``\  if \ ``h \~~= g``\  (\ ``y``\  is a partial solution in that case).

.. _l456c656d656e74617279526973636844455832-72697363685f64655f657874:

.. index::
   pair: ElementaryRischDEX2; risch_de_ext

:spadfun:`risch_de_ext`\: (\ :ref:`Integer <l496e7465676572>`\ , F, F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Record(ans: F, right: F, primpart: F, sol?: \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``risch_de_ext(n, f, g, x)``\  returns \ ``[y, h, p, b]``\  such that \ ``dy/dx + n df/dx y + exp(-nf)dp/dx = h``\  and \ ``b := h = g``\ . The equation \ ``dy/dx + n df/dx y = g``\  has no solution if \ ``h \~~= g``\  (\ ``y``\  is a partial solution in that case).


