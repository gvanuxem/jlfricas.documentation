.. index:: SimpleFortranProgram

.. _l53696d706c65466f727472616e50726f6772616d:

SimpleFortranProgram(R, FS)
===========================

:viewcode:`fortran.spad line 1193 <fortran.spad#L1193>` :editcode:`[edit on github] <fortran.spad#L1193>`

* R: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* FS: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


\ :ref:`SimpleFortranProgram <l53696d706c65466f727472616e50726f6772616d>`\  provides a simple model of some FORTRAN subprograms, making it possible to coerce objects of various domains into a FORTRAN subprogram called \ ``f``\ . These can then be translated into legal FORTRAN code.


.. _l53696d706c65466f727472616e50726f6772616d-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l53696d706c65466f727472616e50726f6772616d-666f727472616e:

.. index::
   pair: SimpleFortranProgram; fortran

:spadfun:`fortran`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , FS) -> % 
  \ ``fortran(fname, ftype, body)``\  builds an object of type \ :ref:`FortranProgramCategory <l466f727472616e50726f6772616d43617465676f7279>`\ . The three arguments specify the name, the type and the body of the program.

.. _l53696d706c65466f727472616e50726f6772616d-6f75747075744173466f727472616e:

\ :ref:`outputAsFortran <l466f727472616e50726f6772616d43617465676f7279-6f75747075744173466f727472616e>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FortranProgramCategory <l466f727472616e50726f6772616d43617465676f7279>`\ 


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`FortranProgramCategory <l466f727472616e50726f6772616d43617465676f7279>`\  

