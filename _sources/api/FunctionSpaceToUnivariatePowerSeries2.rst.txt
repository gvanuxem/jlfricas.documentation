.. index:: FunctionSpaceToUnivariatePowerSeries2

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332:

FunctionSpaceToUnivariatePowerSeries2(R, FE, Expon, UPS, TRAN, UTS, TEXP, coerce_Ex, x)
=======================================================================================

:viewcode:`fs2ups.spad line 1 <fs2ups.spad#L1>` :editcode:`[edit on github] <fs2ups.spad#L1>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* FE: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)

* Expon: Join(\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\ , \ :ref:`OrderedRing <l4f72646572656452696e67>`\ )

* UPS: Join(\ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (FE, Expon), \ :ref:`Field <l4669656c64>`\ , \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (FE, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ ), \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ )

* TRAN: \ :ref:`PartialTranscendentalFunctions <l5061727469616c5472616e7363656e64656e74616c46756e6374696f6e73>`\  UPS

* UTS: \ :ref:`UnivariateTaylorSeriesCategory <l556e69766172696174655461796c6f7253657269657343617465676f7279>`\  FE

* TEXP: \ :ref:`TaylorSeriesExpansion <l5461796c6f72536572696573457870616e73696f6e>`\ (FE, Expon, \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ , UPS, UTS)

* coerce_Ex: Expon -> FE

* x: \ :ref:`Symbol <l53796d626f6c>`\ 


This package converts expressions in some function space to power series in a variable \ ``x``\  with coefficients in that function space. The function \ :spadfun:`exprToUPS`\  converts expressions to power series whose coefficients do not contain the variable \ ``x``\ . The function \ :spadfun:`exprToGenUPS`\  converts functional expressions to power series whose coefficients may involve functions of \ ``log(x)``\ .


.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-6174616e31:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; atan1

:spadfun:`atan1`\: UPS -> UPS 
  \ ``atan1 should``\  be local but conditional

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-65787072546f47656e555053:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; exprToGenUPS

:spadfun:`exprToGenUPS`\: (FE, \ :ref:`Boolean <l426f6f6c65616e>`\ , Union(complex, real: two sides, real: left side, real: right side, just do it)) -> Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  \ ``exprToGenUPS(fcn, posCheck?, atanFlag)``\  converts the expression \ ``fcn``\  to a generalized power series. If \ ``posCheck?``\  is \ ``true``\ , log\ ``'s``\  of negative numbers are not allowed nor are \ ``n``\ th roots of negative numbers with \ ``n``\  even. If \ ``posCheck?``\  is \ ``false``\ , these are allowed. \ ``atanFlag``\  determines how the case \ ``atan(f(x))``\ , where \ ``f(x)``\  has a pole, will be treated. The possible values of \ ``atanFlag``\  are \ ``"complex"``\ , \ ``"real: two sides"``\ , \ ``"real: left side"``\ , \ ``"real: right side"``\ , and \ ``"just do it"``\ . If \ ``atanFlag``\  is \ ``"complex"``\ , then no series expansion will be computed because, viewed as a function of a complex variable, \ ``atan(f(x))``\  has an essential singularity. Otherwise, the sign of the leading coefficient of the series expansion of \ ``f(x)``\  determines the constant coefficient in the series expansion of \ ``atan(f(x))``\ . If this sign cannot be determined, a series expansion is computed only when \ ``atanFlag``\  is \ ``"just do it"``\ . When the leading term in the series expansion of \ ``f(x)``\  is of odd degree (or is a rational degree with odd numerator), then the constant coefficient in the series expansion of \ ``atan(f(x))``\  for values to the left differs from that for values to the right. If \ ``atanFlag``\  is \ ``"real: two sides"``\ , no series expansion will be computed. If \ ``atanFlag``\  is \ ``"real: left side"``\  the constant coefficient for values to the left will be used and if \ ``atanFlag``\  \ ``"real: right side"``\  the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series, we return a record containing the name of the function that caused the problem and a brief description of the problem. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a, the user should perform the substitution \ ``x -> x + a``\  before calling this function.

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-65787072546f5053:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; exprToPS

:spadfun:`exprToPS`\: (FE, \ :ref:`Boolean <l426f6f6c65616e>`\ , Union(complex, real: two sides, real: left side, real: right side, just do it), \ :ref:`Boolean <l426f6f6c65616e>`\ , FE) -> Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  \ ``exprToPS(fcn, posCheck?, atanFlag, log_flag, log_val)``\  is like exprToUPS, but if \ ``log_flag``\  is \ ``true``\  it replaces logarithms of expansion variable by \ ``log_val``\ 


.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; exprToPS

:spadfun:`exprToPS`\: (FE, \ :ref:`Boolean <l426f6f6c65616e>`\ , Union(complex, real: two sides, real: left side, real: right side, just do it), \ :ref:`Boolean <l426f6f6c65616e>`\ , FE, FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ , FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ , FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  exprToPS(\ ``fcn``\ , posCheck?, atanFlag, log_flag, log_val, coef_chk, inv_chk, zero_chk) is like exprToPS(\ ``fcn``\ , posCheck?, atanFlag, log_flag, log_val), but fails if \ ``coef_chk``\  is \ ``false``\  for some coefficient of \ ``fcn``\  or if expansion process needs to invert element of \ ``FE``\  for which \ ``inv_chk``\  is \ ``false``\ 

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-65787072546f555053:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; exprToUPS

:spadfun:`exprToUPS`\: (FE, \ :ref:`Boolean <l426f6f6c65616e>`\ , Union(complex, real: two sides, real: left side, real: right side, just do it)) -> Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  \ ``exprToUPS(fcn, posCheck?, atanFlag)``\  converts the expression \ ``fcn``\  to a power series. If \ ``posCheck?``\  is \ ``true``\ , log\ ``'s``\  of negative numbers are not allowed nor are \ ``n``\ th roots of negative numbers with \ ``n``\  even. If \ ``posCheck?``\  is \ ``false``\ , these are allowed. \ ``atanFlag``\  determines how the case \ ``atan(f(x))``\ , where \ ``f(x)``\  has a pole, will be treated. The possible values of \ ``atanFlag``\  are \ ``"complex"``\ , \ ``"real: two sides"``\ , \ ``"real: left side"``\ , \ ``"real: right side"``\ , and \ ``"just do it"``\ . If \ ``atanFlag``\  is \ ``"complex"``\ , then no series expansion will be computed because, viewed as a function of a complex variable, \ ``atan(f(x))``\  has an essential singularity. Otherwise, the sign of the leading coefficient of the series expansion of \ ``f(x)``\  determines the constant coefficient in the series expansion of \ ``atan(f(x))``\ . If this sign cannot be determined, a series expansion is computed only when \ ``atanFlag``\  is \ ``"just do it"``\ . When the leading term in the series expansion of \ ``f(x)``\  is of odd degree (or is a rational degree with odd numerator), then the constant coefficient in the series expansion of \ ``atan(f(x))``\  for values to the left differs from that for values to the right. If \ ``atanFlag``\  is \ ``"real: two sides"``\ , no series expansion will be computed. If \ ``atanFlag``\  is \ ``"real: left side"``\  the constant coefficient for values to the left will be used and if \ ``atanFlag``\  \ ``"real: right side"``\  the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series, a record containing the name of the function that caused the problem and a brief description of the problem is returned. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a, the user should perform the substitution \ ``x -> x + a``\  before calling this function.

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-696e746567:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; integ

:spadfun:`integ`\: UPS -> UPS 
  \ ``integ should``\  be local but conditional

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-696e7465675f6466:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; integ_df

:spadfun:`integ_df`\: (UPS, UPS) -> UPS 
  \ ``integ_df should``\  be local but conditional

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-696e74656774:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; integt

:spadfun:`integt`\: UTS -> UTS 
  \ ``integt should``\  be local but conditional

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-6c6f63616c416273:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; localAbs

:spadfun:`localAbs`\: FE -> FE 
  \ ``localAbs(fcn)``\  = \ ``abs(fcn)``\  or \ ``sqrt(fcn^2)``\  depending on whether or not FE has a function \ ``abs``\ . This should be a local function, but the compiler won\ ``'t``\  allow it.

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-6d795f646967616d6d61:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; my_digamma

:spadfun:`my_digamma`\: FE -> FE 
  \ ``my_digamma should``\  be local but conditional

.. _l46756e6374696f6e5370616365546f556e6976617269617465506f77657253657269657332-706f77546f555053:

.. index::
   pair: FunctionSpaceToUnivariatePowerSeries2; powToUPS

:spadfun:`powToUPS`\: (\ :ref:`List <l4c697374>`\  FE, Record(pos_Check?: \ :ref:`Boolean <l426f6f6c65616e>`\ , atan_Flag: Union(complex, real: two sides, real: left side, real: right side, just do it), coeff_check?: Union(FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ , none), inv_check?: Union(FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ , none), zero_check?: Union(FE -> \ :ref:`Boolean <l426f6f6c65616e>`\ , none), log_x_replace: \ :ref:`Boolean <l426f6f6c65616e>`\ , log_x_val: FE, cache: \ :ref:`List <l4c697374>`\  Record(ker: \ :ref:`Kernel <l4b65726e656c>`\  FE, ser: Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ ))))) -> Union(%series: UPS, %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  \ ``powToUPS should``\  be local but conditional


