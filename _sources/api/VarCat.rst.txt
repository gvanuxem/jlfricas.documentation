.. index:: VarCat

.. _l566172436174:

VarCat
======

:viewcode:`computation.spad line 417 <computation.spad#L417>` :editcode:`[edit on github] <computation.spad#L417>`


VarCat represents a variable in Lambda and Ski domains. Since we are working in terms of functions then a variable will be a function (possibly a constant function) a variable has a name represented by a String. If the Lambda or Ski calculus is typed then the variable will also have a type.


.. _l566172436174-3d:

.. index::
   pair: VarCat; =

:spadfun:`=`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  return \ ``true``\  if equal, that is names are equal and if there is a type then they must also be equal

.. _l566172436174-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l566172436174-6765744e616d65:

.. index::
   pair: VarCat; getName

:spadfun:`getName`\: % -> \ :ref:`String <l537472696e67>`\  
  returns the name of the variable.

.. _l566172436174-67657454797065:

.. index::
   pair: VarCat; getType

:spadfun:`getType`\: % -> \ :ref:`ILogic <l494c6f676963>`\  
  returns the type of the variable. This may be a compound type, for instance ["a",\ ``"b"``\ ] represents a-\ ``>b``\  a function from type a to type \ ``b``\  untyped implementations return []

.. _l566172436174-7061727365566172:

.. index::
   pair: VarCat; parseVar

:spadfun:`parseVar`\: \ :ref:`String <l537472696e67>`\  -> % 
  construct a variable by parsing a string

.. _l566172436174-70617273655661725465726d:

.. index::
   pair: VarCat; parseVarTerm

:spadfun:`parseVarTerm`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(rft: %, pout: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  construct a variable by parsing a string pin is index to string at start of parse pout is index to string at end of parse

.. _l566172436174-746f537472696e67:

.. index::
   pair: VarCat; toString

:spadfun:`toString`\: % -> \ :ref:`String <l537472696e67>`\  
  returns the name and the type in string form.

.. _l566172436174-766172:

.. index::
   pair: VarCat; var

:spadfun:`var`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`ILogic <l494c6f676963>`\ ) -> % 
  constructs variable with a name and also a type.


.. index::
   pair: VarCat; var

:spadfun:`var`\: \ :ref:`String <l537472696e67>`\  -> % 
  constructs variable with a name but no type.


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

