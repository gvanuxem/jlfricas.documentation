.. index:: ExpressionToUnivariatePowerSeries

.. _l45787072657373696f6e546f556e6976617269617465506f776572536572696573:

ExpressionToUnivariatePowerSeries(R, FE)
========================================

:viewcode:`expr2ups.spad line 1 <expr2ups.spad#L1>` :editcode:`[edit on github] <expr2ups.spad#L1>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* FE: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


This package provides functions to convert functional expressions to power series.


.. _l45787072657373696f6e546f556e6976617269617465506f776572536572696573-6c617572656e74:

.. index::
   pair: ExpressionToUnivariatePowerSeries; laurent

:spadfun:`laurent`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  \ ``laurent(f, x = a)``\  expands the expression \ ``f``\  as a Laurent series in powers of \ ``(x - a)``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; laurent

:spadfun:`laurent`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``laurent(f, x = a, n)``\  expands the expression \ ``f``\  as a Laurent series in powers of \ ``(x - a)``\ ; terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; laurent

:spadfun:`laurent`\: (FE, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``laurent(f, n)``\  returns a Laurent expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; laurent

:spadfun:`laurent`\: FE -> \ :ref:`Any <l416e79>`\  
  \ ``laurent(f)``\  returns a Laurent expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable.


.. index::
   pair: ExpressionToUnivariatePowerSeries; laurent

:spadfun:`laurent`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Any <l416e79>`\  
  \ ``laurent(x)``\  returns \ ``x``\  viewed as a Laurent series.

.. _l45787072657373696f6e546f556e6976617269617465506f776572536572696573-70756973657578:

.. index::
   pair: ExpressionToUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  \ ``puiseux(f, x = a)``\  expands the expression \ ``f``\  as a Puiseux series in powers of \ ``(x - a)``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``puiseux(f, x = a, n)``\  expands the expression \ ``f``\  as a Puiseux series in powers of \ ``(x - a)``\ ; terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: (FE, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``puiseux(f, n)``\  returns a Puiseux expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: FE -> \ :ref:`Any <l416e79>`\  
  \ ``puiseux(f)``\  returns a Puiseux expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable.


.. index::
   pair: ExpressionToUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Any <l416e79>`\  
  \ ``puiseux(x)``\  returns \ ``x``\  viewed as a Puiseux series.

.. _l45787072657373696f6e546f556e6976617269617465506f776572536572696573-736572696573:

.. index::
   pair: ExpressionToUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  \ ``series(f, x = a)``\  expands the expression \ ``f``\  as a series in powers of (\ ``x``\  - a).


.. index::
   pair: ExpressionToUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``series(f, x = a, n)``\  expands the expression \ ``f``\  as a series in powers of (\ ``x``\  - a); terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``series(f, n)``\  returns a series expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; series

:spadfun:`series`\: FE -> \ :ref:`Any <l416e79>`\  
  \ ``series(f)``\  returns a series expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable.


.. index::
   pair: ExpressionToUnivariatePowerSeries; series

:spadfun:`series`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Any <l416e79>`\  
  \ ``series(x)``\  returns \ ``x``\  viewed as a series.

.. _l45787072657373696f6e546f556e6976617269617465506f776572536572696573-7461796c6f72:

.. index::
   pair: ExpressionToUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  \ ``taylor(f, x = a)``\  expands the expression \ ``f``\  as a Taylor series in powers of \ ``(x - a)``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``taylor(f, x = a)``\  expands the expression \ ``f``\  as a Taylor series in powers of \ ``(x - a)``\ ; terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (FE, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  \ ``taylor(f, n)``\  returns a Taylor expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \ ``n``\ .


.. index::
   pair: ExpressionToUnivariatePowerSeries; taylor

:spadfun:`taylor`\: FE -> \ :ref:`Any <l416e79>`\  
  \ ``taylor(f)``\  returns a Taylor expansion of the expression \ ``f``\ . Note: \ ``f``\  should have only one variable; the series will be expanded in powers of that variable.


.. index::
   pair: ExpressionToUnivariatePowerSeries; taylor

:spadfun:`taylor`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Any <l416e79>`\  
  \ ``taylor(x)``\  returns \ ``x``\  viewed as a Taylor series.


