.. index:: Boolean

.. _l426f6f6c65616e:

Boolean
=======

:viewcode:`boolean.spad line 40 <boolean.spad#L40>` :editcode:`[edit on github] <boolean.spad#L40>`


\ :ref:`Boolean <l426f6f6c65616e>`\  is the elementary logic with 2 values: \ ``true``\  and \ ``false``\ 


.. _l426f6f6c65616e-2f5c:

\ :ref:`/\\ <l4d65657453656d696c617474696365-2f5c>`\ \: (%, %) -> % 
  from \ :ref:`MeetSemilattice <l4d65657453656d696c617474696365>`\ 

.. _l426f6f6c65616e-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l426f6f6c65616e-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l426f6f6c65616e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l426f6f6c65616e-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l426f6f6c65616e-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l426f6f6c65616e-5c2f:

\ :ref:`\\/ <l4a6f696e53656d696c617474696365-5c2f>`\ \: (%, %) -> % 
  from \ :ref:`JoinSemilattice <l4a6f696e53656d696c617474696365>`\ 

.. _l426f6f6c65616e-5f7c5f:

\ :ref:`_|_ <l426f756e6465644a6f696e53656d696c617474696365-5f7c5f>`\ \: % 
  from \ :ref:`BoundedJoinSemilattice <l426f756e6465644a6f696e53656d696c617474696365>`\ 

.. _l426f6f6c65616e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l426f6f6c65616e-7e:

\ :ref:`~ <l4c6f676963-7e>`\ \: % -> % 
  from \ :ref:`Logic <l4c6f676963>`\ 

.. _l426f6f6c65616e-616e64:

.. index::
   pair: Boolean; and

:spadfun:`and`\: (%, %) -> % 
  \ ``a and b``\  returns the logical \ *and*\  of Boolean \ ``a``\  and \ ``b``\ .

.. _l426f6f6c65616e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l426f6f6c65616e-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l426f6f6c65616e-656e756d6572617465:

\ :ref:`enumerate <l46696e697465-656e756d6572617465>`\ \: () -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l426f6f6c65616e-66616c7365:

\ :ref:`false <l4c6f676963-66616c7365>`\ \: % 
  from \ :ref:`Logic <l4c6f676963>`\ 

.. _l426f6f6c65616e-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l426f6f6c65616e-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l426f6f6c65616e-696d706c696573:

.. index::
   pair: Boolean; implies

:spadfun:`implies`\: (%, %) -> % 
  \ ``implies(a, b)``\  returns the logical implication of Boolean \ ``a``\  and \ ``b``\ .

.. _l426f6f6c65616e-696e646578:

\ :ref:`index <l46696e697465-696e646578>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l426f6f6c65616e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l426f6f6c65616e-6c6f6f6b7570:

\ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ \: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l426f6f6c65616e-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l426f6f6c65616e-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l426f6f6c65616e-6e616e64:

.. index::
   pair: Boolean; nand

:spadfun:`nand`\: (%, %) -> % 
  \ ``nand(a, b)``\  returns the logical negation of \ ``a``\  and \ ``b``\ .

.. _l426f6f6c65616e-6e6f72:

.. index::
   pair: Boolean; nor

:spadfun:`nor`\: (%, %) -> % 
  \ ``nor(a, b)``\  returns the logical negation of \ ``a``\  or \ ``b``\ .

.. _l426f6f6c65616e-6e6f74:

.. index::
   pair: Boolean; not

:spadfun:`not`\: % -> % 
  \ ``not n``\  returns the negation of \ ``n``\ .

.. _l426f6f6c65616e-6f72:

.. index::
   pair: Boolean; or

:spadfun:`or`\: (%, %) -> % 
  \ ``a or b``\  returns the logical inclusive \ *or*\  of Boolean \ ``a``\  and \ ``b``\ .

.. _l426f6f6c65616e-72616e646f6d:

\ :ref:`random <l46696e697465-72616e646f6d>`\ \: () -> % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l426f6f6c65616e-73697a65:

\ :ref:`size <l46696e697465-73697a65>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l426f6f6c65616e-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l426f6f6c65616e-54:

\ :ref:`T <l426f756e6465644d65657453656d696c617474696365-54>`\ \: % 
  from \ :ref:`BoundedMeetSemilattice <l426f756e6465644d65657453656d696c617474696365>`\ 

.. _l426f6f6c65616e-74657374:

.. index::
   pair: Boolean; test

:spadfun:`test`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``test(b)``\  returns \ ``b``\  and is provided for compatibility with the new compiler.

.. _l426f6f6c65616e-74727565:

\ :ref:`true <l4c6f676963-74727565>`\ \: % 
  from \ :ref:`Logic <l4c6f676963>`\ 

.. _l426f6f6c65616e-786f72:

.. index::
   pair: Boolean; xor

:spadfun:`xor`\: (%, %) -> % 
  \ ``xor(a, b)``\  returns the logical exclusive \ *or*\  of Boolean \ ``a``\  and \ ``b``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BoundedDistributiveLattice <l426f756e6465644469737472696275746976654c617474696365>`\  

\ :ref:`BoundedJoinSemilattice <l426f756e6465644a6f696e53656d696c617474696365>`\  

\ :ref:`BoundedLattice <l426f756e6465644c617474696365>`\  

\ :ref:`BoundedMeetSemilattice <l426f756e6465644d65657453656d696c617474696365>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`DistributiveLattice <l4469737472696275746976654c617474696365>`\  

\ :ref:`Finite <l46696e697465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`JoinSemilattice <l4a6f696e53656d696c617474696365>`\  

\ :ref:`Lattice <l4c617474696365>`\  

\ :ref:`Logic <l4c6f676963>`\  

\ :ref:`MeetSemilattice <l4d65657453656d696c617474696365>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

