.. index:: Homology

.. _l486f6d6f6c6f6779:

Homology
========

:viewcode:`gpresent.spad line 1580 <gpresent.spad#L1580>` :editcode:`[edit on github] <gpresent.spad#L1580>`


Intended to hold homology which is calculated using SmithNormalForm: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/homology/ Date Created: June 2016 Basic Operations: Related packages: Related categories: Related Domains: FreeModule, FiniteSimplicialComplex Also See: AMS Classifications:


.. _l486f6d6f6c6f6779-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l486f6d6f6c6f6779-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l486f6d6f6c6f6779-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l486f6d6f6c6f6779-6469737047656e657261746f7273:

.. index::
   pair: Homology; dispGenerators

:spadfun:`dispGenerators`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  more detailed output with generators

.. _l486f6d6f6c6f6779-686f6d6f6c6f677930:

.. index::
   pair: Homology; homology0

:spadfun:`homology0`\: () -> % 
  construct empty homology, useful in validation code

.. _l486f6d6f6c6f6779-686f6d6f6c6f6779:

.. index::
   pair: Homology; homology

:spadfun:`homology`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  construct from lists

.. _l486f6d6f6c6f6779-686f6d6f6c6f67796332:

.. index::
   pair: Homology; homologyc2

:spadfun:`homologyc2`\: () -> % 
  construct \ ``C2``\  homology, useful in validation code

.. _l486f6d6f6c6f6779-686f6d6f6c6f677947726f7570:

.. index::
   pair: Homology; homologyGroup

:spadfun:`homologyGroup`\: (\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  construct from differential over integers uses method described by Waldek Hebisch here: https://groups.google.com/forum/?hl=en\#!topic/fricas-devel/mLOdQ-\ ``fwbO0``\ 

.. _l486f6d6f6c6f6779-686f6d6f6c6f67797a:

.. index::
   pair: Homology; homologyz

:spadfun:`homologyz`\: () -> % 
  construct \ ``Z``\  homology, useful in validation code

.. _l486f6d6f6c6f6779-686f6d6f6c6f67797a6332:

.. index::
   pair: Homology; homologyzc2

:spadfun:`homologyzc2`\: () -> % 
  construct \ ``Z+C2``\  homology, useful in validation code

.. _l486f6d6f6c6f6779-686f6d6f6c6f67797a7a:

.. index::
   pair: Homology; homologyzz

:spadfun:`homologyzz`\: () -> % 
  construct \ ``Z*Z``\  homology, useful in validation code

.. _l486f6d6f6c6f6779-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

