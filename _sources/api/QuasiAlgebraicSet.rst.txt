.. index:: QuasiAlgebraicSet

.. _l5175617369416c67656272616963536574:

QuasiAlgebraicSet(R, Var, Expon, Dpoly)
=======================================

:viewcode:`qalgset.spad line 1 <qalgset.spad#L1>` :editcode:`[edit on github] <qalgset.spad#L1>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* Var: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* Expon: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* Dpoly: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, Expon, Var)


\ :ref:`QuasiAlgebraicSet <l5175617369416c67656272616963536574>`\  constructs a domain representing quasi-algebraic sets, which is the intersection of a Zariski closed set, defined as the common zeros of a given list of polynomials (the defining polynomials for equations), and a principal Zariski open set, defined as the complement of the common zeros of a polynomial \ ``f``\  (the defining polynomial for the inequation). This domain provides simplification of a user-given representation using groebner basis computations. There are two simplification routines: the first function \ :spadfun:`idealSimplify`\  uses groebner basis of ideals alone, while the second, \ :spadfun:`simplify`\  uses both groebner basis and factorization. The resulting defining equations \ ``L``\  always form a groebner basis, and the resulting defining inequation \ ``f``\  is always reduced. The function \ :spadfun:`simplify`\  may be applied several times if desired. A third simplification routine \ :spadfun:`radicalSimplify`\  is provided in \ :ref:`QuasiAlgebraicSet2 <l5175617369416c6765627261696353657432>`\  for comparison study only, as it is inefficient compared to the other two, as well as is restricted to only certain coefficient domains. For detail analysis and a comparison of the three methods, please consult the reference cited.   A polynomial function \ ``q``\  defined on the quasi-algebraic set is equivalent to its reduced form with respect to \ ``L``\ . While this may be obtained using the usual normal form algorithm, there is no canonical form for \ ``q``\ .   The ordering in groebner basis computation is determined by the data type of the input polynomials. If it is possible we suggest to use refinements of total degree orderings.


.. _l5175617369416c67656272616963536574-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5175617369416c67656272616963536574-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5175617369416c67656272616963536574-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5175617369416c67656272616963536574-646566696e696e674571756174696f6e73:

.. index::
   pair: QuasiAlgebraicSet; definingEquations

:spadfun:`definingEquations`\: % -> \ :ref:`List <l4c697374>`\  Dpoly 
  \ ``definingEquations(s)``\  returns a list of defining polynomials for equations, that is, for the Zariski closed part of \ ``s``\ .

.. _l5175617369416c67656272616963536574-646566696e696e67496e6571756174696f6e:

.. index::
   pair: QuasiAlgebraicSet; definingInequation

:spadfun:`definingInequation`\: % -> Dpoly 
  \ ``definingInequation(s)``\  returns a single defining polynomial for the inequation, that is, the Zariski open part of \ ``s``\ .

.. _l5175617369416c67656272616963536574-656d7074793f:

.. index::
   pair: QuasiAlgebraicSet; empty?

:spadfun:`empty?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``empty?(s)``\  returns \ ``true``\  if the quasialgebraic set \ ``s``\  has no points, and \ ``false``\  otherwise.

.. _l5175617369416c67656272616963536574-656d707479:

.. index::
   pair: QuasiAlgebraicSet; empty

:spadfun:`empty`\: () -> % 
  \ ``empty()``\  returns the empty quasi-algebraic set

.. _l5175617369416c67656272616963536574-696465616c53696d706c696679:

.. index::
   pair: QuasiAlgebraicSet; idealSimplify

:spadfun:`idealSimplify`\: % -> % 
  \ ``idealSimplify(s)``\  returns a different and presumably simpler representation of \ ``s``\  with the defining polynomials for the equations forming a groebner basis, and the defining polynomial for the inequation reduced with respect to the basis, using Buchberger\ ``'s``\  algorithm.

.. _l5175617369416c67656272616963536574-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5175617369416c67656272616963536574-7175617369416c67656272616963536574:

.. index::
   pair: QuasiAlgebraicSet; quasiAlgebraicSet

:spadfun:`quasiAlgebraicSet`\: (\ :ref:`List <l4c697374>`\  Dpoly, Dpoly) -> % 
  \ ``quasiAlgebraicSet(pl, q)``\  returns the quasi-algebraic set with defining equations \ ``p``\  = 0 for \ ``p``\  belonging to the list \ ``pl``\ , and defining inequation \ ``q``\  \ ``~=``\  0.

.. _l5175617369416c67656272616963536574-736574537461747573:

.. index::
   pair: QuasiAlgebraicSet; setStatus

:spadfun:`setStatus`\: (%, Union(\ :ref:`Boolean <l426f6f6c65616e>`\ , failed)) -> % 
  \ ``setStatus(s, t)``\  returns the same representation for \ ``s``\ , but asserts the following: if \ ``t``\  is \ ``true``\ , then \ ``s``\  is empty, if \ ``t``\  is \ ``false``\ , then \ ``s``\  is non-empty, and if \ ``t``\  = "failed", then no assertion is made (that is, "don\ ``'t``\  know"). Note: for internal use only, with care.

.. _l5175617369416c67656272616963536574-73696d706c696679:

.. index::
   pair: QuasiAlgebraicSet; simplify

:spadfun:`simplify`\: % -> % if R has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  and R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  \ ``simplify(s)``\  returns a different and presumably simpler representation of \ ``s``\  with the defining polynomials for the equations forming a groebner basis, and the defining polynomial for the inequation reduced with respect to the basis, using a heuristic algorithm based on factoring.

.. _l5175617369416c67656272616963536574-737461747573:

.. index::
   pair: QuasiAlgebraicSet; status

:spadfun:`status`\: % -> Union(\ :ref:`Boolean <l426f6f6c65616e>`\ , failed) 
  \ ``status(s)``\  returns \ ``true``\  if the quasi-algebraic set is empty, \ ``false``\  if it is not, and "failed" if not yet known


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

