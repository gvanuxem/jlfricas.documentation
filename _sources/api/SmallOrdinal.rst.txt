.. index:: SmallOrdinal

.. _l536d616c6c4f7264696e616c:

SmallOrdinal
============

:viewcode:`ordinal.spad line 1 <ordinal.spad#L1>` :editcode:`[edit on github] <ordinal.spad#L1>`


SmallOrdinal implements ordinal numbers up to \ ``epsilon_0``\ . \ ``+``\  and \ ``*``\  are "natural" addition and multiplication of ordinals. Available separately are "ordered" operataions.


.. _l536d616c6c4f7264696e616c-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l536d616c6c4f7264696e616c-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l536d616c6c4f7264696e616c-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l536d616c6c4f7264696e616c-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l536d616c6c4f7264696e616c-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l536d616c6c4f7264696e616c-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l536d616c6c4f7264696e616c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l536d616c6c4f7264696e616c-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l536d616c6c4f7264696e616c-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l536d616c6c4f7264696e616c-5e:

.. index::
   pair: SmallOrdinal; ^

:spadfun:`^`\: (%, %) -> % 
  \ ``o1^o2``\  returns \ ``o1``\  to power \ ``o2``\ , where power is inductively defined using successive natural multiplication from the left


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l536d616c6c4f7264696e616c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l536d616c6c4f7264696e616c-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l536d616c6c4f7264696e616c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

.. _l536d616c6c4f7264696e616c-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l536d616c6c4f7264696e616c-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l536d616c6c4f7264696e616c-696e746567657250617274:

.. index::
   pair: SmallOrdinal; integerPart

:spadfun:`integerPart`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``integerPart(o)``\  = \ ``n``\  when \ ``o``\  = \ ``l``\  + \ ``n``\  and \ ``l``\  is a limit ordinal

.. _l536d616c6c4f7264696e616c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l536d616c6c4f7264696e616c-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l536d616c6c4f7264696e616c-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l536d616c6c4f7264696e616c-6c696d697450617274:

.. index::
   pair: SmallOrdinal; limitPart

:spadfun:`limitPart`\: % -> % 
  \ ``limitPart(o)``\  = \ ``l``\  when \ ``o``\  = \ ``l``\  + \ ``n``\  and \ ``l``\  is a limit ordinal and \ ``n``\  is a nonnegative integer

.. _l536d616c6c4f7264696e616c-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l536d616c6c4f7264696e616c-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l536d616c6c4f7264696e616c-6f6d656761:

.. index::
   pair: SmallOrdinal; omega

:spadfun:`omega`\: () -> % 
  \ ``omega()``\  is the first infinite ordinal

.. _l536d616c6c4f7264696e616c-6f6d656761706f776572:

.. index::
   pair: SmallOrdinal; omegapower

:spadfun:`omegapower`\: % -> % 
  \ ``omegapower(p)``\  returns omega^p

.. _l536d616c6c4f7264696e616c-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l536d616c6c4f7264696e616c-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l536d616c6c4f7264696e616c-6f7264696e616c416464:

.. index::
   pair: SmallOrdinal; ordinalAdd

:spadfun:`ordinalAdd`\: (%, %) -> % 
  \ ``ordinalAdd(o1, o2)``\  returns sum of \ ``o1``\  and \ ``o2``\  as ordered sets

.. _l536d616c6c4f7264696e616c-6f7264696e616c4d756c:

.. index::
   pair: SmallOrdinal; ordinalMul

:spadfun:`ordinalMul`\: (%, %) -> % 
  \ ``ordinalMul(o1, o2)``\  returns product of \ ``o1``\  and \ ``o2``\  as ordered sets

.. _l536d616c6c4f7264696e616c-6f7264696e616c506f776572:

.. index::
   pair: SmallOrdinal; ordinalPower

:spadfun:`ordinalPower`\: (%, %) -> % 
  \ ``ordinalPower(o1, o2)``\  returns \ ``o1``\  to power \ ``o2``\ , where power is inductively defined using successive ordinal multiplication from the left

.. _l536d616c6c4f7264696e616c-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l536d616c6c4f7264696e616c-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

.. _l536d616c6c4f7264696e616c-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

.. _l536d616c6c4f7264696e616c-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l536d616c6c4f7264696e616c-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l536d616c6c4f7264696e616c-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l536d616c6c4f7264696e616c-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l536d616c6c4f7264696e616c-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l536d616c6c4f7264696e616c-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  

\ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

