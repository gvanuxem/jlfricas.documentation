.. index:: FractionalIdeal

.. _l4672616374696f6e616c496465616c:

FractionalIdeal(R, F, UP, A)
============================

:viewcode:`divisor.spad line 1 <divisor.spad#L1>` :editcode:`[edit on github] <divisor.spad#L1>`

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

* F: \ :ref:`QuotientFieldCategory <l51756f7469656e744669656c6443617465676f7279>`\  R

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* A: Join(\ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (F, UP), \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  F)


Fractional ideals in a framed algebra.


.. _l4672616374696f6e616c496465616c-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c-2f:

\ :ref:`/ <l47726f7570-2f>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l4672616374696f6e616c496465616c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4672616374696f6e616c496465616c-5e:

\ :ref:`^ <l47726f7570-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`Group <l47726f7570>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4672616374696f6e616c496465616c-6261736973:

.. index::
   pair: FractionalIdeal; basis

:spadfun:`basis`\: % -> \ :ref:`Vector <l566563746f72>`\  A 
  \ ``basis((f1, ..., fn))``\  returns the vector \ ``[f1, ..., fn]``\ .

.. _l4672616374696f6e616c496465616c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4672616374696f6e616c496465616c-636f6d6d757461746f72:

\ :ref:`commutator <l47726f7570-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l4672616374696f6e616c496465616c-636f6e6a7567617465:

\ :ref:`conjugate <l47726f7570-636f6e6a7567617465>`\ \: (%, %) -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l4672616374696f6e616c496465616c-64656e6f6d:

.. index::
   pair: FractionalIdeal; denom

:spadfun:`denom`\: % -> R 
  \ ``denom(1/d * (f1, ..., fn))``\  returns \ ``d``\ .

.. _l4672616374696f6e616c496465616c-696465616c:

.. index::
   pair: FractionalIdeal; ideal

:spadfun:`ideal`\: \ :ref:`Vector <l566563746f72>`\  A -> % 
  \ ``ideal([f1, ..., fn])``\  returns the ideal \ ``(f1, ..., fn)``\ .

.. _l4672616374696f6e616c496465616c-696e76:

\ :ref:`inv <l47726f7570-696e76>`\ \: % -> % 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l4672616374696f6e616c496465616c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4672616374696f6e616c496465616c-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c-6d696e696d697a65:

.. index::
   pair: FractionalIdeal; minimize

:spadfun:`minimize`\: % -> % 
  \ ``minimize(I)``\  returns a reduced set of generators for \ ``I``\ .

.. _l4672616374696f6e616c496465616c-6e6f726d:

.. index::
   pair: FractionalIdeal; norm

:spadfun:`norm`\: % -> F 
  \ ``norm(I)``\  returns the norm of the ideal \ ``I``\ .

.. _l4672616374696f6e616c496465616c-6e756d6572:

.. index::
   pair: FractionalIdeal; numer

:spadfun:`numer`\: % -> \ :ref:`Vector <l566563746f72>`\  A 
  \ ``numer(1/d * (f1, ..., fn))``\  = the vector \ ``[f1, ..., fn]``\ .

.. _l4672616374696f6e616c496465616c-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c-72616e646f6d4c43:

.. index::
   pair: FractionalIdeal; randomLC

:spadfun:`randomLC`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Vector <l566563746f72>`\  A) -> A 
  \ ``randomLC(n, x)``\  should be local but conditional.

.. _l4672616374696f6e616c496465616c-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4672616374696f6e616c496465616c-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4672616374696f6e616c496465616c-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Group <l47726f7570>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

