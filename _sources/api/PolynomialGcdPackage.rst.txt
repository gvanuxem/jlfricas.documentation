.. index:: PolynomialGcdPackage

.. _l506f6c796e6f6d69616c4763645061636b616765:

PolynomialGcdPackage(E, OV, R, P)
=================================

:viewcode:`pgcd.spad line 1 <pgcd.spad#L1>` :editcode:`[edit on github] <pgcd.spad#L1>`

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* OV: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, OV)


This package computes multivariate polynomial \ ``gcd``\ \ ``'s``\  using a hensel lifting strategy. The constraint on the coefficient domain is imposed by the lifting strategy. It is assumed that the coefficient domain has the property that almost all specializations preserve the degree of the \ ``gcd``\ .


.. _l506f6c796e6f6d69616c4763645061636b616765-676364:

.. index::
   pair: PolynomialGcdPackage; gcd

:spadfun:`gcd`\: (P, P) -> P 
  \ ``gcd(p, q)``\  computes the \ ``gcd``\  of the two polynomials \ ``p``\  and \ ``q``\ .


.. index::
   pair: PolynomialGcdPackage; gcd

:spadfun:`gcd`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P 
  \ ``gcd(p, q)``\  computes the \ ``gcd``\  of the two polynomials \ ``p``\  and \ ``q``\ .


.. index::
   pair: PolynomialGcdPackage; gcd

:spadfun:`gcd`\: \ :ref:`List <l4c697374>`\  P -> P 
  \ ``gcd(lp)``\  computes the \ ``gcd``\  of the list of polynomials \ ``lp``\ .


.. index::
   pair: PolynomialGcdPackage; gcd

:spadfun:`gcd`\: \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P 
  \ ``gcd(lp)``\  computes the \ ``gcd``\  of the list of polynomials \ ``lp``\ .

.. _l506f6c796e6f6d69616c4763645061636b616765-6763645072696d6974697665:

.. index::
   pair: PolynomialGcdPackage; gcdPrimitive

:spadfun:`gcdPrimitive`\: (P, P) -> P 
  \ ``gcdPrimitive(p, q)``\  computes the \ ``gcd``\  of the primitive polynomials \ ``p``\  and \ ``q``\ .


.. index::
   pair: PolynomialGcdPackage; gcdPrimitive

:spadfun:`gcdPrimitive`\: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  P 
  \ ``gcdPrimitive(p, q)``\  computes the \ ``gcd``\  of the primitive polynomials \ ``p``\  and \ ``q``\ .


.. index::
   pair: PolynomialGcdPackage; gcdPrimitive

:spadfun:`gcdPrimitive`\: \ :ref:`List <l4c697374>`\  P -> P 
  \ ``gcdPrimitive lp``\  computes the \ ``gcd``\  of the list of primitive polynomials \ ``lp``\ .


