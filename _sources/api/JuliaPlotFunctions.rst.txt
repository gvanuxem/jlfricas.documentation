.. index:: JuliaPlotFunctions

.. _l4a756c6961506c6f7446756e6374696f6e73:

JuliaPlotFunctions
==================

:viewcode:`jplot.spad line 1 <jplot.spad#L1>` :editcode:`[edit on github] <jplot.spad#L1>`


low level plotting functions using the Plots module from Julia.


.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c42617221:

.. index::
   pair: JuliaPlotFunctions; jlBar!

:spadfun:`jlBar!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlBar!(x,y)``\  draws a bar plot of \ ``y``\  \ ``vs``\  \ ``x``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c426172:

.. index::
   pair: JuliaPlotFunctions; jlBar

:spadfun:`jlBar`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlBar(x,y)``\  draws a bar plot of \ ``y``\  \ ``vs``\  \ ``x``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c436f6e746f757221:

.. index::
   pair: JuliaPlotFunctions; jlContour!

:spadfun:`jlContour!`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContour!(f, a..b, c..d)``\  draws the contour plot of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\  on the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlContour!

:spadfun:`jlContour!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContour!(x,y,mat)``\  draws the contour plot of surface \ ``mat``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c436f6e746f7572:

.. index::
   pair: JuliaPlotFunctions; jlContour

:spadfun:`jlContour`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContour(f, a..b, c..d)``\  draws the contour plot of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\ .


.. index::
   pair: JuliaPlotFunctions; jlContour

:spadfun:`jlContour`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContour(x,y,mat)``\  draws the contour plot of surface \ ``mat``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c436f6e746f75726621:

.. index::
   pair: JuliaPlotFunctions; jlContourf!

:spadfun:`jlContourf!`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContourf!(f, a..b, c..d)``\  draws the contour plot of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\  on the existing graph object. Fill area between contours.


.. index::
   pair: JuliaPlotFunctions; jlContourf!

:spadfun:`jlContourf!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContourf!(x,y,mat)``\  draws the contour plot of surface \ ``mat``\  on the existing graph object. Fill area between contours.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c436f6e746f757266:

.. index::
   pair: JuliaPlotFunctions; jlContourf

:spadfun:`jlContourf`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContourf(f, a..b, c..d)``\  draws the contour plot of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\ . Fill area between contours.


.. index::
   pair: JuliaPlotFunctions; jlContourf

:spadfun:`jlContourf`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlContourf(x,y,mat)``\  draws the contour plot of surface \ ``mat``\ . Fill area between contours.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c43757276657321:

.. index::
   pair: JuliaPlotFunctions; jlCurves!

:spadfun:`jlCurves!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlCurves!(x,y)``\  draws a Bezier plot curve from (\ ``x``\ .1,\ ``y``\ .1) to (\ ``x``\ .end,\ ``y``\ .end) with control points (\ ``x``\ .2,\ ``y``\ .2),..., (\ ``x``\ .end-1,\ ``y``\ .end-1) and draws it on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c437572766573:

.. index::
   pair: JuliaPlotFunctions; jlCurves

:spadfun:`jlCurves`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlCurves(x,y)``\  draws a Bezier plot curve from (\ ``x``\ .1,\ ``y``\ .1) to (\ ``x``\ .end,\ ``y``\ .end) with control points (\ ``x``\ .2,\ ``y``\ .2),..., (\ ``x``\ .end-1,\ ``y``\ .end-1) and draws it.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c44656e7369747921:

.. index::
   pair: JuliaPlotFunctions; jlDensity!

:spadfun:`jlDensity!`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlDensity!(x)``\  draws a line plot of a kernel density estimate of \ ``x``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c44656e73697479:

.. index::
   pair: JuliaPlotFunctions; jlDensity

:spadfun:`jlDensity`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlDensity(x)``\  draws a line plot of a kernel density estimate of \ ``x``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f7421:

.. index::
   pair: JuliaPlotFunctions; jlPlot!

:spadfun:`jlPlot!`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot!(f, a..b, c..d)``\  adds the graph of \ ``z = f(x, y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\  on the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlPlot!

:spadfun:`jlPlot!`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot!(f, a..b)``\  adds the graph of \ ``y = f(x)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  to the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlPlot!

:spadfun:`jlPlot!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot!(x,y)``\  draws a plot using elements of \ ``x``\  and \ ``y``\  on the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlPlot!

:spadfun:`jlPlot!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlPlot(\ ``x``\ ,\ ``y``\ ,\ ``z``\ ) draws a plot using elements of \ ``x``\ , \ ``y``\  and \ ``z``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f74:

.. index::
   pair: JuliaPlotFunctions; jlPlot

:spadfun:`jlPlot`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot(f, a..b, c..d)``\  draws the graph of \ ``z = f(x, y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\ 


.. index::
   pair: JuliaPlotFunctions; jlPlot

:spadfun:`jlPlot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot(f, a..b)``\  draws the graph of \ ``y = f(x)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\ . For example: \example{jlPlot(x+->sinc(x),-15..15)}


.. index::
   pair: JuliaPlotFunctions; jlPlot

:spadfun:`jlPlot`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot(x,y)``\  draws a plot using elements of \ ``x``\  and \ ``y``\ .


.. index::
   pair: JuliaPlotFunctions; jlPlot

:spadfun:`jlPlot`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlot(x,y,z)``\  draws a plot using elements of \ ``x``\ , \ ``y``\  and \ ``z``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f745469746c6521:

.. index::
   pair: JuliaPlotFunctions; jlPlotTitle!

:spadfun:`jlPlotTitle!`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotTitle!(title)``\  draws `title' as plot \ ``title``\  in the current plot. For example: jlPlotTitle! "sin(\ ``x``\ )" if you have the LatexStrings Julia package \example{jlPlotTitle! jlLatex latex sin(x)} For simple expressions \ ``title``\  will automatically be enclosed betweek \$. So use: \example{jlPlotTitle! jlLatex "sin(x)"} For normal text and equations insert dollar signs \$ as needed. \example{jlPlotTitle! jlLatex "Plot: \$sin(x)\$"}

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f74586c6162656c21:

.. index::
   pair: JuliaPlotFunctions; jlPlotXlabel!

:spadfun:`jlPlotXlabel!`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotXlabel!(str)``\  sets \ ``x``\  label. See \spadfunFromX{jlPlotTitle}{JuliaPlotFunctions} for more informations on the diffent supported formats.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f74586c696d7321:

.. index::
   pair: JuliaPlotFunctions; jlPlotXlims!

:spadfun:`jlPlotXlims!`\: (\ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotXlims!(x1,x2)``\  sets \ ``x``\  plot limits.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f74596c6162656c21:

.. index::
   pair: JuliaPlotFunctions; jlPlotYlabel!

:spadfun:`jlPlotYlabel!`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotYlabel!(str)``\  sets \ ``y``\  label. See \spadfunFromX{jlPlotTitle}{JuliaPlotFunctions} for more informations on the diffent supported formats.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f74596c696d7321:

.. index::
   pair: JuliaPlotFunctions; jlPlotYlims!

:spadfun:`jlPlotYlims!`\: (\ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotYlims!(y1,y2)``\  sets \ ``y``\  plot limits.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f745a6c6162656c21:

.. index::
   pair: JuliaPlotFunctions; jlPlotZlabel!

:spadfun:`jlPlotZlabel!`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotZlabel!(str)``\  sets \ ``z``\  label. See \spadfunFromX{jlPlotTitle}{JuliaPlotFunctions} for more informations on the diffent supported formats.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c506c6f745a6c696d7321:

.. index::
   pair: JuliaPlotFunctions; jlPlotZlims!

:spadfun:`jlPlotZlims!`\: (\ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPlotZlims!(z1,z2)``\  sets \ ``z``\  plot limits.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c52616e6765:

.. index::
   pair: JuliaPlotFunctions; jlRange

:spadfun:`jlRange`\: (\ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  
  \ ``jlRange(range, n)``\  is a utility function that returns a JuliaFloat64Vector with \ ``n``\  points from \ ``low(range)``\  to \ ``high(range)``\ .


.. index::
   pair: JuliaPlotFunctions; jlRange

:spadfun:`jlRange`\: \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\  -> \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  
  \ ``jlRange(range)``\  is a utility function that returns a JuliaFloat64Vector with 250 points from \ ``low(range)``\  to \ ``high(range)``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c53617665506c6f74:

.. index::
   pair: JuliaPlotFunctions; jlSavePlot

:spadfun:`jlSavePlot`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlSavePlot(file)``\  save the current plot in \ ``file``\ . Supported fomat by default: \ ``png``\  (default), \ ``PDF``\ , \ ``svg``\  and more. See https://docs.juliaplots.org/latest/output/\#savefig-/-format

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c5375726661636521:

.. index::
   pair: JuliaPlotFunctions; jlSurface!

:spadfun:`jlSurface!`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlSurface!(f, a..b, c..d)``\  draws the surface of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\  on the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlSurface!

:spadfun:`jlSurface!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlSurface!(x,y,mat)``\  draws the plot surface of \ ``mat``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c53757266616365:

.. index::
   pair: JuliaPlotFunctions; jlSurface

:spadfun:`jlSurface`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlSurface(f, a..b, c..d)``\  draws the surface of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\ .


.. index::
   pair: JuliaPlotFunctions; jlSurface

:spadfun:`jlSurface`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlSurface(x,y,mat)``\  draws the plot surface of \ ``mat``\ .

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c576972656672616d6521:

.. index::
   pair: JuliaPlotFunctions; jlWireframe!

:spadfun:`jlWireframe!`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlWireframe!(f, a..b, c..d)``\  draws add the wireframe of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\  on the existing graph object.


.. index::
   pair: JuliaPlotFunctions; jlWireframe!

:spadfun:`jlWireframe!`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlWireframe!(x,y,mat)``\  draws the wireframe surface of \ ``mat``\  on the existing graph object.

.. _l4a756c6961506c6f7446756e6374696f6e73-6a6c576972656672616d65:

.. index::
   pair: JuliaPlotFunctions; jlWireframe

:spadfun:`jlWireframe`\: ((\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlWireframe(f, a..b, c..d)``\  draws the wireframe of \ ``y = f(x,y)``\  as \ ``x``\  ranges from \ ``min(a, b)``\  to \ ``max(a, b)``\  and \ ``y``\  ranges from \ ``min(c, d)``\  to \ ``max(c, d)``\ .


.. index::
   pair: JuliaPlotFunctions; jlWireframe

:spadfun:`jlWireframe`\: (\ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlWireframe(x,y,mat)``\  draws the wireframe surface of \ ``mat``\ .


