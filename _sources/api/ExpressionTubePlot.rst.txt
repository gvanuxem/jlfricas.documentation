.. index:: ExpressionTubePlot

.. _l45787072657373696f6e54756265506c6f74:

ExpressionTubePlot
==================

:viewcode:`tube.spad line 167 <tube.spad#L167>` :editcode:`[edit on github] <tube.spad#L167>`


Author: Clifton \ ``J``\ . Williamson Date Created: Bastille Day 1989 Keywords: Examples: Package for constructing tubes around 3-dimensional parametric curves.


.. _l45787072657373696f6e54756265506c6f74-636f6e7374616e74546f556e61727946756e6374696f6e:

.. index::
   pair: ExpressionTubePlot; constantToUnaryFunction

:spadfun:`constantToUnaryFunction`\: \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``constantToUnaryFunction(s)``\  is a local function which takes the value of \ ``s``\ , which may be a function of a constant, and returns a function which always returns the value \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  \ ``s``\ .

.. _l45787072657373696f6e54756265506c6f74-74756265506c6f74:

.. index::
   pair: ExpressionTubePlot; tubePlot

:spadfun:`tubePlot`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`TubePlot <l54756265506c6f74>`\  \ :ref:`Plot3D <l506c6f743344>`\  
  \ ``tubePlot(f, g, h, colorFcn, a..b, r, n)``\  puts a tube of radius \ ``r``\ (\ ``t``\ ) with \ ``n``\  points on each circle about the curve \ ``x = f(t)``\ , \ ``y = g(t)``\ , \ ``z = h(t)``\  for \ ``t``\  in \ ``[a, b]``\ . The tube is considered to be open.


.. index::
   pair: ExpressionTubePlot; tubePlot

:spadfun:`tubePlot`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`TubePlot <l54756265506c6f74>`\  \ :ref:`Plot3D <l506c6f743344>`\  
  \ ``tubePlot(f, g, h, colorFcn, a..b, r, n, s)``\  puts a tube of radius \ ``r(t)``\  with \ ``n``\  points on each circle about the curve \ ``x = f(t)``\ , \ ``y = g(t)``\ , \ ``z = h(t)``\  for \ ``t``\  in \ ``[a,b]``\ . If \ ``s``\  = "closed", the tube is considered to be closed; if \ ``s``\  = "open", the tube is considered to be open.


.. index::
   pair: ExpressionTubePlot; tubePlot

:spadfun:`tubePlot`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`TubePlot <l54756265506c6f74>`\  \ :ref:`Plot3D <l506c6f743344>`\  
  \ ``tubePlot(f, g, h, colorFcn, a..b, r, n)``\  puts a tube of radius \ ``r``\  with \ ``n``\  points on each circle about the curve \ ``x = f(t)``\ , \ ``y = g(t)``\ , \ ``z = h(t)``\  for \ ``t``\  in \ ``[a, b]``\ . The tube is considered to be open.


.. index::
   pair: ExpressionTubePlot; tubePlot

:spadfun:`tubePlot`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`TubePlot <l54756265506c6f74>`\  \ :ref:`Plot3D <l506c6f743344>`\  
  \ ``tubePlot(f, g, h, colorFcn, a..b, r, n, s)``\  puts a tube of radius \ ``r``\  with \ ``n``\  points on each circle about the curve \ ``x = f(t)``\ , \ ``y = g(t)``\ , \ ``z = h(t)``\  for \ ``t``\  in \ ``[a, b]``\ . If \ ``s``\  = "closed", the tube is considered to be closed; if \ ``s``\  = "open", the tube is considered to be open.


