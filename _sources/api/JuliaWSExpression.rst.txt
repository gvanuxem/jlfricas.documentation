.. index:: JuliaWSExpression

.. _l4a756c6961575345787072657373696f6e:

JuliaWSExpression
=================

:viewcode:`jwsexpr.spad line 1 <jwsexpr.spad#L1>` :editcode:`[edit on github] <jwsexpr.spad#L1>`


Julia Wolfram Symbolic expressions using Wolfram Symbolic Transport Protocol.


.. _l4a756c6961575345787072657373696f6e-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4a756c6961575345787072657373696f6e-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-23:

\ :ref:`# <l4a756c69615753416767726567617465-23>`\ \: % -> \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\  
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4a756c6961575345787072657373696f6e-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4a756c6961575345787072657373696f6e-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l4a756c6961575345787072657373696f6e-2f:

\ :ref:`/ <l4669656c64-2f>`\ \: (%, %) -> % 
  from \ :ref:`Field <l4669656c64>`\ 


\ :ref:`/ <l46756e6374696f6e537061636532-2f>`\ \: (\ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %), \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a756c6961575345787072657373696f6e-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a756c6961575345787072657373696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a756c6961575345787072657373696f6e-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a756c6961575345787072657373696f6e-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a756c6961575345787072657373696f6e-5e:

\ :ref:`^ <l456c656d656e7461727946756e6374696f6e43617465676f7279-5e>`\ \: (%, %) -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 


\ :ref:`^ <l5261646963616c43617465676f7279-5e>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 


\ :ref:`^ <l4469766973696f6e52696e67-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 


.. index::
   pair: JuliaWSExpression; ^

:spadfun:`^`\: (%, \ :ref:`JuliaWSRational <l4a756c69615753526174696f6e616c>`\ ) -> % 
  ^ is the exponentiation by a rational.


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a756c6961575345787072657373696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a756c6961575345787072657373696f6e-616273:

\ :ref:`abs <l5370656369616c46756e6374696f6e43617465676f7279-616273>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-61636f73:

\ :ref:`acos <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61636f73>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-61636f7368:

\ :ref:`acosh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-61636f7368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-61636f74:

\ :ref:`acot <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61636f74>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-61636f7468:

\ :ref:`acoth <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-61636f7468>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-61637363:

\ :ref:`acsc <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61637363>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6163736368:

\ :ref:`acsch <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6163736368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-616972794169:

\ :ref:`airyAi <l5370656369616c46756e6374696f6e43617465676f7279-616972794169>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6169727941695072696d65:

\ :ref:`airyAiPrime <l5370656369616c46756e6374696f6e43617465676f7279-6169727941695072696d65>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-616972794269:

\ :ref:`airyBi <l5370656369616c46756e6374696f6e43617465676f7279-616972794269>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6169727942695072696d65:

\ :ref:`airyBiPrime <l5370656369616c46756e6374696f6e43617465676f7279-6169727942695072696d65>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-616c67746f776572:

\ :ref:`algtower <l46756e6374696f6e537061636532-616c67746f776572>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`algtower <l46756e6374696f6e537061636532-616c67746f776572>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-616e6765724a:

\ :ref:`angerJ <l5370656369616c46756e6374696f6e43617465676f7279-616e6765724a>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l4a756c6961575345787072657373696f6e-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l4a756c6961575345787072657373696f6e-6170617274:

.. index::
   pair: JuliaWSExpression; apart

:spadfun:`apart`\: % -> % 
  \ ``apart(expr)``\  converts a rational expression as a sum of terms, reducing denominator(\ ``s``\ ).


.. index::
   pair: JuliaWSExpression; apart

:spadfun:`apart`\: (%, %) -> % 
  \ ``apart(expr, vars)``\  converts a rational expression as a sum of terms as one arg apart do but only for vars (the others are considered as constants).

.. _l4a756c6961575345787072657373696f6e-617070656e64:

\ :ref:`append <l4a756c69615753416767726567617465-617070656e64>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-6170706c7951756f7465:

\ :ref:`applyQuote <l46756e6374696f6e537061636532-6170706c7951756f7465>`\ \: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`applyQuote <l46756e6374696f6e537061636532-6170706c7951756f7465>`\ \: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`applyQuote <l46756e6374696f6e537061636532-6170706c7951756f7465>`\ \: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %, %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`applyQuote <l46756e6374696f6e537061636532-6170706c7951756f7465>`\ \: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %, %, %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`applyQuote <l46756e6374696f6e537061636532-6170706c7951756f7465>`\ \: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-617267756d656e74:

\ :ref:`argument <l436f6d706c657843617465676f7279-617267756d656e74>`\ \: % -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-61736563:

\ :ref:`asec <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61736563>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6173656368:

\ :ref:`asech <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6173656368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6173696e:

\ :ref:`asin <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-6173696e>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6173696e68:

\ :ref:`asinh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6173696e68>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4a756c6961575345787072657373696f6e-6174616e:

\ :ref:`atan <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-6174616e>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; atan

:spadfun:`atan`\: (%, %) -> % 
  \ ``atan(x,y)``\  computes the arc tangent of \ ``y/x``\ .

.. _l4a756c6961575345787072657373696f6e-6174616e68:

\ :ref:`atanh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6174616e68>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6261726e657347:

.. index::
   pair: JuliaWSExpression; barnesG

:spadfun:`barnesG`\: % -> % 
  \ ``barnesG(z)``\  computes the Barnes \ ``G``\ -function of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-6261736973:

\ :ref:`basis <l4672616d65644d6f64756c65-6261736973>`\ \: () -> \ :ref:`Vector <l566563746f72>`\  % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %

.. _l4a756c6961575345787072657373696f6e-62656c6f6e673f:

\ :ref:`belong? <l45787072657373696f6e537061636532-62656c6f6e673f>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-62657373656c49:

\ :ref:`besselI <l5370656369616c46756e6374696f6e43617465676f7279-62657373656c49>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-62657373656c4a:

\ :ref:`besselJ <l5370656369616c46756e6374696f6e43617465676f7279-62657373656c4a>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-62657373656c4b:

\ :ref:`besselK <l5370656369616c46756e6374696f6e43617465676f7279-62657373656c4b>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-62657373656c59:

\ :ref:`besselY <l5370656369616c46756e6374696f6e43617465676f7279-62657373656c59>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-42657461:

\ :ref:`Beta <l5370656369616c46756e6374696f6e43617465676f7279-42657461>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


\ :ref:`Beta <l5370656369616c46756e6374696f6e43617465676f7279-42657461>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-42657461526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; BetaRegularized

:spadfun:`BetaRegularized`\: (%, %, %) -> % 
  \ ``BetaRegularized(x,a,b)``\  computes the regularized incomplete beta function.

.. _l4a756c6961575345787072657373696f6e-62696e6f6d69616c:

\ :ref:`binomial <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-62696e6f6d69616c>`\ \: (%, %) -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-626f78:

\ :ref:`box <l45787072657373696f6e537061636532-626f78>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-63616e63656c:

.. index::
   pair: JuliaWSExpression; cancel

:spadfun:`cancel`\: % -> % 
  \ ``cancel(expr)``\  cancels common factors in numerators and denominators of the rational expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; cancel

:spadfun:`cancel`\: (%, %) -> % 
  \ ``cancel(expr, opt)``\  cancels common factors in numerators and denominators of the rational expression \ ``expr``\  with options opt, for example an Extension rule.

.. _l4a756c6961575345787072657373696f6e-6365696c696e67:

.. index::
   pair: JuliaWSExpression; ceiling

:spadfun:`ceiling`\: % -> % 
  \ ``ceiling(x)``\  returns the smallest integer greater than or equal to \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-6368617261637465726973746963506f6c796e6f6d69616c:

\ :ref:`characteristicPolynomial <l46696e69746552616e6b416c6765627261-6368617261637465726973746963506f6c796e6f6d69616c>`\ \: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-636861726c69657243:

\ :ref:`charlierC <l5370656369616c46756e6374696f6e43617465676f7279-636861726c69657243>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-63686562797368657654:

.. index::
   pair: JuliaWSExpression; chebyshevT

:spadfun:`chebyshevT`\: (%, %) -> % 
  \ ``chebyshevT(n, expr)``\  returns the chebyshev polynomial of the first kind or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-63686562797368657655:

.. index::
   pair: JuliaWSExpression; chebyshevU

:spadfun:`chebyshevU`\: (%, %) -> % 
  \ ``chebyshevU(n, expr)``\  returns chebyshev polynomial of the second kind or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-436869:

\ :ref:`Chi <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-436869>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-4369:

\ :ref:`Ci <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-4369>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f656666696369656e74:

.. index::
   pair: JuliaWSExpression; coefficient

:spadfun:`coefficient`\: (%, %) -> % 
  \ ``coefficient(p,expr)``\  returns the coefficient of \ ``expr``\  in \ ``p``\ . \example{x:= jWSExpr x} \example{coefficient((x - y)^4, x * y^3)}


.. index::
   pair: JuliaWSExpression; coefficient

:spadfun:`coefficient`\: (%, %, \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  \ ``coefficient(p, expr, n)``\  returns the coefficient of expr^n in \ ``p``\ .

.. _l4a756c6961575345787072657373696f6e-636f656666696369656e744c697374:

.. index::
   pair: JuliaWSExpression; coefficientList

:spadfun:`coefficientList`\: (%, %) -> % 
  \ ``coefficientList(p,expr)``\  returns the list of coefficients of \ ``expr``\  in \ ``p``\ .

.. _l4a756c6961575345787072657373696f6e-636f656666696369656e7452756c6573:

.. index::
   pair: JuliaWSExpression; coefficientRules

:spadfun:`coefficientRules`\: % -> % 
  \ ``coefficientRules(p)``\  returns the coefficients and exponents of \ ``p``\  as \ ``WS``\  rules.


.. index::
   pair: JuliaWSExpression; coefficientRules

:spadfun:`coefficientRules`\: (%, %) -> % 
  \ ``coefficientRules(p,vars)``\  returns the coefficients and exponents of \ ``p``\  with respect to var(\ ``s``\ ) as \ ``WS``\  rules.

.. _l4a756c6961575345787072657373696f6e-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l4a756c69615753416767726567617465-636f65726365>`\ \: % -> \ :ref:`JuliaWSExpression <l4a756c6961575345787072657373696f6e>`\  
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``coerce(gi)``\  coerce \ ``gi``\  to a JuliaWSExpression. Convenience function.


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``coerce(f)``\  coerces the floating point number \ ``f``\  to a JuliaWSExpression. Convenience function.


\ :ref:`coerce <l46756e6374696f6e537061636532-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  % -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``coerce(q)``\  coerces the rational \ ``q``\  to a JuliaWSExpression. Convenience function.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


\ :ref:`coerce <l46756e6374696f6e537061636532-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  % -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``coerce(z)``\  coerces the integer \ ``z``\  to a JuliaWSExpression. Convenience function.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Kernel <l4b65726e656c>`\  % -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``coerce(list)``\  coerces \ ``list``\  of JuliaWSExpression.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


\ :ref:`coerce <l46756e6374696f6e537061636532-636f65726365>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  % -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`coerce <l46756e6374696f6e537061636532-636f65726365>`\ \: \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``coerce(str)``\  coerces the string \ ``str``\  to a JuliaWSExpression evaluating \ ``str``\  as a Wolfram Symbolic Language Expression. For example: \example{expr := "Sqrt[x]"::JWSEXPR;jlEval(expr,"x=2.0")}


.. index::
   pair: JuliaWSExpression; coerce

:spadfun:`coerce`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``coerce(sym)``\  coerces \ ``sym``\  to a JuliaWSExpression.

.. _l4a756c6961575345787072657373696f6e-636f6c6c656374:

.. index::
   pair: JuliaWSExpression; collect

:spadfun:`collect`\: (%, %) -> % 
  \ ``collect(expr, var)``\  collects same power terms with respect to variable var.


.. index::
   pair: JuliaWSExpression; collect

:spadfun:`collect`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> % 
  \ ``collect(expr, vars)``\  collects same power terms with respect to variables in vars.

.. _l4a756c6961575345787072657373696f6e-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4a756c6961575345787072657373696f6e-636f6d706c6578:

\ :ref:`complex <l436f6d706c657843617465676f7279-636f6d706c6578>`\ \: (%, %) -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-636f6d706c6578457870616e64:

.. index::
   pair: JuliaWSExpression; complexExpand

:spadfun:`complexExpand`\: % -> % 
  \ ``complexExpand(expr)``\  expands \ ``expr``\  assuming variables are real.


.. index::
   pair: JuliaWSExpression; complexExpand

:spadfun:`complexExpand`\: (%, %) -> % 
  \ ``complexExpand(expr, cvars)``\  expands \ ``expr``\  assuming all but cvars variables are real.

.. _l4a756c6961575345787072657373696f6e-636f6e646974696f6e50:

\ :ref:`conditionP <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-636f6e646974696f6e50>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> Union(\ :ref:`Vector <l566563746f72>`\  %, failed) if % has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  and % has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  or % has \ :ref:`FiniteFieldCategory <l46696e6974654669656c6443617465676f7279>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-636f6e6a7567617465:

\ :ref:`conjugate <l5370656369616c46756e6374696f6e43617465676f7279-636f6e6a7567617465>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 


\ :ref:`convert <l4672616d65644d6f64756c65-636f6e76657274>`\ \: % -> \ :ref:`Vector <l566563746f72>`\  % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %


\ :ref:`convert <l46756e6374696f6e537061636532-636f6e76657274>`\ \: \ :ref:`Factored <l466163746f726564>`\  % -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`convert <l4d6f6e6f67656e6963416c6765627261-636f6e76657274>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`convert <l4672616d65644d6f64756c65-636f6e76657274>`\ \: \ :ref:`Vector <l566563746f72>`\  % -> % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %

.. _l4a756c6961575345787072657373696f6e-636f6f7264696e61746573:

\ :ref:`coordinates <l4672616d65644d6f64756c65-636f6f7264696e61746573>`\ \: % -> \ :ref:`Vector <l566563746f72>`\  % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %


\ :ref:`coordinates <l46696e69746552616e6b416c6765627261-636f6f7264696e61746573>`\ \: (%, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Vector <l566563746f72>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`coordinates <l46696e69746552616e6b416c6765627261-636f6f7264696e61746573>`\ \: (\ :ref:`Vector <l566563746f72>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`coordinates <l4672616d65644d6f64756c65-636f6f7264696e61746573>`\ \: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %

.. _l4a756c6961575345787072657373696f6e-636f73:

\ :ref:`cos <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-636f73>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f7368:

\ :ref:`cosh <l4879706572626f6c696346756e6374696f6e43617465676f7279-636f7368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f74:

\ :ref:`cot <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-636f74>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f7468:

\ :ref:`coth <l4879706572626f6c696346756e6374696f6e43617465676f7279-636f7468>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-636f756c6f6d6246:

.. index::
   pair: JuliaWSExpression; coulombF

:spadfun:`coulombF`\: (%, %, %) -> % 
  \ ``coulombF(l,eta,ro)``\  is the regular Coulomb wave function.

.. _l4a756c6961575345787072657373696f6e-636f756c6f6d6247:

.. index::
   pair: JuliaWSExpression; coulombG

:spadfun:`coulombG`\: (%, %, %) -> % 
  \ ``coulombG(l,eta,ro)``\  is the irregular Coulomb wave function.

.. _l4a756c6961575345787072657373696f6e-636f756c6f6d624831:

.. index::
   pair: JuliaWSExpression; coulombH1

:spadfun:`coulombH1`\: (%, %, %) -> % 
  \ ``coulombH1(l,eta,ro)``\  is the incoming irregular Coulomb wave function \ ``H^``\ (+).

.. _l4a756c6961575345787072657373696f6e-636f756c6f6d624832:

.. index::
   pair: JuliaWSExpression; coulombH2

:spadfun:`coulombH2`\: (%, %, %) -> % 
  \ ``coulombH2(l,eta,ro)``\  is the incoming irregular Coulomb wave function \ ``H^``\ (-).

.. _l4a756c6961575345787072657373696f6e-637363:

\ :ref:`csc <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-637363>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-63736368:

\ :ref:`csch <l4879706572626f6c696346756e6374696f6e43617465676f7279-63736368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % if % has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l446966666572656e7469616c457874656e73696f6e-44>`\ \: (%, % -> %) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  %


\ :ref:`D <l446966666572656e7469616c457874656e73696f6e-44>`\ \: (%, % -> %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  %


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, %) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if % has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a756c6961575345787072657373696f6e-646177736f6e:

.. index::
   pair: JuliaWSExpression; dawson

:spadfun:`dawson`\: % -> % 
  \ ``dawson(x)``\  computes the Dawson integral of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-6465636f6d706f7365:

.. index::
   pair: JuliaWSExpression; decompose

:spadfun:`decompose`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``decompose(poly, x)``\  is a polynomial decomposition function, here, related to \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-646564656b696e64457461:

.. index::
   pair: JuliaWSExpression; dedekindEta

:spadfun:`dedekindEta`\: % -> % 
  \ ``dedekindEta(tau)``\  computes the Dedekind modular elliptic eta.

.. _l4a756c6961575345787072657373696f6e-646566696e696e67506f6c796e6f6d69616c:

\ :ref:`definingPolynomial <l45787072657373696f6e537061636532-646566696e696e67506f6c796e6f6d69616c>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`definingPolynomial <l4d6f6e6f67656e6963416c6765627261-646566696e696e67506f6c796e6f6d69616c>`\ \: () -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-64656c657465:

\ :ref:`delete <l4a756c69615753416767726567617465-64656c657465>`\ \: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-64656e6f6d:

\ :ref:`denom <l46756e6374696f6e537061636532-64656e6f6d>`\ \: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-64656e6f6d696e61746f72:

.. index::
   pair: JuliaWSExpression; denominator

:spadfun:`denominator`\: % -> % 
  \ ``denominator(expr)``\  returns the denominator of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-64657269766174696f6e436f6f7264696e61746573:

\ :ref:`derivationCoordinates <l4d6f6e6f67656e6963416c6765627261-64657269766174696f6e436f6f7264696e61746573>`\ \: (\ :ref:`Vector <l566563746f72>`\  %, % -> %) -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-64657269766174697665:

.. index::
   pair: JuliaWSExpression; derivative

:spadfun:`derivative`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  \ ``derivative(func,n)``\  returns the derivative of order \ ``n``\  of \ ``func``\ . \example{fprime:=derivative(operator('f),1)}


.. index::
   pair: JuliaWSExpression; derivative

:spadfun:`derivative`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``derivative(func, n, var)``\  returns the derivative of order \ ``n``\  of \ ``func``\  applied to var. \example{x := jWSExpr x} \example{fprimex:=derivative(operator('f),1,x)}

.. _l4a756c6961575345787072657373696f6e-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c457874656e73696f6e-646966666572656e7469617465>`\ \: (%, % -> %) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  %


\ :ref:`differentiate <l446966666572656e7469616c457874656e73696f6e-646966666572656e7469617465>`\ \: (%, % -> %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  %


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, %) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  %


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if % has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a756c6961575345787072657373696f6e-646967616d6d61:

\ :ref:`digamma <l5370656369616c46756e6374696f6e43617465676f7279-646967616d6d61>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; digamma

:spadfun:`digamma`\: (%, %) -> % 
  \ ``digamma(n,z)``\  the \ ``n``\ -th derivative of the digamma function

.. _l4a756c6961575345787072657373696f6e-64696c6f67:

\ :ref:`dilog <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-64696c6f67>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-64696d656e73696f6e73:

\ :ref:`dimensions <l4a756c69615753416767726567617465-64696d656e73696f6e73>`\ \: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\  
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-646972616344656c7461:

\ :ref:`diracDelta <l5370656369616c46756e6374696f6e43617465676f7279-646972616344656c7461>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6469726963686c6574457461:

.. index::
   pair: JuliaWSExpression; dirichletEta

:spadfun:`dirichletEta`\: % -> % 
  \ ``dirichletEta(z)``\  computes the Dirichlet eta.

.. _l4a756c6961575345787072657373696f6e-6469726963686c65744c:

.. index::
   pair: JuliaWSExpression; dirichletL

:spadfun:`dirichletL`\: (%, %, %) -> % 
  \ ``dirichletL(k,j,s)``\  returns Dirichlet \ ``L``\ -function of \ ``s``\ , modulus \ ``k``\ , index \ ``j``\ .

.. _l4a756c6961575345787072657373696f6e-6469736372696d696e616e74:

.. index::
   pair: JuliaWSExpression; discriminant

:spadfun:`discriminant`\: (%, %) -> % 
  \ ``discriminant(p, x)``\  returns the discriminant of \ ``p``\  with respect to \ ``x``\ .


\ :ref:`discriminant <l4672616d6564416c6765627261-6469736372696d696e616e74>`\ \: () -> % 
  from \ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`discriminant <l46696e69746552616e6b416c6765627261-6469736372696d696e616e74>`\ \: \ :ref:`Vector <l566563746f72>`\  % -> % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-64697374726962757465:

.. index::
   pair: JuliaWSExpression; distribute

:spadfun:`distribute`\: % -> % 
  \ ``distribute(expr)``\  distributes \ ``expr``\  over addition. For illustration: \example{distribute(jWSExpr "(x + y) * (a + b + c)")}


.. index::
   pair: JuliaWSExpression; distribute

:spadfun:`distribute`\: (%, %) -> % 
  \ ``distribute(f,g)``\  distributes \ ``f``\  over \ ``g``\ .

.. _l4a756c6961575345787072657373696f6e-646976696465:

\ :ref:`divide <l4575636c696465616e446f6d61696e-646976696465>`\ \: (%, %) -> Record(quotient: %, remainder: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-64536f6c7665:

.. index::
   pair: JuliaWSExpression; dSolve

:spadfun:`dSolve`\: (%, %, %) -> % 
  \ ``dSolve(expr, funcs, vars)``\  solves the (list of) differential equation(\ ``s``\ ) \ ``expr``\  for the function(\ ``s``\ ) \ ``funcs``\  with independant variable(\ ``s``\ ) vars. \example{x:=jWSExpr x;} \example{fx:=derivative(operator('f),0,x)} \example{fprimex:=derivative(operator('f),1,x)} \example{dSolve(jWSEqual(fprimex + fx , a *sin(x)),fx,x)}


.. index::
   pair: JuliaWSExpression; dSolve

:spadfun:`dSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> % 
  \ ``dSolve(eq, func,var)``\  solves the differential equation \ ``eq``\  for the function(\ ``s``\ ) funcs with independant variable(\ ``s``\ ) vars. \example{x:=jWSExpr x;} \example{fx:=derivative(operator('f),0,x)} \example{fprimex:=derivative(operator('f),1,x)} \example{dSolve(fprimex + fx = a * sin(x)/cos(x),fx,x)}

.. _l4a756c6961575345787072657373696f6e-64536f6c766556616c7565:

.. index::
   pair: JuliaWSExpression; dSolveValue

:spadfun:`dSolveValue`\: (%, %, %) -> % 
  \ ``dSolveValue(expr,funcs, vars)``\ returns the value determined by the differential equation(\ ``s``\ ) in \ ``expr``\  for the function(\ ``s``\ ) \ ``funcs``\  with independant variable(\ ``s``\ ) vars. \example{x:=jWSExpr x;} \example{f:=derivative(operator('f),0)} \example{f0:=derivative(operator('f),0,0)} \example{fx:=derivative(operator('f),0,x)} \example{fprimex:=derivative(operator('f),1,x)} \example{dSolveValue(jWSExpr([jWSEqual(fprimex + fx , a *sin(x)/cos(x)), jWSEqual(f0,0)]),f,x)}


.. index::
   pair: JuliaWSExpression; dSolveValue

:spadfun:`dSolveValue`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> % 
  \ ``dSolveValue(eq, func,var)``\  returns the value determined by the differential equation \ ``eq``\  for the function \ ``func``\  with independant variable \ ``var``\ .

.. _l4a756c6961575345787072657373696f6e-4569:

\ :ref:`Ei <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-4569>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-4569456e:

.. index::
   pair: JuliaWSExpression; EiEn

:spadfun:`EiEn`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``EiEn(n,z)``\  returns the exponential integral En(\ ``z``\ ).

.. _l4a756c6961575345787072657373696f6e-656c6c697074696345:

.. index::
   pair: JuliaWSExpression; ellipticE

:spadfun:`ellipticE`\: % -> % 
  \ ``ellipticE(x)``\  computes the complete elliptic integral of the second kind.


.. index::
   pair: JuliaWSExpression; ellipticE

:spadfun:`ellipticE`\: (%, %) -> % 
  \ ``ellipticE(phi,m)``\  computes the elliptic integral of the second kind.

.. _l4a756c6961575345787072657373696f6e-656c6c697074696346:

.. index::
   pair: JuliaWSExpression; ellipticF

:spadfun:`ellipticF`\: (%, %) -> % 
  \ ``ellipticF(phi,m)``\  computes the elliptic integral of the first kind.

.. _l4a756c6961575345787072657373696f6e-656c6c69707469634b:

.. index::
   pair: JuliaWSExpression; ellipticK

:spadfun:`ellipticK`\: % -> % 
  \ ``ellipticK(m)``\  computes the complete elliptic integral of the first kind.

.. _l4a756c6961575345787072657373696f6e-656c6c69707469635069:

.. index::
   pair: JuliaWSExpression; ellipticPi

:spadfun:`ellipticPi`\: (%, %) -> % 
  \ ``ellipticPi(n,m)``\  computes the complete elliptic integral of the third kind.


.. index::
   pair: JuliaWSExpression; ellipticPi

:spadfun:`ellipticPi`\: (%, %, %) -> % 
  \ ``ellipticPi(n,phi,m)``\  computes the elliptic integral of the third kind.

.. _l4a756c6961575345787072657373696f6e-656c6c69707469635468657461:

.. index::
   pair: JuliaWSExpression; ellipticTheta

:spadfun:`ellipticTheta`\: (%, %, %) -> % 
  \ ``ellipticTheta(a, u, q)``\  computes the theta function, a ranges from 1 to 4.

.. _l4a756c6961575345787072657373696f6e-656c6c697074696354686574615072696d65:

.. index::
   pair: JuliaWSExpression; ellipticThetaPrime

:spadfun:`ellipticThetaPrime`\: (%, %, %) -> % 
  \ ``ellipticThetaPrime(a, u, q)``\  computes the derivative of the theta function, a ranges from 1 to 4.

.. _l4a756c6961575345787072657373696f6e-656c74:

\ :ref:`elt <l4a756c69615753416767726567617465-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-656e756d6572617465:

\ :ref:`enumerate <l46696e697465-656e756d6572617465>`\ \: () -> \ :ref:`List <l4c697374>`\  % if % has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l4a756c6961575345787072657373696f6e-657266:

\ :ref:`erf <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-657266>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; erf

:spadfun:`erf`\: (%, %) -> % 
  \ ``erf(x,x1)``\  computes the generalized error function.

.. _l4a756c6961575345787072657373696f6e-65726663:

.. index::
   pair: JuliaWSExpression; erfc

:spadfun:`erfc`\: % -> % 
  \ ``erfc(x)``\  computes the complementary error function.

.. _l4a756c6961575345787072657373696f6e-65726669:

\ :ref:`erfi <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-65726669>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6575636c696465616e53697a65:

\ :ref:`euclideanSize <l4575636c696465616e446f6d61696e-6575636c696465616e53697a65>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`Kernel <l4b65726e656c>`\  %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %)


\ :ref:`eval <l46756e6374696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`eval <l46756e6374696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l46756e6374696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , % -> %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`eval <l46756e6374696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-657870:

\ :ref:`exp <l456c656d656e7461727946756e6374696f6e43617465676f7279-657870>`\ \: % -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; exp

:spadfun:`exp`\: () -> % 
  \ ``exp()``\  returns \ ``ℯ``\  (\%\ ``e``\  or exp(1)).

.. _l4a756c6961575345787072657373696f6e-657870616e64:

.. index::
   pair: JuliaWSExpression; expand

:spadfun:`expand`\: % -> % 
  \ ``expand(expr)``\  puts out products and positive powers of integers of the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; expand

:spadfun:`expand`\: (%, %) -> % 
  \ ``expand(expr, opt)``\  this the expand version with excluded pattern-\ ``s``\  or any other options avaiable (for example "Modulus-\ ``>p"``\ ).

.. _l4a756c6961575345787072657373696f6e-657870616e6444656e6f6d696e61746f72:

.. index::
   pair: JuliaWSExpression; expandDenominator

:spadfun:`expandDenominator`\: % -> % 
  \ ``expandDenominator(expr)``\  expands denominators of rational expression \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-657870616e644e756d657261746f72:

.. index::
   pair: JuliaWSExpression; expandNumerator

:spadfun:`expandNumerator`\: % -> % 
  \ ``expandNumerator(expr)``\  expands numerators of rational expression \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6578706f6e656e74:

.. index::
   pair: JuliaWSExpression; exponent

:spadfun:`exponent`\: (%, %) -> % 
  \ ``exponent(p,expr)``\  returns the maximaum exponent of \ ``p``\  for \ ``expr``\ . \example{x:= jWSExpr x;y := jWSExpr y} \example{p:=(x^2-2)^3*(y*x^3+x^11*y^7)*(y^5+x*y^2+x^11+y)} \example{exponent(\%,(x^2-2))}


.. index::
   pair: JuliaWSExpression; exponent

:spadfun:`exponent`\: (%, %, %) -> % 
  \ ``exponent(p, expr, map)``\  applies map to the exponents related to \ ``expr``\  and returns it. By default map = "Max". \example{x:= jWSExpr x;y := jWSExpr y} \example{p:=expand((x^2-2)^3*(y*x^3+x^11*y^7)*(y^5+x*y^2+x^11+y))} \example{exponent(p,x,"Min")}

.. _l4a756c6961575345787072657373696f6e-65787072657373496465616c4d656d626572:

\ :ref:`expressIdealMember <l5072696e636970616c496465616c446f6d61696e-65787072657373496465616c4d656d626572>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-657870546f54726967:

.. index::
   pair: JuliaWSExpression; expToTrig

:spadfun:`expToTrig`\: % -> % 
  \ ``expToTrig(expr)``\  returns \ ``expr``\  with exponentials converted to (hyperbolic) trigonometric functions.

.. _l4a756c6961575345787072657373696f6e-657871756f:

\ :ref:`exquo <l436f6d706c657843617465676f7279-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-657874656e6465644575636c696465616e:

\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %) -> Record(coef1: %, coef2: %, generator: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %, %) -> Union(Record(coef1: %, coef2: %), failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-657874656e646564457870616e64:

.. index::
   pair: JuliaWSExpression; extendedExpand

:spadfun:`extendedExpand`\: % -> % 
  \ ``extendedExpand(expr)``\  puts out all products and positive powers of integers.

.. _l4a756c6961575345787072657373696f6e-657874656e64656453696d706c696679:

.. index::
   pair: JuliaWSExpression; extendedSimplify

:spadfun:`extendedSimplify`\: % -> % 
  \ ``extendedSimplify(expr)``\  extended version of simplify. This is the full version of simplify.


.. index::
   pair: JuliaWSExpression; extendedSimplify

:spadfun:`extendedSimplify`\: (%, %) -> % 
  \ ``extendedSimplify(expr, assumptions)``\  extended version of simplify with respect to assumptions or ExcludedForms. This is the full version.

.. _l4a756c6961575345787072657373696f6e-65787472616374:

\ :ref:`extract <l4a756c69615753416767726567617465-65787472616374>`\ \: (%, \ :ref:`JuliaWSExpression <l4a756c6961575345787072657373696f6e>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


.. index::
   pair: JuliaWSExpression; extract

:spadfun:`extract`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``extract(expr,i)``\  returns the \ ``i``\ -th element of \ ``expr``\  seen as a list.

.. _l4a756c6961575345787072657373696f6e-666163746f72:

.. index::
   pair: JuliaWSExpression; factor

:spadfun:`factor`\: % -> % 
  \ ``factor(expr)``\  factors the expression or polynomial \ ``expr``\ .


\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 


.. index::
   pair: JuliaWSExpression; factor

:spadfun:`factor`\: (%, %) -> % 
  \ ``factor(expr, opt)``\  factors the expression or polynomial \ ``expr``\ . For example: \example{x := jWSExpr x;} \example{factor(1 + x^2, "GaussianIntegers -> True")}

.. _l4a756c6961575345787072657373696f6e-666163746f7269616c:

\ :ref:`factorial <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-666163746f7269616c>`\ \: % -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-666163746f7269616c73:

\ :ref:`factorials <l436f6d62696e61746f7269616c4f707343617465676f7279-666163746f7269616c73>`\ \: % -> % 
  from \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ 


\ :ref:`factorials <l436f6d62696e61746f7269616c4f707343617465676f7279-666163746f7269616c73>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-666163746f724c697374:

.. index::
   pair: JuliaWSExpression; factorList

:spadfun:`factorList`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``factorList(expr)``\  factor the expression or polynomial \ ``expr``\ , but returns result as a list of pair (factor, exponent).

.. _l4a756c6961575345787072657373696f6e-666163746f72506f6c796e6f6d69616c:

\ :ref:`factorPolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f72506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-666163746f7253717561726546726565:

.. index::
   pair: JuliaWSExpression; factorSquareFree

:spadfun:`factorSquareFree`\: % -> % 
  \ ``factorSquareFree(expr)``\  factors the expression or polynomial \ ``expr``\  in square free factors.

.. _l4a756c6961575345787072657373696f6e-666163746f72537175617265467265654c697374:

.. index::
   pair: JuliaWSExpression; factorSquareFreeList

:spadfun:`factorSquareFreeList`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``factorSquareFreeList(expr)``\  factors the expression or polynomial \ ``expr``\  in square free factors but returns result as a list of pair (factor, exponent).

.. _l4a756c6961575345787072657373696f6e-666163746f7253717561726546726565506f6c796e6f6d69616c:

\ :ref:`factorSquareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f7253717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if % has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-666163746f725465726d73:

.. index::
   pair: JuliaWSExpression; factorTerms

:spadfun:`factorTerms`\: % -> % 
  \ ``factorTerms(p)``\  factors out numerical factor of the expression or polynomial expr.


.. index::
   pair: JuliaWSExpression; factorTerms

:spadfun:`factorTerms`\: (%, %) -> % 
  \ ``factorTerms(p, var)``\  factors out numerical factor of the expression or polynomial expr without those related to var.


.. index::
   pair: JuliaWSExpression; factorTerms

:spadfun:`factorTerms`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> % 
  \ ``factorTerms(p, vars)``\  factors the expression or polynomial expr by putting out numerical factors without those related to var(\ ``s``\ ).

.. _l4a756c6961575345787072657373696f6e-666163746f725465726d734c697374:

.. index::
   pair: JuliaWSExpression; factorTermsList

:spadfun:`factorTermsList`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``factorTermsList(expr)``\  is the counterpart of factorTerms but here returned as a list of pair (numerical factor, polynomial factor).


.. index::
   pair: JuliaWSExpression; factorTermsList

:spadfun:`factorTermsList`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``factorTermsList(expr, vars)``\  is the counterpart of factorTerms but here returned as a list of pair (numerical factor, polynomial factor). The numerical factors related to var(\ ``s``\ ) are not factored.

.. _l4a756c6961575345787072657373696f6e-6669626f6e61636369:

.. index::
   pair: JuliaWSExpression; fibonacci

:spadfun:`fibonacci`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``fibonacci(n, x)``\  returns the Fibonacci polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-66696e64496e7374616e6365:

.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars)``\  tries to find an instance the (in)equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (%, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars,dom)``\  tries to find an instance to the equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (%, %, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars,dom, n)``\  tries to find \ ``n``\  instance(\ ``s``\ ) to the (in)equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars)``\  tries to find an instance the equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars,dom)``\  tries to find an instance the equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; findInstance

:spadfun:`findInstance`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``findInstance(expr,lvars,dom,n)``\  tries to find \ ``n``\  instance(\ ``s``\ ) to the equation in \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-66696e64526f6f74:

.. index::
   pair: JuliaWSExpression; findRoot

:spadfun:`findRoot`\: (%, %) -> % 
  \ ``findRoot(exp,start)``\  try to find the root of expr starting at \ ``start``\ . \example{findRoot(sin(x) + cos(x), "\{x, 0\}")}

.. _l4a756c6961575345787072657373696f6e-6669727374:

\ :ref:`first <l4a756c69615753416767726567617465-6669727374>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-666c6f6f72:

.. index::
   pair: JuliaWSExpression; floor

:spadfun:`floor`\: % -> % 
  \ ``floor(x)``\  returns the greatest integer less than or equal to \ ``x``\ 

.. _l4a756c6961575345787072657373696f6e-6672616374696f6e50617274:

\ :ref:`fractionPart <l5370656369616c46756e6374696f6e43617465676f7279-6672616374696f6e50617274>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-667265654f663f:

\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-667265736e656c43:

\ :ref:`fresnelC <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-667265736e656c43>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-667265736e656c53:

\ :ref:`fresnelS <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-667265736e656c53>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-66726f6d436f656666696369656e7452756c6573:

.. index::
   pair: JuliaWSExpression; fromCoefficientRules

:spadfun:`fromCoefficientRules`\: (%, %) -> % 
  \ ``fromCoefficientRules(list, vars)``\  constructs the polynomial from the \ ``list``\  of coefficients and exponents rules. \example{x:= jWSExpr x;y := jWSExpr y} \example{coefficientRules((x + y)^2+x^11,jWSExpr [x,y])} \example{fromCoefficientRules(\%, jWSExpr [x,y])}

.. _l4a756c6961575345787072657373696f6e-66756e6374696f6e457870616e64:

.. index::
   pair: JuliaWSExpression; functionExpand

:spadfun:`functionExpand`\: % -> % 
  \ ``functionExpand(expr)``\  tries to expand functions in \ ``expr``\  to more elementary functions. For example: \example{functionExpand sphericalBesselJ(3,8)}


.. index::
   pair: JuliaWSExpression; functionExpand

:spadfun:`functionExpand`\: (%, %) -> % 
  \ ``functionExpand(expr,assumptions)``\  tries to expand functions in \ ``expr``\  to more elementary functions assuming that \ ``assumptions``\  are satisfied.

.. _l4a756c6961575345787072657373696f6e-47616d6d61:

\ :ref:`Gamma <l5370656369616c46756e6374696f6e43617465676f7279-47616d6d61>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


\ :ref:`Gamma <l5370656369616c46756e6374696f6e43617465676f7279-47616d6d61>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; Gamma

:spadfun:`Gamma`\: (%, %, %) -> % 
  \ ``Gamma(a,z1,z2)``\  computes the generalized incomplete gamma function.

.. _l4a756c6961575345787072657373696f6e-47616d6d61526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; GammaRegularized

:spadfun:`GammaRegularized`\: (%, %) -> % 
  \ ``GammaRegularized(a,x)``\  computes the regularized incomplete gamma function.

.. _l4a756c6961575345787072657373696f6e-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-676567656e626175657243:

.. index::
   pair: JuliaWSExpression; gegenbauerC

:spadfun:`gegenbauerC`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``gegenbauerC(n,x)``\  returns the renormalized form of the Gegenbauer polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.


.. index::
   pair: JuliaWSExpression; gegenbauerC

:spadfun:`gegenbauerC`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %, %) -> % 
  \ ``gegenbauerC(n,lambda,x)``\  returns the Gegenbauer polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-67656e657261746f72:

\ :ref:`generator <l4d6f6e6f67656e6963416c6765627261-67656e657261746f72>`\ \: () -> % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-67726f65626e65724261736973:

.. index::
   pair: JuliaWSExpression; groebnerBasis

:spadfun:`groebnerBasis`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``groebnerBasis(lpoly, lvar)``\  computes a Groebner basis from the list of polynomials \ ``lpoly``\  relative to the list of vars lvars.


.. index::
   pair: JuliaWSExpression; groebnerBasis

:spadfun:`groebnerBasis`\: (%, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``groebnerBasis(lpoly, lvar, opt)``\  computes a Groebner basis from the list of polynomials \ ``lpoly``\  relative to the list of variables in lvars without variables in opt. Opt can also give the modulus to compute it: "Modulus \ ``->``\  \ ``p"``\ .

.. _l4a756c6961575345787072657373696f6e-67726f756e643f:

\ :ref:`ground? <l46756e6374696f6e537061636532-67726f756e643f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-67726f756e64:

\ :ref:`ground <l46756e6374696f6e537061636532-67726f756e64>`\ \: % -> % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-67756465726d616e6e69616e:

.. index::
   pair: JuliaWSExpression; gudermannian

:spadfun:`gudermannian`\: % -> % 
  \ ``gudermannian(z)``\  computes the gudermannian of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-6861686e5f70:

\ :ref:`hahn_p <l5370656369616c46756e6374696f6e43617465676f7279-6861686e5f70>`\ \: (%, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6861686e51:

\ :ref:`hahnQ <l5370656369616c46756e6374696f6e43617465676f7279-6861686e51>`\ \: (%, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6861686e52:

\ :ref:`hahnR <l5370656369616c46756e6374696f6e43617465676f7279-6861686e52>`\ \: (%, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6861686e53:

\ :ref:`hahnS <l5370656369616c46756e6374696f6e43617465676f7279-6861686e53>`\ \: (%, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-68616e6b656c4831:

\ :ref:`hankelH1 <l5370656369616c46756e6374696f6e43617465676f7279-68616e6b656c4831>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-68616e6b656c4832:

\ :ref:`hankelH2 <l5370656369616c46756e6374696f6e43617465676f7279-68616e6b656c4832>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-686176657273696e65:

.. index::
   pair: JuliaWSExpression; haversine

:spadfun:`haversine`\: % -> % 
  \ ``haversine(z)``\  computes the haversine of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-686569676874:

\ :ref:`height <l45787072657373696f6e537061636532-686569676874>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6865726d69746548:

.. index::
   pair: JuliaWSExpression; hermiteH

:spadfun:`hermiteH`\: (%, %) -> % 
  \ ``hermiteH(n, x)``\  returns the Hermite polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-686f726e6572466f726d:

.. index::
   pair: JuliaWSExpression; hornerForm

:spadfun:`hornerForm`\: (%, %) -> % 
  \ ``hornerForm(expr, x)``\  returns the Horner form of \ ``expr``\  (minimizing multiplications).

.. _l4a756c6961575345787072657373696f6e-6875727769747a4c65726368506869:

.. index::
   pair: JuliaWSExpression; hurwitzLerchPhi

:spadfun:`hurwitzLerchPhi`\: (%, %, %) -> % 
  \ ``hurwitzLerchPhi(z,s,a)``\  computes the Hurwitz–Lerch transcendent phi function.

.. _l4a756c6961575345787072657373696f6e-6875727769747a5a657461:

.. index::
   pair: JuliaWSExpression; hurwitzZeta

:spadfun:`hurwitzZeta`\: (%, %) -> % 
  \ ``hurwitzZeta(s,a)``\  computes the Hurwitz zeta.

.. _l4a756c6961575345787072657373696f6e-6879706572466163746f7269616c:

.. index::
   pair: JuliaWSExpression; hyperFactorial

:spadfun:`hyperFactorial`\: % -> % 
  \ ``hyperFactorial(n)``\  computes the hyperfactorial of \ ``n``\ .

.. _l4a756c6961575345787072657373696f6e-687970657267656f6d6574726963304631:

.. index::
   pair: JuliaWSExpression; hypergeometric0F1

:spadfun:`hypergeometric0F1`\: (%, %) -> % 
  \ ``hypergeometric0F1(a,z)``\  is the hypergeometric 0F1.

.. _l4a756c6961575345787072657373696f6e-687970657267656f6d6574726963304631526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; hypergeometric0F1Regularized

:spadfun:`hypergeometric0F1Regularized`\: (%, %) -> % 
  \ ``hypergeometric0F1Regularized(a,z)``\  is the regularized hypergeometric 0F1.

.. _l4a756c6961575345787072657373696f6e-687970657267656f6d6574726963314631:

.. index::
   pair: JuliaWSExpression; hypergeometric1F1

:spadfun:`hypergeometric1F1`\: (%, %, %) -> % 
  \ ``hypergeometric1F1(a,b,z)``\  is the Kummer confluent hypergeometric function 1F1.

.. _l4a756c6961575345787072657373696f6e-687970657267656f6d6574726963314631526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; hypergeometric1F1Regularized

:spadfun:`hypergeometric1F1Regularized`\: (%, %, %) -> % 
  \ ``hypergeometric1F1Regularized(a,b,z)``\  is the regularized confluent hypergeometric function 1F1.

.. _l4a756c6961575345787072657373696f6e-687970657267656f6d657472696355:

.. index::
   pair: JuliaWSExpression; hypergeometricU

:spadfun:`hypergeometricU`\: (%, %, %) -> % 
  \ ``hypergeometricU(a,b,z)``\  is the confluent hypergeometric function \ ``U``\ .

.. _l4a756c6961575345787072657373696f6e-696d6167:

\ :ref:`imag <l436f6d706c657843617465676f7279-696d6167>`\ \: % -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-696d6167696e617279:

\ :ref:`imaginary <l436f6d706c657843617465676f7279-696d6167696e617279>`\ \: () -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-696e646578:

\ :ref:`index <l46696e697465-696e646578>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % if % has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l4a756c6961575345787072657373696f6e-696e73657274:

\ :ref:`insert <l4a756c69615753416767726567617465-696e73657274>`\ \: (%, %, \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-696e74656772616c:

\ :ref:`integral <l5072696d697469766546756e6374696f6e43617465676f7279-696e74656772616c>`\ \: (%, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  %) -> % 
  from \ :ref:`PrimitiveFunctionCategory <l5072696d697469766546756e6374696f6e43617465676f7279>`\ 


\ :ref:`integral <l5072696d697469766546756e6374696f6e43617465676f7279-696e74656772616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PrimitiveFunctionCategory <l5072696d697469766546756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-696e74656772617465:

.. index::
   pair: JuliaWSExpression; integrate

:spadfun:`integrate`\: (%, %) -> % 
  \ ``integrate(expr, opts|var)``\  integrate \ ``expr``\  with respect to opt or var as options. For example: \example{x:=jWSExpr x;integrate(1/(x^4-1),x)} \example{opt:=jWSList [x,-1,1]} \example{integrate(cos(x),opt)} \ ``=>``\  2 sin(1) \example{integrate(cos(x),"\{x,-1.0,1.0\}")} \ ``=>``\  1.68294


.. index::
   pair: JuliaWSExpression; integrate

:spadfun:`integrate`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``integrate(expr, var, seg)``\  is the definite integration of \ ``expr``\  with respect to \ ``var``\  using segment seg.


.. index::
   pair: JuliaWSExpression; integrate

:spadfun:`integrate`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``integrate(expr, var)``\  is the indefinite integration of \ ``expr``\  with repect to var.

.. _l4a756c6961575345787072657373696f6e-696e746572706f6c6174696e67506f6c796e6f6d69616c:

.. index::
   pair: JuliaWSExpression; interpolatingPolynomial

:spadfun:`interpolatingPolynomial`\: (%, %) -> % 
  \ ``interpolatingPolynomial(lpoly,x)``\  interpolates the list of polynomials \ ``lpoly``\  with respect to \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-696e74657273656374696f6e:

\ :ref:`intersection <l4a756c69615753416767726567617465-696e74657273656374696f6e>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-696e76:

\ :ref:`inv <l4469766973696f6e52696e67-696e76>`\ \: % -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-696e766572736542657461526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; inverseBetaRegularized

:spadfun:`inverseBetaRegularized`\: (%, %, %) -> % 
  \ ``inverseBetaRegularized(s,a,b)``\  computes the beta inverse.

.. _l4a756c6961575345787072657373696f6e-696e7665727365457266:

.. index::
   pair: JuliaWSExpression; inverseErf

:spadfun:`inverseErf`\: % -> % 
  \ ``inverseErf(x)``\  computes the inverse error function of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-696e766572736545726663:

.. index::
   pair: JuliaWSExpression; inverseErfc

:spadfun:`inverseErfc`\: % -> % 
  \ ``inverseErfc(x)``\  computes the inverse complementary error function of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-696e766572736547616d6d61526567756c6172697a6564:

.. index::
   pair: JuliaWSExpression; inverseGammaRegularized

:spadfun:`inverseGammaRegularized`\: (%, %) -> % 
  \ ``inverseGammaRegularized(a,s)``\  computes the gamma inverse.

.. _l4a756c6961575345787072657373696f6e-696e766572736547756465726d616e6e69616e:

.. index::
   pair: JuliaWSExpression; inverseGudermannian

:spadfun:`inverseGudermannian`\: % -> % 
  \ ``inverseGudermannian(z)``\  computes the inverse gudermannian.

.. _l4a756c6961575345787072657373696f6e-696e7665727365486176657273696e65:

.. index::
   pair: JuliaWSExpression; inverseHaversine

:spadfun:`inverseHaversine`\: % -> % 
  \ ``inverseHaversine(z)``\  computes the inverse haversine.

.. _l4a756c6961575345787072657373696f6e-696e76657273654a61636f6269436e:

.. index::
   pair: JuliaWSExpression; inverseJacobiCn

:spadfun:`inverseJacobiCn`\: (%, %) -> % 
  \ ``inverseJacobiCn(nu, m)``\  computes the inverse JacobiCN elliptic function.

.. _l4a756c6961575345787072657373696f6e-696e76657273654a61636f6269536e:

.. index::
   pair: JuliaWSExpression; inverseJacobiSn

:spadfun:`inverseJacobiSn`\: (%, %) -> % 
  \ ``inverseJacobiSn(nu, m)``\  computes the inverse JacobiSN elliptic function.

.. _l4a756c6961575345787072657373696f6e-6972726564756369626c653f:

.. index::
   pair: JuliaWSExpression; irreducible?

:spadfun:`irreducible?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``irreducible?(p)``\  checks whether or not \ ``p``\  is irreducible.


.. index::
   pair: JuliaWSExpression; irreducible?

:spadfun:`irreducible?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``irreducible?(p)``\  checks whether or not \ ``p``\  is irreducible over Gaussian rationals or algebraic extensions.

.. _l4a756c6961575345787072657373696f6e-69733f:

\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-697345787074:

\ :ref:`isExpt <l46756e6374696f6e537061636532-697345787074>`\ \: % -> Union(Record(var: \ :ref:`Kernel <l4b65726e656c>`\  %, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`isExpt <l46756e6374696f6e537061636532-697345787074>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> Union(Record(var: \ :ref:`Kernel <l4b65726e656c>`\  %, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`isExpt <l46756e6374696f6e537061636532-697345787074>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(var: \ :ref:`Kernel <l4b65726e656c>`\  %, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-69734d756c74:

\ :ref:`isMult <l46756e6374696f6e537061636532-69734d756c74>`\ \: % -> Union(Record(coef: \ :ref:`Integer <l496e7465676572>`\ , var: \ :ref:`Kernel <l4b65726e656c>`\  %), failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-6973506c7573:

\ :ref:`isPlus <l46756e6374696f6e537061636532-6973506c7573>`\ \: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-6973506f776572:

\ :ref:`isPower <l46756e6374696f6e537061636532-6973506f776572>`\ \: % -> Union(Record(val: %, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-697354696d6573:

\ :ref:`isTimes <l46756e6374696f6e537061636532-697354696d6573>`\ \: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-6a61636f6269416d706c6974756465:

.. index::
   pair: JuliaWSExpression; jacobiAmplitude

:spadfun:`jacobiAmplitude`\: (%, %) -> % 
  \ ``jacobiAmplitude(u,m)``\  computes the amplitude function am.

.. _l4a756c6961575345787072657373696f6e-6a61636f6269436e:

\ :ref:`jacobiCn <l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269436e>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6a61636f6269446e:

\ :ref:`jacobiDn <l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269446e>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6a61636f626950:

.. index::
   pair: JuliaWSExpression; jacobiP

:spadfun:`jacobiP`\: (%, %, %, %) -> % 
  \ ``jacobiP(n, a, b, x)``\  returns the Jacobi polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-6a61636f6269536e:

\ :ref:`jacobiSn <l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269536e>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6a61636f62695468657461:

\ :ref:`jacobiTheta <l5370656369616c46756e6374696f6e43617465676f7279-6a61636f62695468657461>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6a61636f62695a657461:

.. index::
   pair: JuliaWSExpression; jacobiZeta

:spadfun:`jacobiZeta`\: (%, %) -> % 
  \ ``jacobiZeta(phi,m)``\  computes the Jacobi Zeta function.

.. _l4a756c6961575345787072657373696f6e-6a6c41626f7574:

\ :ref:`jlAbout <l4a756c69614f626a65637454797065-6a6c41626f7574>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c4170706c79:

\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c4576616c:

\ :ref:`jlEval <l4a756c696157534f626a656374-6a6c4576616c>`\ \: % -> % 
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 


.. index::
   pair: JuliaWSExpression; jlEval

:spadfun:`jlEval`\: (%, \ :ref:`String <l537472696e67>`\ ) -> % 
  \ ``jlEval(expr, param)``\  evaluates expression \ ``expr``\  with param as parameter(\ ``s``\ ). For example: \example{x:=jWSExpr("x");jlEval(sqrt(x),"x=2.0")}


.. index::
   pair: JuliaWSExpression; jlEval

:spadfun:`jlEval`\: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  \ ``jlEval(expr, param11, param2)``\  evaluates expression \ ``expr``\  with \ ``param1``\  and \ ``param2``\  as parameters. \example{a:=jWSExpr("a");b:=jWSExpr("b");} \example{jlEval(sqrt(a^2+b^2),"a=1.0","b=1.0")}


.. index::
   pair: JuliaWSExpression; jlEval

:spadfun:`jlEval`\: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  \ ``jlEval(expr, param11, param2, param3)``\  evaluates expression \ ``expr``\  with \ ``param1``\ , \ ``param2``\  and \ ``param3``\  as parameters.

.. _l4a756c6961575345787072657373696f6e-6a6c48656164:

\ :ref:`jlHead <l4a756c696157534f626a656374-6a6c48656164>`\ \: % -> \ :ref:`JuliaWSSymbol <l4a756c6961575353796d626f6c>`\  
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c4964:

\ :ref:`jlId <l4a756c69614f626a65637454797065-6a6c4964>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c4e756d65726963:

\ :ref:`jlNumeric <l4a756c696157534f626a656374-6a6c4e756d65726963>`\ \: % -> % 
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 


\ :ref:`jlNumeric <l4a756c696157534f626a656374-6a6c4e756d65726963>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c526566:

\ :ref:`jlRef <l4a756c69614f626a65637454797065-6a6c526566>`\ \: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c726566:

\ :ref:`jlref <l4a756c69614f626a65637454797065-6a6c726566>`\ \: \ :ref:`String <l537472696e67>`\  -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c53796d626f6c6963:

\ :ref:`jlSymbolic <l4a756c696157534f626a656374-6a6c53796d626f6c6963>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c54797065:

\ :ref:`jlType <l4a756c69614f626a65637454797065-6a6c54797065>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6a6c57534163637572616379:

.. index::
   pair: JuliaWSExpression; jlWSAccuracy

:spadfun:`jlWSAccuracy`\: % -> % 
  \ ``jlWSAccuracy(expr)``\  get accuracy of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6a6c5753507265636973696f6e:

.. index::
   pair: JuliaWSExpression; jlWSPrecision

:spadfun:`jlWSPrecision`\: % -> % 
  \ ``jlWSPrecision get``\  precision of expr.

.. _l4a756c6961575345787072657373696f6e-6a6c57535365744163637572616379:

.. index::
   pair: JuliaWSExpression; jlWSSetAccuracy

:spadfun:`jlWSSetAccuracy`\: (%, %) -> % 
  \ ``jlWSSetAccuracy(expr, acc)``\  set accuracy of \ ``expr``\  to acc.

.. _l4a756c6961575345787072657373696f6e-6a6c57535365744f7074696f6e73:

.. index::
   pair: JuliaWSExpression; jlWSSetOptions

:spadfun:`jlWSSetOptions`\: (%, %) -> % 
  \ ``jlWSSetOptions(type, opts)``\  sets some internal engine options.

.. _l4a756c6961575345787072657373696f6e-6a6c5753536574507265636973696f6e:

.. index::
   pair: JuliaWSExpression; jlWSSetPrecision

:spadfun:`jlWSSetPrecision`\: (%, %) -> % 
  \ ``jlWSSetPrecision(expr, prec)``\  set precision of \ ``expr``\  to prec.

.. _l4a756c6961575345787072657373696f6e-6a6f696e:

\ :ref:`join <l4a756c69615753416767726567617465-6a6f696e>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-6a5753416767726567617465:

\ :ref:`jWSAggregate <l4a756c69615753416767726567617465-6a5753416767726567617465>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-6a5753457175616c:

.. index::
   pair: JuliaWSExpression; jWSEqual

:spadfun:`jWSEqual`\: (%, %) -> % 
  \ ``jWSEqual(lhs,rhs)``\  returns the Julia \ ``WS``\  equality \ ``lhs``\  \ ``==``\  \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a575345787072:

.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``jWSExpr(r)``\  returns the DoubleFloat as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``jWSExpr(r)``\  returns the Float \ ``r``\  as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``jWSExpr(q)``\  returns the Fraction(Integer) \ ``q``\  as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``jWSExpr(z)``\  returns the Integer \ ``z``\  as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  -> % 
  \ ``jWSExpr(r)``\  returns the \ ``JuliaFloat64``\  as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``jWSExpr(list)``\  returns the \ ``list``\  of JuliaWSExpression as a JuliaWSExpression.


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``jWSExpr(str)``\  constructs \ ``str``\  as a JuliaWSExpression evaluating \ ``str``\  as a Wolfram Symbolic Language Expression. For example: \example{jWSExpr "Factorial[5]"} \example{jWSExpr "3.14159"} \example{jWSExpr "Today"}


.. index::
   pair: JuliaWSExpression; jWSExpr

:spadfun:`jWSExpr`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``jWSExpr(sym)``\  coerces \ ``sym``\  to a JuliaWSExpression.

.. _l4a756c6961575345787072657373696f6e-6a575347726561746572:

.. index::
   pair: JuliaWSExpression; jWSGreater

:spadfun:`jWSGreater`\: (%, %) -> % 
  \ ``jWSGreater(lhs,rhs)``\  returns the Julia \ ``WS``\  inequality \ ``lhs``\  > \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a575347726561746572457175616c:

.. index::
   pair: JuliaWSExpression; jWSGreaterEqual

:spadfun:`jWSGreaterEqual`\: (%, %) -> % 
  \ ``jWSGreaterEqual(lhs,rhs)``\  returns the Julia \ ``WS``\  inequality \ ``lhs``\  \ ``>=``\  \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a5753496e74657270726574:

\ :ref:`jWSInterpret <l4a756c696157534f626a656374-6a5753496e74657270726574>`\ \: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 

.. _l4a756c6961575345787072657373696f6e-6a57534c657373:

.. index::
   pair: JuliaWSExpression; jWSLess

:spadfun:`jWSLess`\: (%, %) -> % 
  \ ``jWSLess(lhs,rhs)``\  returns the Julia \ ``WS``\  inequality \ ``lhs``\  < \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a57534c657373457175616c:

.. index::
   pair: JuliaWSExpression; jWSLessEqual

:spadfun:`jWSLessEqual`\: (%, %) -> % 
  \ ``jWSLessEqual(lhs,rhs)``\  returns the Julia \ ``WS``\  inequality \ ``lhs``\  \ ``<=``\  \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a57534e6f74457175616c:

.. index::
   pair: JuliaWSExpression; jWSNotEqual

:spadfun:`jWSNotEqual`\: (%, %) -> % 
  \ ``jWSNotEqual(lhs,rhs)``\  returns the Julia \ ``WS``\  inequality \ ``lhs``\  \ ``!=``\  \ ``rhs``\ .

.. _l4a756c6961575345787072657373696f6e-6a57535175616e74697479:

.. index::
   pair: JuliaWSExpression; jWSQuantity

:spadfun:`jWSQuantity`\: % -> % 
  \ ``jWSQuantity(jWSString(u))``\  returns quantity unit \ ``u``\  of 1. For example: \example{jWSQuantity jWSString "Meter"}


.. index::
   pair: JuliaWSExpression; jWSQuantity

:spadfun:`jWSQuantity`\: (%, %) -> % 
  \ ``jWSQuantity(x,jWSString(u))``\  returns quantity unit \ ``u``\  of \ ``x``\ . For example: \example{jWSQuantity(1.2, jWSString "Meter")}

.. _l4a756c6961575345787072657373696f6e-6a575352756c65:

.. index::
   pair: JuliaWSExpression; jWSRule

:spadfun:`jWSRule`\: (%, %) -> % 
  \ ``jWSRule(lhs,rhs)``\  returns the Julia \ ``WS``\  rule \ ``lhs``\ ->rhs.

.. _l4a756c6961575345787072657373696f6e-6a5753537472696e67:

.. index::
   pair: JuliaWSExpression; jWSString

:spadfun:`jWSString`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``jWSString(str)``\  returns \ ``str``\  as a \ ``WS``\  String.

.. _l4a756c6961575345787072657373696f6e-6b656c76696e426569:

\ :ref:`kelvinBei <l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e426569>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b656c76696e426572:

\ :ref:`kelvinBer <l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e426572>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b656c76696e4b6569:

\ :ref:`kelvinKei <l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e4b6569>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b656c76696e4b6572:

\ :ref:`kelvinKer <l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e4b6572>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b65726e656c:

\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6b65726e656c73:

\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6b65793f:

.. index::
   pair: JuliaWSExpression; key?

:spadfun:`key?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  key(as,key) checks wheter or not key exist in the assoiation as.

.. _l4a756c6961575345787072657373696f6e-6b657973:

.. index::
   pair: JuliaWSExpression; keys

:spadfun:`keys`\: % -> % 
  \ ``keys(expr)``\  returns the key elements in \ ``expr``\  if any.

.. _l4a756c6961575345787072657373696f6e-6b6c65696e496e76617269616e744a:

.. index::
   pair: JuliaWSExpression; kleinInvariantJ

:spadfun:`kleinInvariantJ`\: % -> % 
  \ ``kleinInvariantJ(tau)``\  computes the Klein\ ``'s``\  absolute invariant.

.. _l4a756c6961575345787072657373696f6e-6b7261777463686f756b4b:

\ :ref:`krawtchoukK <l5370656369616c46756e6374696f6e43617465676f7279-6b7261777463686f756b4b>`\ \: (%, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b756d6d65724d:

\ :ref:`kummerM <l5370656369616c46756e6374696f6e43617465676f7279-6b756d6d65724d>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6b756d6d657255:

\ :ref:`kummerU <l5370656369616c46756e6374696f6e43617465676f7279-6b756d6d657255>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c616775657272654c:

.. index::
   pair: JuliaWSExpression; laguerreL

:spadfun:`laguerreL`\: (%, %) -> % 
  \ ``laguerreL(n, x)``\  returns the laguerre polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number. For example: \example{laguerreL(5, jWSExpr x)}


.. index::
   pair: JuliaWSExpression; laguerreL

:spadfun:`laguerreL`\: (%, %, %) -> % 
  \ ``laguerreL(n, a, x)``\  returns the genralized laguerre polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-6c616d6265727457:

\ :ref:`lambertW <l5370656369616c46756e6374696f6e43617465676f7279-6c616d6265727457>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; lambertW

:spadfun:`lambertW`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``lambertW(k,z)``\  returns the \ ``k``\ -th solution to LambertW function.

.. _l4a756c6961575345787072657373696f6e-6c617374:

\ :ref:`last <l4a756c69615753416767726567617465-6c617374>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a756c6961575345787072657373696f6e-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-6c6567656e64726550:

.. index::
   pair: JuliaWSExpression; legendreP

:spadfun:`legendreP`\: (%, %) -> % 
  \ ``legendreP(n, x)``\  returns the legendre polynomial of the first kind or evaluates it at \ ``x``\  is \ ``x``\  a number.


.. index::
   pair: JuliaWSExpression; legendreP

:spadfun:`legendreP`\: (%, %, %) -> % 
  \ ``legendreP(n, m, x)``\  returns the associated Legendre polynomial of the first type or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-6c6567656e64726551:

.. index::
   pair: JuliaWSExpression; legendreQ

:spadfun:`legendreQ`\: (%, %) -> % 
  \ ``legendreQ(n, x)``\  returns the Legendre function of the second kind or evaluates it at \ ``x``\  if \ ``x``\  is a number. \example{legendreQ(3,jWSExpr x)}


.. index::
   pair: JuliaWSExpression; legendreQ

:spadfun:`legendreQ`\: (%, %, %) -> % 
  \ ``legendreQ(n, m, x)``\  returns the associated Legendre function of the second kind or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-6c656e677468:

.. index::
   pair: JuliaWSExpression; length

:spadfun:`length`\: % -> % 
  \ ``length(expr)``\  returns the length of \ ``expr``\  seen as a list.


\ :ref:`length <l4a756c69615753416767726567617465-6c656e677468>`\ \: % -> \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\  
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-6c65726368506869:

.. index::
   pair: JuliaWSExpression; lerchPhi

:spadfun:`lerchPhi`\: (%, %, %) -> % 
  \ ``lerchPhi(z,s,a)``\  returns Lerch\ ``'s``\  transcendent phi of arguments.

.. _l4a756c6961575345787072657373696f6e-6c6576656c:

.. index::
   pair: JuliaWSExpression; level

:spadfun:`level`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``level(expr, lev)``\  returns the list of expression \ ``expr``\  at level lev.


.. index::
   pair: JuliaWSExpression; level

:spadfun:`level`\: (%, %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``level(expr, lev, head)``\  returns the list of expression \ ``expr``\  at level \ ``lev``\  with heads if head is \ ``true``\ .

.. _l4a756c6961575345787072657373696f6e-6c69:

\ :ref:`li <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-6c69>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c696674:

\ :ref:`lift <l4d6f6e6f67656e6963416c6765627261-6c696674>`\ \: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-6c696d6974:

.. index::
   pair: JuliaWSExpression; limit

:spadfun:`limit`\: (%, %) -> % 
  \ ``limit(expr, params)``\  returns the limit, eventually nested or multivariate, of \ ``expr``\ . For example: \example{x:=jWSExpr x; limit(sin(x)-sin(x-1/x),"x->Infinity")}

.. _l4a756c6961575345787072657373696f6e-6c6f673130:

.. index::
   pair: JuliaWSExpression; log10

:spadfun:`log10`\: % -> % 
  \ ``log10(x)``\  computes logarithm of \ ``x``\  in base 10.

.. _l4a756c6961575345787072657373696f6e-6c6f6732:

.. index::
   pair: JuliaWSExpression; log2

:spadfun:`log2`\: % -> % 
  \ ``log2(x)``\  computes logarithm of \ ``x``\  in base 2.

.. _l4a756c6961575345787072657373696f6e-6c6f67:

\ :ref:`log <l456c656d656e7461727946756e6374696f6e43617465676f7279-6c6f67>`\ \: % -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c6f674261726e657347:

.. index::
   pair: JuliaWSExpression; logBarnesG

:spadfun:`logBarnesG`\: % -> % 
  \ ``logBarnesG(x)``\  is the logarithm of Barnes-\ ``G``\ .

.. _l4a756c6961575345787072657373696f6e-6c6f6747616d6d61:

.. index::
   pair: JuliaWSExpression; logGamma

:spadfun:`logGamma`\: % -> % 
  \ ``logGamma(z)``\  returns the log-gamma of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-6c6f6d6d656c5331:

\ :ref:`lommelS1 <l5370656369616c46756e6374696f6e43617465676f7279-6c6f6d6d656c5331>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c6f6d6d656c5332:

\ :ref:`lommelS2 <l5370656369616c46756e6374696f6e43617465676f7279-6c6f6d6d656c5332>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6c6f6f6b7570:

\ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ \: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 


.. index::
   pair: JuliaWSExpression; lookup

:spadfun:`lookup`\: (%, %) -> % 
  \ ``lookup(assocs,keys)``\  returns value(\ ``s``\ ) associated to key(\ ``s``\ ).


.. index::
   pair: JuliaWSExpression; lookup

:spadfun:`lookup`\: (%, %, %) -> % 
  \ ``lookup(assocs,keys, defaultval)``\  returns value(\ ``s``\ ) associated to key(\ ``s``\ ) if key(\ ``s``\ ) exist(\ ``s``\ ), otherwise defaultval

.. _l4a756c6961575345787072657373696f6e-6d61696e4b65726e656c:

\ :ref:`mainKernel <l45787072657373696f6e537061636532-6d61696e4b65726e656c>`\ \: % -> Union(\ :ref:`Kernel <l4b65726e656c>`\  %, failed) 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6d6170:

\ :ref:`map <l46756c6c794576616c61626c654f766572-6d6170>`\ \: (% -> %, %) -> % 
  from \ :ref:`FullyEvalableOver <l46756c6c794576616c61626c654f766572>`\  %


\ :ref:`map <l45787072657373696f6e537061636532-6d6170>`\ \: (% -> %, \ :ref:`Kernel <l4b65726e656c>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6d61746869657543:

.. index::
   pair: JuliaWSExpression; mathieuC

:spadfun:`mathieuC`\: (%, %, %) -> % 
  \ ``mathieuC(a,q,z)``\  is the even Mathieu function with characteristic a and parameter \ ``q``\ .

.. _l4a756c6961575345787072657373696f6e-6d617468696575436861726163746572697374696341:

.. index::
   pair: JuliaWSExpression; mathieuCharacteristicA

:spadfun:`mathieuCharacteristicA`\: (%, %) -> % 
  \ ``mathieuCharacteristicA(r,q)``\  returns the characteristic for even Mathieu function.

.. _l4a756c6961575345787072657373696f6e-6d617468696575436861726163746572697374696342:

.. index::
   pair: JuliaWSExpression; mathieuCharacteristicB

:spadfun:`mathieuCharacteristicB`\: (%, %) -> % 
  \ ``mathieuCharacteristicB(r,q)``\  returns the characteristic for odd Mathieu function.

.. _l4a756c6961575345787072657373696f6e-6d61746869657543686172616374657269737469634578706f6e656e74:

.. index::
   pair: JuliaWSExpression; mathieuCharacteristicExponent

:spadfun:`mathieuCharacteristicExponent`\: (%, %) -> % 
  \ ``mathieuCharacteristicExponent(a,q)``\  returns the characterisitc exponent \ ``o``\  he Mathieu function.

.. _l4a756c6961575345787072657373696f6e-6d617468696575435072696d65:

.. index::
   pair: JuliaWSExpression; mathieuCPrime

:spadfun:`mathieuCPrime`\: (%, %, %) -> % 
  \ ``mathieuCPrime(a,q,z)``\  derivative of the even Mathieu function.

.. _l4a756c6961575345787072657373696f6e-6d61746869657553:

.. index::
   pair: JuliaWSExpression; mathieuS

:spadfun:`mathieuS`\: (%, %, %) -> % 
  \ ``mathieuS(b,q,z)``\  is the odd Mathieu function with characteristic \ ``b``\  and parameter \ ``q``\ .

.. _l4a756c6961575345787072657373696f6e-6d617468696575535072696d65:

.. index::
   pair: JuliaWSExpression; mathieuSPrime

:spadfun:`mathieuSPrime`\: (%, %, %) -> % 
  \ ``mathieuSPrime(b,q,z)``\  derivative of the odd Mathieu function.

.. _l4a756c6961575345787072657373696f6e-6d6174726978466f726d:

.. index::
   pair: JuliaWSExpression; matrixForm

:spadfun:`matrixForm`\: % -> % 
  \ ``matrixForm(mat)``\  returns a pretty-printable form of \ ``mat``\  i.e. its \ ``WS``\  'MatrixForm'.

.. _l4a756c6961575345787072657373696f6e-6d6178696d697a65:

.. index::
   pair: JuliaWSExpression; maximize

:spadfun:`maximize`\: (%, %) -> % 
  \ ``maximize(expr, vars)``\  is the \ ``WS``\  symbolic maximization function. \ ``expr``\  can contain constraints if it is a \ ``WS``\  list of constraints with function to maximize as the first element. Global optimization function otherwise.


.. index::
   pair: JuliaWSExpression; maximize

:spadfun:`maximize`\: (%, %, %) -> % 
  \ ``maximize(expr, vars, dom)``\  is the \ ``WS``\  symbolic maximization function. dom restricts the domain of variables, for example, Integers.


.. index::
   pair: JuliaWSExpression; maximize

:spadfun:`maximize`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``maximize(expr, sym)``\  symbolically maximizes expression function \ ``expr``\  with respect to \ ``sym``\ . \ ``expr``\  can contain constraints if it is a \ ``WS``\  list of constraints with function to maximize as the first element. Global optimization function otherwise.

.. _l4a756c6961575345787072657373696f6e-6d61784c696d6974:

.. index::
   pair: JuliaWSExpression; maxLimit

:spadfun:`maxLimit`\: (%, %) -> % 
  \ ``maxLimit(expr, params)``\  returns the max limit, eventually nested or multivariate, of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6d6569786e65724d:

\ :ref:`meixnerM <l5370656369616c46756e6374696f6e43617465676f7279-6d6569786e65724d>`\ \: (%, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6d6569786e657250:

\ :ref:`meixnerP <l5370656369616c46756e6374696f6e43617465676f7279-6d6569786e657250>`\ \: (%, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6d656d6265723f:

.. index::
   pair: JuliaWSExpression; member?

:spadfun:`member?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``member?(list, expr)``\  checks if expr is in \ ``list``\ .

.. _l4a756c6961575345787072657373696f6e-6d696e696d616c506f6c796e6f6d69616c:

\ :ref:`minimalPolynomial <l46696e69746552616e6b416c6765627261-6d696e696d616c506f6c796e6f6d69616c>`\ \: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


.. index::
   pair: JuliaWSExpression; minimalPolynomial

:spadfun:`minimalPolynomial`\: (%, %) -> % 
  \ ``minimalPolynomial(expr,var)``\  returns the minimal polynomial in the variable \ ``var``\  of the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; minimalPolynomial

:spadfun:`minimalPolynomial`\: (%, %, %) -> % 
  \ ``minimalPolynomial(expr,var, elem)``\  returns the minimal polynomial in the variable \ ``var``\  of the expression \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6d696e696d697a65:

.. index::
   pair: JuliaWSExpression; minimize

:spadfun:`minimize`\: (%, %) -> % 
  \ ``minimize(expr, vars)``\  is the \ ``WS``\  symbolic minimization function. \ ``expr``\  can contain constraints if it is a \ ``WS``\  list of constraints with function to minimize as the first element. Global optimization function otherwise.


.. index::
   pair: JuliaWSExpression; minimize

:spadfun:`minimize`\: (%, %, %) -> % 
  \ ``minimize(expr, vars, dom)``\  is the \ ``WS``\  symbolic minimization function. dom restricts the domain of variables, for example, Integers.


.. index::
   pair: JuliaWSExpression; minimize

:spadfun:`minimize`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``minimize(expr, sym)``\  symbolically minimizes expression function \ ``expr``\  with respect to \ ``sym``\ . \ ``expr``\  can contain constraints if it is a \ ``WS``\  list of constraints with function to minimize as the first element. Global optimization function otherwise.

.. _l4a756c6961575345787072657373696f6e-6d696e4c696d6974:

.. index::
   pair: JuliaWSExpression; minLimit

:spadfun:`minLimit`\: (%, %) -> % 
  \ ``minLimit(expr, params)``\  returns the min limit, eventually nested or multivariate, of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6d696e506f6c79:

\ :ref:`minPoly <l45787072657373696f6e537061636532-6d696e506f6c79>`\ \: \ :ref:`Kernel <l4b65726e656c>`\  % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6d6f64756c61724c616d626461:

.. index::
   pair: JuliaWSExpression; modularLambda

:spadfun:`modularLambda`\: % -> % 
  \ ``modularLambda()``\  computes the lambda modular function.

.. _l4a756c6961575345787072657373696f6e-6d6f6e6f6d69616c4c697374:

.. index::
   pair: JuliaWSExpression; monomialList

:spadfun:`monomialList`\: % -> % 
  \ ``monomialList(p)``\  returns the list of monomials in \ ``p``\ .

.. _l4a756c6961575345787072657373696f6e-6d756c74694575636c696465616e:

\ :ref:`multiEuclidean <l4575636c696465616e446f6d61696e-6d756c74694575636c696465616e>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-6d757461626c653f:

\ :ref:`mutable? <l4a756c69614f626a65637454797065-6d757461626c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6e656761746976653f:

.. index::
   pair: JuliaWSExpression; negative?

:spadfun:`negative?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``negative?(expr)``\  checks whether or not \ ``expr``\  is negative.

.. _l4a756c6961575345787072657373696f6e-6e6f726d:

\ :ref:`norm <l436f6d706c657843617465676f7279-6e6f726d>`\ \: % -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-6e6f726d616c:

.. index::
   pair: JuliaWSExpression; normal

:spadfun:`normal`\: % -> % 
  \ ``normal(expr)``\  converts \ ``expr``\  to a normal expression from different expression types. Can be applied to a power serie for example.


.. index::
   pair: JuliaWSExpression; normal

:spadfun:`normal`\: (%, %) -> % 
  \ ``normal(expr, list(Head)||Head)``\  converts objects in \ ``expr``\  to a normal expression form from different expression types, with Head, or a list of Head-\ ``s``\ .

.. _l4a756c6961575345787072657373696f6e-6e6f7468696e673f:

\ :ref:`nothing? <l4a756c69614f626a65637454797065-6e6f7468696e673f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-6e7468526f6f74:

\ :ref:`nthRoot <l5261646963616c43617465676f7279-6e7468526f6f74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-6e756d6572:

\ :ref:`numer <l46756e6374696f6e537061636532-6e756d6572>`\ \: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %) 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-6e756d657261746f72:

.. index::
   pair: JuliaWSExpression; numerator

:spadfun:`numerator`\: % -> % 
  \ ``numerator(expr)``\  returns the numerator of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d657244656e6f6d:

.. index::
   pair: JuliaWSExpression; numerDenom

:spadfun:`numerDenom`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``numerDenom(expr)``\  returns the numerator and denominator of \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d6572696344536f6c7665:

.. index::
   pair: JuliaWSExpression; numericDSolve

:spadfun:`numericDSolve`\: (%, %, %) -> % 
  \ ``numericDSolve(expr,fun,xrange)``\  solves numerically the differential equation(\ ``s``\ ) in \ ``expr``\  for the function \ ``fun``\ , in the range \ ``xrange``\ . Other combinaisons of parameters are also available.


.. index::
   pair: JuliaWSExpression; numericDSolve

:spadfun:`numericDSolve`\: (%, %, %, %) -> % 
  \ ``numericDSolve(expr,fun,xrange,yrange)``\  solves numerically the differential equation(\ ``s``\ ) in \ ``expr``\  for the function \ ``fun``\ , in the ranges \ ``xrange``\  and \ ``yrange``\ . Other combinaisons of parameters are also available (see documentation).


.. index::
   pair: JuliaWSExpression; numericDSolve

:spadfun:`numericDSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> % 
  \ ``numericDSolve(eq,fun,xrange)``\  solves numerically the differential equation \ ``eq``\  for the function \ ``fun``\ , in the range \ ``xrange``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d6572696344536f6c766556616c7565:

.. index::
   pair: JuliaWSExpression; numericDSolveValue

:spadfun:`numericDSolveValue`\: (%, %, %) -> % 
  \ ``numericDSolveValue(expr,fun,xrange)``\  returns the numerical value solution of the differential equation(\ ``s``\ ) in \ ``expr``\  for the function \ ``fun``\ , in the range \ ``xrange``\ . Other combinaisons of parameters are also available (see documentation).


.. index::
   pair: JuliaWSExpression; numericDSolveValue

:spadfun:`numericDSolveValue`\: (%, %, %, %) -> % 
  \ ``numericDSolveValue(expr,fun,xrange,yrange)``\  returns the numerical solution of the differential equation(\ ``s``\ ) in \ ``expr``\  for the function \ ``fun``\ , in the ranges \ ``xrange``\  and \ ``yrange``\ . Other combinaisons of parameters are also available (see documentation).


.. index::
   pair: JuliaWSExpression; numericDSolveValue

:spadfun:`numericDSolveValue`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> % 
  \ ``numericDSolveValue(eq,fun,xrange)``\  return the numerical solution of the differential equation \ ``eq``\  for the function \ ``fun``\ , in the range \ ``xrange``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d65726963496e74656772617465:

.. index::
   pair: JuliaWSExpression; numericIntegrate

:spadfun:`numericIntegrate`\: (%, %) -> % 
  \ ``numericIntegrate(expr, opt|var)``\  integrate numerically \ ``expr``\  with respect to opt or var as options.


.. index::
   pair: JuliaWSExpression; numericIntegrate

:spadfun:`numericIntegrate`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``numericIntegrate(expr, var, seg)``\  integrates \ ``expr``\  using segment seg with respect to \ ``var``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d657269634d6178696d697a65:

.. index::
   pair: JuliaWSExpression; numericMaximize

:spadfun:`numericMaximize`\: (%, %) -> % 
  \ ``numericMaximize(expr, vars)``\  maximizes numerically the expression function \ ``expr``\  with respect to vars.


.. index::
   pair: JuliaWSExpression; numericMaximize

:spadfun:`numericMaximize`\: (%, %, %) -> % 
  \ ``numericMaximize(expr, vars, dom)``\  maximizes numerically the expression function \ ``expr``\  with respect to \ ``vars``\  and \ ``vars``\  restricted to the domain dom.


.. index::
   pair: JuliaWSExpression; numericMaximize

:spadfun:`numericMaximize`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``numericMaximize(expr, sym)``\  maximizes numerically the expression function \ ``expr``\  with respect to \ ``sym``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d657269634d696e696d697a65:

.. index::
   pair: JuliaWSExpression; numericMinimize

:spadfun:`numericMinimize`\: (%, %) -> % 
  \ ``numericMinimize(expr, vars)``\  minimizes numerically the expression function \ ``expr``\  with respect to vars. For example, global optimization from the SIAM 100 digits challenge: \example{x := jWSExpr(x);y:=jWSExpr y;} \example{expr := exp(sin(50*x))+sin(60*exp(y))+ sin(70*sin(x))+ sin(sin(80*y))-sin(10*(x+y))+(x^2+y^2)/4} \example{numericMinimize(expr, jWSList [x,y])}


.. index::
   pair: JuliaWSExpression; numericMinimize

:spadfun:`numericMinimize`\: (%, %, %) -> % 
  \ ``numericMinimize(expr, vars, dom)``\  minimizes numerically the expression function \ ``expr``\  with respect to \ ``vars``\  and \ ``vars``\  restricted to the domain dom.


.. index::
   pair: JuliaWSExpression; numericMinimize

:spadfun:`numericMinimize`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``numericMinimize(expr, sym)``\  minimizes numerically the expression function \ ``expr``\  with respect to \ ``sym``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d6572696350726f64756374:

.. index::
   pair: JuliaWSExpression; numericProduct

:spadfun:`numericProduct`\: (%, %) -> % 
  \ ``numericProduct(f(n),range)``\  an evaluated numerical approximation of the sum \ ``f``\ (imin) + .. + \ ``f``\ (imax) defined by the list \ ``range``\ , for example \example{jWSExpr("\{i, imin, imax\}")}. See Wolfram language specifications.


.. index::
   pair: JuliaWSExpression; numericProduct

:spadfun:`numericProduct`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``numericProduct(f(n),n, a..b)``\  returns an evaluated numerical approximation product \ ``f``\ (a) * \ ``f``\ (\ ``a2``\ ) * .. * \ ``f``\ (\ ``b``\ ).

.. _l4a756c6961575345787072657373696f6e-6e756d65726963536f6c7665:

.. index::
   pair: JuliaWSExpression; numericSolve

:spadfun:`numericSolve`\: (%, %) -> % 
  \ ``numericSolve(expr, vars)``\  returns the solution(\ ``s``\ ) to the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; numericSolve

:spadfun:`numericSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %) -> % 
  \ ``numericSolve(eq, vars)``\  returns the solution(\ ``s``\ ) to the equation \ ``eq``\ .

.. _l4a756c6961575345787072657373696f6e-6e756d6572696353756d:

.. index::
   pair: JuliaWSExpression; numericSum

:spadfun:`numericSum`\: (%, %) -> % 
  \ ``numericSum(f(n),range)``\  an evaluated numerical approximation of the sum \ ``f``\ (imin) + .. + \ ``f``\ (imax) defined by the list \ ``range``\ , for example \example{jWSExpr("\{i, imin, imax\}")}. See Wolfram language specifications.


.. index::
   pair: JuliaWSExpression; numericSum

:spadfun:`numericSum`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``numericSum(f(n),n, a..b)``\  returns an evaluated numerical approximation sum \ ``f``\ (a) + \ ``f``\ (\ ``a2``\ ) + .. + \ ``f``\ (\ ``b``\ ).

.. _l4a756c6961575345787072657373696f6e-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-6f70657261746f72:

\ :ref:`operator <l45787072657373696f6e537061636532-6f70657261746f72>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6f70657261746f7273:

\ :ref:`operators <l45787072657373696f6e537061636532-6f70657261746f7273>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4a756c6961575345787072657373696f6e-70616465417070726f78696d616e74:

.. index::
   pair: JuliaWSExpression; padeApproximant

:spadfun:`padeApproximant`\: (%, %) -> % 
  \ ``padeApproximant(expr, {x,x0, {n,m}})``\  returns the Padé approximant at \ ``x0``\ .

.. _l4a756c6961575345787072657373696f6e-70617261626f6c696343796c696e64657244:

.. index::
   pair: JuliaWSExpression; parabolicCylinderD

:spadfun:`parabolicCylinderD`\: (%, %) -> % 
  \ ``parabolicCylinderD(nu,x)``\  computes the parabolic cylinder function \ ``D``\  of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-706172656e:

\ :ref:`paren <l45787072657373696f6e537061636532-706172656e>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-70617274:

\ :ref:`part <l4a756c69615753416767726567617465-70617274>`\ \: (%, \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7065726d75746174696f6e:

\ :ref:`permutation <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279-7065726d75746174696f6e>`\ \: (%, %) -> % 
  from \ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-7069:

\ :ref:`pi <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279-7069>`\ \: () -> % 
  from \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l4a756c6961575345787072657373696f6e-706f636868616d6d6572:

.. index::
   pair: JuliaWSExpression; pochhammer

:spadfun:`pochhammer`\: (%, %) -> % 
  \ ``pochhammer(a,n)``\  returns the Pochhammer symbol.

.. _l4a756c6961575345787072657373696f6e-706f6c7967616d6d61:

\ :ref:`polygamma <l5370656369616c46756e6374696f6e43617465676f7279-706f6c7967616d6d61>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-706f6c796c6f67:

\ :ref:`polylog <l5370656369616c46756e6374696f6e43617465676f7279-706f6c796c6f67>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; polylog

:spadfun:`polylog`\: (%, %, %) -> % 
  \ ``polylog(n,p,x)``\  is the Nielsen generalized polylogarithm function.

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c3f:

.. index::
   pair: JuliaWSExpression; polynomial?

:spadfun:`polynomial?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``polynomial?(p,x)``\  check whether or not \ ``p``\  is a polynomial in \ ``x``\ .


.. index::
   pair: JuliaWSExpression; polynomial?

:spadfun:`polynomial?`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``polynomial?(p,vlist)``\  check whether or not \ ``p``\  is a polynomial in the list of variables \ ``vlist``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c457874656e646564474344:

.. index::
   pair: JuliaWSExpression; polynomialExtendedGCD

:spadfun:`polynomialExtendedGCD`\: (%, %, %) -> % 
  \ ``polynomialExtendedGCD(p1, p2, x)``\  returns the greatest common divisor of \ ``p1``\  and \ ``p2``\  considered as univariate polynomial in \ ``x``\ 

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c466163746f72:

.. index::
   pair: JuliaWSExpression; polynomialFactor

:spadfun:`polynomialFactor`\: % -> % 
  \ ``polynomialFactor(p)``\  factorizes the polynomial \ ``p``\ . For example: \example{x := jWSExpr x} \example{p:=expand(chebyshevT(7,x)* chebyshevU(9,x))} \example{polynomialFactor p}

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c474344:

.. index::
   pair: JuliaWSExpression; polynomialGCD

:spadfun:`polynomialGCD`\: (%, %) -> % 
  \ ``polynomialGCD(p1, p2)``\  returns the greatest common divisor of \ ``p1``\  and \ ``p2``\ .


.. index::
   pair: JuliaWSExpression; polynomialGCD

:spadfun:`polynomialGCD`\: (%, %, %) -> % 
  \ ``polynomialGCD(p1, p2, opt)``\  returns the greatest common divisor of \ ``p1``\  and \ ``p2``\  with options opt, for example Modulus-\ ``>p``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c4c434d:

.. index::
   pair: JuliaWSExpression; polynomialLCM

:spadfun:`polynomialLCM`\: (%, %) -> % 
  \ ``polynomialLCM(p1,p2)``\  returns the least common divisor of \ ``p1``\  and \ ``p2``\ .


.. index::
   pair: JuliaWSExpression; polynomialLCM

:spadfun:`polynomialLCM`\: (%, %, %) -> % 
  \ ``polynomialLCM(p1,p2,opt)``\  returns the least common divisor of \ ``p1``\  and \ ``p2``\  with options \ ``opt``\ , for example an Extension rule.

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c4d6f64:

.. index::
   pair: JuliaWSExpression; polynomialMod

:spadfun:`polynomialMod`\: (%, %) -> % 
  \ ``polynomialMod(p,mod)``\  reduces modulo \ ``p``\  the intger coefficients of the polynomial \ ``p``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c51756f7469656e74:

.. index::
   pair: JuliaWSExpression; polynomialQuotient

:spadfun:`polynomialQuotient`\: (%, %, %) -> % 
  \ ``polynomialQuotient(p1, p2, x)``\  returns the quotient of \ ``p1``\  and \ ``p2``\  in \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c51756f7469656e7452656d61696e646572:

.. index::
   pair: JuliaWSExpression; polynomialQuotientRemainder

:spadfun:`polynomialQuotientRemainder`\: (%, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``polynomialQuotientRemainder(p1,p2,var)``\  returns the quotient and remainder of \ ``p1``\  and \ ``p2``\  in \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c526564756365:

.. index::
   pair: JuliaWSExpression; polynomialReduce

:spadfun:`polynomialReduce`\: (%, %, %) -> % 
  \ ``polynomialReduce(poly,lpoly,lvar)``\  returns a minimal representation of the polynomial \ ``poly``\  in terms of the polynomial list \ ``lpoly``\  with respect to the list of variables \ ``lvar``\ .

.. _l4a756c6961575345787072657373696f6e-706f6c796e6f6d69616c52656d61696e646572:

.. index::
   pair: JuliaWSExpression; polynomialRemainder

:spadfun:`polynomialRemainder`\: (%, %, %) -> % 
  \ ``polynomialRemainder(p1,p2, x)``\  returns the remainder of \ ``p1``\  and \ ``p2``\  in \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-706f7369746976653f:

.. index::
   pair: JuliaWSExpression; positive?

:spadfun:`positive?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``positive?(expr)``\  checks whether or not \ ``expr``\  is positive.

.. _l4a756c6961575345787072657373696f6e-706f776572457870616e64:

.. index::
   pair: JuliaWSExpression; powerExpand

:spadfun:`powerExpand`\: % -> % 
  \ ``powerExpand(expr)``\  expands powers in \ ``expr``\  assuming no branch cut.


.. index::
   pair: JuliaWSExpression; powerExpand

:spadfun:`powerExpand`\: (%, %) -> % 
  \ ``powerExpand(expr, sym)``\  expands powers in \ ``expr``\  with respect to \ ``sym``\ , assuming no branch cut.

.. _l4a756c6961575345787072657373696f6e-70726570656e64:

\ :ref:`prepend <l4a756c69615753416767726567617465-70726570656e64>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-7072696e636970616c496465616c:

\ :ref:`principalIdeal <l5072696e636970616c496465616c446f6d61696e-7072696e636970616c496465616c>`\ \: \ :ref:`List <l4c697374>`\  % -> Record(coef: \ :ref:`List <l4c697374>`\  %, generator: %) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-70726f64756374:

.. index::
   pair: JuliaWSExpression; product

:spadfun:`product`\: (%, %) -> % 
  \ ``product(f(n),range)``\  returns the product \ ``f``\ (imin) * .. * \ ``f``\ (imax) defined by the list \ ``range``\ , for example \example{jWSExpr("\{i, imin, imax\}")}. See Wolfram language specifications.


.. index::
   pair: JuliaWSExpression; product

:spadfun:`product`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``product(f(n),n, a..b)``\  returns the product \ ``f``\ (a) * .. * \ ``f``\ (\ ``b``\ ).


\ :ref:`product <l436f6d62696e61746f7269616c4f707343617465676f7279-70726f64756374>`\ \: (%, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  %) -> % 
  from \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; product

:spadfun:`product`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``product(f(n),n)``\  returns the indefinite product of \ ``f``\ (\ ``n``\ ).

.. _l4a756c6961575345787072657373696f6e-5142696e6f6d69616c:

.. index::
   pair: JuliaWSExpression; QBinomial

:spadfun:`QBinomial`\: (%, %, %) -> % 
  \ ``QBinomial(n,m,q)``\  returns the \ ``q``\ -analog of binomial coefficient.

.. _l4a756c6961575345787072657373696f6e-71656c74:

\ :ref:`qelt <l4a756c69615753416767726567617465-71656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-51466163746f7269616c:

.. index::
   pair: JuliaWSExpression; QFactorial

:spadfun:`QFactorial`\: (%, %) -> % 
  \ ``QFactorial(x,q)``\  returns the \ ``q``\ -analog of factorial of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-5147616d6d61:

.. index::
   pair: JuliaWSExpression; QGamma

:spadfun:`QGamma`\: (%, %) -> % 
  \ ``QGamma(x,q)``\  returns the \ ``q``\ -analog of Euler gamma of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-51506f636868616d6d6572:

.. index::
   pair: JuliaWSExpression; QPochhammer

:spadfun:`QPochhammer`\: (%, %) -> % 
  \ ``QPochhammer(x,q)``\  returns the \ ``q``\ -Pochammer symbol of \ ``x``\ .


.. index::
   pair: JuliaWSExpression; QPochhammer

:spadfun:`QPochhammer`\: (%, %, %) -> % 
  \ ``QPochhammer(x,q,n)``\  returns the \ ``q``\ -Pochammer symbol of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-51506f6c7947616d6d61:

.. index::
   pair: JuliaWSExpression; QPolyGamma

:spadfun:`QPolyGamma`\: (%, %) -> % 
  \ ``QPolyGamma(x,q)``\  returs the \ ``q``\ -digamma of \ ``x``\ .


.. index::
   pair: JuliaWSExpression; QPolyGamma

:spadfun:`QPolyGamma`\: (%, %, %) -> % 
  \ ``QPolyGamma(n,x,q)``\  returns the \ ``n``\ -th derivative of the \ ``q``\ -digamma function of \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-71736574656c7421:

\ :ref:`qsetelt! <l4a756c69615753416767726567617465-71736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-71736574656c74:

\ :ref:`qsetelt <l4a756c69615753416767726567617465-71736574656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7175616e74697479466f726d:

.. index::
   pair: JuliaWSExpression; quantityForm

:spadfun:`quantityForm`\: (%, %) -> % 
  \ ``quantityForm(expr,form)``\  returns \ ``expr``\  as a quantity with format \ ``form``\ .


.. index::
   pair: JuliaWSExpression; quantityForm

:spadfun:`quantityForm`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> % 
  \ ``quantityForm(expr,lform)``\  returns \ ``expr``\  as a quantity with a list of formats \ ``lform``\ .

.. _l4a756c6961575345787072657373696f6e-7175616e746974794d61676e6974756465:

.. index::
   pair: JuliaWSExpression; quantityMagnitude

:spadfun:`quantityMagnitude`\: % -> % 
  \ ``quantityMagnitude(val)``\  returns magnitude of \ ``val``\ .

.. _l4a756c6961575345787072657373696f6e-7175616e74697479556e6974:

.. index::
   pair: JuliaWSExpression; quantityUnit

:spadfun:`quantityUnit`\: % -> % 
  \ ``quantityUnit(val)``\  returns unit of \ ``val``\ .

.. _l4a756c6961575345787072657373696f6e-71756f:

\ :ref:`quo <l4575636c696465616e446f6d61696e-71756f>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-726163616852:

\ :ref:`racahR <l5370656369616c46756e6374696f6e43617465676f7279-726163616852>`\ \: (%, %, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-72616d616e756a616e546175:

.. index::
   pair: JuliaWSExpression; ramanujanTau

:spadfun:`ramanujanTau`\: % -> % 
  \ ``ramanujanTau(n)``\  returns the Ramanujan tau of \ ``n``\ .

.. _l4a756c6961575345787072657373696f6e-72616d616e756a616e5461754c:

.. index::
   pair: JuliaWSExpression; ramanujanTauL

:spadfun:`ramanujanTauL`\: % -> % 
  \ ``ramanujanTauL(s)``\  computes the Ramanujan tau Dirichlet \ ``L``\ -function of \ ``s``\ .

.. _l4a756c6961575345787072657373696f6e-72616d616e756a616e5461755468657461:

.. index::
   pair: JuliaWSExpression; ramanujanTauTheta

:spadfun:`ramanujanTauTheta`\: % -> % 
  \ ``ramanujanTauTheta(z)``\  returns the Ramanujan tau theta of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-72616d616e756a616e5461755a:

.. index::
   pair: JuliaWSExpression; ramanujanTauZ

:spadfun:`ramanujanTauZ`\: % -> % 
  \ ``ramanujanTauZ(t)``\  computes the Ramanujan tau \ ``Z``\ -function of \ ``t``\ .

.. _l4a756c6961575345787072657373696f6e-72616e646f6d:

\ :ref:`random <l46696e697465-72616e646f6d>`\ \: () -> % if % has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l4a756c6961575345787072657373696f6e-72616e6b:

\ :ref:`rank <l46696e69746552616e6b416c6765627261-72616e6b>`\ \: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-726174696f6e616c417070726f78696d6174696f6e:

.. index::
   pair: JuliaWSExpression; rationalApproximation

:spadfun:`rationalApproximation`\: % -> % 
  \ ``rationalApproximation(expr)``\  try to find a rational approximation of the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; rationalApproximation

:spadfun:`rationalApproximation`\: (%, %) -> % 
  \ ``rationalApproximation(expr, dx)``\  try to find a rational approximation of the expression \ ``expr``\  within tolerance \ ``dx``\ .

.. _l4a756c6961575345787072657373696f6e-7265616c:

\ :ref:`real <l436f6d706c657843617465676f7279-7265616c>`\ \: % -> % 
  from \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  %

.. _l4a756c6961575345787072657373696f6e-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-726564756365:

.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (%, %) -> % 
  \ ``reduce(expr,lvars)``\  tries to reduce the (in)equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (%, %, %) -> % 
  \ ``reduce(expr,lvars,dom)``\  tries to reduce the (in)equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (%, \ :ref:`String <l537472696e67>`\ , %, %) -> % 
  \ ``reduce(lhs, rel, rhs,lvars)``\  tries to reduce the (in)equation in expr where \ ``rel``\  is the relation operator ("==" or "<=" for example).


.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (%, \ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  \ ``reduce(lhs, rel,rhs,lvars,dom)``\  tries to reduce the (in)equation in expr where \ ``rel``\  is the relation operator (\ ``"="``\  or "<=" for example).


.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %) -> % 
  \ ``reduce(expr,lvars)``\  tries to reduce the equation in \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; reduce

:spadfun:`reduce`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> % 
  \ ``reduce(expr,lvars,dom)``\  tries to reduce the equation in \ ``expr``\ .


\ :ref:`reduce <l4d6f6e6f67656e6963416c6765627261-726564756365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> Union(%, failed) 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`reduce <l4d6f6e6f67656e6963416c6765627261-726564756365>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-7265647563656453797374656d:

\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: (\ :ref:`Matrix <l4d6174726978>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  %, vec: \ :ref:`Vector <l566563746f72>`\  %) 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  %


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  %

.. _l4a756c6961575345787072657373696f6e-726566696e65:

.. index::
   pair: JuliaWSExpression; refine

:spadfun:`refine`\: (%, %) -> % 
  \ ``refine(expr, assums)``\  refines the expression \ ``expr``\  with assumptions assums.

.. _l4a756c6961575345787072657373696f6e-726567756c6172526570726573656e746174696f6e:

\ :ref:`regularRepresentation <l4672616d6564416c6765627261-726567756c6172526570726573656e746174696f6e>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`regularRepresentation <l46696e69746552616e6b416c6765627261-726567756c6172526570726573656e746174696f6e>`\ \: (%, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-72656d:

\ :ref:`rem <l4575636c696465616e446f6d61696e-72656d>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-72656d6f76654475706c696361746573:

\ :ref:`removeDuplicates <l4a756c69615753416767726567617465-72656d6f76654475706c696361746573>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7265706c616365:

.. index::
   pair: JuliaWSExpression; replace

:spadfun:`replace`\: (%, %) -> % 
  \ ``replace(expr, rule)``\  applies rule(\ ``s``\ ) to \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; replace

:spadfun:`replace`\: (%, %, %) -> % 
  \ ``replace(expr, rule, lev)``\  applies \ ``rule``\  to \ ``expr``\  with level lev.

.. _l4a756c6961575345787072657373696f6e-7265706c616365416c6c:

.. index::
   pair: JuliaWSExpression; replaceAll

:spadfun:`replaceAll`\: (%, %) -> % 
  \ ``replaceAll(expr, rule)``\  applies rule(\ ``s``\ ) to \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-7265706c6163654174:

.. index::
   pair: JuliaWSExpression; replaceAt

:spadfun:`replaceAt`\: (%, %, %) -> % 
  \ ``replaceAt(expr, part, n)``\  replaces the \ ``n``\ -th element of \ ``expr``\  using rule(\ ``s``\ ).

.. _l4a756c6961575345787072657373696f6e-7265706c61636550617274:

.. index::
   pair: JuliaWSExpression; replacePart

:spadfun:`replacePart`\: (%, %) -> % 
  \ ``replacePart(expr, part)``\  replaces \ ``expr``\  using rule(\ ``s``\ ) expressing position(\ ``s``\ ).

.. _l4a756c6961575345787072657373696f6e-7265706c6163655265706561746564:

.. index::
   pair: JuliaWSExpression; replaceRepeated

:spadfun:`replaceRepeated`\: (%, %) -> % 
  \ ``replaceRepeated(expr, rule)``\  applies rule(\ ``s``\ ) to \ ``expr``\ , but repeatedly.

.. _l4a756c6961575345787072657373696f6e-726570726573656e7473:

\ :ref:`represents <l46696e69746552616e6b416c6765627261-726570726573656e7473>`\ \: (\ :ref:`Vector <l566563746f72>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`represents <l4672616d65644d6f64756c65-726570726573656e7473>`\ \: \ :ref:`Vector <l566563746f72>`\  % -> % 
  from \ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  %

.. _l4a756c6961575345787072657373696f6e-72657369647565:

.. index::
   pair: JuliaWSExpression; residue

:spadfun:`residue`\: (%, %) -> % 
  \ ``residue(expr, {x,x0})``\  returns the residue of \ ``expr``\  at \ ``x0``\ .

.. _l4a756c6961575345787072657373696f6e-7265736964756553756d:

.. index::
   pair: JuliaWSExpression; residueSum

:spadfun:`residueSum`\: (%, %) -> % 
  \ ``residueSum(expr, var)``\  returns the residue of \ ``expr``\ . \example{residueSum(Gamma(x),x)}

.. _l4a756c6961575345787072657373696f6e-72657374:

\ :ref:`rest <l4a756c69615753416767726567617465-72657374>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-726573756c74616e74:

.. index::
   pair: JuliaWSExpression; resultant

:spadfun:`resultant`\: (%, %, %) -> % 
  \ ``resultant(p1,p2,x)``\  returns the resultant of \ ``p1``\  and \ ``p2``\ .

.. _l4a756c6961575345787072657373696f6e-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> % 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  %


.. index::
   pair: JuliaWSExpression; retract

:spadfun:`retract`\: % -> \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``retract(expr)``\  tries to retract \ ``expr``\  to an Expression(Integer). Throws an error otherwise.


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a756c6961575345787072657373696f6e-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(%, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  %


.. index::
   pair: JuliaWSExpression; retractIfCan

:spadfun:`retractIfCan`\: % -> Union(\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , failed) 
  \ ``retractIfCan(expr)``\  retracts \ ``expr``\  to a DoubleFloat if it can be retracted to a Lisp machine float.


.. index::
   pair: JuliaWSExpression; retractIfCan

:spadfun:`retractIfCan`\: % -> Union(\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``retractIfCan(expr)``\  tries to retract \ ``expr``\  to an Expression(Integer).


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


.. index::
   pair: JuliaWSExpression; retractIfCan

:spadfun:`retractIfCan`\: % -> Union(\ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , failed) 
  \ ``retractIfCan(expr)``\  retracts \ ``expr``\  to a \ ``JuliaFloat64``\  if it can be retracted to a 64 bits machine float.


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Kernel <l4b65726e656c>`\  %, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  %


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Symbol <l53796d626f6c>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l4a756c6961575345787072657373696f6e-72657665727365:

\ :ref:`reverse <l4a756c69615753416767726567617465-72657665727365>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`reverse <l4a756c69615753416767726567617465-72657665727365>`\ \: (%, \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`reverse <l4a756c69615753416767726567617465-72657665727365>`\ \: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7269656d616e6e53696567656c5468657461:

.. index::
   pair: JuliaWSExpression; riemannSiegelTheta

:spadfun:`riemannSiegelTheta`\: % -> % 
  \ ``riemannSiegelTheta(t)``\  returns the Riemann-Siegel theta function of \ ``t``\ .

.. _l4a756c6961575345787072657373696f6e-7269656d616e6e53696567656c5a:

.. index::
   pair: JuliaWSExpression; riemannSiegelZ

:spadfun:`riemannSiegelZ`\: % -> % 
  \ ``riemannSiegelZ(t)``\  computes the Riemann-Siegel \ ``Z``\  function of \ ``t``\ .

.. _l4a756c6961575345787072657373696f6e-7269656d616e6e5a657461:

\ :ref:`riemannZeta <l5370656369616c46756e6374696f6e43617465676f7279-7269656d616e6e5a657461>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: JuliaWSExpression; riemannZeta

:spadfun:`riemannZeta`\: (%, %) -> % 
  \ ``riemannZeta(s,a)``\  is the generalized Riemann zeta function.

.. _l4a756c6961575345787072657373696f6e-726966666c65:

\ :ref:`riffle <l4a756c69615753416767726567617465-726966666c65>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`riffle <l4a756c69615753416767726567617465-726966666c65>`\ \: (%, %, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4a756c6961575345787072657373696f6e-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-726f6f744f66:

\ :ref:`rootOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-726f6f744f66>`\ \: % -> % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-726f6f744f66>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4a756c6961575345787072657373696f6e-726f6f74526564756365:

.. index::
   pair: JuliaWSExpression; rootReduce

:spadfun:`rootReduce`\: % -> % 
  \ ``rootReduce(expr)``\  reduces root functions.

.. _l4a756c6961575345787072657373696f6e-726f6f74734f66:

\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-726f6f74734f66>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-726f6f74734f66>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4a756c6961575345787072657373696f6e-726f6f7453756d:

\ :ref:`rootSum <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-726f6f7453756d>`\ \: (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %

.. _l4a756c6961575345787072657373696f6e-726f756e64:

.. index::
   pair: JuliaWSExpression; round

:spadfun:`round`\: % -> % 
  \ ``round(x)``\  returns the integer closest to \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4a756c6961575345787072657373696f6e-736563:

\ :ref:`sec <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-736563>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73656368:

\ :ref:`sech <l4879706572626f6c696346756e6374696f6e43617465676f7279-73656368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-736572696573:

.. index::
   pair: JuliaWSExpression; series

:spadfun:`series`\: (%, %) -> % 
  \ ``series(expr, opt)``\  returns a serie from \ ``expr``\ . \example{x:=jWSExpr(x)} \example{opt:=jWSList [x,\ ``pi``\ ()\$JWSEXPR/4,7]} \example{series(sin(a*x),opt)} \example{series(cos(x),"\{x, 0, 12\}")}

.. _l4a756c6961575345787072657373696f6e-736574656c7421:

\ :ref:`setelt! <l4a756c69615753416767726567617465-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-736574656c74:

\ :ref:`setelt <l4a756c69615753416767726567617465-736574656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-736574496e74657273656374696f6e:

\ :ref:`setIntersection <l4a756c69615753416767726567617465-736574496e74657273656374696f6e>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-536869:

\ :ref:`Shi <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-536869>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-5369:

\ :ref:`Si <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279-5369>`\ \: % -> % 
  from \ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73696567656c5468657461:

.. index::
   pair: JuliaWSExpression; siegelTheta

:spadfun:`siegelTheta`\: (%, %) -> % 
  \ ``siegelTheta(tau, s)``\  computes the Siegel theta function.


.. index::
   pair: JuliaWSExpression; siegelTheta

:spadfun:`siegelTheta`\: (%, %, %) -> % 
  \ ``siegelTheta(nu, tau, s)``\  computes the Siegel theta function.

.. _l4a756c6961575345787072657373696f6e-7369676e:

\ :ref:`sign <l5370656369616c46756e6374696f6e43617465676f7279-7369676e>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73696d706c696679:

.. index::
   pair: JuliaWSExpression; simplify

:spadfun:`simplify`\: % -> % 
  \ ``simplify(expr)``\  simplifies the \ ``expr``\ . \example{x:=jWSExpr("x"); simplify(sqrt(x^2)^2)}


.. index::
   pair: JuliaWSExpression; simplify

:spadfun:`simplify`\: (%, %) -> % 
  \ ``simplify(expr, assumptions)``\  simplifies the expression \ ``expr``\  assuming that assumptions are satisfied. For example: \example{x:=jWSExpr("x"); simplify(sqrt(x^2), "x>0")}

.. _l4a756c6961575345787072657373696f6e-73696e:

\ :ref:`sin <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-73696e>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73696e63:

.. index::
   pair: JuliaWSExpression; sinc

:spadfun:`sinc`\: % -> % 
  \ ``sinc(x)``\  computes the unormalized sinc of \ ``x``\ , sin(\ ``x``\ )\ ``/x``\  and 0 if \ ``x``\  = 0.

.. _l4a756c6961575345787072657373696f6e-73696e68:

\ :ref:`sinh <l4879706572626f6c696346756e6374696f6e43617465676f7279-73696e68>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73697a65:

\ :ref:`size <l46696e697465-73697a65>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l4a756c6961575345787072657373696f6e-73697a654c6573733f:

\ :ref:`sizeLess? <l4575636c696465616e446f6d61696e-73697a654c6573733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4a756c6961575345787072657373696f6e-736f6c7665:

.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (%, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(expr, vars)``\  tries to solve the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (%, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(expr, vars, dom)``\  tries to solve the expression \ ``expr``\ .


.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (%, \ :ref:`String <l537472696e67>`\ , %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(lhs, rel, rhs,lvars)``\  tries to solve the (in)equation in expr where \ ``rel``\  is the relation operator ("==" for example).


.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (%, \ :ref:`String <l537472696e67>`\ , %, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(lhs, rel,rhs,lvars,dom)``\  tries to solve the (in)equation in expr where \ ``rel``\  is the relation operator ("==" for example).


.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(eq, vars)``\  tries to solve the equation \ ``eq``\ .


.. index::
   pair: JuliaWSExpression; solve

:spadfun:`solve`\: (\ :ref:`Equation <l4571756174696f6e>`\  %, %, %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``solve(expr, vars, dom)``\  tries to solve the expression \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

\ :ref:`solveLinearPolynomialEquation <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e>`\ \: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, failed) if % has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-736f7274:

\ :ref:`sort <l4a756c69615753416767726567617465-736f7274>`\ \: % -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-736f727465643f:

\ :ref:`sorted? <l4a756c69615753416767726567617465-736f727465643f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-73706865726963616c42657373656c4a:

.. index::
   pair: JuliaWSExpression; sphericalBesselJ

:spadfun:`sphericalBesselJ`\: (%, %) -> % 
  \ ``sphericalBesselJ(n,z)``\  returns the spherical Bessel of the first kind of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-73706865726963616c42657373656c59:

.. index::
   pair: JuliaWSExpression; sphericalBesselY

:spadfun:`sphericalBesselY`\: (%, %) -> % 
  \ ``sphericalBesselY(n,z)``\  returns the spherical Bessel of the second kind of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-73706865726963616c48616e6b656c4831:

.. index::
   pair: JuliaWSExpression; sphericalHankelH1

:spadfun:`sphericalHankelH1`\: (%, %) -> % 
  \ ``sphericalHankelH1(n,z)``\  returns the spherical Hankel of the first kind of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-73706865726963616c48616e6b656c4832:

.. index::
   pair: JuliaWSExpression; sphericalHankelH2

:spadfun:`sphericalHankelH2`\: (%, %) -> % 
  \ ``sphericalHankelH2(n,z)``\  computes the spherical Hankel of the second kind of \ ``z``\ .

.. _l4a756c6961575345787072657373696f6e-73706865726963616c4861726d6f6e696359:

.. index::
   pair: JuliaWSExpression; sphericalHarmonicY

:spadfun:`sphericalHarmonicY`\: (%, %, %, %) -> % 
  \ ``sphericalHarmonicY(l, m, theta, phi)``\  returns the spherical harmonic \ ``Y``\  or evaluates it.

.. _l4a756c6961575345787072657373696f6e-73717274:

\ :ref:`sqrt <l5261646963616c43617465676f7279-73717274>`\ \: % -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4a756c6961575345787072657373696f6e-73717561726546726565506f6c796e6f6d69616c:

\ :ref:`squareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-73717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if % has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4a756c6961575345787072657373696f6e-737469656c746a657347616d6d61:

.. index::
   pair: JuliaWSExpression; stieltjesGamma

:spadfun:`stieltjesGamma`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , %) -> % 
  \ ``stieltjesGamma(n,a)``\  returns the generalized \ ``n``\ -th Stieltjes constant.


.. index::
   pair: JuliaWSExpression; stieltjesGamma

:spadfun:`stieltjesGamma`\: \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\  -> % 
  \ ``stieltjesGamma(n)``\  returns the \ ``n``\ -th Stieltjes constant.

.. _l4a756c6961575345787072657373696f6e-737472696e67:

\ :ref:`string <l4a756c69614f626a65637454797065-737472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961575345787072657373696f6e-73747275766548:

\ :ref:`struveH <l5370656369616c46756e6374696f6e43617465676f7279-73747275766548>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-7374727576654c:

\ :ref:`struveL <l5370656369616c46756e6374696f6e43617465676f7279-7374727576654c>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-737562526573756c74616e7473:

.. index::
   pair: JuliaWSExpression; subResultants

:spadfun:`subResultants`\: (%, %, %) -> % 
  \ ``subResultants(p1,p2,x)``\  returns the subresultant of \ ``p1``\  and \ ``p2``\  with respect to \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-7375627374:

\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l4a756c6961575345787072657373696f6e-73756d:

.. index::
   pair: JuliaWSExpression; sum

:spadfun:`sum`\: (%, %) -> % 
  \ ``sum(f(n),range)``\  returns the sum \ ``f``\ (imin) + .. + \ ``f``\ (imax) defined by the list \ ``range``\ , for example \example{jWSExpr("\{i, imin, imax\}")}. See Wolfram Language specifications.


.. index::
   pair: JuliaWSExpression; sum

:spadfun:`sum`\: (%, %, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``sum(f(n),n, a..b)``\  returns the sum \ ``f``\ (a) + .. + \ ``f``\ (\ ``b``\ ).


.. index::
   pair: JuliaWSExpression; sum

:spadfun:`sum`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``sum(f(n),n)``\  returns the indefinite sum of \ ``f``\ (\ ``n``\ ).

.. _l4a756c6961575345787072657373696f6e-73756d6d6174696f6e:

\ :ref:`summation <l436f6d62696e61746f7269616c4f707343617465676f7279-73756d6d6174696f6e>`\ \: (%, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  %) -> % 
  from \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ 


\ :ref:`summation <l436f6d62696e61746f7269616c4f707343617465676f7279-73756d6d6174696f6e>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-73796d6d6574726963506f6c796e6f6d69616c:

.. index::
   pair: JuliaWSExpression; symmetricPolynomial

:spadfun:`symmetricPolynomial`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> % 
  \ ``symmetricPolynomial(n,lvars)``\  returns the \ ``n``\ -th elementary symmetric polynomial with respect to variables in \ ``lvars``\ .

.. _l4a756c6961575345787072657373696f6e-73796d6d6574726963526564756374696f6e:

.. index::
   pair: JuliaWSExpression; symmetricReduction

:spadfun:`symmetricReduction`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``symmetricReduction(f,lvars)``\  return a pair of polynomial representing \ ``f``\  = \ ``p+q``\  where \ ``p``\  is a symmetric polynomial, \ ``q``\  the remainder.


.. index::
   pair: JuliaWSExpression; symmetricReduction

:spadfun:`symmetricReduction`\: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  %) -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``symmetricReduction(f, lvars, replnt)``\  return a pair of polynomial representing \ ``f``\  = \ ``p+q``\  where \ ``p``\  is a symmetric polynomial, \ ``q``\  the remainder where variables in \ ``p``\  replaced by the ones in replnt.

.. _l4a756c6961575345787072657373696f6e-74616b65:

\ :ref:`take <l4a756c69615753416767726567617465-74616b65>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %


\ :ref:`take <l4a756c69615753416767726567617465-74616b65>`\ \: (%, \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-74616e:

\ :ref:`tan <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-74616e>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-74616e68:

\ :ref:`tanh <l4879706572626f6c696346756e6374696f6e43617465676f7279-74616e68>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-746f676574686572:

.. index::
   pair: JuliaWSExpression; together

:spadfun:`together`\: % -> % 
  \ ``together(expr)``\  put together terms over a common denominator cancelling common factors in numerator and denominator.

.. _l4a756c6961575345787072657373696f6e-746f537472696e67:

\ :ref:`toString <l4a756c696157534f626a656374-746f537472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\ 


.. index::
   pair: JuliaWSExpression; toString

:spadfun:`toString`\: (%, %) -> \ :ref:`String <l537472696e67>`\  
  \ ``toString(expr, form)``\  returns the string representation of \ ``expr``\  with \ ``WS``\  language format form.

.. _l4a756c6961575345787072657373696f6e-746f776572:

\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l4a756c6961575345787072657373696f6e-7472616365:

\ :ref:`trace <l46696e69746552616e6b416c6765627261-7472616365>`\ \: % -> % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-74726163654d6174726978:

\ :ref:`traceMatrix <l4672616d6564416c6765627261-74726163654d6174726978>`\ \: () -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)


\ :ref:`traceMatrix <l46696e69746552616e6b416c6765627261-74726163654d6174726978>`\ \: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  % 
  from \ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %)

.. _l4a756c6961575345787072657373696f6e-747261646974696f6e616c466f726d:

.. index::
   pair: JuliaWSExpression; traditionalForm

:spadfun:`traditionalForm`\: % -> % 
  \ ``traditionalForm(expr)``\  returns a traditional form of \ ``expr``\  i.e. its \ ``WS``\  'TraditionalForm'.

.. _l4a756c6961575345787072657373696f6e-74726967457870616e64:

.. index::
   pair: JuliaWSExpression; trigExpand

:spadfun:`trigExpand`\: % -> % 
  \ ``trigExpand(expr)``\  tries to expand (hyperbolic) trigonometric functions in \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-74726967466163746f72:

.. index::
   pair: JuliaWSExpression; trigFactor

:spadfun:`trigFactor`\: % -> % 
  \ ``trigFactor(expr)``\  factors (hyperbolic) trigonometric functions in \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-74726967466163746f724c697374:

.. index::
   pair: JuliaWSExpression; trigFactorList

:spadfun:`trigFactorList`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``trigFactorList(expr)``\  returns a list of factors of (hyperbolic) trigonometric functions in \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-74726967526564756365:

.. index::
   pair: JuliaWSExpression; trigReduce

:spadfun:`trigReduce`\: % -> % 
  \ ``trigReduce(expr)``\  reduces power and products of trigonometric functions.

.. _l4a756c6961575345787072657373696f6e-74726967546f457870:

.. index::
   pair: JuliaWSExpression; trigToExp

:spadfun:`trigToExp`\: % -> % 
  \ ``trigToExp(expr)``\  returns \ ``expr``\  with (hyperbolic) trigonometric functions converted to, evetually complex, exponentials.

.. _l4a756c6961575345787072657373696f6e-756e696f6e:

\ :ref:`union <l4a756c69615753416767726567617465-756e696f6e>`\ \: (%, %) -> % 
  from \ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  %

.. _l4a756c6961575345787072657373696f6e-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4a756c6961575345787072657373696f6e-756e697453746570:

\ :ref:`unitStep <l5370656369616c46756e6374696f6e43617465676f7279-756e697453746570>`\ \: % -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-756e6976617269617465:

\ :ref:`univariate <l46756e6374696f6e537061636532-756e6976617269617465>`\ \: (%, \ :ref:`Kernel <l4b65726e656c>`\  %) -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-76616c756573:

.. index::
   pair: JuliaWSExpression; values

:spadfun:`values`\: % -> % 
  \ ``values(expr)``\  returns the values elements in \ ``expr``\ .

.. _l4a756c6961575345787072657373696f6e-7661726961626c6573:

.. index::
   pair: JuliaWSExpression; variables

:spadfun:`variables`\: % -> \ :ref:`JuliaWSList <l4a756c696157534c697374>`\  % 
  \ ``variables(p)``\  returns the list of variables in \ ``p``\ .


\ :ref:`variables <l46756e6374696f6e537061636532-7661726961626c6573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)


\ :ref:`variables <l46756e6374696f6e537061636532-7661726961626c6573>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %)

.. _l4a756c6961575345787072657373696f6e-776562657245:

\ :ref:`weberE <l5370656369616c46756e6374696f6e43617465676f7279-776562657245>`\ \: (%, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-776569657273747261737350:

\ :ref:`weierstrassP <l5370656369616c46756e6374696f6e43617465676f7279-776569657273747261737350>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-776569657273747261737350496e7665727365:

\ :ref:`weierstrassPInverse <l5370656369616c46756e6374696f6e43617465676f7279-776569657273747261737350496e7665727365>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-7765696572737472617373505072696d65:

\ :ref:`weierstrassPPrime <l5370656369616c46756e6374696f6e43617465676f7279-7765696572737472617373505072696d65>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-77656965727374726173735369676d61:

\ :ref:`weierstrassSigma <l5370656369616c46756e6374696f6e43617465676f7279-77656965727374726173735369676d61>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-77656965727374726173735a657461:

\ :ref:`weierstrassZeta <l5370656369616c46756e6374696f6e43617465676f7279-77656965727374726173735a657461>`\ \: (%, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-7768697474616b65724d:

.. index::
   pair: JuliaWSExpression; whittakerM

:spadfun:`whittakerM`\: (%, %, %) -> % 
  \ ``whittakerM(k,m,x)``\  computes the Whittaker function \ ``M``\  de \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-7768697474616b657257:

.. index::
   pair: JuliaWSExpression; whittakerW

:spadfun:`whittakerW`\: (%, %, %) -> % 
  \ ``whittakerW(k,m,z)``\  computes the Whittaker function \ ``W``\  de \ ``x``\ .

.. _l4a756c6961575345787072657373696f6e-77696c736f6e57:

\ :ref:`wilsonW <l5370656369616c46756e6374696f6e43617465676f7279-77696c736f6e57>`\ \: (%, %, %, %, %, %) -> % 
  from \ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\ 

.. _l4a756c6961575345787072657373696f6e-7a65726e696b6552:

.. index::
   pair: JuliaWSExpression; zernikeR

:spadfun:`zernikeR`\: (%, %, %) -> % 
  \ ``zernikeR(n, m, x)``\  returns the Zernike radial polynomial or evaluates it at \ ``x``\  if \ ``x``\  is a number.

.. _l4a756c6961575345787072657373696f6e-7a65726f3f:

.. index::
   pair: JuliaWSExpression; zero?

:spadfun:`zero?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``zero? x``\  tries to determine if \ ``x``\  is 0. For example: \example{expr:=0\$JWSEXPR/1*sqrt(17::JWSEXPR); zero? expr}

.. _l4a756c6961575345787072657373696f6e-7a65726f4f66:

\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-7a65726f4f66>`\ \: % -> % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-7a65726f4f66>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4a756c6961575345787072657373696f6e-7a65726f734f66:

\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-7a65726f734f66>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365-7a65726f734f66>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  %


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\  

\ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  % 

\ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\  

\ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalsClosed <l63616e6f6e6963616c73436c6f736564>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  % 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CombinatorialFunctionCategory <l436f6d62696e61746f7269616c46756e6374696f6e43617465676f7279>`\  

\ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  % 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  % 

\ :ref:`DivisionRing <l4469766973696f6e52696e67>`\  

\ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\  

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  % 

\ :ref:`ExpressionSpace <l45787072657373696f6e5370616365>`\  

\ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`Field <l4669656c64>`\  

\ :ref:`FiniteRankAlgebra <l46696e69746552616e6b416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) 

\ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) 

\ :ref:`FramedModule <l4672616d65644d6f64756c65>`\  % 

\ :ref:`FullyEvalableOver <l46756c6c794576616c61626c654f766572>`\  % 

\ :ref:`FullyLinearlyExplicitOver <l46756c6c794c696e6561726c794578706c696369744f766572>`\  % 

\ :ref:`FullyPatternMatchable <l46756c6c795061747465726e4d6174636861626c65>`\  % 

\ :ref:`FullyRetractableTo <l46756c6c795265747261637461626c65546f>`\  % 

\ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  % 

\ :ref:`FunctionSpace2 <l46756e6374696f6e537061636532>`\ (%, \ :ref:`Kernel <l4b65726e656c>`\  %) 

\ :ref:`GcdDomain <l476364446f6d61696e>`\  

\ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\  

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %) 

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`JuliaObjectRing <l4a756c69614f626a65637452696e67>`\  

\ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\  

\ :ref:`JuliaRing <l4a756c696152696e67>`\  

\ :ref:`JuliaType <l4a756c696154797065>`\  

\ :ref:`JuliaWSAggregate <l4a756c69615753416767726567617465>`\  % 

\ :ref:`JuliaWSObject <l4a756c696157534f626a656374>`\  

\ :ref:`JuliaWSRing <l4a756c6961575352696e67>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  

\ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  % 

\ :ref:`LiouvillianFunctionCategory <l4c696f7576696c6c69616e46756e6374696f6e43617465676f7279>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (%, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  % 

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`Patternable <l5061747465726e61626c65>`\  % 

\ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  

\ :ref:`PrimitiveFunctionCategory <l5072696d697469766546756e6374696f6e43617465676f7279>`\  

\ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\  

\ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  % 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`SpecialFunctionCategory <l5370656369616c46756e6374696f6e43617465676f7279>`\  

\ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\  

\ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

