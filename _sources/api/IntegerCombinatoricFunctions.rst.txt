.. index:: IntegerCombinatoricFunctions

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73:

IntegerCombinatoricFunctions I
==============================

:viewcode:`combinat.spad line 1 <combinat.spad#L1>` :editcode:`[edit on github] <combinat.spad#L1>`

* I: \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 


The \ :ref:`IntegerCombinatoricFunctions <l496e7465676572436f6d62696e61746f72696346756e6374696f6e73>`\  package provides some standard functions in combinatorics.


.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-62696e6f6d69616c:

.. index::
   pair: IntegerCombinatoricFunctions; binomial

:spadfun:`binomial`\: (I, I) -> I 
  \ ``binomial(n, r)``\  returns the binomial coefficient \ ``C(n, r) = n!/(r! (n-r)!)``\ , where \ ``n >= r >= 0``\ . This is the number of combinations of \ ``n``\  objects taken \ ``r``\  at a time.

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-636174616c616e:

.. index::
   pair: IntegerCombinatoricFunctions; catalan

:spadfun:`catalan`\: I -> I 
  \ ``catalan(n)``\  returns the \ ``n``\ -th Catalan number

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-64697374696e63745f706172746974696f6e:

.. index::
   pair: IntegerCombinatoricFunctions; distinct_partition

:spadfun:`distinct_partition`\: I -> I 
  \ ``distinct_partition(n)``\  returns the number of partitions of the integer \ ``n``\  with distinct members. This is the number of ways that \ ``n``\  can be written as a sum of distinct positive integers. For \ ``n > 0``\  this is the same as number of ways that \ ``n``\  can be written as a sum of odd positive integers.

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-666163746f7269616c:

.. index::
   pair: IntegerCombinatoricFunctions; factorial

:spadfun:`factorial`\: I -> I 
  \ ``factorial(n)``\  returns \ ``n!``\ . this is the product of all integers between 1 and \ ``n``\  (inclusive). Note: \ ``0!``\  is defined to be 1.

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-6d756c74696e6f6d69616c:

.. index::
   pair: IntegerCombinatoricFunctions; multinomial

:spadfun:`multinomial`\: (I, \ :ref:`List <l4c697374>`\  I) -> I 
  \ ``multinomial(n, [m1, m2, ..., mk])``\  returns the multinomial coefficient \ ``n!/(m1! m2! ... mk!)``\ .

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-706172746974696f6e:

.. index::
   pair: IntegerCombinatoricFunctions; partition

:spadfun:`partition`\: I -> I 
  \ ``partition(n)``\  returns the number of partitions of the integer \ ``n``\ . This is the number of distinct ways that \ ``n``\  can be written as a sum of positive integers.

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-7065726d75746174696f6e:

.. index::
   pair: IntegerCombinatoricFunctions; permutation

:spadfun:`permutation`\: (I, I) -> I 
  \ ``permutation(n)``\  returns \ ``!P(n, r) = n!/(n-r)!``\ . This is the number of permutations of \ ``n``\  objects taken \ ``r``\  at a time.

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-737469726c696e6731:

.. index::
   pair: IntegerCombinatoricFunctions; stirling1

:spadfun:`stirling1`\: (I, I) -> I 
  \ ``stirling1(n, m)``\  returns the Stirling number of the first kind denoted \ ``S[n, m]``\ .

.. _l496e7465676572436f6d62696e61746f72696346756e6374696f6e73-737469726c696e6732:

.. index::
   pair: IntegerCombinatoricFunctions; stirling2

:spadfun:`stirling2`\: (I, I) -> I 
  \ ``stirling2(n, m)``\  returns the Stirling number of the second kind denoted \ ``SS[n, m]``\ .


