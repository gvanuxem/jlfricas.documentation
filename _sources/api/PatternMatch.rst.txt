.. index:: PatternMatch

.. _l5061747465726e4d61746368:

PatternMatch(Base, Subject, Pat)
================================

:viewcode:`patmatch1.spad line 879 <patmatch1.spad#L879>` :editcode:`[edit on github] <patmatch1.spad#L879>`

* Base: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* Subject: \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  Base

* Pat: \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  Base


This package provides the top-level pattern matching functions.


.. _l5061747465726e4d61746368-69733f:

.. index::
   pair: PatternMatch; is?

:spadfun:`is?`\: (\ :ref:`List <l4c697374>`\  Subject, Pat) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?([e1, ..., en], pat)``\  tests if the list of expressions \ ``[e1, ..., en]``\  matches the pattern pat.


.. index::
   pair: PatternMatch; is?

:spadfun:`is?`\: (Subject, Pat) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?(expr, pat)``\  tests if the expression \ ``expr``\  matches the pattern pat.

.. _l5061747465726e4d61746368-4973:

.. index::
   pair: PatternMatch; Is

:spadfun:`Is`\: (\ :ref:`List <l4c697374>`\  Subject, Pat) -> \ :ref:`PatternMatchListResult <l5061747465726e4d617463684c697374526573756c74>`\ (Base, Subject, \ :ref:`List <l4c697374>`\  Subject) 
  \ ``Is([e1, ..., en], pat)``\  matches the pattern pat on the list of expressions \ ``[e1, ..., en]``\  and returns the result.


.. index::
   pair: PatternMatch; Is

:spadfun:`Is`\: (Subject, Pat) -> \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  Subject if Subject has \ :ref:`Ring <l52696e67>`\  and Subject hasn't \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``Is(expr, pat)``\  matches the pattern pat on the expression \ ``expr``\  and returns a list of matches \ ``[v1 = e1, ..., vn = en]``\ ; returns an empty list if either \ ``expr``\  is exactly equal to pat or if pat does not match \ ``expr``\ .


.. index::
   pair: PatternMatch; Is

:spadfun:`Is`\: (Subject, Pat) -> \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  Subject if Subject has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``Is(expr, pat)``\  matches the pattern pat on the expression \ ``expr``\  and returns a list of matches \ ``[v1 = e1, ..., vn = en]``\ ; returns an empty list if either \ ``expr``\  is exactly equal to pat or if pat does not match \ ``expr``\ .


.. index::
   pair: PatternMatch; Is

:spadfun:`Is`\: (Subject, Pat) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (Base, Subject) if Subject hasn't \ :ref:`Ring <l52696e67>`\  and Subject hasn't \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``Is(expr, pat)``\  matches the pattern pat on the expression \ ``expr``\  and returns a match of the form \ ``[v1 = e1, ..., vn = en]``\ ; returns an empty match if \ ``expr``\  is exactly equal to pat. returns a \ :spadfun:`failed`\  match if pat does not match \ ``expr``\ .


