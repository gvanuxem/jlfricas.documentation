.. index:: UnivariateFiniteFieldFactorize

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65:

UnivariateFiniteFieldFactorize(F, UP)
=====================================

:viewcode:`ffact.spad line 993 <ffact.spad#L993>` :editcode:`[edit on github] <ffact.spad#L993>`

* F: \ :ref:`FiniteFieldCategory <l46696e6974654669656c6443617465676f7279>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F


undocumented


.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-666163746f72:

.. index::
   pair: UnivariateFiniteFieldFactorize; factor

:spadfun:`factor`\: UP -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p)``\  factorizes \ ``p``\  into prime factors.

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-666163746f7253717561726546726565:

.. index::
   pair: UnivariateFiniteFieldFactorize; factorSquareFree

:spadfun:`factorSquareFree`\: UP -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p)``\  factorizes \ ``p``\  into prime factors. \ ``p``\  must be square free.

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-6972726564756369626c653f:

.. index::
   pair: UnivariateFiniteFieldFactorize; irreducible?

:spadfun:`irreducible?`\: UP -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``irreducible?(p)``\  tests if \ ``p``\  is irreducible.

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-73755f6972726564756369626c653f:

.. index::
   pair: UnivariateFiniteFieldFactorize; su_irreducible?

:spadfun:`su_irreducible?`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``su_irreducible?(p)``\  tests if \ ``p``\  is irreducible. \ ``p``\  must be monic and square free.

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-7375666163746f72:

.. index::
   pair: UnivariateFiniteFieldFactorize; sufactor

:spadfun:`sufactor`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F -> Record(cont: F, factors: \ :ref:`List <l4c697374>`\  Record(factor: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``sufactor(p)``\  factorizes \ ``p``\  into prime factors.

.. _l556e697661726961746546696e6974654669656c64466163746f72697a65-7375666163746f725f7371756172655f66726565:

.. index::
   pair: UnivariateFiniteFieldFactorize; sufactor_square_free

:spadfun:`sufactor_square_free`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F 
  \ ``sufactor_square_free(p)``\  factorizes \ ``p``\  into prime factors. \ ``p``\  must be square free.


