.. index:: XPolynomialRing

.. _l58506f6c796e6f6d69616c52696e67:

XPolynomialRing(R, E)
=====================

:viewcode:`xpoly.spad line 135 <xpoly.spad#L135>` :editcode:`[edit on github] <xpoly.spad#L135>`

* R: \ :ref:`Ring <l52696e67>`\ 

* E: \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\ 


This domain represents generalized polynomials with coefficients (from a not necessarily commutative ring), and words belonging to an arbitrary \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\ . This type is used, for instance, by the \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\  domain constructor where the Monoid is free.


.. _l58506f6c796e6f6d69616c52696e67-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l58506f6c796e6f6d69616c52696e67-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l58506f6c796e6f6d69616c52696e67-23:

.. index::
   pair: XPolynomialRing; #

:spadfun:`#`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``\# p``\  returns the number of terms in \ ``p``\ .

.. _l58506f6c796e6f6d69616c52696e67-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


.. index::
   pair: XPolynomialRing; *

:spadfun:`\*`\: (%, R) -> % 
  \ ``p*r``\  returns the product of \ ``p``\  by \ ``r``\ .


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l58506f6c796e6f6d69616c52696e67-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l58506f6c796e6f6d69616c52696e67-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l58506f6c796e6f6d69616c52696e67-2f:

.. index::
   pair: XPolynomialRing; /

:spadfun:`/`\: (%, R) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``p/r``\  returns \ ``p*(1/r)``\ .

.. _l58506f6c796e6f6d69616c52696e67-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l58506f6c796e6f6d69616c52696e67-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l58506f6c796e6f6d69616c52696e67-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l58506f6c796e6f6d69616c52696e67-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l58506f6c796e6f6d69616c52696e67-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l58506f6c796e6f6d69616c52696e67-636f6566:

.. index::
   pair: XPolynomialRing; coef

:spadfun:`coef`\: (%, E) -> R 
  \ ``coef(p, e)``\  extracts the coefficient of the monomial \ ``e``\ . Returns zero if \ ``e``\  is not present.

.. _l58506f6c796e6f6d69616c52696e67-636f656666696369656e74:

\ :ref:`coefficient <l467265654d6f64756c6543617465676f7279-636f656666696369656e74>`\ \: (%, E) -> R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-636f656666696369656e7473:

\ :ref:`coefficients <l467265654d6f64756c6543617465676f7279-636f656666696369656e7473>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: XPolynomialRing; coerce

:spadfun:`coerce`\: E -> % 
  \ ``coerce(e)``\  returns \ ``1*e``\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l58416c6765627261-636f65726365>`\ \: R -> % 
  from \ :ref:`XAlgebra <l58416c6765627261>`\  R

.. _l58506f6c796e6f6d69616c52696e67-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l58506f6c796e6f6d69616c52696e67-636f6e7374616e743f:

.. index::
   pair: XPolynomialRing; constant?

:spadfun:`constant?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``constant?(p)``\  tests whether the polynomial \ ``p``\  belongs to the coefficient ring.

.. _l58506f6c796e6f6d69616c52696e67-636f6e7374616e74:

.. index::
   pair: XPolynomialRing; constant

:spadfun:`constant`\: % -> R 
  \ ``constant(p)``\  return the constant term of \ ``p``\ .

.. _l58506f6c796e6f6d69616c52696e67-636f6e737472756374:

\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: E, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: E, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l496e646578656450726f6475637443617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> R 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l496e646578656450726f6475637443617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> E 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: E, c: R) 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6c696e656172457874656e64:

\ :ref:`linearExtend <l467265654d6f64756c6543617465676f7279-6c696e656172457874656e64>`\ \: (E -> R, %) -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6c6973744f665465726d73:

\ :ref:`listOfTerms <l496e646578656444697265637450726f6475637443617465676f7279-6c6973744f665465726d73>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(k: E, c: R) 
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6d6170:

.. index::
   pair: XPolynomialRing; map

:spadfun:`map`\: (R -> R, %) -> % 
  \ ``map(fn, x)``\  returns \ ``Sum(fn(r_i) w_i)``\  if \ ``x``\  writes \ ``Sum(r_i w_i)``\ .

.. _l58506f6c796e6f6d69616c52696e67-6d6178646567:

.. index::
   pair: XPolynomialRing; maxdeg

:spadfun:`maxdeg`\: % -> E 
  \ ``maxdeg(p)``\  returns the greatest word occurring in the polynomial \ ``p``\  with a non-zero coefficient. An error is produced if \ ``p``\  is zero.

.. _l58506f6c796e6f6d69616c52696e67-6d696e646567:

.. index::
   pair: XPolynomialRing; mindeg

:spadfun:`mindeg`\: % -> E 
  \ ``mindeg(p)``\  returns the smallest word occurring in the polynomial \ ``p``\  with a non-zero coefficient. An error is produced if \ ``p``\  is zero.

.. _l58506f6c796e6f6d69616c52696e67-6d6f6e6f6d69616c3f:

\ :ref:`monomial? <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6d6f6e6f6d69616c:

\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (R, E) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6d6f6e6f6d69616c73:

\ :ref:`monomials <l467265654d6f64756c6543617465676f7279-6d6f6e6f6d69616c73>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6e756d6265724f664d6f6e6f6d69616c73:

\ :ref:`numberOfMonomials <l496e646578656444697265637450726f6475637443617465676f7279-6e756d6265724f664d6f6e6f6d69616c73>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l58506f6c796e6f6d69616c52696e67-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l58506f6c796e6f6d69616c52696e67-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R

.. _l58506f6c796e6f6d69616c52696e67-7175617369526567756c61723f:

.. index::
   pair: XPolynomialRing; quasiRegular?

:spadfun:`quasiRegular?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``quasiRegular?(x)``\  return \ ``true``\  if \ ``constant(p)``\  is zero.

.. _l58506f6c796e6f6d69616c52696e67-7175617369526567756c6172:

.. index::
   pair: XPolynomialRing; quasiRegular

:spadfun:`quasiRegular`\: % -> % 
  \ ``quasiRegular(x)``\  return \ ``x``\  minus its constant term.

.. _l58506f6c796e6f6d69616c52696e67-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l58506f6c796e6f6d69616c52696e67-726564756374756d:

.. index::
   pair: XPolynomialRing; reductum

:spadfun:`reductum`\: % -> % 
  \ ``reductum(p)``\  returns \ ``p``\  minus its leading term. An error is produced if \ ``p``\  is zero.

.. _l58506f6c796e6f6d69616c52696e67-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l58506f6c796e6f6d69616c52696e67-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l58506f6c796e6f6d69616c52696e67-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l58506f6c796e6f6d69616c52696e67-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l58506f6c796e6f6d69616c52696e67-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l58506f6c796e6f6d69616c52696e67-737570706f7274:

\ :ref:`support <l467265654d6f64756c6543617465676f7279-737570706f7274>`\ \: % -> \ :ref:`List <l4c697374>`\  E 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l58506f6c796e6f6d69616c52696e67-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  R 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  if R has \ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E) 

\ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E) 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E) 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  if R has \ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

\ :ref:`XAlgebra <l58416c6765627261>`\  R 

