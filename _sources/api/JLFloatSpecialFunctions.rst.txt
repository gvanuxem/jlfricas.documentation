.. index:: JLFloatSpecialFunctions

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73:

JLFloatSpecialFunctions
=======================

:viewcode:`jfsf.spad line 1 <jfsf.spad#L1>` :editcode:`[edit on github] <jfsf.spad#L1>`


Special functions computed using Julia\ ``'s``\  ecosystem.


.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-61636f7364:

.. index::
   pair: JLFloatSpecialFunctions; acosd

:spadfun:`acosd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``acosd(x)``\  computes the inverse cosine of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-61636f7464:

.. index::
   pair: JLFloatSpecialFunctions; acotd

:spadfun:`acotd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``acotd(x)``\  computes the inverse cotangent of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6163736364:

.. index::
   pair: JLFloatSpecialFunctions; acscd

:spadfun:`acscd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``acscd(x)``\  computes the inverse cosecant of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6173656364:

.. index::
   pair: JLFloatSpecialFunctions; asecd

:spadfun:`asecd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``asecd(x)``\  computes the inverse secant of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6173696e64:

.. index::
   pair: JLFloatSpecialFunctions; asind

:spadfun:`asind`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``asind(x)``\  computes the inverse sine of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6174616e64:

.. index::
   pair: JLFloatSpecialFunctions; atand

:spadfun:`atand`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``atand(x, y)``\  computes the inverse tangent of x/y, where output is in degrees.


.. index::
   pair: JLFloatSpecialFunctions; atand

:spadfun:`atand`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``atand(x)``\  computes the inverse tangent of \ ``x``\ , where output is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-636f7363:

.. index::
   pair: JLFloatSpecialFunctions; cosc

:spadfun:`cosc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``cosc(x)``\  computes cos(pi*x)/xâˆ’sin(pi*x)/(\ ``pi*x^2``\ ) if \ ``x~=0``\ , and 0 if \ ``x=0``\  i.e. the derivative of sinc(\ ``x``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-636f7364:

.. index::
   pair: JLFloatSpecialFunctions; cosd

:spadfun:`cosd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``cosd(x)``\  computes cosine of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-636f737069:

.. index::
   pair: JLFloatSpecialFunctions; cospi

:spadfun:`cospi`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``cospi(x)``\  computes cos(pi*x) more accurately.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-636f7464:

.. index::
   pair: JLFloatSpecialFunctions; cotd

:spadfun:`cotd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``cotd(x)``\  computes cotangent of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-63736364:

.. index::
   pair: JLFloatSpecialFunctions; cscd

:spadfun:`cscd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``cscd(x)``\  computes cosecant of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-64656732526164:

.. index::
   pair: JLFloatSpecialFunctions; deg2Rad

:spadfun:`deg2Rad`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``deg2Rad(x)``\  converts \ ``x``\  to radian, where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6879706f74:

.. index::
   pair: JLFloatSpecialFunctions; hypot

:spadfun:`hypot`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``hypot(x,y)``\  computes the hypotenuse avoiding overflow and underflow.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-6c64657870:

.. index::
   pair: JLFloatSpecialFunctions; ldexp

:spadfun:`ldexp`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``ldexp(x,n)``\  computes x*2^n

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-72616432446567:

.. index::
   pair: JLFloatSpecialFunctions; rad2Deg

:spadfun:`rad2Deg`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``rad2Deg(x)``\  converts \ ``x``\  to degrees, where \ ``x``\  is in radians.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-73656364:

.. index::
   pair: JLFloatSpecialFunctions; secd

:spadfun:`secd`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``secd(x)``\  computes secant of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-73696e63:

.. index::
   pair: JLFloatSpecialFunctions; sinc

:spadfun:`sinc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``sinc(x)``\  computes the normalized sinc, i.e. sin(pi*x)/(pi*x) if \ ``x~=0``\ , and 1 if \ ``x=0``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-73696e64:

.. index::
   pair: JLFloatSpecialFunctions; sind

:spadfun:`sind`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``sind(x)``\  computes sine of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-73696e7069:

.. index::
   pair: JLFloatSpecialFunctions; sinpi

:spadfun:`sinpi`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``sinpi(x)``\  computes sin(pi*x) more accurately.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-74616e64:

.. index::
   pair: JLFloatSpecialFunctions; tand

:spadfun:`tand`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``tand(x)``\  computes tangent of \ ``x``\ , where \ ``x``\  is in degrees.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e73-74616e7069:

.. index::
   pair: JLFloatSpecialFunctions; tanpi

:spadfun:`tanpi`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``tanpi(x)``\  computes tan(pi*x) more accurately.


