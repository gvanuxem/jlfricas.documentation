.. index:: FunctionSpace2

.. _l46756e6374696f6e537061636532:

FunctionSpace2(R, K)
====================

:viewcode:`fspace.spad line 389 <fspace.spad#L389>` :editcode:`[edit on github] <fspace.spad#L389>`

* R: \ :ref:`Comparable <l436f6d70617261626c65>`\ 

* K: \ :ref:`KernelCategory <l4b65726e656c43617465676f7279>`\  %


A space of formal functions with arguments in an arbitrary ordered set.


.. _l46756e6374696f6e537061636532-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46756e6374696f6e537061636532-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l46756e6374696f6e537061636532-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\  and R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l46756e6374696f6e537061636532-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l46756e6374696f6e537061636532-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l46756e6374696f6e537061636532-2f:

\ :ref:`/ <l47726f7570-2f>`\ \: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  or R has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 


.. index::
   pair: FunctionSpace2; /

:spadfun:`/`\: (\ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, K), \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, K)) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``p1/p2``\  returns the quotient of \ ``p1``\  and \ ``p2``\  as an element of \%.

.. _l46756e6374696f6e537061636532-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46756e6374696f6e537061636532-5e:

\ :ref:`^ <l47726f7570-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  or R has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46756e6374696f6e537061636532-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46756e6374696f6e537061636532-616c67746f776572:

.. index::
   pair: FunctionSpace2; algtower

:spadfun:`algtower`\: % -> \ :ref:`List <l4c697374>`\  K if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``algtower(f)``\  is algtower([\ ``f``\ ])


.. index::
   pair: FunctionSpace2; algtower

:spadfun:`algtower`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  K if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``algtower([f1, ..., fn])``\  returns list of kernels \ ``[ak1, ..., akl]``\  such that each toplevel algebraic kernel in one of \ ``f1``\ , ..., \ ``fn``\  or in arguments of \ ``ak1``\ , ..., akl is one of \ ``ak1``\ , ..., akl.

.. _l46756e6374696f6e537061636532-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`Rng <l526e67>`\ 

.. _l46756e6374696f6e537061636532-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l46756e6374696f6e537061636532-6170706c7951756f7465:

.. index::
   pair: FunctionSpace2; applyQuote

:spadfun:`applyQuote`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> % 
  \ ``applyQuote(foo, x)``\  returns \ ``'foo(x)``\ .


.. index::
   pair: FunctionSpace2; applyQuote

:spadfun:`applyQuote`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %) -> % 
  \ ``applyQuote(foo, x, y)``\  returns \ ``'foo(x, y)``\ .


.. index::
   pair: FunctionSpace2; applyQuote

:spadfun:`applyQuote`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %, %) -> % 
  \ ``applyQuote(foo, x, y, z)``\  returns \ ``'foo(x, y, z)``\ .


.. index::
   pair: FunctionSpace2; applyQuote

:spadfun:`applyQuote`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %, %, %, %) -> % 
  \ ``applyQuote(foo, x, y, z, t)``\  returns \ ``'foo(x, y, z, t)``\ .


.. index::
   pair: FunctionSpace2; applyQuote

:spadfun:`applyQuote`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``applyQuote(foo, [x1, ..., xn])``\  returns \ ``'foo(x1, ..., xn)``\ .

.. _l46756e6374696f6e537061636532-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l46756e6374696f6e537061636532-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l46756e6374696f6e537061636532-62656c6f6e673f:

\ :ref:`belong? <l45787072657373696f6e537061636532-62656c6f6e673f>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-626f78:

\ :ref:`box <l45787072657373696f6e537061636532-626f78>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l46756e6374696f6e537061636532-636861727468526f6f74:

\ :ref:`charthRoot <l43686172616374657269737469634e6f6e5a65726f-636861727468526f6f74>`\ \: % -> Union(%, failed) if R has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 
  from \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

.. _l46756e6374696f6e537061636532-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  or R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


.. index::
   pair: FunctionSpace2; coerce

:spadfun:`coerce`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  R -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``coerce(f)``\  returns \ ``f``\  as an element of \%.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


.. index::
   pair: FunctionSpace2; coerce

:spadfun:`coerce`\: \ :ref:`Fraction <l4672616374696f6e>`\  R -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``coerce(q)``\  returns \ ``q``\  as an element of \%.


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`Ring <l52696e67>`\  or R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: K -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  K


.. index::
   pair: FunctionSpace2; coerce

:spadfun:`coerce`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  R -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``coerce(p)``\  returns \ ``p``\  as an element of \%.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: R -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  R


.. index::
   pair: FunctionSpace2; coerce

:spadfun:`coerce`\: \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, K) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``coerce(p)``\  returns \ ``p``\  as an element of \%.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l46756e6374696f6e537061636532-636f6d6d757461746f72:

\ :ref:`commutator <l47726f7570-636f6d6d757461746f72>`\ \: (%, %) -> % if R has \ :ref:`Group <l47726f7570>`\  or R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l46756e6374696f6e537061636532-636f6e6a7567617465:

\ :ref:`conjugate <l47726f7570-636f6e6a7567617465>`\ \: (%, %) -> % if R has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l46756e6374696f6e537061636532-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 


.. index::
   pair: FunctionSpace2; convert

:spadfun:`convert`\: \ :ref:`Factored <l466163746f726564>`\  % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``convert(f1\^e1 ... fm\^em)``\  returns \ ``(f1)\^e1 ... (fm)\^em``\  as an element of \%, using formal kernels created using a \ :ref:`paren <l45787072657373696f6e5370616365-706172656e>`\ .

.. _l46756e6374696f6e537061636532-44:

\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l46756e6374696f6e537061636532-646566696e696e67506f6c796e6f6d69616c:

\ :ref:`definingPolynomial <l45787072657373696f6e537061636532-646566696e696e67506f6c796e6f6d69616c>`\ \: % -> % if % has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-64656e6f6d:

.. index::
   pair: FunctionSpace2; denom

:spadfun:`denom`\: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, K) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``denom(f)``\  returns the denominator of \ ``f``\  viewed as a polynomial in the kernels over \ ``R``\ .

.. _l46756e6374696f6e537061636532-64656e6f6d696e61746f72:

.. index::
   pair: FunctionSpace2; denominator

:spadfun:`denominator`\: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``denominator(f)``\  returns the denominator of \ ``f``\  converted to \%.

.. _l46756e6374696f6e537061636532-646966666572656e7469617465:

\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l46756e6374696f6e537061636532-64697374726962757465:

\ :ref:`distribute <l45787072657373696f6e537061636532-64697374726962757465>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`distribute <l45787072657373696f6e537061636532-64697374726962757465>`\ \: (%, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-646976696465:

\ :ref:`divide <l4575636c696465616e446f6d61696e-646976696465>`\ \: (%, %) -> Record(quotient: %, remainder: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-656c74:

\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6575636c696465616e53697a65:

\ :ref:`euclideanSize <l4575636c696465616e446f6d61696e-6575636c696465616e53697a65>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  \ ``eval(x, s, f, y)``\  replaces every \ ``s(a)``\  in \ ``x``\  by \ ``f(y)``\  with \ ``y``\  replaced by \ ``a``\  for any \ ``a``\ .


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, K, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  \ ``eval(x, [s1, ..., sm], [f1, ..., fm], y)``\  replaces every \ ``si(a)``\  in \ ``x``\  by \ ``fi(y)``\  with \ ``y``\  replaced by \ ``a``\  for any \ ``a``\ .


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  K, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %)


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``eval(x, [s1, ..., sm], [n1, ..., nm], [f1, ..., fm])``\  replaces every \ ``si(a)^ni``\  in \ ``x``\  by \ ``fi(a)``\  for any \ ``a``\ .


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``eval(x, [s1, ..., sm], [n1, ..., nm], [f1, ..., fm])``\  replaces every \ ``si(a1, ..., an)^ni``\  in \ ``x``\  by \ ``fi(a1, ..., an)``\  for any \ ``a1``\ , ..., am.


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , % -> %) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``eval(x, s, n, f)``\  replaces every \ ``s(a)^n``\  in \ ``x``\  by \ ``f(a)``\  for any \ ``a``\ .


.. index::
   pair: FunctionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``eval(x, s, n, f)``\  replaces every \ ``s(a1, ..., am)^n``\  in \ ``x``\  by \ ``f(a1, ..., am)``\  for any \ ``a1``\ , ..., am.

.. _l46756e6374696f6e537061636532-6576656e3f:

\ :ref:`even? <l45787072657373696f6e537061636532-6576656e3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-65787072657373496465616c4d656d626572:

\ :ref:`expressIdealMember <l5072696e636970616c496465616c446f6d61696e-65787072657373496465616c4d656d626572>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l46756e6374696f6e537061636532-657874656e6465644575636c696465616e:

\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %) -> Record(coef1: %, coef2: %, generator: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %, %) -> Union(Record(coef1: %, coef2: %), failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-667265654f663f:

\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-67726f756e643f:

.. index::
   pair: FunctionSpace2; ground?

:spadfun:`ground?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``ground?(f)``\  tests if \ ``f``\  is an element of \ ``R``\ .

.. _l46756e6374696f6e537061636532-67726f756e64:

.. index::
   pair: FunctionSpace2; ground

:spadfun:`ground`\: % -> R 
  \ ``ground(f)``\  returns \ ``f``\  as an element of \ ``R``\ . An error occurs if \ ``f``\  is not an element of \ ``R``\ .

.. _l46756e6374696f6e537061636532-686569676874:

\ :ref:`height <l45787072657373696f6e537061636532-686569676874>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-696e76:

\ :ref:`inv <l47726f7570-696e76>`\ \: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  or R has \ :ref:`Group <l47726f7570>`\ 
  from \ :ref:`Group <l47726f7570>`\ 

.. _l46756e6374696f6e537061636532-69733f:

\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-697345787074:

.. index::
   pair: FunctionSpace2; isExpt

:spadfun:`isExpt`\: % -> Union(Record(var: K, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  \ ``isExpt(p)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\ .


.. index::
   pair: FunctionSpace2; isExpt

:spadfun:`isExpt`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> Union(Record(var: K, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``isExpt(p, op)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\  and \ ``x = op(a)``\ .


.. index::
   pair: FunctionSpace2; isExpt

:spadfun:`isExpt`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(var: K, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``isExpt(p, f)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\  and \ ``x = f(a)``\ .

.. _l46756e6374696f6e537061636532-69734d756c74:

.. index::
   pair: FunctionSpace2; isMult

:spadfun:`isMult`\: % -> Union(Record(coef: \ :ref:`Integer <l496e7465676572>`\ , var: K), failed) if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  \ ``isMult(p)``\  returns \ ``[n, x]``\  if \ ``p = n * x``\  and \ ``n ~= 0``\ .

.. _l46756e6374696f6e537061636532-6973506c7573:

.. index::
   pair: FunctionSpace2; isPlus

:spadfun:`isPlus`\: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  \ ``isPlus(p)``\  returns \ ``[m1, ..., mn]``\  if \ ``p = m1 +...+ mn``\  and \ ``n > 1``\ .

.. _l46756e6374696f6e537061636532-6973506f776572:

.. index::
   pair: FunctionSpace2; isPower

:spadfun:`isPower`\: % -> Union(Record(val: %, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``isPower(p)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\ .

.. _l46756e6374696f6e537061636532-697354696d6573:

.. index::
   pair: FunctionSpace2; isTimes

:spadfun:`isTimes`\: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  \ ``isTimes(p)``\  returns \ ``[a1, ..., an]``\  if \ ``p = a1*...*an``\  and \ ``n > 1``\ .

.. _l46756e6374696f6e537061636532-6b65726e656c:

\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6b65726e656c73:

\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: % -> \ :ref:`List <l4c697374>`\  K 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  K 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l46756e6374696f6e537061636532-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l46756e6374696f6e537061636532-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46756e6374696f6e537061636532-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l46756e6374696f6e537061636532-6d61696e4b65726e656c:

\ :ref:`mainKernel <l45787072657373696f6e537061636532-6d61696e4b65726e656c>`\ \: % -> Union(K, failed) 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6d6170:

\ :ref:`map <l45787072657373696f6e537061636532-6d6170>`\ \: (% -> %, K) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6d696e506f6c79:

\ :ref:`minPoly <l45787072657373696f6e537061636532-6d696e506f6c79>`\ \: K -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if % has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6d756c74694575636c696465616e:

\ :ref:`multiEuclidean <l4575636c696465616e446f6d61696e-6d756c74694575636c696465616e>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-6e756d6572:

.. index::
   pair: FunctionSpace2; numer

:spadfun:`numer`\: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, K) if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``numer(f)``\  returns the numerator of \ ``f``\  viewed as a polynomial in the kernels over \ ``R``\  if \ ``R``\  is an integral domain. If not, then numer(\ ``f``\ ) = \ ``f``\  viewed as a polynomial in the kernels over \ ``R``\ .

.. _l46756e6374696f6e537061636532-6e756d657261746f72:

.. index::
   pair: FunctionSpace2; numerator

:spadfun:`numerator`\: % -> % if R has \ :ref:`Ring <l52696e67>`\ 
  \ ``numerator(f)``\  returns the numerator of \ ``f``\  converted to \%.

.. _l46756e6374696f6e537061636532-6f64643f:

\ :ref:`odd? <l45787072657373696f6e537061636532-6f64643f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l46756e6374696f6e537061636532-6f70657261746f72:

\ :ref:`operator <l45787072657373696f6e537061636532-6f70657261746f72>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6f70657261746f7273:

\ :ref:`operators <l45787072657373696f6e537061636532-6f70657261746f7273>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46756e6374696f6e537061636532-706172656e:

\ :ref:`paren <l45787072657373696f6e537061636532-706172656e>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-7061747465726e4d61746368:

\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %) if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %) if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l46756e6374696f6e537061636532-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R

.. _l46756e6374696f6e537061636532-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-7072696e636970616c496465616c:

\ :ref:`principalIdeal <l5072696e636970616c496465616c446f6d61696e-7072696e636970616c496465616c>`\ \: \ :ref:`List <l4c697374>`\  % -> Record(coef: \ :ref:`List <l4c697374>`\  %, generator: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-71756f:

\ :ref:`quo <l4575636c696465616e446f6d61696e-71756f>`\ \: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l46756e6374696f6e537061636532-7265647563656453797374656d:

\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: (\ :ref:`Matrix <l4d6174726978>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ , vec: \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ ) if R has \ :ref:`Ring <l52696e67>`\  and R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: (\ :ref:`Matrix <l4d6174726978>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  R, vec: \ :ref:`Vector <l566563746f72>`\  R) if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Ring <l52696e67>`\  and R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  R if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R

.. _l46756e6374696f6e537061636532-72656d:

\ :ref:`rem <l4575636c696465616e446f6d61696e-72656d>`\ \: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> K 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l46756e6374696f6e537061636532-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(K, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R, failed) if R has \ :ref:`Ring <l52696e67>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Symbol <l53796d626f6c>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l46756e6374696f6e537061636532-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46756e6374696f6e537061636532-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l46756e6374696f6e537061636532-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\  or R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46756e6374696f6e537061636532-73697a654c6573733f:

\ :ref:`sizeLess? <l4575636c696465616e446f6d61696e-73697a654c6573733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l46756e6374696f6e537061636532-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l46756e6374696f6e537061636532-7375627374:

\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  K, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l46756e6374696f6e537061636532-746f776572:

\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: % -> \ :ref:`List <l4c697374>`\  K 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K


\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  K 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K

.. _l46756e6374696f6e537061636532-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l46756e6374696f6e537061636532-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l46756e6374696f6e537061636532-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l46756e6374696f6e537061636532-756e6976617269617465:

.. index::
   pair: FunctionSpace2; univariate

:spadfun:`univariate`\: (%, K) -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``univariate(f, k)``\  returns \ ``f``\  viewed as a univariate fraction in \ ``k``\ .

.. _l46756e6374696f6e537061636532-7661726961626c6573:

.. index::
   pair: FunctionSpace2; variables

:spadfun:`variables`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``variables(f)``\  returns the list of all the variables of \ ``f``\ .


.. index::
   pair: FunctionSpace2; variables

:spadfun:`variables`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``variables([f1, ..., fn])``\  returns the list of all the variables of \ ``f1``\ , ..., \ ``fn``\ .

.. _l46756e6374696f6e537061636532-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  if R has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

\ :ref:`Algebra <l416c6765627261>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Algebra <l416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`canonicalsClosed <l63616e6f6e6963616c73436c6f736564>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  if R has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  if R has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  K 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`DivisionRing <l4469766973696f6e52696e67>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`EntireRing <l456e7469726552696e67>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  % 

\ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  K 

\ :ref:`Field <l4669656c64>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`FullyLinearlyExplicitOver <l46756c6c794c696e6561726c794578706c696369744f766572>`\  R if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`FullyPatternMatchable <l46756c6c795061747465726e4d6174636861626c65>`\  R 

\ :ref:`FullyRetractableTo <l46756c6c795265747261637461626c65546f>`\  R 

\ :ref:`GcdDomain <l476364446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Group <l47726f7570>`\  if R has \ :ref:`Group <l47726f7570>`\ 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %) 

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Ring <l52696e67>`\  and R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`Magma <l4d61676d61>`\  if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 

\ :ref:`Module <l4d6f64756c65>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`Module <l4d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`Patternable <l5061747465726e61626c65>`\  R 

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Ring <l52696e67>`\  and R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`Ring <l52696e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`Rng <l526e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  if R has \ :ref:`SemiGroup <l53656d6947726f7570>`\ 

\ :ref:`SemiRing <l53656d6952696e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`SemiRng <l53656d69526e67>`\  if R has \ :ref:`Ring <l52696e67>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  or R has \ :ref:`Group <l47726f7570>`\ 

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  if R has \ :ref:`Group <l47726f7570>`\  or R has \ :ref:`Ring <l52696e67>`\ 

