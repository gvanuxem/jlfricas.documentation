.. index:: FortranExpression

.. _l466f727472616e45787072657373696f6e:

FortranExpression(basicSymbols, subscriptedSymbols, R)
======================================================

:viewcode:`fortran.spad line 1426 <fortran.spad#L1426>` :editcode:`[edit on github] <fortran.spad#L1426>`

* basicSymbols: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

* subscriptedSymbols: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

* R: \ :ref:`FortranMachineTypeCategory <l466f727472616e4d616368696e655479706543617465676f7279>`\ 


A domain of expressions involving functions which can be translated into standard Fortran-77, with some extra extensions from the NAG Fortran Library.


.. _l466f727472616e45787072657373696f6e-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466f727472616e45787072657373696f6e-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l466f727472616e45787072657373696f6e-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466f727472616e45787072657373696f6e-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l466f727472616e45787072657373696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e45787072657373696f6e-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466f727472616e45787072657373696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e45787072657373696f6e-616273:

.. index::
   pair: FortranExpression; abs

:spadfun:`abs`\: % -> % 
  \ ``abs(x)``\  represents the Fortran intrinsic function ABS

.. _l466f727472616e45787072657373696f6e-61636f73:

.. index::
   pair: FortranExpression; acos

:spadfun:`acos`\: % -> % 
  \ ``acos(x)``\  represents the Fortran intrinsic function ACOS

.. _l466f727472616e45787072657373696f6e-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l466f727472616e45787072657373696f6e-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l466f727472616e45787072657373696f6e-6173696e:

.. index::
   pair: FortranExpression; asin

:spadfun:`asin`\: % -> % 
  \ ``asin(x)``\  represents the Fortran intrinsic function ASIN

.. _l466f727472616e45787072657373696f6e-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466f727472616e45787072657373696f6e-6174616e:

.. index::
   pair: FortranExpression; atan

:spadfun:`atan`\: % -> % 
  \ ``atan(x)``\  represents the Fortran intrinsic function ATAN

.. _l466f727472616e45787072657373696f6e-62656c6f6e673f:

\ :ref:`belong? <l45787072657373696f6e537061636532-62656c6f6e673f>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-626f78:

\ :ref:`box <l45787072657373696f6e537061636532-626f78>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466f727472616e45787072657373696f6e-636f65726365:

.. index::
   pair: FortranExpression; coerce

:spadfun:`coerce`\: % -> \ :ref:`Expression <l45787072657373696f6e>`\  R 
  \ ``coerce(x)``\  is undocumented.


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Kernel <l4b65726e656c>`\  % -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R

.. _l466f727472616e45787072657373696f6e-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466f727472616e45787072657373696f6e-636f73:

.. index::
   pair: FortranExpression; cos

:spadfun:`cos`\: % -> % 
  \ ``cos(x)``\  represents the Fortran intrinsic function COS

.. _l466f727472616e45787072657373696f6e-636f7368:

.. index::
   pair: FortranExpression; cosh

:spadfun:`cosh`\: % -> % 
  \ ``cosh(x)``\  represents the Fortran intrinsic function COSH

.. _l466f727472616e45787072657373696f6e-44:

\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l466f727472616e45787072657373696f6e-646566696e696e67506f6c796e6f6d69616c:

\ :ref:`definingPolynomial <l45787072657373696f6e537061636532-646566696e696e67506f6c796e6f6d69616c>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-646966666572656e7469617465:

\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l466f727472616e45787072657373696f6e-64697374726962757465:

\ :ref:`distribute <l45787072657373696f6e537061636532-64697374726962757465>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`distribute <l45787072657373696f6e537061636532-64697374726962757465>`\ \: (%, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-656c74:

\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %, %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`elt <l45787072657373696f6e537061636532-656c74>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`Kernel <l4b65726e656c>`\  %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %)


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`eval <l45787072657373696f6e537061636532-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-657870:

.. index::
   pair: FortranExpression; exp

:spadfun:`exp`\: % -> % 
  \ ``exp(x)``\  represents the Fortran intrinsic function EXP

.. _l466f727472616e45787072657373696f6e-667265654f663f:

\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`freeOf? <l45787072657373696f6e537061636532-667265654f663f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-686569676874:

\ :ref:`height <l45787072657373696f6e537061636532-686569676874>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-69733f:

\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`is? <l45787072657373696f6e537061636532-69733f>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6b65726e656c:

\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`kernel <l45787072657373696f6e537061636532-6b65726e656c>`\ \: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6b65726e656c73:

\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`kernels <l45787072657373696f6e537061636532-6b65726e656c73>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466f727472616e45787072657373696f6e-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466f727472616e45787072657373696f6e-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-6c6f673130:

.. index::
   pair: FortranExpression; log10

:spadfun:`log10`\: % -> % 
  \ ``log10(x)``\  represents the Fortran intrinsic function \ ``LOG10``\ 

.. _l466f727472616e45787072657373696f6e-6c6f67:

.. index::
   pair: FortranExpression; log

:spadfun:`log`\: % -> % 
  \ ``log(x)``\  represents the Fortran intrinsic function LOG

.. _l466f727472616e45787072657373696f6e-6d61696e4b65726e656c:

\ :ref:`mainKernel <l45787072657373696f6e537061636532-6d61696e4b65726e656c>`\ \: % -> Union(\ :ref:`Kernel <l4b65726e656c>`\  %, failed) 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6d6170:

\ :ref:`map <l45787072657373696f6e537061636532-6d6170>`\ \: (% -> %, \ :ref:`Kernel <l4b65726e656c>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6d696e506f6c79:

\ :ref:`minPoly <l45787072657373696f6e537061636532-6d696e506f6c79>`\ \: \ :ref:`Kernel <l4b65726e656c>`\  % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-6f70657261746f72:

\ :ref:`operator <l45787072657373696f6e537061636532-6f70657261746f72>`\ \: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6f70657261746f7273:

\ :ref:`operators <l45787072657373696f6e537061636532-6f70657261746f7273>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466f727472616e45787072657373696f6e-706172656e:

\ :ref:`paren <l45787072657373696f6e537061636532-706172656e>`\ \: % -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-7069:

.. index::
   pair: FortranExpression; pi

:spadfun:`pi`\: () -> % 
  \ ``pi(x)``\  represents the NAG Library function X01AAF which returns an approximation to the value of \ ``pi``\ 

.. _l466f727472616e45787072657373696f6e-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R

.. _l466f727472616e45787072657373696f6e-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Expression <l45787072657373696f6e>`\  R -> % 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retract

:spadfun:`retract`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``retract(e)``\  takes \ ``e``\  and transforms it into a FortranExpression checking that it is one of the given basic symbols or subscripted symbols which correspond to scalar and array parameters respectively.

.. _l466f727472616e45787072657373696f6e-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Kernel <l4b65726e656c>`\  %, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  R -> Union(%, failed) 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it contains no non-Fortran functions, and that it only contains the given basic symbols and subscripted symbols which correspond to scalar and array parameters respectively.


.. index::
   pair: FortranExpression; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Symbol <l53796d626f6c>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  takes \ ``e``\  and tries to transform it into a FortranExpression checking that it is one of the given basic symbols or subscripted symbols which correspond to scalar and array parameters respectively.

.. _l466f727472616e45787072657373696f6e-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466f727472616e45787072657373696f6e-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466f727472616e45787072657373696f6e-73696e:

.. index::
   pair: FortranExpression; sin

:spadfun:`sin`\: % -> % 
  \ ``sin(x)``\  represents the Fortran intrinsic function SIN

.. _l466f727472616e45787072657373696f6e-73696e68:

.. index::
   pair: FortranExpression; sinh

:spadfun:`sinh`\: % -> % 
  \ ``sinh(x)``\  represents the Fortran intrinsic function SINH

.. _l466f727472616e45787072657373696f6e-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l466f727472616e45787072657373696f6e-73717274:

.. index::
   pair: FortranExpression; sqrt

:spadfun:`sqrt`\: % -> % 
  \ ``sqrt(x)``\  represents the Fortran intrinsic function SQRT

.. _l466f727472616e45787072657373696f6e-7375627374:

\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`subst <l45787072657373696f6e537061636532-7375627374>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l466f727472616e45787072657373696f6e-74616e:

.. index::
   pair: FortranExpression; tan

:spadfun:`tan`\: % -> % 
  \ ``tan(x)``\  represents the Fortran intrinsic function TAN

.. _l466f727472616e45787072657373696f6e-74616e68:

.. index::
   pair: FortranExpression; tanh

:spadfun:`tanh`\: % -> % 
  \ ``tanh(x)``\  represents the Fortran intrinsic function TANH

.. _l466f727472616e45787072657373696f6e-746f776572:

\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %


\ :ref:`tower <l45787072657373696f6e537061636532-746f776572>`\ \: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 
  from \ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  %

.. _l466f727472616e45787072657373696f6e-7661726961626c6573:

.. index::
   pair: FortranExpression; variables

:spadfun:`variables`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``variables(e)``\  return a list of all the variables in \ ``e``\ .

.. _l466f727472616e45787072657373696f6e-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  R 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  % 

\ :ref:`ExpressionSpace <l45787072657373696f6e5370616365>`\  

\ :ref:`ExpressionSpace2 <l45787072657373696f6e537061636532>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Kernel <l4b65726e656c>`\  %, %) 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Kernel <l4b65726e656c>`\  % 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

