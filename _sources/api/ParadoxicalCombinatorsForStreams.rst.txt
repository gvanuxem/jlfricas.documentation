.. index:: ParadoxicalCombinatorsForStreams

.. _l50617261646f786963616c436f6d62696e61746f7273466f7253747265616d73:

ParadoxicalCombinatorsForStreams A
==================================

:viewcode:`ystream.spad line 1 <ystream.spad#L1>` :editcode:`[edit on github] <ystream.spad#L1>`

* A: \ :ref:`Type <l54797065>`\ 


This package implements fixed-point computations on streams.


.. _l50617261646f786963616c436f6d62696e61746f7273466f7253747265616d73-59:

.. index::
   pair: ParadoxicalCombinatorsForStreams; Y

:spadfun:`Y`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Stream <l53747265616d>`\  A -> \ :ref:`List <l4c697374>`\  \ :ref:`Stream <l53747265616d>`\  A, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Stream <l53747265616d>`\  A 
  \ ``Y(g, n)``\  computes a fixed point of the function \ ``g``\ , where \ ``g``\  takes a list of \ ``n``\  streams and returns a list of \ ``n``\  streams.


.. index::
   pair: ParadoxicalCombinatorsForStreams; Y

:spadfun:`Y`\: (\ :ref:`Stream <l53747265616d>`\  A -> \ :ref:`Stream <l53747265616d>`\  A) -> \ :ref:`Stream <l53747265616d>`\  A 
  \ ``Y(f)``\  computes a fixed point of the function \ ``f``\ .


