.. index:: FloatingPointSystem

.. _l466c6f6174696e67506f696e7453797374656d:

FloatingPointSystem
===================

:viewcode:`sf.spad line 78 <sf.spad#L78>` :editcode:`[edit on github] <sf.spad#L78>`


This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact, it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following:   1: \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\  of the \ :ref:`exponent <l466c6f6174696e67506f696e7453797374656d-6578706f6e656e74>`\ . (actual implementations are usually binary or decimal) 2: \ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\  of the \ :ref:`mantissa <l466c6f6174696e67506f696e7453797374656d-6d616e7469737361>`\  (arbitrary or fixed) 3: rounding error for operations   Because a Float is an approximation to the real numbers, even though it is defined to be a join of a Field and OrderedRing, some of the attributes do not hold. In particular associative(\ ``"+"``\ ) does not hold. Algorithms defined over a field need special considerations when the field is a floating point system.


.. _l466c6f6174696e67506f696e7453797374656d-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-2f:

\ :ref:`/ <l4669656c64-2f>`\ \: (%, %) -> % 
  from \ :ref:`Field <l4669656c64>`\ 


.. index::
   pair: FloatingPointSystem; /

:spadfun:`/`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``x / i``\  computes the division from \ ``x``\  by an integer \ ``i``\ .

.. _l466c6f6174696e67506f696e7453797374656d-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-5e:

\ :ref:`^ <l5261646963616c43617465676f7279-5e>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 


\ :ref:`^ <l4469766973696f6e52696e67-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-616273:

\ :ref:`abs <l4f72646572656452696e67-616273>`\ \: % -> % 
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-62617365:

.. index::
   pair: FloatingPointSystem; base

:spadfun:`base`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``base()``\  returns the base of the \ :ref:`exponent <l466c6f6174696e67506f696e7453797374656d-6578706f6e656e74>`\ .

.. _l466c6f6174696e67506f696e7453797374656d-62697473:

.. index::
   pair: FloatingPointSystem; bits

:spadfun:`bits`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``bits()``\  returns ceiling\ ``'s``\  precision in bits.


.. index::
   pair: FloatingPointSystem; bits

:spadfun:`bits`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\ 
  \ ``bits(n)``\  set the \ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\  to \ ``n``\  bits.

.. _l466c6f6174696e67506f696e7453797374656d-6365696c696e67:

\ :ref:`ceiling <l5265616c4e756d62657253797374656d-6365696c696e67>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Float <l466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6465637265617365507265636973696f6e:

.. index::
   pair: FloatingPointSystem; decreasePrecision

:spadfun:`decreasePrecision`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\ 
  \ ``decreasePrecision(n)``\  decreases the current \ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\  precision by \ ``n``\  decimal digits.

.. _l466c6f6174696e67506f696e7453797374656d-646967697473:

.. index::
   pair: FloatingPointSystem; digits

:spadfun:`digits`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``digits()``\  returns ceiling\ ``'s``\  precision in decimal digits.


.. index::
   pair: FloatingPointSystem; digits

:spadfun:`digits`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\ 
  \ ``digits(d)``\  set the \ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\  to \ ``d``\  digits.

.. _l466c6f6174696e67506f696e7453797374656d-646976696465:

\ :ref:`divide <l4575636c696465616e446f6d61696e-646976696465>`\ \: (%, %) -> Record(quotient: %, remainder: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6575636c696465616e53697a65:

\ :ref:`euclideanSize <l4575636c696465616e446f6d61696e-6575636c696465616e53697a65>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6578706f6e656e74:

.. index::
   pair: FloatingPointSystem; exponent

:spadfun:`exponent`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``exponent(x)``\  returns the \ :ref:`exponent <l466c6f6174696e67506f696e7453797374656d-6578706f6e656e74>`\  part of \ ``x``\ .

.. _l466c6f6174696e67506f696e7453797374656d-65787072657373496465616c4d656d626572:

\ :ref:`expressIdealMember <l5072696e636970616c496465616c446f6d61696e-65787072657373496465616c4d656d626572>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-657874656e6465644575636c696465616e:

\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %) -> Record(coef1: %, coef2: %, generator: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %, %) -> Union(Record(coef1: %, coef2: %), failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-666c6f6174:

.. index::
   pair: FloatingPointSystem; float

:spadfun:`float`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``float(a, e)``\  returns \ ``a * base() ^ e``\ .


.. index::
   pair: FloatingPointSystem; float

:spadfun:`float`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``float(a, e, b)``\  returns \ ``a * b ^ e``\ .

.. _l466c6f6174696e67506f696e7453797374656d-666c6f6f72:

\ :ref:`floor <l5265616c4e756d62657253797374656d-666c6f6f72>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6672616374696f6e50617274:

\ :ref:`fractionPart <l5265616c4e756d62657253797374656d-6672616374696f6e50617274>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-696e637265617365507265636973696f6e:

.. index::
   pair: FloatingPointSystem; increasePrecision

:spadfun:`increasePrecision`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\ 
  \ ``increasePrecision(n)``\  increases the current \ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\  by \ ``n``\  decimal digits.

.. _l466c6f6174696e67506f696e7453797374656d-696e76:

\ :ref:`inv <l4469766973696f6e52696e67-696e76>`\ \: % -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6d616e7469737361:

.. index::
   pair: FloatingPointSystem; mantissa

:spadfun:`mantissa`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``mantissa(x)``\  returns the mantissa part of \ ``x``\ .

.. _l466c6f6174696e67506f696e7453797374656d-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


.. index::
   pair: FloatingPointSystem; max

:spadfun:`max`\: () -> % if % hasn't \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\  and % hasn't \ :ref:`arbitraryExponent <l6172626974726172794578706f6e656e74>`\ 
  \ ``max()``\  returns the maximum floating point number.

.. _l466c6f6174696e67506f696e7453797374656d-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


.. index::
   pair: FloatingPointSystem; min

:spadfun:`min`\: () -> % if % hasn't \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\  and % hasn't \ :ref:`arbitraryExponent <l6172626974726172794578706f6e656e74>`\ 
  \ ``min()``\  returns the minimum floating point number.

.. _l466c6f6174696e67506f696e7453797374656d-6d756c74694575636c696465616e:

\ :ref:`multiEuclidean <l4575636c696465616e446f6d61696e-6d756c74694575636c696465616e>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6e656761746976653f:

\ :ref:`negative? <l4f72646572656452696e67-6e656761746976653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6e6f726d:

\ :ref:`norm <l5265616c4e756d62657253797374656d-6e6f726d>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6e7468526f6f74:

\ :ref:`nthRoot <l5261646963616c43617465676f7279-6e7468526f6f74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-6f72646572:

.. index::
   pair: FloatingPointSystem; order

:spadfun:`order`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``order x``\  is the order of magnitude of \ ``x``\ . Note: \ ``base ^ order x <= |x| < base ^ (1 + order x)``\ .

.. _l466c6f6174696e67506f696e7453797374656d-7061747465726e4d61746368:

\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %) 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l466c6f6174696e67506f696e7453797374656d-706f7369746976653f:

\ :ref:`positive? <l4f72646572656452696e67-706f7369746976653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-707265636973696f6e:

.. index::
   pair: FloatingPointSystem; precision

:spadfun:`precision`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``precision()``\  returns the precision in digits base.


.. index::
   pair: FloatingPointSystem; precision

:spadfun:`precision`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if % has \ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\ 
  \ ``precision(n)``\  set the precision in the base to \ ``n``\  decimal digits.

.. _l466c6f6174696e67506f696e7453797374656d-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7072696e636970616c496465616c:

\ :ref:`principalIdeal <l5072696e636970616c496465616c446f6d61696e-7072696e636970616c496465616c>`\ \: \ :ref:`List <l4c697374>`\  % -> Record(coef: \ :ref:`List <l4c697374>`\  %, generator: %) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-71756f:

\ :ref:`quo <l4575636c696465616e446f6d61696e-71756f>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-72656d:

\ :ref:`rem <l4575636c696465616e446f6d61696e-72656d>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-726f756e64:

\ :ref:`round <l5265616c4e756d62657253797374656d-726f756e64>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7369676e:

\ :ref:`sign <l4f72646572656452696e67-7369676e>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-73697a654c6573733f:

\ :ref:`sizeLess? <l4575636c696465616e446f6d61696e-73697a654c6573733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-73717274:

\ :ref:`sqrt <l5261646963616c43617465676f7279-73717274>`\ \: % -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-746f537472696e67:

.. index::
   pair: FloatingPointSystem; toString

:spadfun:`toString`\: % -> \ :ref:`String <l537472696e67>`\  
  \ ``toString(x)``\  returns the string representation of \ ``x``\ .


.. index::
   pair: FloatingPointSystem; toString

:spadfun:`toString`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``toString(x, n)``\  returns a string representation of \ ``x``\  truncated to \ ``n``\  decimal digits.

.. _l466c6f6174696e67506f696e7453797374656d-7472756e63617465:

\ :ref:`truncate <l5265616c4e756d62657253797374656d-7472756e63617465>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-77686f6c6550617274:

\ :ref:`wholePart <l5265616c4e756d62657253797374656d-77686f6c6550617274>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174696e67506f696e7453797374656d-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Approximate <l417070726f78696d617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalsClosed <l63616e6f6e6963616c73436c6f736564>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`DivisionRing <l4469766973696f6e52696e67>`\  

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  

\ :ref:`Field <l4669656c64>`\  

\ :ref:`GcdDomain <l476364446f6d61696e>`\  

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  

\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  

\ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\  

\ :ref:`OrderedCancellationAbelianMonoid <l4f72646572656443616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`OrderedRing <l4f72646572656452696e67>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\  

\ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\  

\ :ref:`RealConstant <l5265616c436f6e7374616e74>`\  

\ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

