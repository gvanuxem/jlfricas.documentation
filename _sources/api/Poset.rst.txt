.. index:: Poset

.. _l506f736574:

Poset S
=======

:viewcode:`logic.spad line 613 <logic.spad#L613>` :editcode:`[edit on github] <logic.spad#L613>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


holds a complete set together with a structure to codify the partial order. for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/index.\ ``htm``\  Date Created: Aug 2015 Basic Operations: Related packages: UserDefinedPartialOrdering in setorder.spad Related categories: PartialOrder in catdef.spad Related Domains: DirectedGraph in graph.spad Also See: AMS Classifications:


.. _l506f736574-2b:

\ :ref:`+ <l46696e6974654772617068-2b>`\ \: (%, %) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l506f736574-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l506f736574-6164644172726f7721:

.. index::
   pair: Poset; addArrow!

:spadfun:`addArrow!`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``addArrow!(s, nm, n1, n2)``\  adds an arrow to the graph \ ``s``\ , where: \ ``n1``\  is the index of the start object \ ``n2``\  is the index of the end object This is done in a non-mutable way, that is, the original poset is not changed instead a new one is constructed.


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, Record(name: \ :ref:`String <l537472696e67>`\ , arrType: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , fromOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , toOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , xOffset: \ :ref:`Integer <l496e7465676572>`\ , yOffset: \ :ref:`Integer <l496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , S, S) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6164644f626a65637421:

\ :ref:`addObject! <l46696e6974654772617068-6164644f626a65637421>`\ \: (%, Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


.. index::
   pair: Poset; addObject!

:spadfun:`addObject!`\: (%, S) -> % 
  \ ``addObject!(s, n)``\  adds object with coordinates \ ``n``\  to the graph \ ``s``\ . This is done in a non-mutable way, that is, the original poset is not changed instead a new one is constructed.

.. _l506f736574-61646a6163656e63794d6174726978:

\ :ref:`adjacencyMatrix <l46696e6974654772617068-61646a6163656e63794d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6172726f774e616d65:

\ :ref:`arrowName <l46696e6974654772617068-6172726f774e616d65>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6172726f777346726f6d4172726f77:

\ :ref:`arrowsFromArrow <l46696e6974654772617068-6172726f777346726f6d4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6172726f777346726f6d4e6f6465:

\ :ref:`arrowsFromNode <l46696e6974654772617068-6172726f777346726f6d4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6172726f7773546f4172726f77:

\ :ref:`arrowsToArrow <l46696e6974654772617068-6172726f7773546f4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6172726f7773546f4e6f6465:

\ :ref:`arrowsToNode <l46696e6974654772617068-6172726f7773546f4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l506f736574-636f6d706c6574655265666c65786976697479:

.. index::
   pair: Poset; completeReflexivity

:spadfun:`completeReflexivity`\: % -> % 
  Reflexivity requires forall(\ ``x``\ ): x<=x This function enforces this by making sure that every element has arrow to itself. That is, the leading diagonal is \ ``true``\ .

.. _l506f736574-636f6d706c6574655472616e7369746976697479:

.. index::
   pair: Poset; completeTransitivity

:spadfun:`completeTransitivity`\: % -> % 
  Transitivity requires forall(\ ``x``\ , \ ``y``\ , \ ``z``\ ): x<=y and y<=z implies x<=z This function enforces this by making sure that the composition of any two arrows is also an arrow.

.. _l506f736574-636f7665724d6174726978:

.. index::
   pair: Poset; coverMatrix

:spadfun:`coverMatrix`\: % -> \ :ref:`IncidenceAlgebra <l496e636964656e6365416c6765627261>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 
  the covering matrix of a list of elements from a comparison function the list is assumed to be topologically sorted, i.e. \ ``w``\ .\ ``r``\ . to a linear extension of the comparison function \ ``f``\  This function is based on code by Franz Lehner. Notes by Martin Baker on the webpage here: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/moebius/}

.. _l506f736574-6372656174655769647468:

\ :ref:`createWidth <l46696e6974654772617068-6372656174655769647468>`\ \: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-63726561746558:

\ :ref:`createX <l46696e6974654772617068-63726561746558>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-63726561746559:

\ :ref:`createY <l46696e6974654772617068-63726561746559>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6379636c65436c6f736564:

\ :ref:`cycleClosed <l46696e6974654772617068-6379636c65436c6f736564>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6379636c654f70656e:

\ :ref:`cycleOpen <l46696e6974654772617068-6379636c654f70656e>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-646565704469616772616d537667:

\ :ref:`deepDiagramSvg <l46696e6974654772617068-646565704469616772616d537667>`\ \: (\ :ref:`String <l537472696e67>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6469616772616d486569676874:

\ :ref:`diagramHeight <l46696e6974654772617068-6469616772616d486569676874>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6469616772616d73537667:

\ :ref:`diagramsSvg <l46696e6974654772617068-6469616772616d73537667>`\ \: (\ :ref:`String <l537472696e67>`\ , \ :ref:`List <l4c697374>`\  %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6469616772616d537667:

\ :ref:`diagramSvg <l46696e6974654772617068-6469616772616d537667>`\ \: (\ :ref:`String <l537472696e67>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6469616772616d5769647468:

\ :ref:`diagramWidth <l46696e6974654772617068-6469616772616d5769647468>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-64697374616e6365:

\ :ref:`distance <l46696e6974654772617068-64697374616e6365>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-64697374616e63654d6174726978:

\ :ref:`distanceMatrix <l46696e6974654772617068-64697374616e63654d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-66696e697465506f736574:

.. index::
   pair: Poset; finitePoset

:spadfun:`finitePoset`\: (\ :ref:`List <l4c697374>`\  S, (S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``finitePoset(c, p)``\  constructs a finite poset where the set and structure is supplied. The structure is supplied as a predicate function.


.. index::
   pair: Poset; finitePoset

:spadfun:`finitePoset`\: (\ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``finitePoset(c, s)``\  constructs a finite poset where the set and structure is supplied.

.. _l506f736574-666c617474656e:

\ :ref:`flatten <l46696e6974654772617068-666c617474656e>`\ \: \ :ref:`DirectedGraph <l44697265637465644772617068>`\  % -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-676574417272:

.. index::
   pair: Poset; getArr

:spadfun:`getArr`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``getArr(s)``\  returns a list of all the arrows (or edges) Note: different from getArrows(\ ``s``\ ) which is inherited from FiniteGraph(\ ``S``\ )

.. _l506f736574-6765744172726f77496e646578:

\ :ref:`getArrowIndex <l46696e6974654772617068-6765744172726f77496e646578>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6765744172726f7773:

\ :ref:`getArrows <l46696e6974654772617068-6765744172726f7773>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(name: \ :ref:`String <l537472696e67>`\ , arrType: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , fromOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , toOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , xOffset: \ :ref:`Integer <l496e7465676572>`\ , yOffset: \ :ref:`Integer <l496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-67657456657274:

.. index::
   pair: Poset; getVert

:spadfun:`getVert`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``getVert(s)``\  returns a list of all the vertices (or objects) of the graph \ ``s``\ . Note: different from getVertices(\ ``s``\ ) which is inherited from FiniteGraph(\ ``S``\ )

.. _l506f736574-676574566572746578496e646578:

\ :ref:`getVertexIndex <l46696e6974654772617068-676574566572746578496e646578>`\ \: (%, S) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6765745665727469636573:

\ :ref:`getVertices <l46696e6974654772617068-6765745665727469636573>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-676c62:

.. index::
   pair: Poset; glb

:spadfun:`glb`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``glb(s, l)``\  'greatest lower bound' or 'infimum' of \ ``l``\ . In this version of \ ``glb``\  nodes are represented as index values. Not every subset of a poset will have a \ ``glb``\  in which case "failed" will be returned as an error indication.

.. _l506f736574-696d706c696573:

.. index::
   pair: Poset; implies

:spadfun:`implies`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  

.. _l506f736574-696e636964656e63654d6174726978:

\ :ref:`incidenceMatrix <l46696e6974654772617068-696e636964656e63654d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-696e446567726565:

\ :ref:`inDegree <l46696e6974654772617068-696e446567726565>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-696e646578546f4f626a656374:

.. index::
   pair: Poset; indexToObject

:spadfun:`indexToObject`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> S 
  \ ``indexToObject returns``\  the object at a given index.

.. _l506f736574-696e697469616c:

\ :ref:`initial <l46696e6974654772617068-696e697469616c>`\ \: () -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6973416379636c69633f:

\ :ref:`isAcyclic? <l46696e6974654772617068-6973416379636c69633f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6973416e7469436861696e3f:

.. index::
   pair: Poset; isAntiChain?

:spadfun:`isAntiChain?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``isAntiChain?(s)``\  checks if \ ``s``\  is an antichain, that is any two elements in \ ``s``\  are incomparable.

.. _l506f736574-6973416e746973796d6d65747269633f:

.. index::
   pair: Poset; isAntisymmetric?

:spadfun:`isAntisymmetric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  Antisymmetric requires forall(\ ``x``\ , \ ``y``\ ): x<=y and y<=x iff x=y Returns \ ``true``\  if this is the case for every element.

.. _l506f736574-6973436861696e3f:

.. index::
   pair: Poset; isChain?

:spadfun:`isChain?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``isChain?(s)``\  checks if \ ``s``\  is a chain, that is any two elements in \ ``s``\  are comparable.

.. _l506f736574-697344697265637465643f:

\ :ref:`isDirected? <l46696e6974654772617068-697344697265637465643f>`\ \: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6973446972656374537563636573736f723f:

\ :ref:`isDirectSuccessor? <l46696e6974654772617068-6973446972656374537563636573736f723f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6973466978506f696e743f:

\ :ref:`isFixPoint? <l46696e6974654772617068-6973466978506f696e743f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-697346756e6374696f6e616c3f:

\ :ref:`isFunctional? <l46696e6974654772617068-697346756e6374696f6e616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6973477265617465725468616e3f:

\ :ref:`isGreaterThan? <l46696e6974654772617068-6973477265617465725468616e3f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6a6f696e496643616e:

.. index::
   pair: Poset; joinIfCan

:spadfun:`joinIfCan`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``joinIfCan returns``\  the join of a subset of lattice given by list of elements.


.. index::
   pair: Poset; joinIfCan

:spadfun:`joinIfCan`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``joinIfCan(s, a, b)``\  returns the join of 'a' and \ ``'b'``\  In this version of join nodes are represented as index values. In the general case, not every poset will have a join in which case "failed" will be returned as an error indication.

.. _l506f736574-6b6772617068:

\ :ref:`kgraph <l46696e6974654772617068-6b6772617068>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c61706c616369616e4d6174726978:

\ :ref:`laplacianMatrix <l46696e6974654772617068-6c61706c616369616e4d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l506f736574-6c65:

\ :ref:`le <l5072656f72646572-6c65>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Preorder <l5072656f72646572>`\  S

.. _l506f736574-6c6f6f70734172726f7773:

\ :ref:`loopsArrows <l46696e6974654772617068-6c6f6f70734172726f7773>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c6f6f707341744e6f6465:

\ :ref:`loopsAtNode <l46696e6974654772617068-6c6f6f707341744e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c6f6f70734e6f646573:

\ :ref:`loopsNodes <l46696e6974654772617068-6c6f6f70734e6f646573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c6f6f7365457175616c73:

\ :ref:`looseEquals <l46696e6974654772617068-6c6f6f7365457175616c73>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6c6f776572536574:

.. index::
   pair: Poset; lowerSet

:spadfun:`lowerSet`\: % -> % 
  a subset \ ``U``\  with the property that, if \ ``x``\  is in \ ``U``\  and \ ``x``\  \ ``>=``\  \ ``y``\ , then \ ``y``\  is in \ ``U``\ 

.. _l506f736574-6c7562:

.. index::
   pair: Poset; lub

:spadfun:`lub`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``lub(s, l)``\  is 'least upper bound' or 'supremum' of \ ``l``\ . In this version of lub nodes are represented as index values. Not every subset of a poset will have a lub in which case "failed" will be returned as an error indication.

.. _l506f736574-6d6170:

\ :ref:`map <l46696e6974654772617068-6d6170>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6d6170436f6e747261:

\ :ref:`mapContra <l46696e6974654772617068-6d6170436f6e747261>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6d6178:

\ :ref:`max <l46696e6974654772617068-6d6178>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`max <l46696e6974654772617068-6d6178>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6d656574496643616e:

.. index::
   pair: Poset; meetIfCan

:spadfun:`meetIfCan`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``meetIfCan returns``\  the meet of a subset of lattice given by list of elements.


.. index::
   pair: Poset; meetIfCan

:spadfun:`meetIfCan`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``meetIfCan(s, a, b)``\  returns the meet of 'a' and \ ``'b'``\  In this version of meet nodes are represented as index values. In the general case, not every poset will have a meet in which case "failed" will be returned as an error indication.

.. _l506f736574-6d65726765:

\ :ref:`merge <l46696e6974654772617068-6d65726765>`\ \: (%, %) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6d696e:

\ :ref:`min <l46696e6974654772617068-6d696e>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`min <l46696e6974654772617068-6d696e>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6d6f6562697573:

.. index::
   pair: Poset; moebius

:spadfun:`moebius`\: % -> \ :ref:`IncidenceAlgebra <l496e636964656e6365416c6765627261>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 
  \ ``moebius incidence``\  matrix for this poset This function is based on code by Franz Lehner. Notes by Martin Baker on the webpage here: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/moebius/}

.. _l506f736574-6e6f646546726f6d4172726f77:

\ :ref:`nodeFromArrow <l46696e6974654772617068-6e6f646546726f6d4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6e6f646546726f6d4e6f6465:

\ :ref:`nodeFromNode <l46696e6974654772617068-6e6f646546726f6d4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6e6f6465546f4172726f77:

\ :ref:`nodeToArrow <l46696e6974654772617068-6e6f6465546f4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6e6f6465546f4e6f6465:

\ :ref:`nodeToNode <l46696e6974654772617068-6e6f6465546f4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-6f626a656374546f496e646578:

.. index::
   pair: Poset; objectToIndex

:spadfun:`objectToIndex`\: (%, S) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``objectToIndex returns``\  the index of a given object.

.. _l506f736574-6f70706f73697465:

.. index::
   pair: Poset; opposite

:spadfun:`opposite`\: % -> % 
  \ ``opposite(s)``\  constructs the opposite in the category theory sense of reversing all the arrows.

.. _l506f736574-6f7574446567726565:

\ :ref:`outDegree <l46696e6974654772617068-6f7574446567726565>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-706f776572536574537472756374757265:

.. index::
   pair: Poset; powerSetStructure

:spadfun:`powerSetStructure`\: S -> % 
  \ ``powerSetStructure(set)``\  is a constructor for a Poset where each element is a \ ``set``\  (implemented as a list) and with a subset structure. requires \ ``S``\  to be a list.

.. _l506f736574-726f7574654172726f7773:

\ :ref:`routeArrows <l46696e6974654772617068-726f7574654172726f7773>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-726f7574654e6f646573:

\ :ref:`routeNodes <l46696e6974654772617068-726f7574654e6f646573>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-736574417272:

.. index::
   pair: Poset; setArr

:spadfun:`setArr`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``setArr(s, la)``\  sets the list of all arrows (or edges)

.. _l506f736574-73657456657274:

.. index::
   pair: Poset; setVert

:spadfun:`setVert`\: (%, \ :ref:`List <l4c697374>`\  S) -> \ :ref:`Void <l566f6964>`\  
  \ ``setVert(s, lv)``\  sets the list of all vertices (or objects)

.. _l506f736574-7370616e6e696e67466f726573744172726f77:

\ :ref:`spanningForestArrow <l46696e6974654772617068-7370616e6e696e67466f726573744172726f77>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7370616e6e696e67466f726573744e6f6465:

\ :ref:`spanningForestNode <l46696e6974654772617068-7370616e6e696e67466f726573744e6f6465>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7370616e6e696e67547265654172726f77:

\ :ref:`spanningTreeArrow <l46696e6974654772617068-7370616e6e696e67547265654172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7370616e6e696e67547265654e6f6465:

\ :ref:`spanningTreeNode <l46696e6974654772617068-7370616e6e696e67547265654e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7375626469616772616d537667:

\ :ref:`subdiagramSvg <l46696e6974654772617068-7375626469616772616d537667>`\ \: (\ :ref:`Scene <l5363656e65>`\  \ :ref:`SCartesian <l5343617274657369616e>`\  2, %, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7465726d696e616c:

\ :ref:`terminal <l46696e6974654772617068-7465726d696e616c>`\ \: S -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-756e6974:

\ :ref:`unit <l46696e6974654772617068-756e6974>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l506f736574-7570706572536574:

.. index::
   pair: Poset; upperSet

:spadfun:`upperSet`\: % -> % 
  a subset \ ``U``\  with the property that, if \ ``x``\  is in \ ``U``\  and \ ``x``\  \ ``<=``\  \ ``y``\ , then \ ``y``\  is in \ ``U``\ 

.. _l506f736574-7a6574614d6174726978:

.. index::
   pair: Poset; zetaMatrix

:spadfun:`zetaMatrix`\: % -> \ :ref:`IncidenceAlgebra <l496e636964656e6365416c6765627261>`\ (\ :ref:`Integer <l496e7465676572>`\ , S) 
  \ ``zetaMatrix(P)``\  returns the matrix of the zeta function This function is based on code by Franz Lehner. Notes by Martin Baker on the webpage here: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/moebius/}


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`FiniteGraph <l46696e6974654772617068>`\  S 

\ :ref:`Preorder <l5072656f72646572>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

