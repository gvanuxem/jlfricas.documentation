.. index:: DeRhamComplex

.. _l44655268616d436f6d706c6578:

DeRhamComplex(CoefRing, listIndVar)
===================================

:viewcode:`derham.spad line 288 <derham.spad#L288>` :editcode:`[edit on github] <derham.spad#L288>`

* CoefRing: Join(\ :ref:`Ring <l52696e67>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ )

* listIndVar: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


The deRham complex of Euclidean space, that is, the class of differential forms of arbitrary degree over a coefficient ring. See Flanders, Harley, Differential Forms, With Applications to the Physical Sciences, New York, Academic Press, 1963.


.. _l44655268616d436f6d706c6578-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l44655268616d436f6d706c6578-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l44655268616d436f6d706c6578-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Expression <l45787072657373696f6e>`\  CoefRing, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l44655268616d436f6d706c6578-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l44655268616d436f6d706c6578-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l44655268616d436f6d706c6578-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44655268616d436f6d706c6578-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l44655268616d436f6d706c6578-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44655268616d436f6d706c6578-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l44655268616d436f6d706c6578-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l44655268616d436f6d706c6578-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l44655268616d436f6d706c6578-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l44655268616d436f6d706c6578-636f656666696369656e74:

.. index::
   pair: DeRhamComplex; coefficient

:spadfun:`coefficient`\: (%, %) -> \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 
  \ ``coefficient(df, u)``\ , where \ ``df``\  is a differential form, returns the coefficient of \ ``df``\  containing the basis term \ ``u``\  if such a term exists, and 0 otherwise.

.. _l44655268616d436f6d706c6578-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l44655268616d436f6d706c6578-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l44655268616d436f6d706c6578-646567726565:

.. index::
   pair: DeRhamComplex; degree

:spadfun:`degree`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``degree(df)``\  returns the homogeneous degree of differential form \ ``df``\ .

.. _l44655268616d436f6d706c6578-6578746572696f72446966666572656e7469616c:

.. index::
   pair: DeRhamComplex; exteriorDifferential

:spadfun:`exteriorDifferential`\: % -> % 
  \ ``exteriorDifferential(df)``\  returns the exterior derivative (gradient, curl, divergence, ...) of the differential form \ ``df``\ .

.. _l44655268616d436f6d706c6578-67656e657261746f72:

.. index::
   pair: DeRhamComplex; generator

:spadfun:`generator`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``generator(n)``\  returns the \ ``n``\ th basis term for a differential form.

.. _l44655268616d436f6d706c6578-686f6d6f67656e656f75733f:

.. index::
   pair: DeRhamComplex; homogeneous?

:spadfun:`homogeneous?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``homogeneous?(df)``\  tests if all of the terms of differential form \ ``df``\  have the same degree.

.. _l44655268616d436f6d706c6578-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l44655268616d436f6d706c6578-6c656164696e6742617369735465726d:

.. index::
   pair: DeRhamComplex; leadingBasisTerm

:spadfun:`leadingBasisTerm`\: % -> % 
  \ ``leadingBasisTerm(df)``\  returns the leading basis term of differential form \ ``df``\ .

.. _l44655268616d436f6d706c6578-6c656164696e67436f656666696369656e74:

.. index::
   pair: DeRhamComplex; leadingCoefficient

:spadfun:`leadingCoefficient`\: % -> \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 
  \ ``leadingCoefficient(df)``\  returns the leading coefficient of differential form \ ``df``\ .

.. _l44655268616d436f6d706c6578-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l44655268616d436f6d706c6578-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l44655268616d436f6d706c6578-6d6170:

.. index::
   pair: DeRhamComplex; map

:spadfun:`map`\: (\ :ref:`Expression <l45787072657373696f6e>`\  CoefRing -> \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing, %) -> % 
  \ ``map(f, df)``\  replaces each coefficient \ ``x``\  of differential form \ ``df``\  by \ ``f(x)``\ .

.. _l44655268616d436f6d706c6578-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l44655268616d436f6d706c6578-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l44655268616d436f6d706c6578-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l44655268616d436f6d706c6578-726564756374756d:

.. index::
   pair: DeRhamComplex; reductum

:spadfun:`reductum`\: % -> % 
  \ ``reductum(df)``\ , where \ ``df``\  is a differential form, returns \ ``df``\  minus the leading term of \ ``df``\  if \ ``df``\  has two or more terms, and 0 otherwise.

.. _l44655268616d436f6d706c6578-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing

.. _l44655268616d436f6d706c6578-7265747261637461626c653f:

.. index::
   pair: DeRhamComplex; retractable?

:spadfun:`retractable?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``retractable?(df)``\  tests if differential form \ ``df``\  is a 0-form, i.e. if degree(\ ``df``\ ) = 0.

.. _l44655268616d436f6d706c6578-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Expression <l45787072657373696f6e>`\  CoefRing, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing

.. _l44655268616d436f6d706c6578-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l44655268616d436f6d706c6578-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l44655268616d436f6d706c6578-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l44655268616d436f6d706c6578-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l44655268616d436f6d706c6578-746f74616c446966666572656e7469616c:

.. index::
   pair: DeRhamComplex; totalDifferential

:spadfun:`totalDifferential`\: \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing -> % 
  \ ``totalDifferential(x)``\  returns the total differential (gradient) form for element \ ``x``\ .

.. _l44655268616d436f6d706c6578-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftAlgebra <l4c656674416c6765627261>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Expression <l45787072657373696f6e>`\  CoefRing 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

