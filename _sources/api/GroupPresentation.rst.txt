.. index:: GroupPresentation

.. _l47726f757050726573656e746174696f6e:

GroupPresentation
=================

:viewcode:`gpresent.spad line 450 <gpresent.spad#L450>` :editcode:`[edit on github] <gpresent.spad#L450>`


Group represented by its generators and relations. Here we use it to hold homotopy group such as fundamental group. for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/finiteGroup/presentation/ Date Created: Jan 2016 Basic Operations: Related packages: Related categories: Related Domains: PermutationGroup Also See: AMS Classifications:


.. _l47726f757050726573656e746174696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47726f757050726573656e746174696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47726f757050726573656e746174696f6e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l47726f757050726573656e746174696f6e-6379636c696347726f7570:

.. index::
   pair: GroupPresentation; cyclicGroup

:spadfun:`cyclicGroup`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``cyclicGroup(n)``\  constructs the cyclic group of order \ ``n``\  acting on the integers 1, ..., \ ``n``\ .

.. _l47726f757050726573656e746174696f6e-646968656472616c47726f7570:

.. index::
   pair: GroupPresentation; dihedralGroup

:spadfun:`dihedralGroup`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``dihedralGroup(n)``\  constructs the dihedral group of order 2n acting on integers 1, ..., \ ``N``\ .

.. _l47726f757050726573656e746174696f6e-64697265637450726f64756374:

.. index::
   pair: GroupPresentation; directProduct

:spadfun:`directProduct`\: (%, %) -> % 
  \ ``directProduct of``\  two groups

.. _l47726f757050726573656e746174696f6e-67726f757050726573656e746174696f6e:

.. index::
   pair: GroupPresentation; groupPresentation

:spadfun:`groupPresentation`\: () -> % 
  construct trivial group with no generators or relations


.. index::
   pair: GroupPresentation; groupPresentation

:spadfun:`groupPresentation`\: (\ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  construct from generators and relations


.. index::
   pair: GroupPresentation; groupPresentation

:spadfun:`groupPresentation`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  construct free group with generators but no relations

.. _l47726f757050726573656e746174696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l47726f757050726573656e746174696f6e-71756f7469656e74:

.. index::
   pair: GroupPresentation; quotient

:spadfun:`quotient`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  take quotient by adding relations specified by addrel


.. index::
   pair: GroupPresentation; quotient

:spadfun:`quotient`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  take quotient by removing generators specified by remgen

.. _l47726f757050726573656e746174696f6e-7265666163746f72:

.. index::
   pair: GroupPresentation; refactor

:spadfun:`refactor`\: % -> % 
  actual value of generators is not important, it is only important that they correspond to the appropriate entries in the relations. Therefore we can refactor the generators without changing the group represented.

.. _l47726f757050726573656e746174696f6e-73696d706c696679:

.. index::
   pair: GroupPresentation; simplify

:spadfun:`simplify`\: % -> % 
  \ ``simplify(s)``\  tries to simplify \ ``s``\ . There may not be a simplest form but it is possible to do some simplifications as follows: 1. Remove all zero terms in relations. 2. If a relation consists of a single generator then remove that generator. 3. If a relation consists of a pair of generators then make the second generator the inverse of the first. 4. If a generator is adjacent to its inverse then cancel them out. 5. Remove duplicate relations. 6. Substitute one relation in another.


.. index::
   pair: GroupPresentation; simplify

:spadfun:`simplify`\: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  simplify with option to trace

.. _l47726f757050726573656e746174696f6e-73796d6d657472696347726f7570:

.. index::
   pair: GroupPresentation; symmetricGroup

:spadfun:`symmetricGroup`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``symmetricGroup(n)``\  constructs the symmetric group of order \ ``n``\ -1. Note: generates all possible relations may not be minimal.

.. _l47726f757050726573656e746174696f6e-746f5065726d75746174696f6e496643616e:

.. index::
   pair: GroupPresentation; toPermutationIfCan

:spadfun:`toPermutationIfCan`\: % -> Union(\ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  convert to permutation group return "failed" for infinite groups. For more information about the algorithm see: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/finiteGroup/pres2perm/}


.. index::
   pair: GroupPresentation; toPermutationIfCan

:spadfun:`toPermutationIfCan`\: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(\ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  convert to permutation group return "failed" for infinite groups. For more information about the algorithm see: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/finiteGroup/pres2perm/}


.. index::
   pair: GroupPresentation; toPermutationIfCan

:spadfun:`toPermutationIfCan`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(\ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``toPermutationIfCan(a, sg, trace)``\  returns permutation representation of a on cosets of subgroup generate by \ ``sg``\  or "failed" if computation exceed resource limit. trace activates debugging printouts.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

