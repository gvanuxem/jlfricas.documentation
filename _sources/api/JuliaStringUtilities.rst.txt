.. index:: JuliaStringUtilities

.. _l4a756c6961537472696e675574696c6974696573:

JuliaStringUtilities
====================

:viewcode:`jutils.spad line 122 <jutils.spad#L122>` :editcode:`[edit on github] <jutils.spad#L122>`


This package provides Julia facilities that operate on strings.


.. _l4a756c6961537472696e675574696c6974696573-6a6c4c61746578:

.. index::
   pair: JuliaStringUtilities; jlLatex

:spadfun:`jlLatex`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``jlLatex(str)``\  returns the String corresponding to a Julia LaTeX expression, that is, "L"str"" if your Julia support it (LaTeXStrings package). Convenience function.

.. _l4a756c6961537472696e675574696c6974696573-6a6c4d6573736167655374796c6564:

.. index::
   pair: JuliaStringUtilities; jlMessageStyled

:spadfun:`jlMessageStyled`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlMessageStyled(message, color)``\  print the \ ``message``\  with formatted `color` (english color). For example jlMessageStyled("I AM HERE!!!", "red")


.. index::
   pair: JuliaStringUtilities; jlMessageStyled

:spadfun:`jlMessageStyled`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlMessageStyled(message)``\  print the \ ``message``\  with formatted style within braces (\ ``I``\  am {red:here}). For example: jlMessageStyled("{red:■} {green:■} {yellow:■} {blue:■} {magenta:■} {cyan:■}")

.. _l4a756c6961537472696e675574696c6974696573-6a6c5265676578:

.. index::
   pair: JuliaStringUtilities; jlRegex

:spadfun:`jlRegex`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``jlRegex(str)``\  returns the String corresponding to a Julia regular expression, that is, "r_"str_"". Convenience function.

.. _l4a756c6961537472696e675574696c6974696573-6a6c52656765784d617463683f:

.. index::
   pair: JuliaStringUtilities; jlRegexMatch?

:spadfun:`jlRegexMatch?`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  jlRegexMatch(\ ``s``\ , regex) checks if the regular expression matches in \ ``s``\ .

.. _l4a756c6961537472696e675574696c6974696573-6a6c52656765784d61746368:

.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`AssociationList <l4173736f63696174696f6e4c697374>`\ (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) 
  \ ``jlRegexMatch(s, regex)``\  returns the matched regular expressions in \ ``s``\ .


.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  
  \ ``jlRegexMatch(s, regex)``\  returns the matched regular expressions in \ ``s``\ .


.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``jlRegexMatch(s, regex)``\  returns the matched regular expression in \ ``s``\ .


.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`AssociationList <l4173736f63696174696f6e4c697374>`\ (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) 
  \ ``jlRegexMatch(s, regex, i)``\  returns the matched regular expressions in \ ``s``\ , starting at index \ ``i``\ .


.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  
  \ ``jlRegexMatch(s, regex, i)``\  returns the matched regular expressions in \ ``s``\ , starting at index \ ``i``\ .


.. index::
   pair: JuliaStringUtilities; jlRegexMatch

:spadfun:`jlRegexMatch`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``jlRegexMatch(s, regex, i)``\  returns the matched regular expression in \ ``s``\ , starting at index \ ``i``\ .

.. _l4a756c6961537472696e675574696c6974696573-6a6c52656765785265706c616365:

.. index::
   pair: JuliaStringUtilities; jlRegexReplace

:spadfun:`jlRegexReplace`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``jlRegexReplace(str, regex, subst)``\  will replace captured regular expressions in \ ``str``\  with subst. More information in String documentation of Julia. For example: jlRegexReplace("hey", jlRegex("\$"), jlSubstitute(" you!"))

.. _l4a756c6961537472696e675574696c6974696573-6a6c53706c6974:

.. index::
   pair: JuliaStringUtilities; jlSplit

:spadfun:`jlSplit`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  
  \ ``jlSplit(str, delims)``\  split \ ``str``\  with delimiter(\ ``s``\ ) delims (a string or a regular expression). Equivalent to jlSplit(\ ``str``\ , delims, 0).


.. index::
   pair: JuliaStringUtilities; jlSplit

:spadfun:`jlSplit`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  
  \ ``jlSplit(str, delims, n)``\  split \ ``str``\  with delimiter(\ ``s``\ ) \ ``delims``\  (a string or a regular expression). Return a list of size \ ``n``\ . Parse entirely \ ``str``\  if \ ``n``\  = 0.

.. _l4a756c6961537472696e675574696c6974696573-6a6c5374796c6564:

.. index::
   pair: JuliaStringUtilities; jlStyled

:spadfun:`jlStyled`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`String <l537472696e67>`\  
  jlLatex(\ ``str``\ ) returns the String corresponding to a Julia LaTeX expression, that is, "styled_"str_"" if your Julia support it. (StyledStrings official package). Convenience function.

.. _l4a756c6961537472696e675574696c6974696573-6a6c53756273746974757465:

.. index::
   pair: JuliaStringUtilities; jlSubstitute

:spadfun:`jlSubstitute`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``jlSubstitute(str)``\  returns the String corresponding to a Julia subtitute expression, that is, "s_"str_"". Convenience function.


