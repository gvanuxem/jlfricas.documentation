.. index:: SquareFreeQuasiComponentPackage

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765:

SquareFreeQuasiComponentPackage(R, E, V, P, TS)
===============================================

:viewcode:`sregset.spad line 32 <sregset.spad#L32>` :editcode:`[edit on github] <sregset.spad#L32>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* V: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* P: \ :ref:`RecursivePolynomialCategory <l526563757273697665506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

* TS: \ :ref:`RegularTriangularSetCategory <l526567756c6172547269616e67756c617253657443617465676f7279>`\ (R, E, V, P)


A internal package for removing redundant quasi-components and redundant branches when decomposing a variety by means of quasi-components of regular triangular sets.  


.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-616c67656272616963536f7274:

.. index::
   pair: SquareFreeQuasiComponentPackage; algebraicSort

:spadfun:`algebraicSort`\: \ :ref:`List <l4c697374>`\  TS -> \ :ref:`List <l4c697374>`\  TS 
  \ ``algebraicSort(lts)``\  sorts \ ``lts``\  \ ``w``\ .\ ``r``\ .\ ``t``\  \ :ref:`supDimElseRittWu <l5175617369436f6d706f6e656e745061636b616765-73757044696d456c7365526974745775>`\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-6272616e6368496643616e:

.. index::
   pair: SquareFreeQuasiComponentPackage; branchIfCan

:spadfun:`branchIfCan`\: (\ :ref:`List <l4c697374>`\  P, TS, \ :ref:`List <l4c697374>`\  P, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(Record(eq: \ :ref:`List <l4c697374>`\  P, tower: TS, ineq: \ :ref:`List <l4c697374>`\  P), failed) 
  \ ``branchIfCan(leq, ts, lineq, b1, b2, b3, b4, b5)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-696e665269747457753f:

.. index::
   pair: SquareFreeQuasiComponentPackage; infRittWu?

:spadfun:`infRittWu?`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  P) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``infRittWu?(lp1, lp2)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-696e7465726e616c496e665269747457753f:

.. index::
   pair: SquareFreeQuasiComponentPackage; internalInfRittWu?

:spadfun:`internalInfRittWu?`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  P) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``internalInfRittWu?(lp1, lp2)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-696e7465726e616c537562506f6c5365743f:

.. index::
   pair: SquareFreeQuasiComponentPackage; internalSubPolSet?

:spadfun:`internalSubPolSet?`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  P) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``internalSubPolSet?(lp1, lp2)``\  returns \ ``true``\  iff \ ``lp1``\  is a sub-set of \ ``lp2``\  assuming that these lists are sorted increasingly \ ``w``\ .\ ``r``\ .\ ``t``\ . \ :ref:`infRittWu? <l526563757273697665506f6c796e6f6d69616c43617465676f7279-696e665269747457753f>`\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-696e7465726e616c5375625175617369436f6d706f6e656e743f:

.. index::
   pair: SquareFreeQuasiComponentPackage; internalSubQuasiComponent?

:spadfun:`internalSubQuasiComponent?`\: (TS, TS) -> Union(\ :ref:`Boolean <l426f6f6c65616e>`\ , failed) 
  \ ``internalSubQuasiComponent?(ts, us)``\  returns a boolean \ ``b``\  value if the fact the regular zero set of \ ``us``\  contains that of \ ``ts``\  can be decided (and in that case \ ``b``\  gives this inclusion) otherwise returns \ ``"failed"``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-6d6f7265416c676562726169633f:

.. index::
   pair: SquareFreeQuasiComponentPackage; moreAlgebraic?

:spadfun:`moreAlgebraic?`\: (TS, TS) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``moreAlgebraic?(ts, us)``\  returns \ ``false``\  iff \ ``ts``\  and \ ``us``\  are both empty, or \ ``ts``\  has less elements than \ ``us``\ , or some variable is algebraic \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``us``\  and is not \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``ts``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-707265706172654465636f6d706f7365:

.. index::
   pair: SquareFreeQuasiComponentPackage; prepareDecompose

:spadfun:`prepareDecompose`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`List <l4c697374>`\  Record(eq: \ :ref:`List <l4c697374>`\  P, tower: TS, ineq: \ :ref:`List <l4c697374>`\  P) 
  \ ``prepareDecompose(lp, lts, b1, b2)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-72656d6f76655375706572666c756f75734361736573:

.. index::
   pair: SquareFreeQuasiComponentPackage; removeSuperfluousCases

:spadfun:`removeSuperfluousCases`\: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS) -> \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS) 
  \ ``removeSuperfluousCases(llpwt)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-72656d6f76655375706572666c756f75735175617369436f6d706f6e656e7473:

.. index::
   pair: SquareFreeQuasiComponentPackage; removeSuperfluousQuasiComponents

:spadfun:`removeSuperfluousQuasiComponents`\: \ :ref:`List <l4c697374>`\  TS -> \ :ref:`List <l4c697374>`\  TS 
  \ ``removeSuperfluousQuasiComponents(lts)``\  removes from \ ``lts``\  any \ ``ts``\  such that \ ``subQuasiComponent?(ts, us)``\  holds for another \ ``us``\  in \ ``lts``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-73746172745461626c6521:

.. index::
   pair: SquareFreeQuasiComponentPackage; startTable!

:spadfun:`startTable!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``startTableGcd!(s1, s2, s3)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-73746f705461626c6521:

.. index::
   pair: SquareFreeQuasiComponentPackage; stopTable!

:spadfun:`stopTable!`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``stopTableGcd!()``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-737562436173653f:

.. index::
   pair: SquareFreeQuasiComponentPackage; subCase?

:spadfun:`subCase?`\: (Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS), Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subCase?(lpwt1, lpwt2)``\  is an internal subroutine, exported only for development.

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-737562506f6c5365743f:

.. index::
   pair: SquareFreeQuasiComponentPackage; subPolSet?

:spadfun:`subPolSet?`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  P) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subPolSet?(lp1, lp2)``\  returns \ ``true``\  iff \ ``lp1``\  is a sub-set of \ ``lp2``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-7375625175617369436f6d706f6e656e743f:

.. index::
   pair: SquareFreeQuasiComponentPackage; subQuasiComponent?

:spadfun:`subQuasiComponent?`\: (TS, \ :ref:`List <l4c697374>`\  TS) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subQuasiComponent?(ts, lus)``\  returns \ ``true``\  iff \ ``subQuasiComponent?(ts, us)``\  holds for one \ ``us``\  in \ ``lus``\ .


.. index::
   pair: SquareFreeQuasiComponentPackage; subQuasiComponent?

:spadfun:`subQuasiComponent?`\: (TS, TS) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subQuasiComponent?(ts, us)``\  returns \ ``true``\  iff \ :ref:`internalSubQuasiComponent?(\\ ``ts``\\ , us) <l5175617369436f6d706f6e656e745061636b616765-696e7465726e616c5375625175617369436f6d706f6e656e743f285c206060747360605c202c20757329>`\  returns \ ``true``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-7375625472695365743f:

.. index::
   pair: SquareFreeQuasiComponentPackage; subTriSet?

:spadfun:`subTriSet?`\: (TS, TS) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``subTriSet?(ts, us)``\  returns \ ``true``\  iff \ ``ts``\  is a sub-set of \ ``us``\ .

.. _l537175617265467265655175617369436f6d706f6e656e745061636b616765-73757044696d456c73655269747457753f:

.. index::
   pair: SquareFreeQuasiComponentPackage; supDimElseRittWu?

:spadfun:`supDimElseRittWu?`\: (TS, TS) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``supDimElseRittWu(ts, us)``\  returns \ ``true``\  iff \ ``ts``\  has less elements than \ ``us``\  otherwise if \ ``ts``\  has higher rank than \ ``us``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . Ritt and Wu ordering.


