.. index:: SparseEchelonMatrix

.. _l537061727365456368656c6f6e4d6174726978:

SparseEchelonMatrix(C, D)
=========================

:viewcode:`jet.spad line 1286 <jet.spad#L1286>` :editcode:`[edit on github] <jet.spad#L1286>`

* C: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* D: \ :ref:`Ring <l52696e67>`\ 


\ ``SparseEchelonMatrix(C, D)``\  implements sparse matrices whose columns are enumerated by the \ :ref:`OrderedSet <l4f726465726564536574>`\  \ ``C``\  and whose entries belong to the \ :ref:`GcdDomain <l476364446f6d61696e>`\  \ ``D``\ . The basic operation of this domain is the computation of an row echelon form. The algorithm used tries to maintain the sparsity and is especially adapted to matrices which are already close to a row echelon form.


.. _l537061727365456368656c6f6e4d6174726978-2a:

.. index::
   pair: SparseEchelonMatrix; *

:spadfun:`\*`\: (\ :ref:`Matrix <l4d6174726978>`\  D, %) -> % 
  \ ``L*A``\  implements left multiplication with a usual matrix.


.. index::
   pair: SparseEchelonMatrix; *

:spadfun:`\*`\: (\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  D, %) -> % if D has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``L*A``\  implements left multiplication with a usual matrix over the quotient field of \ ``D``\ .

.. _l537061727365456368656c6f6e4d6174726978-616c6c496e6469636573:

.. index::
   pair: SparseEchelonMatrix; allIndices

:spadfun:`allIndices`\: % -> \ :ref:`List <l4c697374>`\  C 
  \ ``allIndices(A)``\  returns all indices used for enumerating the columns of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-617070656e64526f7721:

.. index::
   pair: SparseEchelonMatrix; appendRow!

:spadfun:`appendRow!`\: (%, Record(Indices: \ :ref:`List <l4c697374>`\  C, Entries: \ :ref:`List <l4c697374>`\  D)) -> \ :ref:`Void <l566f6964>`\  
  \ ``appendRow!(A, r)``\  appends the row \ ``r``\  at the end of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-636f65726365:

.. index::
   pair: SparseEchelonMatrix; coerce

:spadfun:`coerce`\: % -> \ :ref:`Matrix <l4d6174726978>`\  D 
  \ ``coerce(A)``\  yields the matrix \ ``A``\  in the usual matrix type.


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l537061727365456368656c6f6e4d6174726978-636f6e73526f7721:

.. index::
   pair: SparseEchelonMatrix; consRow!

:spadfun:`consRow!`\: (%, Record(Indices: \ :ref:`List <l4c697374>`\  C, Entries: \ :ref:`List <l4c697374>`\  D)) -> \ :ref:`Void <l566f6964>`\  
  \ ``consRow!(A, r)``\  inserts the row \ ``r``\  at the top of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-636f7079:

.. index::
   pair: SparseEchelonMatrix; copy

:spadfun:`copy`\: % -> % 
  \ ``copy(A)``\  returns a copy of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-64656c657465526f7721:

.. index::
   pair: SparseEchelonMatrix; deleteRow!

:spadfun:`deleteRow!`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``deleteRow(A, i)``\  deletes the \ ``i``\ \ ``-``\ th row of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-656c696d5a65726f436f6c7321:

.. index::
   pair: SparseEchelonMatrix; elimZeroCols!

:spadfun:`elimZeroCols!`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``elimZeroCols!(A)``\  removes columns which contain only zeros. This affects basically only the value of \ ``allIndices(A)``\ .

.. _l537061727365456368656c6f6e4d6174726978-656c74:

.. index::
   pair: SparseEchelonMatrix; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , C) -> D 
  \ ``elt(A, i, c)``\  returns the entry of the matrix \ ``A``\  in row \ ``i``\  and in the column with index \ ``c``\ .

.. _l537061727365456368656c6f6e4d6174726978-65787472616374:

.. index::
   pair: SparseEchelonMatrix; extract

:spadfun:`extract`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``extract(A, i1, i2)``\  extracts the rows \ ``i1``\  to \ ``i2``\  and returns them as a new matrix.

.. _l537061727365456368656c6f6e4d6174726978-686f72697a4a6f696e:

.. index::
   pair: SparseEchelonMatrix; horizJoin

:spadfun:`horizJoin`\: (%, %) -> % 
  \ ``horizJoin(A, B)``\  horizontally concats the matrices \ ``A``\  and \ ``B``\ . It is assumed that all indices of \ ``B``\  are smaller than those of \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-686f72697a53706c6974:

.. index::
   pair: SparseEchelonMatrix; horizSplit

:spadfun:`horizSplit`\: (%, C) -> Record(Left: %, Right: %) 
  \ ``horizSplit(A, c)``\  splits the matrix \ ``A``\  into two at the column given by \ ``c``\ . The first column of the right matrix is enumerated by the first index less or equal to \ ``c``\ .

.. _l537061727365456368656c6f6e4d6174726978-6a6f696e:

.. index::
   pair: SparseEchelonMatrix; join

:spadfun:`join`\: (%, %) -> % 
  \ ``join(A, B)``\  vertically concats the matrices \ ``A``\  and \ ``B``\ .

.. _l537061727365456368656c6f6e4d6174726978-6e636f6c73:

.. index::
   pair: SparseEchelonMatrix; ncols

:spadfun:`ncols`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``ncols(A)``\  returns the number of columns of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-6e6577:

.. index::
   pair: SparseEchelonMatrix; new

:spadfun:`new`\: (\ :ref:`List <l4c697374>`\  C, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``new(inds, nrows)``\  generates a new matrix with \ ``nrows``\  rows and columns enumerated by the indices \ ``inds``\ . The matrix is empty, i.e. the zero matrix.

.. _l537061727365456368656c6f6e4d6174726978-6e726f7773:

.. index::
   pair: SparseEchelonMatrix; nrows

:spadfun:`nrows`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``nrows(A)``\  returns the number of rows of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-7069766f74:

.. index::
   pair: SparseEchelonMatrix; pivot

:spadfun:`pivot`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Record(Index: C, Entry: D) 
  \ ``pivot(A, i)``\  returns the leading entry of the \ ``i``\ \ ``-``\ th row of the matrix \ ``A``\  together with its index.

.. _l537061727365456368656c6f6e4d6174726978-7069766f7473:

.. index::
   pair: SparseEchelonMatrix; pivots

:spadfun:`pivots`\: % -> Record(Indices: \ :ref:`List <l4c697374>`\  C, Entries: \ :ref:`List <l4c697374>`\  D) 
  \ ``pivots(A)``\  returns all leading entries of the matrix \ ``A``\  together with their indices.

.. _l537061727365456368656c6f6e4d6174726978-7072696d6974697665526f77456368656c6f6e:

.. index::
   pair: SparseEchelonMatrix; primitiveRowEchelon

:spadfun:`primitiveRowEchelon`\: % -> Record(Ech: %, Lt: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  D, Pivots: \ :ref:`List <l4c697374>`\  D, Rank: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) if D has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``primitiveRowEchelon(A)``\  computes a row echelon form for the matrix \ ``A``\ . The algorithm used is fraction-free elimination. Every row is made primitive by division by the \ ``gcd``\ . The algorithm is especially adapted to matrices already close to row echelon form. The transformation matrix, the used pivots and the rank of the matrix are also returned.

.. _l537061727365456368656c6f6e4d6174726978-707572676521:

.. index::
   pair: SparseEchelonMatrix; purge!

:spadfun:`purge!`\: (%, C -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``purge!(A, crit)``\  eliminates all columns belonging to an index \ ``c``\  such that \ ``crit(c)``\  yields \ ``true``\ .

.. _l537061727365456368656c6f6e4d6174726978-726f77:

.. index::
   pair: SparseEchelonMatrix; row

:spadfun:`row`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Record(Indices: \ :ref:`List <l4c697374>`\  C, Entries: \ :ref:`List <l4c697374>`\  D) 
  \ ``row(A, i)``\  returns the \ ``i``\ \ ``-``\ th row of the matrix \ ``A``\ .

.. _l537061727365456368656c6f6e4d6174726978-726f77456368656c6f6e:

.. index::
   pair: SparseEchelonMatrix; rowEchelon

:spadfun:`rowEchelon`\: % -> Record(Ech: %, Lt: \ :ref:`Matrix <l4d6174726978>`\  D, Pivots: \ :ref:`List <l4c697374>`\  D, Rank: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``primitiveRowEchelon(A)``\  computes a row echelon form for the matrix \ ``A``\ . The algorithm used is fraction-free elimination. It is especially adapted to matrices already close to row echelon form. The transformation matrix, the used pivots and the rank of the matrix are also returned.

.. _l537061727365456368656c6f6e4d6174726978-736574656c7421:

.. index::
   pair: SparseEchelonMatrix; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , C, D) -> \ :ref:`Void <l566f6964>`\  
  \ ``setelt!(A, i, c, d)``\  sets the entry of the matrix \ ``A``\  in row \ ``i``\  and in the column with index \ ``c``\  to the value \ ``d``\ .

.. _l537061727365456368656c6f6e4d6174726978-7365744763644d6f6465:

.. index::
   pair: SparseEchelonMatrix; setGcdMode

:spadfun:`setGcdMode`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Symbol <l53796d626f6c>`\  if D has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``setGcdMode(s)``\  sets a new value for the flag deciding on the method used to compute gcd`s for lists. Possible values for \ ``s``\  are \ ``iterated``\  and \ ``random``\ .

.. _l537061727365456368656c6f6e4d6174726978-736574526f7721:

.. index::
   pair: SparseEchelonMatrix; setRow!

:spadfun:`setRow!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  C, \ :ref:`List <l4c697374>`\  D) -> \ :ref:`Void <l566f6964>`\  
  \ ``setRow!(A, i, ind, ent)``\  sets the \ ``i``\ \ ``-``\ th row of the matrix \ ``A``\ . Its indices are \ ``ind``\ ; the entries \ ``ent``\ .


.. index::
   pair: SparseEchelonMatrix; setRow!

:spadfun:`setRow!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , Record(Indices: \ :ref:`List <l4c697374>`\  C, Entries: \ :ref:`List <l4c697374>`\  D)) -> \ :ref:`Void <l566f6964>`\  
  \ ``setRow!(A, i, ind, ent)``\  sets the \ ``i``\ \ ``-``\ th row of the matrix \ ``A``\  to the value \ ``r``\ .

.. _l537061727365456368656c6f6e4d6174726978-736f72746564507572676521:

.. index::
   pair: SparseEchelonMatrix; sortedPurge!

:spadfun:`sortedPurge!`\: (%, C -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``sortedPurge!(A, crit)``\  is like \ ``purge``\ , however, with the additional assumption that \ ``crit``\  respects the ordering of the indices.


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

