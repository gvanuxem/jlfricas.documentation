.. index:: Pattern

.. _l5061747465726e:

Pattern R
=========

:viewcode:`pattern.spad line 1 <pattern.spad#L1>` :editcode:`[edit on github] <pattern.spad#L1>`

* R: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


Patterns for use by the pattern matcher.


.. _l5061747465726e-30:

.. index::
   pair: Pattern; 0

:spadfun:`0`\: % 
  0

.. _l5061747465726e-31:

.. index::
   pair: Pattern; 1

:spadfun:`1`\: % 
  1

.. _l5061747465726e-2a:

.. index::
   pair: Pattern; *

:spadfun:`\*`\: (%, %) -> % 
  \ ``a * b``\  returns the pattern \ ``a * b``\ .

.. _l5061747465726e-2b:

.. index::
   pair: Pattern; +

:spadfun:`+`\: (%, %) -> % 
  \ ``a + b``\  returns the pattern \ ``a + b``\ .

.. _l5061747465726e-2f:

.. index::
   pair: Pattern; /

:spadfun:`/`\: (%, %) -> % 
  \ ``a / b``\  returns the pattern \ ``a / b``\ .

.. _l5061747465726e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5061747465726e-5e:

.. index::
   pair: Pattern; ^

:spadfun:`^`\: (%, %) -> % 
  \ ``a ^ b``\  returns the pattern \ ``a ^ b``\ .


.. index::
   pair: Pattern; ^

:spadfun:`^`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``a ^ n``\  returns the pattern \ ``a ^ n``\ .

.. _l5061747465726e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5061747465726e-61646442616456616c7565:

.. index::
   pair: Pattern; addBadValue

:spadfun:`addBadValue`\: (%, \ :ref:`Any <l416e79>`\ ) -> % 
  \ ``addBadValue(p, v)``\  adds \ ``v``\  to the list of "bad values" for \ ``p``\ . Note: \ ``p``\  is not allowed to match any of its "bad values".

.. _l5061747465726e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l5061747465726e-636f6e7374616e743f:

.. index::
   pair: Pattern; constant?

:spadfun:`constant?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``constant?(p)``\  tests if \ ``p``\  contains no matching variables.

.. _l5061747465726e-636f6e76657274:

.. index::
   pair: Pattern; convert

:spadfun:`convert`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``convert([a1, ..., an])``\  returns the pattern \ ``[a1, ..., an]``\ .

.. _l5061747465726e-636f7079:

.. index::
   pair: Pattern; copy

:spadfun:`copy`\: % -> % 
  \ ``copy(p)``\  returns a recursive copy of \ ``p``\ .

.. _l5061747465726e-6465707468:

.. index::
   pair: Pattern; depth

:spadfun:`depth`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``depth(p)``\  returns the nesting level of \ ``p``\ .

.. _l5061747465726e-656c74:

.. index::
   pair: Pattern; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``elt(op, [a1, ..., an])``\  returns \ ``op(a1, ..., an)``\ .

.. _l5061747465726e-67656e657269633f:

.. index::
   pair: Pattern; generic?

:spadfun:`generic?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``generic?(p)``\  tests if \ ``p``\  is a single matching variable.

.. _l5061747465726e-67657442616456616c756573:

.. index::
   pair: Pattern; getBadValues

:spadfun:`getBadValues`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Any <l416e79>`\  
  \ ``getBadValues(p)``\  returns the list of "bad values" for \ ``p``\ . Note: \ ``p``\  is not allowed to match any of its "bad values".

.. _l5061747465726e-6861735072656469636174653f:

.. index::
   pair: Pattern; hasPredicate?

:spadfun:`hasPredicate?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hasPredicate?(p)``\  tests if \ ``p``\  has predicates attached to it.

.. _l5061747465726e-686173546f705072656469636174653f:

.. index::
   pair: Pattern; hasTopPredicate?

:spadfun:`hasTopPredicate?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hasTopPredicate?(p)``\  tests if \ ``p``\  has a top-level predicate.

.. _l5061747465726e-696e523f:

.. index::
   pair: Pattern; inR?

:spadfun:`inR?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``inR?(p)``\  tests if \ ``p``\  is an atom (i.e. an element of \ ``R``\ ).

.. _l5061747465726e-697345787074:

.. index::
   pair: Pattern; isExpt

:spadfun:`isExpt`\: % -> Union(Record(val: %, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), failed) 
  \ ``isExpt(p)``\  returns \ ``[q, n]``\  if \ ``n > 0``\  and \ ``p = q ^ n``\ , and "failed" otherwise.

.. _l5061747465726e-69734c697374:

.. index::
   pair: Pattern; isList

:spadfun:`isList`\: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  \ ``isList(p)``\  returns \ ``[a1, ..., an]``\  if \ ``p = [a1, ..., an]``\ , "failed" otherwise.

.. _l5061747465726e-69734f70:

.. index::
   pair: Pattern; isOp

:spadfun:`isOp`\: % -> Union(Record(op: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , arg: \ :ref:`List <l4c697374>`\  %), failed) 
  \ ``isOp(p)``\  returns \ ``[op, [a1, ..., an]]``\  if \ ``p = op(a1, ..., an)``\ , and "failed" otherwise.


.. index::
   pair: Pattern; isOp

:spadfun:`isOp`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  \ ``isOp(p, op)``\  returns \ ``[a1, ..., an]``\  if \ ``p = op(a1, ..., an)``\ , and "failed" otherwise.

.. _l5061747465726e-6973506c7573:

.. index::
   pair: Pattern; isPlus

:spadfun:`isPlus`\: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  \ ``isPlus(p)``\  returns \ ``[a1, ..., an]``\  if \ ``n > 1``\  and \ ``p = a1 + ... + an``\ , and "failed" otherwise.

.. _l5061747465726e-6973506f776572:

.. index::
   pair: Pattern; isPower

:spadfun:`isPower`\: % -> Union(Record(val: %, exponent: %), failed) 
  \ ``isPower(p)``\  returns \ ``[a, b]``\  if \ ``p = a ^ b``\ , and "failed" otherwise.

.. _l5061747465726e-697351756f7469656e74:

.. index::
   pair: Pattern; isQuotient

:spadfun:`isQuotient`\: % -> Union(Record(num: %, den: %), failed) 
  \ ``isQuotient(p)``\  returns \ ``[a, b]``\  if \ ``p = a / b``\ , and "failed" otherwise.

.. _l5061747465726e-697354696d6573:

.. index::
   pair: Pattern; isTimes

:spadfun:`isTimes`\: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  \ ``isTimes(p)``\  returns \ ``[a1, ..., an]``\  if \ ``n > 1``\  and \ ``p = a1 * ... * an``\ , and "failed" otherwise.

.. _l5061747465726e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5061747465726e-6d756c7469706c653f:

.. index::
   pair: Pattern; multiple?

:spadfun:`multiple?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``multiple?(p)``\  tests if \ ``p``\  is a single matching variable allowing list matching or multiple term matching in a sum or product.

.. _l5061747465726e-6f7074696f6e616c3f:

.. index::
   pair: Pattern; optional?

:spadfun:`optional?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``optional?(p)``\  tests if \ ``p``\  is a single matching variable which can match an identity.

.. _l5061747465726e-6f707470616972:

.. index::
   pair: Pattern; optpair

:spadfun:`optpair`\: \ :ref:`List <l4c697374>`\  % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  \ ``optpair(l)``\  returns \ ``l``\  has the form \ ``[a, b]``\  and a is optional, and "failed" otherwise.

.. _l5061747465726e-7061747465726e5661726961626c65:

.. index::
   pair: Pattern; patternVariable

:spadfun:`patternVariable`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``patternVariable(x, c?, o?, m?)``\  creates a pattern variable \ ``x``\ , which is constant if \ ``c? = true``\ , optional if \ ``o? = true``\ , and multiple if \ ``m? = true``\ .

.. _l5061747465726e-70726564696361746573:

.. index::
   pair: Pattern; predicates

:spadfun:`predicates`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Any <l416e79>`\  
  \ ``predicates(p)``\  returns \ ``[p1, ..., pn]``\  such that the predicate attached to \ ``p``\  is \ ``p1``\  and ... and \ ``pn``\ .

.. _l5061747465726e-71756f7465643f:

.. index::
   pair: Pattern; quoted?

:spadfun:`quoted?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``quoted?(p)``\  tests if \ ``p``\  is of the form \ ``'s``\  for a symbol \ ``s``\ .

.. _l5061747465726e-726573657442616456616c756573:

.. index::
   pair: Pattern; resetBadValues

:spadfun:`resetBadValues`\: % -> % 
  \ ``resetBadValues(p)``\  initializes the list of "bad values" for \ ``p``\  to \ ``[]``\ . Note: \ ``p``\  is not allowed to match any of its "bad values".

.. _l5061747465726e-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l5061747465726e-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Symbol <l53796d626f6c>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l5061747465726e-73657450726564696361746573:

.. index::
   pair: Pattern; setPredicates

:spadfun:`setPredicates`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Any <l416e79>`\ ) -> % 
  \ ``setPredicates(p, [p1, ..., pn])``\  attaches the predicate \ ``p1``\  and ... and \ ``pn``\  to \ ``p``\ .

.. _l5061747465726e-736574546f70507265646963617465:

.. index::
   pair: Pattern; setTopPredicate

:spadfun:`setTopPredicate`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Any <l416e79>`\ ) -> % 
  \ ``setTopPredicate(x, [a1, ..., an], f)``\  returns \ ``x``\  with the top-level predicate set to \ ``f(a1, ..., an)``\ .

.. _l5061747465726e-73796d626f6c3f:

.. index::
   pair: Pattern; symbol?

:spadfun:`symbol?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``symbol?(p)``\  tests if \ ``p``\  is a symbol.

.. _l5061747465726e-746f70507265646963617465:

.. index::
   pair: Pattern; topPredicate

:spadfun:`topPredicate`\: % -> Record(var: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , pred: \ :ref:`Any <l416e79>`\ ) 
  \ ``topPredicate(x)``\  returns \ ``[[a1, ..., an], f]``\  where the top-level predicate of \ ``x``\  is \ ``f(a1, ..., an)``\ . Note: \ ``n``\  is 0 if \ ``x``\  has no top-level predicate.

.. _l5061747465726e-7661726961626c6573:

.. index::
   pair: Pattern; variables

:spadfun:`variables`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``variables(p)``\  returns the list of matching variables appearing in \ ``p``\ .

.. _l5061747465726e-7769746850726564696361746573:

.. index::
   pair: Pattern; withPredicates

:spadfun:`withPredicates`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Any <l416e79>`\ ) -> % 
  \ ``withPredicates(p, [p1, ..., pn])``\  makes a copy of \ ``p``\  and attaches the predicate \ ``p1``\  and ... and \ ``pn``\  to the copy, which is returned.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

