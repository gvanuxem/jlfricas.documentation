.. index:: ElementaryFunctionStructurePackage

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765:

ElementaryFunctionStructurePackage(R, F)
========================================

:viewcode:`efstruc.spad line 78 <efstruc.spad#L78>` :editcode:`[edit on github] <efstruc.spad#L78>`

* R: Join(\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* F: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


ElementaryFunctionStructurePackage provides functions to test the algebraic independence of various elementary functions, using the Risch structure theorem (real and complex versions). It also provides transformations on elementary functions which are not considered simplifications.


.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-69726f6f74446570:

.. index::
   pair: ElementaryFunctionStructurePackage; irootDep

:spadfun:`irootDep`\: \ :ref:`Kernel <l4b65726e656c>`\  F -> Union(vec: \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , func: F, fail: \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``irootDep(k)``\  is a local function with a conditional implementation.

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-6e6f726d616c697a65:

.. index::
   pair: ElementaryFunctionStructurePackage; normalize

:spadfun:`normalize`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``normalize(f, x)``\  is normalize([\ ``f``\ ], [\ ``x``\ ])


.. index::
   pair: ElementaryFunctionStructurePackage; normalize

:spadfun:`normalize`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  F 
  \ ``normalize([f1, ..., fn], lx)``\  rewrites \ ``f1, ..., fn``\  using the least possible number of real algebraically independent kernels. Additionally, it tries to ensure that any expression in resulting kernels which syntactically depends on a variable \ ``x``\  from \ ``lx``\  has nonzero derivative with respect to \ ``x``\ .


.. index::
   pair: ElementaryFunctionStructurePackage; normalize

:spadfun:`normalize`\: F -> F 
  \ ``normalize(f)``\  rewrites \ ``f``\  using the least possible number of real algebraically independent kernels.


.. index::
   pair: ElementaryFunctionStructurePackage; normalize

:spadfun:`normalize`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  F 
  \ ``normalize(lf)``\  is normalize(\ ``lf``\ , [])

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-7265616c456c656d656e74617279:

.. index::
   pair: ElementaryFunctionStructurePackage; realElementary

:spadfun:`realElementary`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``realElementary(f, x)``\  rewrites the kernels of \ ``f``\  involving \ ``x``\  in terms of the 4 fundamental real transcendental elementary functions: \ ``log, exp, tan, atan``\ .


.. index::
   pair: ElementaryFunctionStructurePackage; realElementary

:spadfun:`realElementary`\: F -> F 
  \ ``realElementary(f)``\  rewrites \ ``f``\  in terms of the 4 fundamental real transcendental elementary functions: \ ``log, exp, tan, atan``\ .

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-7265616c4c696f7576696c6c69616e:

.. index::
   pair: ElementaryFunctionStructurePackage; realLiouvillian

:spadfun:`realLiouvillian`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``realLiouvillian(f, x)``\  rewrites \ ``f``\  elementary kernels of \ ``f``\  in terms 4 fundamental real elementary functions: \ ``log, exp, tan, atan``\ . Additionally, it rewrites Liouvillian functions of \ ``x``\  as indefinite integrals to support better normalization.


.. index::
   pair: ElementaryFunctionStructurePackage; realLiouvillian

:spadfun:`realLiouvillian`\: F -> F 
  \ ``realLiouvillian(f)``\  rewrites \ ``f``\  elementary kernels of \ ``f``\  in terms 4 fundamental real elementary functions: \ ``log, exp, tan, atan``\ . Additionally, it rewrites Liouvillian functions as indefinite integrals to support better normalization.

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-72697363684e6f726d616c697a65:

.. index::
   pair: ElementaryFunctionStructurePackage; rischNormalize

:spadfun:`rischNormalize`\: (F, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> Record(func: F, kers: \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, vals: \ :ref:`List <l4c697374>`\  F) 
  \ ``rischNormalize(f, lx)``\  is rischNormalize([\ ``f``\ ], \ ``lx``\ )


.. index::
   pair: ElementaryFunctionStructurePackage; rischNormalize

:spadfun:`rischNormalize`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Record(func: F, kers: \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, vals: \ :ref:`List <l4c697374>`\  F) 
  \ ``rischNormalize(f, x)``\  is rischNormalize([\ ``f``\ ], [\ ``x``\ ]) rischNormalize(\ ``f``\ , \ ``x``\ ) returns \ ``[g, [k1, ..., kn], [h1, ..., hn]]``\  such that \ ``g = normalize(f, x)``\  and each \ ``ki``\  was rewritten as \ ``hi``\  during the normalization.


.. index::
   pair: ElementaryFunctionStructurePackage; rischNormalize

:spadfun:`rischNormalize`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> Record(funcs: \ :ref:`List <l4c697374>`\  F, kers: \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, vals: \ :ref:`List <l4c697374>`\  F) 
  \ ``rischNormalize(lf, lx)``\  returns \ ``[lg, [k1, ..., kn], [h1, ..., hn]]``\  such that \ ``lg = normalize(lf, lx)``\  and each \ ``ki``\  was rewritten as \ ``hi``\  during the normalization.

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-726d6170:

.. index::
   pair: ElementaryFunctionStructurePackage; rmap

:spadfun:`rmap`\: (\ :ref:`Kernel <l4b65726e656c>`\  F -> F, F) -> F 
  \ ``rmap(f, e)``\  rewrites \ ``e``\  replacing each kernel \ ``k``\  in \ ``e``\  by \ ``f``\ (\ ``k``\ )

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-726f6f744e6f726d616c697a65:

.. index::
   pair: ElementaryFunctionStructurePackage; rootNormalize

:spadfun:`rootNormalize`\: (F, \ :ref:`Kernel <l4b65726e656c>`\  F) -> F 
  \ ``rootNormalize(f, k)``\  returns \ ``f``\  rewriting either \ ``k``\  which must be an \ ``n``\ th-root in terms of radicals already in \ ``f``\ , or some radicals in \ ``f``\  in terms of \ ``k``\ .

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-74616e51:

.. index::
   pair: ElementaryFunctionStructurePackage; tanQ

:spadfun:`tanQ`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , F) -> F 
  \ ``tanQ(q, a)``\  is a local function with a conditional implementation.

.. _l456c656d656e7461727946756e6374696f6e5374727563747572655061636b616765-76616c69644578706f6e656e7469616c:

.. index::
   pair: ElementaryFunctionStructurePackage; validExponential

:spadfun:`validExponential`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F, F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(F, failed) 
  \ ``validExponential([k1, ..., kn], f, x)``\  returns \ ``g``\  if \ ``exp(f)=g``\  and \ ``g``\  involves only \ ``k1...kn``\ , and "failed" otherwise.


