.. index:: Symbol

.. _l53796d626f6c:

Symbol
======

:viewcode:`symbol.spad line 1 <symbol.spad#L1>` :editcode:`[edit on github] <symbol.spad#L1>`


Basic and scripted symbols.


.. _l53796d626f6c-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l53796d626f6c-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l53796d626f6c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l53796d626f6c-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l53796d626f6c-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l53796d626f6c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l53796d626f6c-617267736372697074:

.. index::
   pair: Symbol; argscript

:spadfun:`argscript`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> % 
  \ ``argscript(s, [a1, ..., an])``\  returns \ ``s``\  arg-scripted by \ ``[a1, ..., an]``\ .

.. _l53796d626f6c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: Symbol; coerce

:spadfun:`coerce`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``coerce(s)``\  converts the string \ ``s``\  to a symbol.

.. _l53796d626f6c-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l53796d626f6c-656c74:

.. index::
   pair: Symbol; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> % 
  \ ``elt(s, [a1, ..., an])``\  or \ ``s``\ ([\ ``a1``\ , ..., an]) returns \ ``s``\  subscripted by \ ``[a1, ..., an]``\ .

.. _l53796d626f6c-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l53796d626f6c-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l53796d626f6c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l53796d626f6c-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l53796d626f6c-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l53796d626f6c-6e616d65:

.. index::
   pair: Symbol; name

:spadfun:`name`\: % -> % 
  \ ``name(s)``\  returns \ ``s``\  without its scripts.

.. _l53796d626f6c-6e6577:

.. index::
   pair: Symbol; new

:spadfun:`new`\: % -> % 
  \ ``new(s)``\  returns a new symbol whose name starts with \%\ ``s``\ .


.. index::
   pair: Symbol; new

:spadfun:`new`\: () -> % 
  \ ``new()``\  returns a new symbol whose name starts with \%.

.. _l53796d626f6c-4f4d7772697465:

\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 

.. _l53796d626f6c-7061747465726e4d61746368:

\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %) 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %) 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l53796d626f6c-72657365744e6577:

.. index::
   pair: Symbol; resetNew

:spadfun:`resetNew`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``resetNew()``\  resets the internals counters that new() and new(\ ``s``\ ) use to return distinct symbols every time.

.. _l53796d626f6c-73616d706c65:

.. index::
   pair: Symbol; sample

:spadfun:`sample`\: % 
  \ ``sample()``\  returns a sample of \%

.. _l53796d626f6c-736372697074:

.. index::
   pair: Symbol; script

:spadfun:`script`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> % 
  \ ``script(s, [a, b, c, d, e])``\  returns \ ``s``\  with subscripts a, superscripts \ ``b``\ , pre-superscripts \ ``c``\ , pre-subscripts \ ``d``\ , and argument-scripts \ ``e``\ . Omitted components are taken to be empty. For example, \ ``script(s, [a, b, c])``\  is equivalent to \ ``script(s, [a, b, c, [], []])``\ .


.. index::
   pair: Symbol; script

:spadfun:`script`\: (%, Record(sub: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , sup: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , presup: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , presub: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , args: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ )) -> % 
  \ ``script(s, [a, b, c, d, e])``\  returns \ ``s``\  with subscripts a, superscripts \ ``b``\ , pre-superscripts \ ``c``\ , pre-subscripts \ ``d``\ , and argument-scripts \ ``e``\ .

.. _l53796d626f6c-73637269707465643f:

.. index::
   pair: Symbol; scripted?

:spadfun:`scripted?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``scripted?(s)``\  is \ ``true``\  if \ ``s``\  has been given any scripts.

.. _l53796d626f6c-73637269707473:

.. index::
   pair: Symbol; scripts

:spadfun:`scripts`\: % -> Record(sub: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , sup: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , presup: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , presub: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ , args: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) 
  \ ``scripts(s)``\  returns all the scripts of \ ``s``\ .

.. _l53796d626f6c-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l53796d626f6c-737472696e67:

.. index::
   pair: Symbol; string

:spadfun:`string`\: % -> \ :ref:`String <l537472696e67>`\  
  \ ``string(s)``\  converts the symbol \ ``s``\  to a string. Error: if the symbol is subscripted.

.. _l53796d626f6c-737562736372697074:

.. index::
   pair: Symbol; subscript

:spadfun:`subscript`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> % 
  \ ``subscript(s, [a1, ..., an])``\  returns \ ``s``\  subscripted by \ ``[a1, ..., an]``\ .

.. _l53796d626f6c-7375706572736372697074:

.. index::
   pair: Symbol; superscript

:spadfun:`superscript`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) -> % 
  \ ``superscript(s, [a1, ..., an])``\  returns \ ``s``\  superscripted by \ ``[a1, ..., an]``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`OpenMath <l4f70656e4d617468>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

