.. index:: RectangularMatrixCategory

.. _l52656374616e67756c61724d617472697843617465676f7279:

RectangularMatrixCategory(m, n, R, Row, Col)
============================================

:viewcode:`matcat.spad line 706 <matcat.spad#L706>` :editcode:`[edit on github] <matcat.spad#L706>`

* m: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

* n: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

* R: Join(\ :ref:`SemiRng <l53656d69526e67>`\ , \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ )

* Row: \ :ref:`DirectProductCategory <l44697265637450726f6475637443617465676f7279>`\ (n, R)

* Col: \ :ref:`DirectProductCategory <l44697265637450726f6475637443617465676f7279>`\ (m, R)


\ :ref:`RectangularMatrixCategory <l52656374616e67756c61724d617472697843617465676f7279>`\  is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \ ``R``\ -modules and will be non-mutable.


.. _l52656374616e67756c61724d617472697843617465676f7279-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-2f:

.. index::
   pair: RectangularMatrixCategory; /

:spadfun:`/`\: (%, R) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``m/r``\  divides the elements of \ ``m``\  by \ ``r``\ . Error: if \ ``r = 0``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-616e746973796d6d65747269633f:

.. index::
   pair: RectangularMatrixCategory; antisymmetric?

:spadfun:`antisymmetric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``antisymmetric?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and antisymmetric (i.e. \ ``m[i, j] = -m[j, i]``\  for all \ ``i``\  and \ ``j``\ ) and \ ``false``\  otherwise.

.. _l52656374616e67756c61724d617472697843617465676f7279-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-636f6c756d6e:

.. index::
   pair: RectangularMatrixCategory; column

:spadfun:`column`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Col 
  \ ``column(m, j)``\  returns the \ ``j``\ th column of the matrix \ ``m``\ . Error: if the index outside the proper range.

.. _l52656374616e67756c61724d617472697843617465676f7279-636f6c756d6e5370616365:

.. index::
   pair: RectangularMatrixCategory; columnSpace

:spadfun:`columnSpace`\: % -> \ :ref:`List <l4c697374>`\  Col if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``columnSpace(m)``\  returns a sublist of columns of the matrix \ ``m``\  forming a basis of its column space.

.. _l52656374616e67756c61724d617472697843617465676f7279-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-646961676f6e616c3f:

.. index::
   pair: RectangularMatrixCategory; diagonal?

:spadfun:`diagonal?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``diagonal?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and diagonal (i.e. all entries of \ ``m``\  not on the diagonal are zero) and \ ``false``\  otherwise.

.. _l52656374616e67756c61724d617472697843617465676f7279-656c74:

.. index::
   pair: RectangularMatrixCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(m, i, j)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the matrix \ ``m``\ . Error: if indices are outside the proper ranges.


.. index::
   pair: RectangularMatrixCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  \ ``elt(m, i, j, r)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the matrix \ ``m``\ , if \ ``m``\  has an \ ``i``\ th row and a \ ``j``\ th column, and returns \ ``r``\  otherwise.

.. _l52656374616e67756c61724d617472697843617465676f7279-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-656e756d6572617465:

\ :ref:`enumerate <l46696e697465-656e756d6572617465>`\ \: () -> \ :ref:`List <l4c697374>`\  % if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, R, R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)

.. _l52656374616e67756c61724d617472697843617465676f7279-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-657871756f:

.. index::
   pair: RectangularMatrixCategory; exquo

:spadfun:`exquo`\: (%, R) -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exquo(m, r)``\  computes the exact quotient of the elements of \ ``m``\  by \ ``r``\ , returning \ ``"failed"``\  if this is not possible.

.. _l52656374616e67756c61724d617472697843617465676f7279-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-696e646578:

\ :ref:`index <l46696e697465-696e646578>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6c6973744f664c69737473:

.. index::
   pair: RectangularMatrixCategory; listOfLists

:spadfun:`listOfLists`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R 
  \ ``listOfLists(m)``\  returns the rows of the matrix \ ``m``\  as a list of lists.

.. _l52656374616e67756c61724d617472697843617465676f7279-6c6f6f6b7570:

\ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ \: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (R -> R, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6170:

.. index::
   pair: RectangularMatrixCategory; map

:spadfun:`map`\: ((R, R) -> R, %, %) -> % 
  \ ``map(f, a, b)``\  returns \ ``c``\ , where \ ``c``\  is such that \ ``c(i, j) = f(a(i, j), b(i, j))``\  for all \ ``i``\ , \ ``j``\ .


.. index::
   pair: RectangularMatrixCategory; map

:spadfun:`map`\: (R -> R, %) -> % 
  \ ``map(f, a)``\  returns \ ``b``\ , where \ ``b(i, j) = a(i, j)``\  for all \ ``i``\ , \ ``j``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6174726978:

.. index::
   pair: RectangularMatrixCategory; matrix

:spadfun:`matrix`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R -> % 
  \ ``matrix(l)``\  converts the list of lists \ ``l``\  to a matrix, where the list of lists is viewed as a list of the rows of the matrix.

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((R, R) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6178436f6c496e646578:

.. index::
   pair: RectangularMatrixCategory; maxColIndex

:spadfun:`maxColIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxColIndex(m)``\  returns the index of the 'last' column of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6178526f77496e646578:

.. index::
   pair: RectangularMatrixCategory; maxRowIndex

:spadfun:`maxRowIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxRowIndex(m)``\  returns the index of the 'last' row of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (R, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-6d696e436f6c496e646578:

.. index::
   pair: RectangularMatrixCategory; minColIndex

:spadfun:`minColIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minColIndex(m)``\  returns the index of the 'first' column of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6d696e526f77496e646578:

.. index::
   pair: RectangularMatrixCategory; minRowIndex

:spadfun:`minRowIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minRowIndex(m)``\  returns the index of the 'first' row of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-6e636f6c73:

.. index::
   pair: RectangularMatrixCategory; ncols

:spadfun:`ncols`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``ncols(m)``\  returns the number of columns in the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6e726f7773:

.. index::
   pair: RectangularMatrixCategory; nrows

:spadfun:`nrows`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``nrows(m)``\  returns the number of rows in the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6e756c6c697479:

.. index::
   pair: RectangularMatrixCategory; nullity

:spadfun:`nullity`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullity(m)``\  returns the nullity of the matrix \ ``m``\ . This is the dimension of the null space of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6e756c6c5370616365:

.. index::
   pair: RectangularMatrixCategory; nullSpace

:spadfun:`nullSpace`\: % -> \ :ref:`List <l4c697374>`\  Col if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullSpace(m)``\ + returns a basis for the null space of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l52656374616e67756c61724d617472697843617465676f7279-71656c74:

.. index::
   pair: RectangularMatrixCategory; qelt

:spadfun:`qelt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``qelt(m, i, j)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the matrix \ ``m``\ . Note: there is NO error check to determine if indices are in the proper ranges.

.. _l52656374616e67756c61724d617472697843617465676f7279-72616e646f6d:

\ :ref:`random <l46696e697465-72616e646f6d>`\ \: () -> % if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-72616e6b:

.. index::
   pair: RectangularMatrixCategory; rank

:spadfun:`rank`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rank(m)``\  returns the rank of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-726f77:

.. index::
   pair: RectangularMatrixCategory; row

:spadfun:`row`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Row 
  \ ``row(m, i)``\  returns the \ ``i``\ th row of the matrix \ ``m``\ . Error: if the index is outside the proper range.

.. _l52656374616e67756c61724d617472697843617465676f7279-726f77456368656c6f6e:

.. index::
   pair: RectangularMatrixCategory; rowEchelon

:spadfun:`rowEchelon`\: % -> % if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``rowEchelon(m)``\  returns the row echelon form of the matrix \ ``m``\ .

.. _l52656374616e67756c61724d617472697843617465676f7279-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-73697a65:

\ :ref:`size <l46696e697465-73697a65>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Finite <l46696e697465>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-7371756172653f:

.. index::
   pair: RectangularMatrixCategory; square?

:spadfun:`square?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``square?(m)``\  returns \ ``true``\  if \ ``m``\  is a square matrix (i.e. if \ ``m``\  has the same number of rows as columns) and \ ``false``\  otherwise.

.. _l52656374616e67756c61724d617472697843617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l52656374616e67756c61724d617472697843617465676f7279-73796d6d65747269633f:

.. index::
   pair: RectangularMatrixCategory; symmetric?

:spadfun:`symmetric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``symmetric?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and symmetric (i.e. \ ``m[i, j] = m[j, i]``\  for all \ ``i``\  and \ ``j``\ ) and \ ``false``\  otherwise.

.. _l52656374616e67756c61724d617472697843617465676f7279-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  R if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`Finite <l46696e697465>`\  if R has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  if R has \ :ref:`Finite <l46696e697465>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R) if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Module <l4d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

