.. index:: GenerateUnivariatePowerSeries

.. _l47656e6572617465556e6976617269617465506f776572536572696573:

GenerateUnivariatePowerSeries(R, FE)
====================================

:viewcode:`genups.spad line 278 <genups.spad#L278>` :editcode:`[edit on github] <genups.spad#L278>`

* R: Join(\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* FE: Join(\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


This package is to restrict interpreter choice of signatures, and force Expression when no types are declared


.. _l47656e6572617465556e6976617269617465506f776572536572696573-6c617572656e74:

.. index::
   pair: GenerateUnivariatePowerSeries; laurent

:spadfun:`laurent`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; laurent

:spadfun:`laurent`\: (\ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  

.. _l47656e6572617465556e6976617269617465506f776572536572696573-70756973657578:

.. index::
   pair: GenerateUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; puiseux

:spadfun:`puiseux`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  

.. _l47656e6572617465556e6976617269617465506f776572536572696573-736572696573:

.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  


.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (\ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  


.. index::
   pair: GenerateUnivariatePowerSeries; series

:spadfun:`series`\: (\ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  

.. _l47656e6572617465556e6976617269617465506f776572536572696573-7461796c6f72:

.. index::
   pair: GenerateUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (FE, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  if FE has \ :ref:`Evalable <l4576616c61626c65>`\  FE
  


.. index::
   pair: GenerateUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (\ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE) -> \ :ref:`Any <l416e79>`\  
  


.. index::
   pair: GenerateUnivariatePowerSeries; taylor

:spadfun:`taylor`\: (\ :ref:`Integer <l496e7465676572>`\  -> FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`UniversalSegment <l556e6976657273616c5365676d656e74>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Any <l416e79>`\  
  


