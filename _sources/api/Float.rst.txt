.. index:: Float

.. _l466c6f6174:

Float
=====

:viewcode:`float.spad line 1 <float.spad#L1>` :editcode:`[edit on github] <float.spad#L1>`


\ :ref:`Float <l466c6f6174>`\  implements arbitrary precision floating point arithmetic. The number of significant digits of each operation can be set to an arbitrary value (the default is 20 decimal digits). The operation \ :ref:`float <l466c6f6174696e67506f696e7453797374656d-666c6f6174>`\ (mantissa, exponent, \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\ ) for integer \ ``mantissa``\ , \ ``exponent``\  specifies the number \ ``mantissa``\  * \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\  ^ \ ``exponent``\  The underlying representation for floats is binary not decimal. The implications of this are described below.   The model adopted is that arithmetic operations are rounded to to nearest unit in the last place, that is, accurate to within 2^(-\ :ref:`bits <l466c6f6174696e67506f696e7453797374656d-62697473>`\ ). Also, the elementary functions and constants are accurate to one unit in the last place. A float is represented as a record of two integers, the mantissa and the exponent. The \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\  of the representation is binary, hence a \ ``Record(m: mantissa, e: exponent)``\  represents the number \ ``m * 2 ^ e``\ . Though it is not assumed that the underlying integers are represented with a binary \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\ , the code will be most efficient when this is the the case (this is \ ``true``\  in most implementations of Lisp). The decision to choose the \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\  to be binary has some unfortunate consequences. First, decimal numbers like 0.3 cannot be represented exactly. Second, there is a further loss of accuracy during conversion to decimal for output. To compensate for this, if \ ``d``\  digits of precision are specified, \ ``1 + ceiling(log2(10^d))``\  bits are used. Two numbers that are displayed identically may therefore be not equal. On the other hand, a significant efficiency loss would be incurred if we chose to use a decimal \ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\  when the underlying integer base is binary.   Algorithms used: For the elementary functions, the general approach is to apply identities so that the taylor series can be used, and, so that it will converge within \ ``O( sqrt n )``\  steps. For example, using the identity \ ``exp(x) = exp(x/2)^2``\ , we can compute \ ``exp(1/3)``\  to \ ``n``\  digits of precision as follows. We have \ ``exp(1/3) = exp(2 ^ (-sqrt s) / 3) ^ (2 ^ sqrt s)``\ . The taylor series will converge in less than sqrt \ ``n``\  steps and the exponentiation requires sqrt \ ``n``\  multiplications for a total of \ ``2 sqrt n``\  multiplications. Assuming integer multiplication costs \ ``O( n^2 )``\  the overall running time is \ ``O( sqrt(n) n^2 )``\ . This approach is the best known approach for precisions up to about 10, 000 digits at which point the methods of Brent which are \ ``O( log(n) n^2 )``\  become competitive. Note also that summing the terms of the taylor series for the elementary functions is done using integer operations. This avoids the overhead of floating point operations and results in efficient code at low precisions. This implementation makes no attempt to reuse storage, relying on the underlying system to do \spadgloss{garbage collection}. \ ``I``\  estimate that the efficiency of this package at low precisions could be improved by a factor of 2 if in-place operations were available.   Running times: in the following, \ ``n``\  is the number of bits of precision \ ``*``\ , \ ``/``\ , \ ``sqrt``\ , \ ``pi``\ , \ ``exp1``\ , \ ``log2``\ , \ ``log10``\ : \ `` O( n^2 )``\  \ ``exp``\ , \ ``log``\ , \ ``sin``\ , \ ``atan``\ : \ `` O( sqrt(n) n^2 )``\  The other elementary functions are coded in terms of the ones above.


.. _l466c6f6174-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466c6f6174-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466c6f6174-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l466c6f6174-2f:

\ :ref:`/ <l4669656c64-2f>`\ \: (%, %) -> % 
  from \ :ref:`Field <l4669656c64>`\ 


\ :ref:`/ <l466c6f6174696e67506f696e7453797374656d-2f>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466c6f6174-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l466c6f6174-5e:

\ :ref:`^ <l456c656d656e7461727946756e6374696f6e43617465676f7279-5e>`\ \: (%, %) -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 


\ :ref:`^ <l5261646963616c43617465676f7279-5e>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 


\ :ref:`^ <l4469766973696f6e52696e67-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466c6f6174-616273:

\ :ref:`abs <l4f72646572656452696e67-616273>`\ \: % -> % 
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174-61636f73:

\ :ref:`acos <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61636f73>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-61636f7368:

\ :ref:`acosh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-61636f7368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-61636f74:

\ :ref:`acot <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61636f74>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-61636f7468:

\ :ref:`acoth <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-61636f7468>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-61637363:

\ :ref:`acsc <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61637363>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6163736368:

\ :ref:`acsch <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6163736368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l466c6f6174-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l466c6f6174-61736563:

\ :ref:`asec <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-61736563>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6173656368:

\ :ref:`asech <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6173656368>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6173696e:

\ :ref:`asin <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-6173696e>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6173696e68:

\ :ref:`asinh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6173696e68>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466c6f6174-6174616e:

\ :ref:`atan <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-6174616e>`\ \: % -> % 
  from \ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 


.. index::
   pair: Float; atan

:spadfun:`atan`\: (%, %) -> % 
  \ ``atan(x, y)``\  computes the arc tangent from \ ``x``\  with phase \ ``y``\ .

.. _l466c6f6174-6174616e68:

\ :ref:`atanh <l4172634879706572626f6c696346756e6374696f6e43617465676f7279-6174616e68>`\ \: % -> % 
  from \ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-62617365:

\ :ref:`base <l466c6f6174696e67506f696e7453797374656d-62617365>`\ \: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-62697473:

\ :ref:`bits <l466c6f6174696e67506f696e7453797374656d-62697473>`\ \: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 


\ :ref:`bits <l466c6f6174696e67506f696e7453797374656d-62697473>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-6365696c696e67:

\ :ref:`ceiling <l5265616c4e756d62657253797374656d-6365696c696e67>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466c6f6174-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466c6f6174-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466c6f6174-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Float <l466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 


.. index::
   pair: Float; convert

:spadfun:`convert`\: \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``convert(x)``\  converts a \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  \ ``x``\  to a \ :ref:`Float <l466c6f6174>`\ .

.. _l466c6f6174-636f73:

\ :ref:`cos <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-636f73>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-636f7368:

\ :ref:`cosh <l4879706572626f6c696346756e6374696f6e43617465676f7279-636f7368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-636f74:

\ :ref:`cot <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-636f74>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-636f7468:

\ :ref:`coth <l4879706572626f6c696346756e6374696f6e43617465676f7279-636f7468>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-637363:

\ :ref:`csc <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-637363>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-63736368:

\ :ref:`csch <l4879706572626f6c696346756e6374696f6e43617465676f7279-63736368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 

.. _l466c6f6174-6465637265617365507265636973696f6e:

\ :ref:`decreasePrecision <l466c6f6174696e67506f696e7453797374656d-6465637265617365507265636973696f6e>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: % -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 

.. _l466c6f6174-646967697473:

\ :ref:`digits <l466c6f6174696e67506f696e7453797374656d-646967697473>`\ \: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 


\ :ref:`digits <l466c6f6174696e67506f696e7453797374656d-646967697473>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-646976696465:

\ :ref:`divide <l4575636c696465616e446f6d61696e-646976696465>`\ \: (%, %) -> Record(quotient: %, remainder: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-6575636c696465616e53697a65:

\ :ref:`euclideanSize <l4575636c696465616e446f6d61696e-6575636c696465616e53697a65>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-65787031:

.. index::
   pair: Float; exp1

:spadfun:`exp1`\: () -> % 
  \ ``exp1()``\  returns exp 1: \ ``2.7182818284...``\ .

.. _l466c6f6174-657870:

\ :ref:`exp <l456c656d656e7461727946756e6374696f6e43617465676f7279-657870>`\ \: % -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6578706f6e656e74:

\ :ref:`exponent <l466c6f6174696e67506f696e7453797374656d-6578706f6e656e74>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-65787072657373496465616c4d656d626572:

\ :ref:`expressIdealMember <l5072696e636970616c496465616c446f6d61696e-65787072657373496465616c4d656d626572>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l466c6f6174-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174-657874656e6465644575636c696465616e:

\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %) -> Record(coef1: %, coef2: %, generator: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %, %) -> Union(Record(coef1: %, coef2: %), failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174-666c6f6174:

\ :ref:`float <l466c6f6174696e67506f696e7453797374656d-666c6f6174>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 


\ :ref:`float <l466c6f6174696e67506f696e7453797374656d-666c6f6174>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-666c6f6f72:

\ :ref:`floor <l5265616c4e756d62657253797374656d-666c6f6f72>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-6672616374696f6e50617274:

\ :ref:`fractionPart <l5265616c4e756d62657253797374656d-6672616374696f6e50617274>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174-6765745f6f75747075745f6d6f6465:

.. index::
   pair: Float; get_output_mode

:spadfun:`get_output_mode`\: () -> Record(mode: \ :ref:`String <l537472696e67>`\ , prec: \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``get_output_mode()``\  returns current output mode and precision

.. _l466c6f6174-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l466c6f6174-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l466c6f6174-696e637265617365507265636973696f6e:

\ :ref:`increasePrecision <l466c6f6174696e67506f696e7453797374656d-696e637265617365507265636973696f6e>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-696e76:

\ :ref:`inv <l4469766973696f6e52696e67-696e76>`\ \: % -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 

.. _l466c6f6174-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466c6f6174-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466c6f6174-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l466c6f6174-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-6c6f673130:

.. index::
   pair: Float; log10

:spadfun:`log10`\: % -> % 
  \ ``log10(x)``\  computes the logarithm for \ ``x``\  to base 10.


.. index::
   pair: Float; log10

:spadfun:`log10`\: () -> % 
  \ ``log10()``\  returns \ ``ln 10``\ : \ ``2.3025809299...``\ .

.. _l466c6f6174-6c6f6732:

.. index::
   pair: Float; log2

:spadfun:`log2`\: % -> % 
  \ ``log2(x)``\  computes the logarithm for \ ``x``\  to base 2.


.. index::
   pair: Float; log2

:spadfun:`log2`\: () -> % 
  \ ``log2()``\  returns \ ``ln 2``\ , i.e. \ ``0.6931471805...``\ .

.. _l466c6f6174-6c6f67:

\ :ref:`log <l456c656d656e7461727946756e6374696f6e43617465676f7279-6c6f67>`\ \: % -> % 
  from \ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-6d616e7469737361:

\ :ref:`mantissa <l466c6f6174696e67506f696e7453797374656d-6d616e7469737361>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


\ :ref:`max <l466c6f6174696e67506f696e7453797374656d-6d6178>`\ \: () -> % if 
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 


\ :ref:`min <l466c6f6174696e67506f696e7453797374656d-6d696e>`\ \: () -> % if 
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-6d756c74694575636c696465616e:

\ :ref:`multiEuclidean <l4575636c696465616e446f6d61696e-6d756c74694575636c696465616e>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-6e656761746976653f:

\ :ref:`negative? <l4f72646572656452696e67-6e656761746976653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174-6e6f726d:

\ :ref:`norm <l5265616c4e756d62657253797374656d-6e6f726d>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-6e6f726d616c697a65:

.. index::
   pair: Float; normalize

:spadfun:`normalize`\: % -> % 
  \ ``normalize(x)``\  normalizes \ ``x``\  at current precision.

.. _l466c6f6174-6e7468526f6f74:

\ :ref:`nthRoot <l5261646963616c43617465676f7279-6e7468526f6f74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l466c6f6174-4f4d7772697465:

\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 


\ :ref:`OMwrite <l4f70656e4d617468-4f4d7772697465>`\ \: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`OpenMath <l4f70656e4d617468>`\ 

.. _l466c6f6174-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174-6f72646572:

\ :ref:`order <l466c6f6174696e67506f696e7453797374656d-6f72646572>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-6f75747075744669786564:

.. index::
   pair: Float; outputFixed

:spadfun:`outputFixed`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``outputFixed()``\  sets the output mode to fixed point notation; the output will contain a decimal point.


.. index::
   pair: Float; outputFixed

:spadfun:`outputFixed`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``outputFixed(n)``\  sets the output mode to fixed point notation, with \ ``n``\  digits displayed after the decimal point.

.. _l466c6f6174-6f7574707574466c6f6174696e67:

.. index::
   pair: Float; outputFloating

:spadfun:`outputFloating`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``outputFloating()``\  sets the output mode to floating (scientific) notation, i.e. \ ``mantissa * 10 exponent``\  is displayed as \ ``0.mantissa E exponent``\ .


.. index::
   pair: Float; outputFloating

:spadfun:`outputFloating`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``outputFloating(n)``\  sets the output mode to floating (scientific) notation with \ ``n``\  significant digits displayed after the decimal point.

.. _l466c6f6174-6f757470757447656e6572616c:

.. index::
   pair: Float; outputGeneral

:spadfun:`outputGeneral`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``outputGeneral()``\  sets the output mode (default mode) to general notation; numbers will be displayed in either fixed or floating (scientific) notation depending on the magnitude.


.. index::
   pair: Float; outputGeneral

:spadfun:`outputGeneral`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``outputGeneral(n)``\  sets the output mode to general notation with \ ``n``\  significant digits displayed.

.. _l466c6f6174-6f757470757453706163696e67:

.. index::
   pair: Float; outputSpacing

:spadfun:`outputSpacing`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``outputSpacing(n)``\  inserts an underscore after \ ``n``\  (default 10) digits on output; outputSpacing(0) means no underscores are inserted. Returns old setting.

.. _l466c6f6174-7061747465726e4d61746368:

\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %) 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 

.. _l466c6f6174-7069:

\ :ref:`pi <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279-7069>`\ \: () -> % 
  from \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l466c6f6174-706f7369746976653f:

\ :ref:`positive? <l4f72646572656452696e67-706f7369746976653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174-707265636973696f6e:

\ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\ \: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 


\ :ref:`precision <l466c6f6174696e67506f696e7453797374656d-707265636973696f6e>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174-7072696e636970616c496465616c:

\ :ref:`principalIdeal <l5072696e636970616c496465616c446f6d61696e-7072696e636970616c496465616c>`\ \: \ :ref:`List <l4c697374>`\  % -> Record(coef: \ :ref:`List <l4c697374>`\  %, generator: %) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l466c6f6174-71756f:

\ :ref:`quo <l4575636c696465616e446f6d61696e-71756f>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-726174696f6e616c417070726f78696d6174696f6e:

.. index::
   pair: Float; rationalApproximation

:spadfun:`rationalApproximation`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``rationalApproximation(f, n)``\  computes a rational approximation \ ``r``\  to \ ``f``\  with relative error \ ``< 10^(-n)``\ .


.. index::
   pair: Float; rationalApproximation

:spadfun:`rationalApproximation`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``rationalApproximation(f, n, b)``\  computes a rational approximation \ ``r``\  to \ ``f``\  with relative error \ ``< b^(-n)``\ , that is \ ``|(r-f)/f| < b^(-n)``\ .

.. _l466c6f6174-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-72656c6572726f72:

.. index::
   pair: Float; relerror

:spadfun:`relerror`\: (%, %) -> % 
  \ ``relerror(x, y)``\  computes the absolute value of \ ``(x - y)/y``\ , when \ ``y \~= 0``\ .

.. _l466c6f6174-72656d:

\ :ref:`rem <l4575636c696465616e446f6d61696e-72656d>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l466c6f6174-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l466c6f6174-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466c6f6174-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-726f756e64:

\ :ref:`round <l5265616c4e756d62657253797374656d-726f756e64>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466c6f6174-736563:

\ :ref:`sec <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-736563>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-73656368:

\ :ref:`sech <l4879706572626f6c696346756e6374696f6e43617465676f7279-73656368>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-7365745f6f75747075745f6d6f6465:

.. index::
   pair: Float; set_output_mode

:spadfun:`set_output_mode`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``set_output_mode(mode, precision)``\  sets output \ ``mode``\  and precision.

.. _l466c6f6174-7368696674:

.. index::
   pair: Float; shift

:spadfun:`shift`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``shift(x, n)``\  adds \ ``n``\  to the exponent of float \ ``x``\ .

.. _l466c6f6174-7369676e:

\ :ref:`sign <l4f72646572656452696e67-7369676e>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 

.. _l466c6f6174-73696e:

\ :ref:`sin <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-73696e>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-73696e68:

\ :ref:`sinh <l4879706572626f6c696346756e6374696f6e43617465676f7279-73696e68>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-73697a654c6573733f:

\ :ref:`sizeLess? <l4575636c696465616e446f6d61696e-73697a654c6573733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l466c6f6174-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l466c6f6174-73717274:

\ :ref:`sqrt <l5261646963616c43617465676f7279-73717274>`\ \: % -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l466c6f6174-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466c6f6174-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l466c6f6174-74616e:

\ :ref:`tan <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279-74616e>`\ \: % -> % 
  from \ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-74616e68:

\ :ref:`tanh <l4879706572626f6c696346756e6374696f6e43617465676f7279-74616e68>`\ \: % -> % 
  from \ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\ 

.. _l466c6f6174-746f537472696e67:

\ :ref:`toString <l466c6f6174696e67506f696e7453797374656d-746f537472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 


\ :ref:`toString <l466c6f6174696e67506f696e7453797374656d-746f537472696e67>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\ 

.. _l466c6f6174-7472756e63617465:

\ :ref:`truncate <l5265616c4e756d62657253797374656d-7472756e63617465>`\ \: % -> % 
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466c6f6174-77686f6c6550617274:

\ :ref:`wholePart <l5265616c4e756d62657253797374656d-77686f6c6550617274>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\ 

.. _l466c6f6174-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Approximate <l417070726f78696d617465>`\  

\ :ref:`arbitraryExponent <l6172626974726172794578706f6e656e74>`\  

\ :ref:`arbitraryPrecision <l617262697472617279507265636973696f6e>`\  

\ :ref:`ArcHyperbolicFunctionCategory <l4172634879706572626f6c696346756e6374696f6e43617465676f7279>`\  

\ :ref:`ArcTrigonometricFunctionCategory <l417263547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalsClosed <l63616e6f6e6963616c73436c6f736564>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\  

\ :ref:`DivisionRing <l4469766973696f6e52696e67>`\  

\ :ref:`ElementaryFunctionCategory <l456c656d656e7461727946756e6374696f6e43617465676f7279>`\  

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  

\ :ref:`Field <l4669656c64>`\  

\ :ref:`FloatingPointSystem <l466c6f6174696e67506f696e7453797374656d>`\  

\ :ref:`GcdDomain <l476364446f6d61696e>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`HyperbolicFunctionCategory <l4879706572626f6c696346756e6374696f6e43617465676f7279>`\  

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`OpenMath <l4f70656e4d617468>`\  

\ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  

\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  

\ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\  

\ :ref:`OrderedCancellationAbelianMonoid <l4f72646572656443616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`OrderedRing <l4f72646572656452696e67>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  

\ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\  

\ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\  

\ :ref:`RealConstant <l5265616c436f6e7374616e74>`\  

\ :ref:`RealNumberSystem <l5265616c4e756d62657253797374656d>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\  

\ :ref:`TrigonometricFunctionCategory <l547269676f6e6f6d657472696346756e6374696f6e43617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

