.. index:: RegularSetDecompositionPackage

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765:

RegularSetDecompositionPackage(R, E, V, P, TS)
==============================================

:viewcode:`regset.spad line 1071 <regset.spad#L1071>` :editcode:`[edit on github] <regset.spad#L1071>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* V: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* P: \ :ref:`RecursivePolynomialCategory <l526563757273697665506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

* TS: \ :ref:`RegularTriangularSetCategory <l526567756c6172547269616e67756c617253657443617465676f7279>`\ (R, E, V, P)


A package providing a new algorithm for solving polynomial systems by means of regular chains. Two ways of solving are proposed: in the sense of Zariski closure (like in Kalkbrener\ ``'s``\  algorithm) or in the sense of the regular zeros (like in Wu, Wang or Lazard methods). This algorithm is valid for nay type of regular set. It does not care about the way a polynomial is added in an regular set, or how two quasi-components are compared (by an inclusion-test), or how the invertibility test is made in the tower of simple extensions associated with a regular set. These operations are realized respectively by the domain \ ``TS``\  and the packages QCMPACK(\ ``R``\ , \ ``E``\ , \ ``V``\ , \ ``P``\ , \ ``TS``\ ) and RSETGCD(\ ``R``\ , \ ``E``\ , \ ``V``\ , \ ``P``\ , \ ``TS``\ ). The same way it does not care about the way univariate polynomial \ ``gcd``\  (with coefficients in the tower of simple extensions associated with a regular set) are computed. The only requirement is that these \ ``gcd``\  need to have invertible initials (normalized or not). WARNING. There is no need for a user to call directly any operation of this package since they can be accessed by the domain \ ``TS``\ . Thus, the operations of this package are not documented. 


.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-616c676562726169634465636f6d706f7365:

.. index::
   pair: RegularSetDecompositionPackage; algebraicDecompose

:spadfun:`algebraicDecompose`\: (P, TS, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-636f6e76657274:

.. index::
   pair: RegularSetDecompositionPackage; convert

:spadfun:`convert`\: Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS) -> \ :ref:`String <l537472696e67>`\  
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-6465636f6d706f7365:

.. index::
   pair: RegularSetDecompositionPackage; decompose

:spadfun:`decompose`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`List <l4c697374>`\  TS 
  


.. index::
   pair: RegularSetDecompositionPackage; decompose

:spadfun:`decompose`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`List <l4c697374>`\  TS 
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-696e7465726e616c4465636f6d706f7365:

.. index::
   pair: RegularSetDecompositionPackage; internalDecompose

:spadfun:`internalDecompose`\: (P, TS) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  


.. index::
   pair: RegularSetDecompositionPackage; internalDecompose

:spadfun:`internalDecompose`\: (P, TS, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  


.. index::
   pair: RegularSetDecompositionPackage; internalDecompose

:spadfun:`internalDecompose`\: (P, TS, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-4b72756c6c4e756d626572:

.. index::
   pair: RegularSetDecompositionPackage; KrullNumber

:spadfun:`KrullNumber`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-6e756d6265724f665661726961626c6573:

.. index::
   pair: RegularSetDecompositionPackage; numberOfVariables

:spadfun:`numberOfVariables`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-7072696e74496e666f:

.. index::
   pair: RegularSetDecompositionPackage; printInfo

:spadfun:`printInfo`\: (\ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS), \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-7472616e7363656e64656e74616c4465636f6d706f7365:

.. index::
   pair: RegularSetDecompositionPackage; transcendentalDecompose

:spadfun:`transcendentalDecompose`\: (P, TS) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  


.. index::
   pair: RegularSetDecompositionPackage; transcendentalDecompose

:spadfun:`transcendentalDecompose`\: (P, TS, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)) 
  

.. _l526567756c61725365744465636f6d706f736974696f6e5061636b616765-7570446174654272616e63686573:

.. index::
   pair: RegularSetDecompositionPackage; upDateBranches

:spadfun:`upDateBranches`\: (\ :ref:`List <l4c697374>`\  P, \ :ref:`List <l4c697374>`\  TS, \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS), Record(done: \ :ref:`List <l4c697374>`\  TS, todo: \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS)), \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`List <l4c697374>`\  P, tower: TS) 
  


