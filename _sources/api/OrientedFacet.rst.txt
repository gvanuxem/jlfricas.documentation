.. index:: OrientedFacet

.. _l4f7269656e7465644661636574:

OrientedFacet
=============

:viewcode:`alg_top.spad line 263 <alg_top.spad#L263>` :editcode:`[edit on github] <alg_top.spad#L263>`


A single vertex, edge, triangle... for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/simplex/ Date Created: March 2016 Basic Operations: Related packages: Related categories: FacetCategory Related Domains: Also See: AMS Classifications:


.. _l4f7269656e7465644661636574-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f7269656e7465644661636574-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f7269656e7465644661636574-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f7269656e7465644661636574-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f7269656e7465644661636574-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f7269656e7465644661636574-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f7269656e7465644661636574-616464566572746578:

.. index::
   pair: OrientedFacet; addVertex

:spadfun:`addVertex`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  used by cone. Adds a vertex to face.

.. _l4f7269656e7465644661636574-616c6c53756273657473:

.. index::
   pair: OrientedFacet; allSubsets

:spadfun:`allSubsets`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``allSubsets of``\  a given facet returned in reverse order subsets returned are not oriented


.. index::
   pair: OrientedFacet; allSubsets

:spadfun:`allSubsets`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``allSubsets of``\  a given length returned in reverse order subsets returned are not oriented

.. _l4f7269656e7465644661636574-626f6f6c576f72645065726d757465:

.. index::
   pair: OrientedFacet; boolWordPermute

:spadfun:`boolWordPermute`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\  
  recursive part of boolWordPermute


.. index::
   pair: OrientedFacet; boolWordPermute

:spadfun:`boolWordPermute`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Boolean <l426f6f6c65616e>`\  
  boolean word permutation find all permutations of numZeros and numOnes used by product to calculate all paths through lattice

.. _l4f7269656e7465644661636574-626f756e64617279:

.. index::
   pair: OrientedFacet; boundary

:spadfun:`boundary`\: % -> \ :ref:`List <l4c697374>`\  % 
  construct the boundary. This is like hollowing out the facet.

.. _l4f7269656e7465644661636574-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4f7269656e7465644661636574-656d7074793f:

\ :ref:`empty? <l466163657443617465676f7279-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4f7269656e7465644661636574-676574496e6465786573:

.. index::
   pair: OrientedFacet; getIndexes

:spadfun:`getIndexes`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  returns indexes in face

.. _l4f7269656e7465644661636574-676574496e64657865735369676e6564:

.. index::
   pair: OrientedFacet; getIndexesSigned

:spadfun:`getIndexesSigned`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  returns indexes in face with sign to give orientation

.. _l4f7269656e7465644661636574-6765744d756c74:

\ :ref:`getMult <l466163657443617465676f7279-6765744d756c74>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4f7269656e7465644661636574-69735375627365744f663f:

.. index::
   pair: OrientedFacet; isSubsetOf?

:spadfun:`isSubsetOf?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  returns \ ``true``\  if face 'a' is contained in face \ ``'b'``\ . \ ``true``\  subset only : returns \ ``false``\  if a=b

.. _l4f7269656e7465644661636574-6a6f696e:

.. index::
   pair: OrientedFacet; join

:spadfun:`join`\: (%, %) -> % 
  used by simplicialJoin. Returns join (union) of 'a' and \ ``'b'``\ . That is: returns a facet containing indexes in both 'a' and \ ``'b'``\ .

.. _l4f7269656e7465644661636574-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4f7269656e7465644661636574-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4f7269656e7465644661636574-6d6178496e646578:

.. index::
   pair: OrientedFacet; maxIndex

:spadfun:`maxIndex`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  returns maximum index

.. _l4f7269656e7465644661636574-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4f7269656e7465644661636574-6d696e496e646578:

.. index::
   pair: OrientedFacet; minIndex

:spadfun:`minIndex`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  returns minimum index

.. _l4f7269656e7465644661636574-6f72646572:

\ :ref:`order <l466163657443617465676f7279-6f72646572>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4f7269656e7465644661636574-6f7269656e7465644661636574:

.. index::
   pair: OrientedFacet; orientedFacet

:spadfun:`orientedFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  Constructor for oriented facet oriented facet is always stored in vertex order orientation is calculated by the number of edges that have to be flipped to put it in order.


.. index::
   pair: OrientedFacet; orientedFacet

:spadfun:`orientedFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`OrientedFacet <l4f7269656e7465644661636574>`\ ) -> % 
  Copy constructor which can change mul

.. _l4f7269656e7465644661636574-6f7269656e7465644661636574496643616e:

.. index::
   pair: OrientedFacet; orientedFacetIfCan

:spadfun:`orientedFacetIfCan`\: \ :ref:`List <l4c697374>`\  % -> Union(%, failed) 
  Constructor for oriented face from its boundary. This is like filling-in the boundary, in that sense it is the inverse of 'boundary'. May fail, for instance in 'implied' loops, where both ends of an edge are the same point. Also similar cases for higher order facets.

.. _l4f7269656e7465644661636574-6f7269656e74656446616365745369676e6564:

.. index::
   pair: OrientedFacet; orientedFacetSigned

:spadfun:`orientedFacetSigned`\: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  Constructor for oriented face which removes duplicates If the face is positive then we expect the sequence to be: + - + - ...

.. _l4f7269656e7465644661636574-6f7269656e7465644661636574556e7369676e6564:

.. index::
   pair: OrientedFacet; orientedFacetUnsigned

:spadfun:`orientedFacetUnsigned`\: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  Constructor for oriented face which removes duplicates and ignores orientation

.. _l4f7269656e7465644661636574-706f736974696f6e:

.. index::
   pair: OrientedFacet; position

:spadfun:`position`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Integer <l496e7465676572>`\  
  return index of \ ``e``\  in \ ``lst``\ . Index will be negative if \ ``e``\  has negative multiplier.

.. _l4f7269656e7465644661636574-70726f64756374:

.. index::
   pair: OrientedFacet; product

:spadfun:`product`\: (%, %) -> \ :ref:`List <l4c697374>`\  \ :ref:`ProductFacet <l50726f647563744661636574>`\  
  This function returns the product of two facets. For more detailed explanation of simplex product code see: \url{http://www.euclideanspace.com/prog/scratchpad/mycode/topology/simplex/product/} Also see Hatcher [9]. page 277 - The simplicial cross product. page 278 - The cohomology cross product. Returns list, each entry is a 'lattice path' from (0, 0) to (\ ``x``\ , \ ``y``\ ) where \ ``x``\  is number of entries in sa and \ ``y``\  is number of entries in \ ``sb``\ .

.. _l4f7269656e7465644661636574-7265666163746f72496e6465786573:

.. index::
   pair: OrientedFacet; refactorIndexes

:spadfun:`refactorIndexes`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  adds \ ``'n'``\  to each index. Used to refactor simplexes so that they don\ ``'t``\  overlap.

.. _l4f7269656e7465644661636574-7265696e646578:

.. index::
   pair: OrientedFacet; reindex

:spadfun:`reindex`\: % -> % 
  re-index so that indexes start at 1 and are then consecutive.

.. _l4f7269656e7465644661636574-73616d65466163653f:

.. index::
   pair: OrientedFacet; sameFace?

:spadfun:`sameFace?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``true``\  if this is the same face although the orientation may be different

.. _l4f7269656e7465644661636574-7365744d756c7421:

.. index::
   pair: OrientedFacet; setMult!

:spadfun:`setMult!`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  sets multiplier of face

.. _l4f7269656e7465644661636574-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4f7269656e7465644661636574-7375627472616374:

.. index::
   pair: OrientedFacet; subtract

:spadfun:`subtract`\: (%, %) -> % 
  used by link. Returns face 'a' minus the vertices in face \ ``'b'``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`FacetCategory <l466163657443617465676f7279>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

