.. index:: OutputForm

.. _l4f7574707574466f726d:

OutputForm
==========

:viewcode:`outform.spad line 190 <outform.spad#L190>` :editcode:`[edit on github] <outform.spad#L190>`


This domain is used to create and manipulate mathematical expressions for output. It is intended to provide an insulating layer between the expression rendering software (e.g. TeX, or Script) and the output coercions in the various domains.


.. _l4f7574707574466f726d-2a:

.. index::
   pair: OutputForm; *

:spadfun:`\*`\: (%, %) -> % 
  \ ``f * g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-2b:

.. index::
   pair: OutputForm; +

:spadfun:`+`\: (%, %) -> % 
  \ ``f + g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-2d:

.. index::
   pair: OutputForm; -

:spadfun:`-`\: % -> % 
  \ ``- f``\  creates the equivalent prefix form.


.. index::
   pair: OutputForm; -

:spadfun:`-`\: (%, %) -> % 
  \ ``f - g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-2f:

.. index::
   pair: OutputForm; /

:spadfun:`/`\: (%, %) -> % 
  \ ``f / g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-3c3d:

.. index::
   pair: OutputForm; <=

:spadfun:`<=`\: (%, %) -> % 
  \ ``f <= g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-3c:

.. index::
   pair: OutputForm; <

:spadfun:`<`\: (%, %) -> % 
  \ ``f < g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-3d:

.. index::
   pair: OutputForm; =

:spadfun:`=`\: (%, %) -> % 
  \ ``f = g``\  creates the equivalent infix form.


\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f7574707574466f726d-3e3d:

.. index::
   pair: OutputForm; >=

:spadfun:`>=`\: (%, %) -> % 
  \ ``f >= g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-3e:

.. index::
   pair: OutputForm; >

:spadfun:`>`\: (%, %) -> % 
  \ ``f > g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-5e:

.. index::
   pair: OutputForm; ^

:spadfun:`^`\: (%, %) -> % 
  \ ``f ^ g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-7e3d:

.. index::
   pair: OutputForm; ~=

:spadfun:`~=`\: (%, %) -> % 
  \ ``f ~= g``\  creates the equivalent infix form.


\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f7574707574466f726d-616e64:

.. index::
   pair: OutputForm; and

:spadfun:`and`\: (%, %) -> % 
  \ ``f and g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-61737369676e:

.. index::
   pair: OutputForm; assign

:spadfun:`assign`\: (%, %) -> % 
  \ ``assign(f, g)``\  creates a form for the assignment \ ``f := g``\ .

.. _l4f7574707574466f726d-62696e6f6d69616c:

.. index::
   pair: OutputForm; binomial

:spadfun:`binomial`\: (%, %) -> % 
  \ ``binomial(n, m)``\  creates a form for the binomial coefficient of \ ``n``\  and \ ``m``\ .

.. _l4f7574707574466f726d-626c616e6b5365706172617465:

.. index::
   pair: OutputForm; blankSeparate

:spadfun:`blankSeparate`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``blankSeparate(l)``\  creates the form separating the elements of \ ``l``\  by blanks.

.. _l4f7574707574466f726d-626f78:

.. index::
   pair: OutputForm; box

:spadfun:`box`\: % -> % 
  \ ``box(f)``\  encloses \ ``f``\  in a box.

.. _l4f7574707574466f726d-6272616365:

.. index::
   pair: OutputForm; brace

:spadfun:`brace`\: % -> % 
  \ ``brace(f)``\  creates the form enclosing \ ``f``\  in braces (curly brackets).


.. index::
   pair: OutputForm; brace

:spadfun:`brace`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``brace(lf)``\  creates the form separating the elements of \ ``lf``\  by commas and encloses the result in curly brackets.

.. _l4f7574707574466f726d-627261636b6574:

.. index::
   pair: OutputForm; bracket

:spadfun:`bracket`\: % -> % 
  \ ``bracket(f)``\  creates the form enclosing \ ``f``\  in square brackets.


.. index::
   pair: OutputForm; bracket

:spadfun:`bracket`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``bracket(lf)``\  creates the form separating the elements of \ ``lf``\  by commas and encloses the result in square brackets.

.. _l4f7574707574466f726d-63656e746572:

.. index::
   pair: OutputForm; center

:spadfun:`center`\: % -> % 
  \ ``center(f)``\  centers form \ ``f``\  in total space.


.. index::
   pair: OutputForm; center

:spadfun:`center`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``center(f, n)``\  centers form \ ``f``\  within space of width \ ``n``\ .

.. _l4f7574707574466f726d-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4f7574707574466f726d-636f6d6d615365706172617465:

.. index::
   pair: OutputForm; commaSeparate

:spadfun:`commaSeparate`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``commaSeparate(l)``\  creates the form separating the elements of \ ``l``\  by commas.

.. _l4f7574707574466f726d-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l4f7574707574466f726d-646966666572656e7469617465:

.. index::
   pair: OutputForm; differentiate

:spadfun:`differentiate`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``differentiate(f, n)``\  creates a form for the \ ``n``\ th derivative of \ ``f``\ , e.g. \ ``f'``\ , \ ``f''``\ , \ ``f'''``\ , \ ``"f``\  super \ ``iv``\ ".

.. _l4f7574707574466f726d-646f74:

.. index::
   pair: OutputForm; dot

:spadfun:`dot`\: % -> % 
  \ ``dot(f)``\  creates the form with one dot overhead.


.. index::
   pair: OutputForm; dot

:spadfun:`dot`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``dot(f, n)``\  creates the form \ ``f``\  with \ ``n``\  dots overhead.

.. _l4f7574707574466f726d-656c74:

.. index::
   pair: OutputForm; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``elt(op, l)``\  creates a form for application of \ ``op``\  to list of arguments \ ``l``\ .

.. _l4f7574707574466f726d-656d707479:

.. index::
   pair: OutputForm; empty

:spadfun:`empty`\: () -> % 
  \ ``empty()``\  creates an empty form.

.. _l4f7574707574466f726d-657871756f:

.. index::
   pair: OutputForm; exquo

:spadfun:`exquo`\: (%, %) -> % 
  \ ``exquo(f, g)``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-68636f6e636174:

.. index::
   pair: OutputForm; hconcat

:spadfun:`hconcat`\: (%, %) -> % 
  \ ``hconcat(f, g)``\  horizontally concatenate forms \ ``f``\  and \ ``g``\ .


.. index::
   pair: OutputForm; hconcat

:spadfun:`hconcat`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``hconcat(u)``\  horizontally concatenates all forms in list \ ``u``\ .

.. _l4f7574707574466f726d-687370616365:

.. index::
   pair: OutputForm; hspace

:spadfun:`hspace`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``hspace(n)``\  creates white space of width \ ``n``\ .

.. _l4f7574707574466f726d-696e6669783f:

.. index::
   pair: OutputForm; infix?

:spadfun:`infix?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``infix?(op)``\  returns \ ``true``\  if \ ``op``\  is an infix operator, and \ ``false``\  otherwise.

.. _l4f7574707574466f726d-696e666978:

.. index::
   pair: OutputForm; infix

:spadfun:`infix`\: (%, %, %) -> % 
  \ ``infix(op, a, b)``\  creates a form which prints as: a \ ``op``\  \ ``b``\ .


.. index::
   pair: OutputForm; infix

:spadfun:`infix`\: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``infix(f, l)``\  creates a form depicting the \ ``n``\ -ary application of infix operation \ ``f``\  to a tuple of arguments \ ``l``\ .

.. _l4f7574707574466f726d-696e74:

.. index::
   pair: OutputForm; int

:spadfun:`int`\: % -> % 
  \ ``int(expr)``\  creates the form prefixing \ ``expr``\  with an integral sign.


.. index::
   pair: OutputForm; int

:spadfun:`int`\: (%, %) -> % 
  \ ``int(expr, lowerlimit)``\  creates the form prefixing \ ``expr``\  by an integral sign with a lowerlimit.


.. index::
   pair: OutputForm; int

:spadfun:`int`\: (%, %, %) -> % 
  \ ``int(expr, lowerlimit, upperlimit)``\  creates the form prefixing \ ``expr``\  by an integral sign with both a \ ``lowerlimit``\  and upperlimit.

.. _l4f7574707574466f726d-6c6162656c:

.. index::
   pair: OutputForm; label

:spadfun:`label`\: (%, %) -> % 
  \ ``label(n, f)``\  gives form \ ``f``\  an equation label \ ``n``\ .

.. _l4f7574707574466f726d-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4f7574707574466f726d-6c656674:

.. index::
   pair: OutputForm; left

:spadfun:`left`\: % -> % 
  \ ``left(f)``\  left-justifies form \ ``f``\  in total space.


.. index::
   pair: OutputForm; left

:spadfun:`left`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``left(f, n)``\  left-justifies form \ ``f``\  within space of width \ ``n``\ .

.. _l4f7574707574466f726d-6d6174726978:

.. index::
   pair: OutputForm; matrix

:spadfun:`matrix`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % -> % 
  \ ``matrix(llf)``\  makes \ ``llf``\  (a list of lists of forms) into a form which displays as a matrix.

.. _l4f7574707574466f726d-6d657373616765:

.. index::
   pair: OutputForm; message

:spadfun:`message`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``message(s)``\  creates an form with no string quotes from string \ ``s``\ .

.. _l4f7574707574466f726d-6d6573736167655072696e74:

.. index::
   pair: OutputForm; messagePrint

:spadfun:`messagePrint`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``messagePrint(s)``\  prints \ ``s``\  without string quotes. Note: \ ``messagePrint(s)``\  is equivalent to \ ``print message(s)``\ .

.. _l4f7574707574466f726d-6e6f74:

.. index::
   pair: OutputForm; not

:spadfun:`not`\: % -> % 
  \ ``not f``\  creates the equivalent prefix form.

.. _l4f7574707574466f726d-6f72:

.. index::
   pair: OutputForm; or

:spadfun:`or`\: (%, %) -> % 
  \ ``f or g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-6f7574707574466f726d:

.. index::
   pair: OutputForm; outputForm

:spadfun:`outputForm`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``outputForm(n)``\  creates a form for an integer.


.. index::
   pair: OutputForm; outputForm

:spadfun:`outputForm`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``outputForm(s)``\  creates a form for a string.


.. index::
   pair: OutputForm; outputForm

:spadfun:`outputForm`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``outputForm(s)``\  creates a form for a symbol.

.. _l4f7574707574466f726d-6f766572:

.. index::
   pair: OutputForm; over

:spadfun:`over`\: (%, %) -> % 
  \ ``over(f, g)``\  creates a form for the vertical fraction of \ ``f``\  over \ ``g``\ .

.. _l4f7574707574466f726d-6f766572626172:

.. index::
   pair: OutputForm; overbar

:spadfun:`overbar`\: % -> % 
  \ ``overbar(f)``\  creates the form \ ``f``\  with an overbar.

.. _l4f7574707574466f726d-6f7665726c6162656c:

.. index::
   pair: OutputForm; overlabel

:spadfun:`overlabel`\: (%, %) -> % 
  \ ``overlabel(x,f)``\  creates the form \ ``f``\  with \ ``"x``\  overbar" over the top.

.. _l4f7574707574466f726d-706172656e:

.. index::
   pair: OutputForm; paren

:spadfun:`paren`\: % -> % 
  \ ``paren(f)``\  creates the form enclosing \ ``f``\  in parentheses.


.. index::
   pair: OutputForm; paren

:spadfun:`paren`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``paren(lf)``\  creates the form separating the elements of \ ``lf``\  by commas and encloses the result in parentheses.

.. _l4f7574707574466f726d-70696c65:

.. index::
   pair: OutputForm; pile

:spadfun:`pile`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``pile(l)``\  creates the form consisting of the elements of \ ``l``\  which displays as a pile, i.e. the elements begin on a new line and are indented right to the same margin.

.. _l4f7574707574466f726d-706f7374666978:

.. index::
   pair: OutputForm; postfix

:spadfun:`postfix`\: (%, %) -> % 
  \ ``postfix(op, a)``\  creates a form which prints as: a \ ``op``\ .

.. _l4f7574707574466f726d-707265666978:

.. index::
   pair: OutputForm; prefix

:spadfun:`prefix`\: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``prefix(f, l)``\  creates a form depicting the \ ``n``\ -ary prefix application of \ ``f``\  to a tuple of arguments given by list \ ``l``\ .

.. _l4f7574707574466f726d-707265737562:

.. index::
   pair: OutputForm; presub

:spadfun:`presub`\: (%, %) -> % 
  \ ``presub(f, n)``\  creates a form for \ ``f``\  presubscripted by \ ``n``\ .

.. _l4f7574707574466f726d-7072657375706572:

.. index::
   pair: OutputForm; presuper

:spadfun:`presuper`\: (%, %) -> % 
  \ ``presuper(f, n)``\  creates a form for \ ``f``\  presuperscripted by \ ``n``\ .

.. _l4f7574707574466f726d-7072696d65:

.. index::
   pair: OutputForm; prime

:spadfun:`prime`\: % -> % 
  \ ``prime(f)``\  creates the form \ ``f``\  followed by a suffix prime (single quote).


.. index::
   pair: OutputForm; prime

:spadfun:`prime`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``prime(f, n)``\  creates the form \ ``f``\  followed by \ ``n``\  primes.

.. _l4f7574707574466f726d-7072696e74:

.. index::
   pair: OutputForm; print

:spadfun:`print`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``print(u)``\  prints the form \ ``u``\ .

.. _l4f7574707574466f726d-70726f64:

.. index::
   pair: OutputForm; prod

:spadfun:`prod`\: % -> % 
  \ ``prod(expr)``\  creates the form prefixing \ ``expr``\  by a capital \ ``pi``\ .


.. index::
   pair: OutputForm; prod

:spadfun:`prod`\: (%, %) -> % 
  \ ``prod(expr, lowerlimit)``\  creates the form prefixing \ ``expr``\  by a capital \ ``pi``\  with a lowerlimit.


.. index::
   pair: OutputForm; prod

:spadfun:`prod`\: (%, %, %) -> % 
  \ ``prod(expr, lowerlimit, upperlimit)``\  creates the form prefixing \ ``expr``\  by a capital \ ``pi``\  with both a \ ``lowerlimit``\  and upperlimit.

.. _l4f7574707574466f726d-71756f:

.. index::
   pair: OutputForm; quo

:spadfun:`quo`\: (%, %) -> % 
  \ ``f quo g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-71756f7465:

.. index::
   pair: OutputForm; quote

:spadfun:`quote`\: % -> % 
  \ ``quote(f)``\  creates the form \ ``f``\  with a prefix quote.

.. _l4f7574707574466f726d-726172726f77:

.. index::
   pair: OutputForm; rarrow

:spadfun:`rarrow`\: (%, %) -> % 
  \ ``rarrow(f, g)``\  creates a form for the mapping \ ``f -> g``\ .

.. _l4f7574707574466f726d-72656d:

.. index::
   pair: OutputForm; rem

:spadfun:`rem`\: (%, %) -> % 
  \ ``f rem g``\  creates the equivalent infix form.

.. _l4f7574707574466f726d-7269676874:

.. index::
   pair: OutputForm; right

:spadfun:`right`\: % -> % 
  \ ``right(f)``\  right-justifies form \ ``f``\  in total space.


.. index::
   pair: OutputForm; right

:spadfun:`right`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``right(f, n)``\  right-justifies form \ ``f``\  within space of width \ ``n``\ .

.. _l4f7574707574466f726d-726f6f74:

.. index::
   pair: OutputForm; root

:spadfun:`root`\: % -> % 
  \ ``root(f)``\  creates a form for the square root of form \ ``f``\ .


.. index::
   pair: OutputForm; root

:spadfun:`root`\: (%, %) -> % 
  \ ``root(f, n)``\  creates a form for the \ ``n``\ th root of form \ ``f``\ .

.. _l4f7574707574466f726d-727370616365:

.. index::
   pair: OutputForm; rspace

:spadfun:`rspace`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``rspace(n, m)``\  creates rectangular white space, \ ``n``\  wide by \ ``m``\  high.

.. _l4f7574707574466f726d-73637269707473:

.. index::
   pair: OutputForm; scripts

:spadfun:`scripts`\: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``scripts(f, l)``\  where \ ``l``\  is \ ``[sub, super, presuper, presub]``\  creates a form for \ ``f``\  with scripts on all 4 corners. If \ ``l``\  has less than 4 elements corresponding scripts are absent.

.. _l4f7574707574466f726d-5345474d454e54:

.. index::
   pair: OutputForm; SEGMENT

:spadfun:`SEGMENT`\: % -> % 
  \ ``SEGMENT(x)``\  creates the prefix form: \ ``x..``\ .


.. index::
   pair: OutputForm; SEGMENT

:spadfun:`SEGMENT`\: (%, %) -> % 
  \ ``SEGMENT(x, y)``\  creates the infix form: \ ``x..y``\ .

.. _l4f7574707574466f726d-73656d69636f6c6f6e5365706172617465:

.. index::
   pair: OutputForm; semicolonSeparate

:spadfun:`semicolonSeparate`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``semicolonSeparate(l)``\  creates the form separating the elements of \ ``l``\  by semicolons.

.. _l4f7574707574466f726d-736c617368:

.. index::
   pair: OutputForm; slash

:spadfun:`slash`\: (%, %) -> % 
  \ ``slash(f, g)``\  creates a form for the horizontal fraction of \ ``f``\  over \ ``g``\ .

.. _l4f7574707574466f726d-737562:

.. index::
   pair: OutputForm; sub

:spadfun:`sub`\: (%, %) -> % 
  \ ``sub(f, n)``\  creates a form for \ ``f``\  subscripted by \ ``n``\ .

.. _l4f7574707574466f726d-73756d:

.. index::
   pair: OutputForm; sum

:spadfun:`sum`\: % -> % 
  \ ``sum(expr)``\  creates the form prefixing \ ``expr``\  by a capital sigma.


.. index::
   pair: OutputForm; sum

:spadfun:`sum`\: (%, %) -> % 
  \ ``sum(expr, lowerlimit)``\  creates the form prefixing \ ``expr``\  by a capital sigma with a lowerlimit.


.. index::
   pair: OutputForm; sum

:spadfun:`sum`\: (%, %, %) -> % 
  \ ``sum(expr, lowerlimit, upperlimit)``\  creates the form prefixing \ ``expr``\  by a capital sigma with both a \ ``lowerlimit``\  and upperlimit.

.. _l4f7574707574466f726d-7375706572:

.. index::
   pair: OutputForm; super

:spadfun:`super`\: (%, %) -> % 
  \ ``super(f, n)``\  creates a form for \ ``f``\  superscripted by \ ``n``\ .

.. _l4f7574707574466f726d-7375706572737562:

.. index::
   pair: OutputForm; supersub

:spadfun:`supersub`\: (%, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``supersub(a, [sub1, super1, sub2, super2, ...])``\  creates a form with each subscript aligned under each superscript.

.. _l4f7574707574466f726d-74656e736f72:

.. index::
   pair: OutputForm; tensor

:spadfun:`tensor`\: (%, %) -> % 
  \ ``tensor(a, b)``\  creates a form for a tensor \ ``b``\ 

.. _l4f7574707574466f726d-76636f6e636174:

.. index::
   pair: OutputForm; vconcat

:spadfun:`vconcat`\: (%, %) -> % 
  \ ``vconcat(f, g)``\  vertically concatenates forms \ ``f``\  and \ ``g``\ .


.. index::
   pair: OutputForm; vconcat

:spadfun:`vconcat`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``vconcat(u)``\  vertically concatenates all forms in list \ ``u``\ .

.. _l4f7574707574466f726d-767370616365:

.. index::
   pair: OutputForm; vspace

:spadfun:`vspace`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``vspace(n)``\  creates white space of height \ ``n``\ .

.. _l4f7574707574466f726d-7a6167:

.. index::
   pair: OutputForm; zag

:spadfun:`zag`\: (%, %) -> % 
  \ ``zag(f, g)``\  creates a form for the continued fraction form for \ ``f``\  over \ ``g``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

