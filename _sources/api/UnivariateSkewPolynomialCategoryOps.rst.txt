.. index:: UnivariateSkewPolynomialCategoryOps

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073:

UnivariateSkewPolynomialCategoryOps(R, C)
=========================================

:viewcode:`ore.spad line 346 <ore.spad#L346>` :editcode:`[edit on github] <ore.spad#L346>`

* R: \ :ref:`Ring <l52696e67>`\ 

* C: \ :ref:`UnivariateSkewPolynomialCategory <l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f7279>`\  R


\ ``UnivariateSkewPolynomialCategoryOps``\  provides products and divisions of univariate skew polynomials.


.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-6170706c79:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; apply

:spadfun:`apply`\: (C, R, R, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R, R -> R) -> R 
  \ ``apply(p, c, m, sigma, delta)``\  returns \ ``p(m)``\  where the action is given by \ ``x m = c sigma(m) + delta(m)``\ .

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-6c656674446976696465:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; leftDivide

:spadfun:`leftDivide`\: (C, C, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R) -> Record(quotient: C, remainder: C) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``leftDivide(a, b, sigma)``\  returns the pair \ ``[q, r]``\  such that \ ``a = b*q + r``\  and the degree of \ ``r``\  is less than the degree of \ ``b``\ . This process is called ``left division\ ``''``\ . \ ``\sigma``\  is the morphism to use.

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-6d6f6e69634c656674446976696465:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; monicLeftDivide

:spadfun:`monicLeftDivide`\: (C, C, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R) -> Record(quotient: C, remainder: C) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``monicLeftDivide(a, b, sigma)``\  returns the pair \ ``[q, r]``\  such that \ ``a = b*q + r``\  and the degree of \ ``r``\  is less than the degree of \ ``b``\ . \ ``b``\  must be monic. This process is called ``left division\ ``''``\ . \ ``\sigma``\  is the morphism to use.

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-6d6f6e69635269676874446976696465:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; monicRightDivide

:spadfun:`monicRightDivide`\: (C, C, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R) -> Record(quotient: C, remainder: C) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``monicRightDivide(a, b, sigma)``\  returns the pair \ ``[q, r]``\  such that \ ``a = q*b + r``\  and the degree of \ ``r``\  is less than the degree of \ ``b``\ . \ ``b``\  must be monic. This process is called ``right division\ ``''``\ . \ ``\sigma``\  is the morphism to use.

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-7269676874446976696465:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; rightDivide

:spadfun:`rightDivide`\: (C, C, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R) -> Record(quotient: C, remainder: C) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``rightDivide(a, b, sigma)``\  returns the pair \ ``[q, r]``\  such that \ ``a = q*b + r``\  and the degree of \ ``r``\  is less than the degree of \ ``b``\ . This process is called ``right division\ ``''``\ . \ ``\sigma``\  is the morphism to use.

.. _l556e6976617269617465536b6577506f6c796e6f6d69616c43617465676f72794f7073-74696d6573:

.. index::
   pair: UnivariateSkewPolynomialCategoryOps; times

:spadfun:`times`\: (C, C, \ :ref:`Automorphism <l4175746f6d6f72706869736d>`\  R, R -> R) -> C 
  \ ``times(p, q, sigma, delta)``\  returns \ ``p * q``\ . \ ``\sigma``\  and \ ``\delta``\  are the maps to use.


