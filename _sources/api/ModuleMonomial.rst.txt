.. index:: ModuleMonomial

.. _l4d6f64756c654d6f6e6f6d69616c:

ModuleMonomial(IS, E, ff)
=========================

:viewcode:`modmonom.spad line 1 <modmonom.spad#L1>` :editcode:`[edit on github] <modmonom.spad#L1>`

* IS: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* E: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* ff: (Record(index: IS, exponent: E), Record(index: IS, exponent: E)) -> \ :ref:`Boolean <l426f6f6c65616e>`\ 


This package \undocumented


.. _l4d6f64756c654d6f6e6f6d69616c-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: ModuleMonomial; coerce

:spadfun:`coerce`\: % -> Record(index: IS, exponent: E) 
  \ ``coerce(x)``\  \undocumented


.. index::
   pair: ModuleMonomial; coerce

:spadfun:`coerce`\: Record(index: IS, exponent: E) -> % 
  \ ``coerce(x)``\  \undocumented

.. _l4d6f64756c654d6f6e6f6d69616c-636f6e737472756374:

.. index::
   pair: ModuleMonomial; construct

:spadfun:`construct`\: (IS, E) -> % 
  \ ``construct(i, e)``\  \undocumented

.. _l4d6f64756c654d6f6e6f6d69616c-6578706f6e656e74:

.. index::
   pair: ModuleMonomial; exponent

:spadfun:`exponent`\: % -> E 
  \ ``exponent(x)``\  \undocumented

.. _l4d6f64756c654d6f6e6f6d69616c-696e646578:

.. index::
   pair: ModuleMonomial; index

:spadfun:`index`\: % -> IS 
  \ ``index(x)``\  \undocumented

.. _l4d6f64756c654d6f6e6f6d69616c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4d6f64756c654d6f6e6f6d69616c-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

