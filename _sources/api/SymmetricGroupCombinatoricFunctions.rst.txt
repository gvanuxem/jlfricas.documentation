.. index:: SymmetricGroupCombinatoricFunctions

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73:

SymmetricGroupCombinatoricFunctions
===================================

:viewcode:`sgcf.spad line 1 <sgcf.spad#L1>` :editcode:`[edit on github] <sgcf.spad#L1>`


SymmetricGroupCombinatoricFunctions contains combinatoric functions concerning symmetric groups and representation theory: list young tableaus, improper partitions, subsets bijection of Coleman.


.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-636f6c656d616e:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; coleman

:spadfun:`coleman`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``coleman(alpha, beta, pi)``\ : there is a bijection from the set of matrices having nonnegative entries and row sums \ *alpha*\ , column sums \ *beta*\  to the set of \ *Salpha - Sbeta*\  double cosets of the symmetric group \ *Sn*\ . (\ *Salpha*\  is the Young subgroup corresponding to the improper partition \ *alpha*\ ). For a representing element \ *\ ``pi``\ *\  of such a double coset, coleman(\ ``alpha``\ , \ ``beta``\ , \ ``pi``\ ) generates the Coleman-matrix corresponding to \ *alpha, beta, \ ``pi``\ *\ . Note: The permutation \ *\ ``pi``\ *\  of \ *{1, 2, ..., n}*\  has to be given in list form. Note: the inverse of this map is \ *inverseColeman*\  (if \ *\ ``pi``\ *\  is the lexicographical smallest permutation in the coset). For details see James/Kerber.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-696e7665727365436f6c656d616e:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; inverseColeman

:spadfun:`inverseColeman`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``inverseColeman(alpha, beta, C)``\ : there is a bijection from the set of matrices having nonnegative entries and row sums \ *alpha*\ , column sums \ *beta*\  to the set of \ *Salpha - Sbeta*\  double cosets of the symmetric group \ *Sn*\ . (\ *Salpha*\  is the Young subgroup corresponding to the improper partition \ *alpha*\ ). For such a matrix \ ``C``\ , inverseColeman(\ ``alpha``\ , \ ``beta``\ , \ ``C``\ ) calculates the lexicographical smallest \ *\ ``pi``\ *\  in the corresponding double coset. Note: the resulting permutation \ *\ ``pi``\ *\  of \ *{1, 2, ..., n}*\  is given in list form. Notes: the inverse of this map is \ *coleman*\ . For details, see James/Kerber.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6c697374596f756e675461626c65617573:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; listYoungTableaus

:spadfun:`listYoungTableaus`\: \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``listYoungTableaus(lambda)``\  where \ *lambda*\  is a proper partition generates the list of all standard tableaus of shape \ *lambda*\  by means of lattice permutations. The numbers of the lattice permutation are interpreted as column labels. Hence the contents of these lattice permutations are the conjugate of \ *lambda*\ . Notes: the functions \ *nextLatticePermutation*\  and \ *makeYoungTableau*\  are used. The entries are from \ *0, ..., n-1*\ .

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6d616b65596f756e675461626c656175:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; makeYoungTableau

:spadfun:`makeYoungTableau`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``makeYoungTableau(lambda, gitter)``\  computes for a given lattice permutation \ *gitter*\  and for an improper partition \ *lambda*\  the corresponding standard tableau of shape \ *lambda*\ . Notes: see \ *listYoungTableaus*\ . The entries are from \ *0, ..., n-1*\ .

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6e657874436f6c656d616e:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; nextColeman

:spadfun:`nextColeman`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``nextColeman(alpha, beta, C)``\  generates the next Coleman matrix of column sums \ *alpha*\  and row sums \ *beta*\  according to the lexicographical order from bottom-to-top. The first Coleman matrix is achieved by \ *C=new(1, 1, 0)*\ . Also, \ *new(1, 1, 0)*\  indicates that \ ``C``\  is the last Coleman matrix.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6e6578744c6174746963655065726d75746174696f6e:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; nextLatticePermutation

:spadfun:`nextLatticePermutation`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``nextLatticePermutation(lambda, lattP, constructNotFirst)``\  generates the lattice permutation according to the proper partition \ *lambda*\  succeeding the lattice permutation \ *lattP*\  in lexicographical order as long as \ *constructNotFirst*\  is \ ``true``\ . If \ *constructNotFirst*\  is \ ``false``\ , the first lattice permutation is returned. The result \ *[]*\  indicates that \ *lattP*\  has no successor.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6e657874506172746974696f6e:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; nextPartition

:spadfun:`nextPartition`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``nextPartition(gamma, part, number)``\  generates the partition of \ *number*\  which follows \ *part*\  according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of \ *gamma*\ . the first partition is achieved by \ *part=[]*\ . Also, \ *[]*\  indicates that \ *part*\  is the last partition.


.. index::
   pair: SymmetricGroupCombinatoricFunctions; nextPartition

:spadfun:`nextPartition`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``nextPartition(gamma, part, number)``\  generates the partition of \ *number*\  which follows \ *part*\  according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of \ *gamma*\ . The first partition is achieved by \ *part=[]*\ . Also, \ *[]*\  indicates that \ *part*\  is the last partition.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6e756d6265724f66496d70726f706572506172746974696f6e73:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; numberOfImproperPartitions

:spadfun:`numberOfImproperPartitions`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``numberOfImproperPartitions(n, m)``\  computes the number of partitions of the nonnegative integer \ ``n``\  in \ ``m``\  nonnegative parts with regarding the order (improper partitions). Example: \ *numberOfImproperPartitions (3, 3)*\  is 10, since \ *[0, 0, 3], [0, 1, 2], [0, 2, 1], [0, 3, 0], [1, 0, 2], [1, 1, 1], [1, 2, 0], [2, 0, 1], [2, 1, 0], [3, 0, 0]*\  are the possibilities. Note: this operation has a recursive implementation.

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-737562536574:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; subSet

:spadfun:`subSet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``subSet(n, m, k)``\  calculates the \ *k*\ \ ``-``\ th \ *m*\ -subset of the set \ *0, 1, ..., (n-1)*\  in the lexicographic order considered as a decreasing map from \ *0, ..., (m-1)*\  into \ *0, ..., (n-1)*\ . See \ ``S``\ .\ ``G``\ . Williamson: Theorem 1.60. Error: if not \ *(0 <= m <= n and 0 < = k < (n choose m))*\ .

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-756e72616e6b496d70726f706572506172746974696f6e7330:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; unrankImproperPartitions0

:spadfun:`unrankImproperPartitions0`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``unrankImproperPartitions0(n, m, k)``\  computes the \ *k*\ \ ``-``\ th improper partition of nonnegative \ ``n``\  in \ ``m``\  nonnegative parts in reverse lexicographical order. Example: \ *[0, 0, 3] < [0, 1, 2] < [0, 2, 1] < [0, 3, 0] < [1, 0, 2] < [1, 1, 1] < [1, 2, 0] < [2, 0, 1] < [2, 1, 0] < [3, 0, 0]*\ . Error: if \ ``k``\  is negative or too big. Note: counting of subtrees is done by \ :ref:`numberOfImproperPartitions <l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-6e756d6265724f66496d70726f706572506172746974696f6e73>`\ .

.. _l53796d6d657472696347726f7570436f6d62696e61746f72696346756e6374696f6e73-756e72616e6b496d70726f706572506172746974696f6e7331:

.. index::
   pair: SymmetricGroupCombinatoricFunctions; unrankImproperPartitions1

:spadfun:`unrankImproperPartitions1`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``unrankImproperPartitions1(n, m, k)``\  computes the \ *k*\ \ ``-``\ th improper partition of nonnegative \ ``n``\  in at most \ ``m``\  nonnegative parts ordered as follows: first, in reverse lexicographically according to their non-zero parts, then according to their positions (i.e. lexicographical order using \ *subSet*\ : \ *[3, 0, 0] < [0, 3, 0] < [0, 0, 3] < [2, 1, 0] < [2, 0, 1] < [0, 2, 1] < [1, 2, 0] < [1, 0, 2] < [0, 1, 2] < [1, 1, 1]*\ ). Note: counting of subtrees is done by \ *numberOfImproperPartitionsInternal*\ .


