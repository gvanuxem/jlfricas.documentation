.. index:: Any

.. _l416e79:

Any
===

:viewcode:`any.spad line 40 <any.spad#L40>` :editcode:`[edit on github] <any.spad#L40>`


\ :ref:`Any <l416e79>`\  implements a type that packages up objects and their types in objects of \ :ref:`Any <l416e79>`\ . Roughly speaking that means that if \ ``s : S``\  then when converted to \ :ref:`Any <l416e79>`\ , the new object will include both the original object and its type. This is a way of converting arbitrary objects into a single type without losing any of the original information. Any object can be converted to one of \ :ref:`Any <l416e79>`\ .


.. _l416e79-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l416e79-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l416e79-616e79:

.. index::
   pair: Any; any

:spadfun:`any`\: (\ :ref:`SExpression <l5345787072657373696f6e>`\ , \ :ref:`None <l4e6f6e65>`\ ) -> % 
  \ ``any(type, object)``\  is a technical function for creating an object of \ :ref:`Any <l416e79>`\ . Argument \ ``type``\  is a \spadgloss{LISP} form for the \ ``type``\  of \ ``object``\ .

.. _l416e79-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l416e79-646f6d:

.. index::
   pair: Any; dom

:spadfun:`dom`\: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  \ ``dom(a)``\  returns a \spadgloss{LISP} form of the type of the original object that was converted to \ :ref:`Any <l416e79>`\ .

.. _l416e79-646f6d61696e4f66:

.. index::
   pair: Any; domainOf

:spadfun:`domainOf`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``domainOf(a)``\  returns a printable form of the type of the original object that was converted to \ :ref:`Any <l416e79>`\ .

.. _l416e79-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l416e79-6f626a:

.. index::
   pair: Any; obj

:spadfun:`obj`\: % -> \ :ref:`None <l4e6f6e65>`\  
  \ ``obj(a)``\  essentially returns the original object that was converted to \ :ref:`Any <l416e79>`\  except that the type is forced to be \ :ref:`None <l4e6f6e65>`\ .

.. _l416e79-6f626a6563744f66:

.. index::
   pair: Any; objectOf

:spadfun:`objectOf`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``objectOf(a)``\  returns a printable form of the original object that was converted to \ :ref:`Any <l416e79>`\ .

.. _l416e79-73686f7754797065496e4f7574707574:

.. index::
   pair: Any; showTypeInOutput

:spadfun:`showTypeInOutput`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``showTypeInOutput(bool)``\  affects the way objects of \ :ref:`Any <l416e79>`\  are displayed. If \ ``bool``\  is \ ``true``\  then the type of the original object that was converted to \ :ref:`Any <l416e79>`\  will be printed. If \ ``bool``\  is \ ``false``\ , it will not be printed.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

