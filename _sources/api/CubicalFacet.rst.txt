.. index:: CubicalFacet

.. _l4375626963616c4661636574:

CubicalFacet
============

:viewcode:`alg_top.spad line 944 <alg_top.spad#L944>` :editcode:`[edit on github] <alg_top.spad#L944>`


A single vertex, edge, square, cube... for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/cubical/ Date Created: April 2016 Basic Operations: Related packages: Related categories: FacetCategory Related Domains: Also See: AMS Classifications:


.. _l4375626963616c4661636574-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4375626963616c4661636574-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4375626963616c4661636574-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4375626963616c4661636574-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4375626963616c4661636574-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4375626963616c4661636574-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4375626963616c4661636574-616c6c53756273657473:

.. index::
   pair: CubicalFacet; allSubsets

:spadfun:`allSubsets`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``allSubsets of``\  a given facet returned in reverse order subsets returned are not oriented


.. index::
   pair: CubicalFacet; allSubsets

:spadfun:`allSubsets`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``allSubsets of``\  a given length returned in reverse order subsets returned are not oriented

.. _l4375626963616c4661636574-626f756e64617279:

.. index::
   pair: CubicalFacet; boundary

:spadfun:`boundary`\: % -> \ :ref:`List <l4c697374>`\  % 
  construct the boundary. This is like hollowing out the facet.

.. _l4375626963616c4661636574-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4375626963616c4661636574-6375626963616c4661636574:

.. index::
   pair: CubicalFacet; cubicalFacet

:spadfun:`cubicalFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`CubicalFacet <l4375626963616c4661636574>`\ ) -> % 
  Copy constructor which can change mul


.. index::
   pair: CubicalFacet; cubicalFacet

:spadfun:`cubicalFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  Constructor for cubical facet


.. index::
   pair: CubicalFacet; cubicalFacet

:spadfun:`cubicalFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  Constructor for cubical facet intervals are always stored in low..high order orientation is calculated by the number of intervals that have to be flipped to put it in order.

.. _l4375626963616c4661636574-656d7074793f:

\ :ref:`empty? <l466163657443617465676f7279-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4375626963616c4661636574-676574496e74657276616c73:

.. index::
   pair: CubicalFacet; getIntervals

:spadfun:`getIntervals`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\  
  returns intervals in face one for each dimension

.. _l4375626963616c4661636574-6765744d756c74:

\ :ref:`getMult <l466163657443617465676f7279-6765744d756c74>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4375626963616c4661636574-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4375626963616c4661636574-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4375626963616c4661636574-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4375626963616c4661636574-6f72646572:

\ :ref:`order <l466163657443617465676f7279-6f72646572>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l4375626963616c4661636574-706f736974696f6e:

.. index::
   pair: CubicalFacet; position

:spadfun:`position`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Integer <l496e7465676572>`\  
  return index of \ ``e``\  in \ ``lst``\ . Index will be negative if \ ``e``\  has negative multiplier.

.. _l4375626963616c4661636574-70726f64756374:

.. index::
   pair: CubicalFacet; product

:spadfun:`product`\: (%, %) -> % 
  This function returns the product of two cubical facets. Unlike the simplex case, the product is a single facet

.. _l4375626963616c4661636574-73616d65466163653f:

.. index::
   pair: CubicalFacet; sameFace?

:spadfun:`sameFace?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``true``\  if this is the same face although the orientation may be different.

.. _l4375626963616c4661636574-7365744d756c74:

.. index::
   pair: CubicalFacet; setMult

:spadfun:`setMult`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  sets multiplier of face

.. _l4375626963616c4661636574-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`FacetCategory <l466163657443617465676f7279>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

