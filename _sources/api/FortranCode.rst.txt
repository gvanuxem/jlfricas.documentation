.. index:: FortranCode

.. _l466f727472616e436f6465:

FortranCode
===========

:viewcode:`fortran.spad line 66 <fortran.spad#L66>` :editcode:`[edit on github] <fortran.spad#L66>`


This domain builds representations of program code segments for use with the FortranProgram domain.


.. _l466f727472616e436f6465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e436f6465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e436f6465-61737369676e:

.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, l, y)``\  creates a representation of the assignment of \ ``y``\  to the \ ``l``\ \ ``'``\ th element of array \ ``x``\  (\ ``l``\  is a list of indices).


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.


.. index::
   pair: FortranCode; assign

:spadfun:`assign`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Vector <l566563746f72>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\ ) -> % 
  \ ``assign(x, y)``\  creates a representation of the FORTRAN expression x=y.

.. _l466f727472616e436f6465-626c6f636b:

.. index::
   pair: FortranCode; block

:spadfun:`block`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``block(l)``\  creates a representation of the statements in \ ``l``\  as a block.

.. _l466f727472616e436f6465-63616c6c:

.. index::
   pair: FortranCode; call

:spadfun:`call`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``call(s)``\  creates a representation of a FORTRAN CALL statement

.. _l466f727472616e436f6465-636f6465:

.. index::
   pair: FortranCode; code

:spadfun:`code`\: % -> Union(nullBranch: null, assignmentBranch: Record(var: \ :ref:`Symbol <l53796d626f6c>`\ , arrayIndex: \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , rand: Record(ints2Floats?: \ :ref:`Boolean <l426f6f6c65616e>`\ , expr: \ :ref:`OutputForm <l4f7574707574466f726d>`\ )), arrayAssignmentBranch: Record(var: \ :ref:`Symbol <l53796d626f6c>`\ , rand: \ :ref:`OutputForm <l4f7574707574466f726d>`\ , ints2Floats?: \ :ref:`Boolean <l426f6f6c65616e>`\ ), conditionalBranch: Record(switch: \ :ref:`Switch <l537769746368>`\ , thenClause: %, elseClause: %), returnBranch: Record(empty?: \ :ref:`Boolean <l426f6f6c65616e>`\ , value: Record(ints2Floats?: \ :ref:`Boolean <l426f6f6c65616e>`\ , expr: \ :ref:`OutputForm <l4f7574707574466f726d>`\ )), blockBranch: \ :ref:`List <l4c697374>`\  %, commentBranch: \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\ , callBranch: \ :ref:`String <l537472696e67>`\ , forBranch: Record(range: \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , span: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , body: %), labelBranch: \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\ , loopBranch: Record(switch: \ :ref:`Switch <l537769746368>`\ , body: %), commonBranch: Record(name: \ :ref:`Symbol <l53796d626f6c>`\ , contents: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ), printBranch: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ ) 
  \ ``code(f)``\  returns the internal representation of the object represented by \ ``f``\ .

.. _l466f727472616e436f6465-636f65726365:

.. index::
   pair: FortranCode; coerce

:spadfun:`coerce`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``coerce(f)``\  returns an object of type OutputForm.

.. _l466f727472616e436f6465-636f6d6d656e74:

.. index::
   pair: FortranCode; comment

:spadfun:`comment`\: \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  -> % 
  \ ``comment(s)``\  creates a representation of the Strings \ ``s``\  as a multi-line FORTRAN comment.


.. index::
   pair: FortranCode; comment

:spadfun:`comment`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``comment(s)``\  creates a representation of the String \ ``s``\  as a single FORTRAN comment.

.. _l466f727472616e436f6465-636f6d6d6f6e:

.. index::
   pair: FortranCode; common

:spadfun:`common`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``common(name, contents)``\  creates a representation a named common block.

.. _l466f727472616e436f6465-636f6e64:

.. index::
   pair: FortranCode; cond

:spadfun:`cond`\: (\ :ref:`Switch <l537769746368>`\ , %) -> % 
  \ ``cond(s, e)``\  creates a representation of the FORTRAN expression IF (\ ``s``\ ) THEN \ ``e``\ .


.. index::
   pair: FortranCode; cond

:spadfun:`cond`\: (\ :ref:`Switch <l537769746368>`\ , %, %) -> % 
  \ ``cond(s, e, f)``\  creates a representation of the FORTRAN expression IF (\ ``s``\ ) THEN \ ``e``\  ELSE \ ``f``\ .

.. _l466f727472616e436f6465-636f6e74696e7565:

.. index::
   pair: FortranCode; continue

:spadfun:`continue`\: \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  -> % 
  \ ``continue(l)``\  creates a representation of a FORTRAN CONTINUE labelled with \ ``l``\ 

.. _l466f727472616e436f6465-666f724c6f6f70:

.. index::
   pair: FortranCode; forLoop

:spadfun:`forLoop`\: (\ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``forLoop(i=1..10, c)``\  creates a representation of a FORTRAN DO loop with \ ``i``\  ranging over the values 1 to 10.


.. index::
   pair: FortranCode; forLoop

:spadfun:`forLoop`\: (\ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``forLoop(i=1..10, n, c)``\  creates a representation of a FORTRAN DO loop with \ ``i``\  ranging over the values 1 to 10 by \ ``n``\ .

.. _l466f727472616e436f6465-676574436f6465:

.. index::
   pair: FortranCode; getCode

:spadfun:`getCode`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`String <l537472696e67>`\  
  \ ``getCode(f)``\  returns a list of strings representing \ ``f``\  in Fortran notation. This is used by the FortranProgram domain.

.. _l466f727472616e436f6465-676f746f4a756d70:

.. index::
   pair: FortranCode; gotoJump

:spadfun:`gotoJump`\: \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  -> % 
  \ ``gotoJump(l)``\  creates a representation of a FORTRAN GOTO statement

.. _l466f727472616e436f6465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466f727472616e436f6465-6f7065726174696f6e:

.. index::
   pair: FortranCode; operation

:spadfun:`operation`\: % -> Union(Null: null, Assignment: assignment, Conditional: conditional, Return: return, Block: block, Comment: comment, Call: call, For: for, While: while, Repeat: repeat, Goto: goto, Continue: continue, ArrayAssignment: arrayAssignment, Save: save, Stop: stop, Common: common, Print: print) 
  \ ``operation(f)``\  returns the name of the operation represented by \ ``f``\ .

.. _l466f727472616e436f6465-7072696e74436f6465:

.. index::
   pair: FortranCode; printCode

:spadfun:`printCode`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``printCode(f)``\  prints out \ ``f``\  in FORTRAN notation.

.. _l466f727472616e436f6465-7072696e7453746174656d656e74:

.. index::
   pair: FortranCode; printStatement

:spadfun:`printStatement`\: \ :ref:`List <l4c697374>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  -> % 
  \ ``printStatement(l)``\  creates a representation of a PRINT statement.

.. _l466f727472616e436f6465-726570656174556e74696c4c6f6f70:

.. index::
   pair: FortranCode; repeatUntilLoop

:spadfun:`repeatUntilLoop`\: (\ :ref:`Switch <l537769746368>`\ , %) -> % 
  \ ``repeatUntilLoop(s, c)``\  creates a repeat ... until loop in FORTRAN.

.. _l466f727472616e436f6465-72657475726e73:

.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: () -> % 
  \ ``returns()``\  creates a representation of a FORTRAN RETURN statement.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineComplex <l4d616368696e65436f6d706c6578>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineFloat <l4d616368696e65466c6f6174>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.


.. index::
   pair: FortranCode; returns

:spadfun:`returns`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`MachineInteger <l4d616368696e65496e7465676572>`\  -> % 
  \ ``returns(e)``\  creates a representation of a FORTRAN RETURN statement with a returned value.

.. _l466f727472616e436f6465-73617665:

.. index::
   pair: FortranCode; save

:spadfun:`save`\: () -> % 
  \ ``save()``\  creates a representation of a SAVE statement.

.. _l466f727472616e436f6465-7365744c6162656c56616c7565:

.. index::
   pair: FortranCode; setLabelValue

:spadfun:`setLabelValue`\: \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  \ ``setLabelValue(i)``\  resets the counter which produces labels to \ ``i``\ 

.. _l466f727472616e436f6465-73746f70:

.. index::
   pair: FortranCode; stop

:spadfun:`stop`\: () -> % 
  \ ``stop()``\  creates a representation of a STOP statement.

.. _l466f727472616e436f6465-7768696c654c6f6f70:

.. index::
   pair: FortranCode; whileLoop

:spadfun:`whileLoop`\: (\ :ref:`Switch <l537769746368>`\ , %) -> % 
  \ ``whileLoop(s, c)``\  creates a while loop in FORTRAN.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

