.. index:: FortranScalarType

.. _l466f727472616e5363616c617254797065:

FortranScalarType
=================

:viewcode:`forttyp.spad line 1 <forttyp.spad#L1>` :editcode:`[edit on github] <forttyp.spad#L1>`


Creates and manipulates objects which correspond to the basic FORTRAN data types: REAL, INTEGER, COMPLEX, LOGICAL and CHARACTER


.. _l466f727472616e5363616c617254797065-3d:

.. index::
   pair: FortranScalarType; =

:spadfun:`=`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``x=y``\  tests for equality

.. _l466f727472616e5363616c617254797065-6368617261637465723f:

.. index::
   pair: FortranScalarType; character?

:spadfun:`character?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``character?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type CHARACTER.

.. _l466f727472616e5363616c617254797065-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: FortranScalarType; coerce

:spadfun:`coerce`\: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  \ ``coerce(x)``\  returns the \ ``s``\ -expression associated with \ ``x``\ 


.. index::
   pair: FortranScalarType; coerce

:spadfun:`coerce`\: % -> \ :ref:`String <l537472696e67>`\  
  \ ``coerce(x)``\  returns the uppercase string associated with \ ``x``\ 


.. index::
   pair: FortranScalarType; coerce

:spadfun:`coerce`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``coerce(x)``\  returns the symbol associated with \ ``x``\ 


.. index::
   pair: FortranScalarType; coerce

:spadfun:`coerce`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``coerce(s)``\  transforms the string \ ``s``\  into an element of FortranScalarType provided \ ``s``\  is one of "real", "double precision", "complex", "logical", "integer", "character", "REAL", "COMPLEX", "LOGICAL", "INTEGER", "CHARACTER", "DOUBLE PRECISION"


.. index::
   pair: FortranScalarType; coerce

:spadfun:`coerce`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``coerce(s)``\  transforms the symbol \ ``s``\  into an element of FortranScalarType provided \ ``s``\  is one of real, complex, double precision, logical, integer, character, REAL, COMPLEX, LOGICAL, INTEGER, CHARACTER, DOUBLE PRECISION

.. _l466f727472616e5363616c617254797065-636f6d706c65783f:

.. index::
   pair: FortranScalarType; complex?

:spadfun:`complex?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``complex?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type COMPLEX.

.. _l466f727472616e5363616c617254797065-646f75626c653f:

.. index::
   pair: FortranScalarType; double?

:spadfun:`double?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``double?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type DOUBLE PRECISION

.. _l466f727472616e5363616c617254797065-646f75626c65436f6d706c65783f:

.. index::
   pair: FortranScalarType; doubleComplex?

:spadfun:`doubleComplex?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``doubleComplex?(t)``\  tests whether \ ``t``\  is equivalent to the (non-standard) FORTRAN type DOUBLE COMPLEX.

.. _l466f727472616e5363616c617254797065-696e74656765723f:

.. index::
   pair: FortranScalarType; integer?

:spadfun:`integer?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``integer?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type INTEGER.

.. _l466f727472616e5363616c617254797065-6c6f676963616c3f:

.. index::
   pair: FortranScalarType; logical?

:spadfun:`logical?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``logical?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type LOGICAL.

.. _l466f727472616e5363616c617254797065-7265616c3f:

.. index::
   pair: FortranScalarType; real?

:spadfun:`real?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``real?(t)``\  tests whether \ ``t``\  is equivalent to the FORTRAN type REAL.


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

