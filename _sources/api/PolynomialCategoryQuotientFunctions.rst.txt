.. index:: PolynomialCategoryQuotientFunctions

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73:

PolynomialCategoryQuotientFunctions(E, V, R, P, F)
==================================================

:viewcode:`rf.spad line 1 <rf.spad#L1>` :editcode:`[edit on github] <rf.spad#L1>`

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* V: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* R: \ :ref:`Ring <l52696e67>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

* F: \ :ref:`Field <l4669656c64>`\  with

    coerce\: P -> %

    denom\: % -> P

    numer\: % -> P


This package transforms multivariate polynomials or fractions into univariate polynomials or fractions, and back.


.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-697345787074:

.. index::
   pair: PolynomialCategoryQuotientFunctions; isExpt

:spadfun:`isExpt`\: F -> Union(Record(var: V, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  \ ``isExpt(p)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\ , "failed" otherwise.

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-6973506c7573:

.. index::
   pair: PolynomialCategoryQuotientFunctions; isPlus

:spadfun:`isPlus`\: F -> Union(\ :ref:`List <l4c697374>`\  F, failed) 
  \ ``isPlus(p)``\  returns [\ ``m1``\ , ..., \ ``mn``\ ] if \ ``p = m1 + ... + mn``\  and \ ``n > 1``\ , "failed" otherwise.

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-6973506f776572:

.. index::
   pair: PolynomialCategoryQuotientFunctions; isPower

:spadfun:`isPower`\: F -> Union(Record(val: F, exponent: \ :ref:`Integer <l496e7465676572>`\ ), failed) 
  \ ``isPower(p)``\  returns \ ``[x, n]``\  if \ ``p = x^n``\  and \ ``n ~= 0``\ , "failed" otherwise.

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-697354696d6573:

.. index::
   pair: PolynomialCategoryQuotientFunctions; isTimes

:spadfun:`isTimes`\: F -> Union(\ :ref:`List <l4c697374>`\  F, failed) 
  \ ``isTimes(p)``\  returns \ ``[a1, ..., an]``\  if \ ``p = a1 ... an``\  and \ ``n > 1``\ , "failed" otherwise.

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-6d61696e5661726961626c65:

.. index::
   pair: PolynomialCategoryQuotientFunctions; mainVariable

:spadfun:`mainVariable`\: F -> Union(V, failed) 
  \ ``mainVariable(f)``\  returns the highest variable appearing in the numerator or the denominator of \ ``f``\ , "failed" if \ ``f``\  has no variables.

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-6d756c746976617269617465:

.. index::
   pair: PolynomialCategoryQuotientFunctions; multivariate

:spadfun:`multivariate`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F, V) -> F 
  \ ``multivariate(f, v)``\  applies both the numerator and denominator of \ ``f``\  to \ ``v``\ .

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-756e6976617269617465:

.. index::
   pair: PolynomialCategoryQuotientFunctions; univariate

:spadfun:`univariate`\: (F, V) -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F 
  \ ``univariate(f, v)``\  returns \ ``f``\  viewed as a univariate rational function in \ ``v``\ .


.. index::
   pair: PolynomialCategoryQuotientFunctions; univariate

:spadfun:`univariate`\: (F, V, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F 
  \ ``univariate(f, x, p)``\  returns \ ``f``\  viewed as a univariate polynomial in \ ``x``\ , using the side-condition \ ``p(x) = 0``\ .

.. _l506f6c796e6f6d69616c43617465676f727951756f7469656e7446756e6374696f6e73-7661726961626c6573:

.. index::
   pair: PolynomialCategoryQuotientFunctions; variables

:spadfun:`variables`\: F -> \ :ref:`List <l4c697374>`\  V 
  \ ``variables(f)``\  returns the list of variables appearing in the numerator or the denominator of \ ``f``\ .


