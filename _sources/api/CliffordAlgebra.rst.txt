.. index:: CliffordAlgebra

.. _l436c6966666f7264416c6765627261:

CliffordAlgebra(n, K, bLin)
===========================

:viewcode:`clifford.spad line 348 <clifford.spad#L348>` :editcode:`[edit on github] <clifford.spad#L348>`

* n: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ 

* K: \ :ref:`Field <l4669656c64>`\ 

* bLin: \ :ref:`SquareMatrix <l5371756172654d6174726978>`\ (n, K)


CliffordAlgebra(\ ``n``\ , \ ``K``\ , bLin) defines a module of dimension \ ``2^n``\  over \ ``K``\ , given a bilinear form bLin on \ ``K^n``\ .   Examples of Clifford Algebras are: gaussians, quaternions, exterior algebras and spin algebras.


.. _l436c6966666f7264416c6765627261-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l436c6966666f7264416c6765627261-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l436c6966666f7264416c6765627261-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, K) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  K


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (K, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  K


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l436c6966666f7264416c6765627261-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l436c6966666f7264416c6765627261-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l436c6966666f7264416c6765627261-2f5c:

.. index::
   pair: CliffordAlgebra; /\

:spadfun:`/\\`\: (%, %) -> % 
  Implement exterior grassmann product operator need to check precedence when used as an infix operator

.. _l436c6966666f7264416c6765627261-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l436c6966666f7264416c6765627261-5c2f:

.. index::
   pair: CliffordAlgebra; \/

:spadfun:`\\/`\: (%, %) -> % 
  Implement regressive inner, meet product operator need to check precedence when used as an infix operator

.. _l436c6966666f7264416c6765627261-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l436c6966666f7264416c6765627261-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l436c6966666f7264416c6765627261-7e:

.. index::
   pair: CliffordAlgebra; ~

:spadfun:`~`\: % -> % 
  reverse, complement, canonical dual basis

.. _l436c6966666f7264416c6765627261-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l436c6966666f7264416c6765627261-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l436c6966666f7264416c6765627261-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l436c6966666f7264416c6765627261-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l436c6966666f7264416c6765627261-636f656666696369656e74:

.. index::
   pair: CliffordAlgebra; coefficient

:spadfun:`coefficient`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> K 
  \ ``coefficient(x, [i1, i2, ..., iN])``\  extracts the coefficient of \ ``e(i1)*e(i2)*...*e(iN)``\  in \ ``x``\ .

.. _l436c6966666f7264416c6765627261-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: K -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  K

.. _l436c6966666f7264416c6765627261-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l436c6966666f7264416c6765627261-636f6e6a:

.. index::
   pair: CliffordAlgebra; conj

:spadfun:`conj`\: % -> % 
  implements Clifford conjugate for a multivector by involution and reverse of each term separately using: grade: 0 1 2 3... multi: 1 \ ``-1``\  \ ``-1``\  1...

.. _l436c6966666f7264416c6765627261-65:

.. index::
   pair: CliffordAlgebra; e

:spadfun:`e`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``e(n)``\  produces phi(e_i) where e_i is \ ``i``\ -th basis vector in \ ``K^n``\  and phi is canonical embedding of \ ``K^n``\  into Clifford algebra.

.. _l436c6966666f7264416c6765627261-6565:

.. index::
   pair: CliffordAlgebra; ee

:spadfun:`ee`\: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  to allow entries like: ee[1, 2]

.. _l436c6966666f7264416c6765627261-6546726f6d42696e6172794d6170:

.. index::
   pair: CliffordAlgebra; eFromBinaryMap

:spadfun:`eFromBinaryMap`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``eFromBinaryMap(n)``\  sets the appropriate Grassmann basis, for example: eFromBinaryMap(0) = 1 (scalar) eFromBinaryMap(1) = \ ``e1``\  eFromBinaryMap(2) = \ ``e2``\  eFromBinaryMap(3) = e1/\e2

.. _l436c6966666f7264416c6765627261-6550736575646f7363616c6172:

.. index::
   pair: CliffordAlgebra; ePseudoscalar

:spadfun:`ePseudoscalar`\: () -> % 
  unit pseudoscalar

.. _l436c6966666f7264416c6765627261-6772616465:

.. index::
   pair: CliffordAlgebra; grade

:spadfun:`grade`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  return the max grade of multivector, for example 1 is grade 0 \ ``e1``\  is grade 1 e1/\e2 is grade 2 and so on

.. _l436c6966666f7264416c6765627261-6772616465496e766f6c7574696f6e:

.. index::
   pair: CliffordAlgebra; gradeInvolution

:spadfun:`gradeInvolution`\: % -> % 
  \ ``x``\  = ((\ ``-1``\ )^grade(\ ``x``\ ))\ ``*x``\ 

.. _l436c6966666f7264416c6765627261-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l436c6966666f7264416c6765627261-6c63:

.. index::
   pair: CliffordAlgebra; lc

:spadfun:`lc`\: (%, %) -> % 
  left contraction inner product

.. _l436c6966666f7264416c6765627261-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l436c6966666f7264416c6765627261-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l436c6966666f7264416c6765627261-6d6f6e6f6d69616c:

.. index::
   pair: CliffordAlgebra; monomial

:spadfun:`monomial`\: (K, \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``monomial(c, [i1, i2, ..., iN])``\  produces the value given by \ ``c*e(i1)*e(i2)*...*e(iN)``\ .

.. _l436c6966666f7264416c6765627261-6d756c7469766563746f72:

.. index::
   pair: CliffordAlgebra; multivector

:spadfun:`multivector`\: \ :ref:`List <l4c697374>`\  K -> % 
  to allow entries like: 1+2*e1+3*e2+4*e1e2 = multivector[1, 2, 3, 4]

.. _l436c6966666f7264416c6765627261-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l436c6966666f7264416c6765627261-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l436c6966666f7264416c6765627261-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  K

.. _l436c6966666f7264416c6765627261-7263:

.. index::
   pair: CliffordAlgebra; rc

:spadfun:`rc`\: (%, %) -> % 
  right contraction inner product

.. _l436c6966666f7264416c6765627261-7265636970:

.. index::
   pair: CliffordAlgebra; recip

:spadfun:`recip`\: % -> Union(%, failed) 
  \ ``recip(x)``\  computes the multiplicative inverse of \ ``x``\  or "failed" if \ ``x``\  is not invertible.

.. _l436c6966666f7264416c6765627261-72657665727365:

.. index::
   pair: CliffordAlgebra; reverse

:spadfun:`reverse`\: % -> % 
  implements reverse for a single term by using: grade: 0 1 2 3... multi: 1 1 \ ``-1``\  \ ``-1``\ ...

.. _l436c6966666f7264416c6765627261-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l436c6966666f7264416c6765627261-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l436c6966666f7264416c6765627261-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l436c6966666f7264416c6765627261-7365744d6f6465:

.. index::
   pair: CliffordAlgebra; setMode

:spadfun:`setMode`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``setMode(s, b)``\  allows override of parameters such as orthogonal used for debugging

.. _l436c6966666f7264416c6765627261-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l436c6966666f7264416c6765627261-746f5461626c65:

.. index::
   pair: CliffordAlgebra; toTable

:spadfun:`toTable`\: (% -> %) -> \ :ref:`Matrix <l4d6174726978>`\  % 
  displays table of unary function such as inverse, reverse, complement, or dual basis could have returned type 'List List \%' but matrix displays better


.. index::
   pair: CliffordAlgebra; toTable

:spadfun:`toTable`\: ((%, %) -> %) -> \ :ref:`Matrix <l4d6174726978>`\  % 
  displays multiplication table for binary operation which is represented as a function with two parameters. row number represents first operand in binary order column number represents second operand in binary order could have returned type 'List List \%' but matrix displays better

.. _l436c6966666f7264416c6765627261-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  K 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (K, K) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  K 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  K 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  K 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  K 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

