.. index:: SymbolTable

.. _l53796d626f6c5461626c65:

SymbolTable
===========

:viewcode:`forttyp.spad line 250 <forttyp.spad#L250>` :editcode:`[edit on github] <forttyp.spad#L250>`


Create and manipulate a symbol table for generated FORTRAN code


.. _l53796d626f6c5461626c65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: SymbolTable; coerce

:spadfun:`coerce`\: % -> \ :ref:`Table <l5461626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ ) 
  \ ``coerce(x)``\  returns a table view of \ ``x``\ 

.. _l53796d626f6c5461626c65-6465636c61726521:

.. index::
   pair: SymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ , %) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(l, t, tab)``\  creates new entries in tab, declaring each of \ ``l``\  to be of type \ ``t``\ 


.. index::
   pair: SymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ , %) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(u, t, tab)``\  creates a new entry in tab, declaring \ ``u``\  to be of type \ ``t``\ 

.. _l53796d626f6c5461626c65-656d707479:

.. index::
   pair: SymbolTable; empty

:spadfun:`empty`\: () -> % 
  \ ``empty()``\  returns a new, empty symbol table

.. _l53796d626f6c5461626c65-65787465726e616c4c697374:

.. index::
   pair: SymbolTable; externalList

:spadfun:`externalList`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``externalList(tab)``\  returns a list of all the external symbols in \ ``tab``\ 

.. _l53796d626f6c5461626c65-666f727472616e547970654f66:

.. index::
   pair: SymbolTable; fortranTypeOf

:spadfun:`fortranTypeOf`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``fortranTypeOf(u, tab)``\  returns the type of \ ``u``\  in tab

.. _l53796d626f6c5461626c65-6e6577547970654c69737473:

.. index::
   pair: SymbolTable; newTypeLists

:spadfun:`newTypeLists`\: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  \ ``newTypeLists(x)``\  \undocumented

.. _l53796d626f6c5461626c65-706172616d65746572734f66:

.. index::
   pair: SymbolTable; parametersOf

:spadfun:`parametersOf`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``parametersOf(tab)``\  returns a list of all the symbols declared in \ ``tab``\ 

.. _l53796d626f6c5461626c65-7072696e745479706573:

.. index::
   pair: SymbolTable; printTypes

:spadfun:`printTypes`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``printTypes(tab)``\  produces FORTRAN type declarations from \ ``tab``\ , on the current FORTRAN output stream

.. _l53796d626f6c5461626c65-73796d626f6c5461626c65:

.. index::
   pair: SymbolTable; symbolTable

:spadfun:`symbolTable`\: \ :ref:`List <l4c697374>`\  Record(key: \ :ref:`Symbol <l53796d626f6c>`\ , entry: \ :ref:`FortranType <l466f727472616e54797065>`\ ) -> % 
  \ ``symbolTable(l)``\  creates a symbol table from the elements of \ ``l``\ .

.. _l53796d626f6c5461626c65-747970654c697374:

.. index::
   pair: SymbolTable; typeList

:spadfun:`typeList`\: (\ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , %) -> \ :ref:`List <l4c697374>`\  Union(name: \ :ref:`Symbol <l53796d626f6c>`\ , bounds: \ :ref:`List <l4c697374>`\  Union(S: \ :ref:`Symbol <l53796d626f6c>`\ , P: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ )) 
  \ ``typeList(t, tab)``\  returns a list of all the objects of type \ ``t``\  in tab

.. _l53796d626f6c5461626c65-747970654c69737473:

.. index::
   pair: SymbolTable; typeLists

:spadfun:`typeLists`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  Union(name: \ :ref:`Symbol <l53796d626f6c>`\ , bounds: \ :ref:`List <l4c697374>`\  Union(S: \ :ref:`Symbol <l53796d626f6c>`\ , P: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ )) 
  \ ``typeLists(tab)``\  returns a list of lists of types of objects in \ ``tab``\ 


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

