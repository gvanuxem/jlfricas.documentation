.. index:: ElementaryFunction

.. _l456c656d656e7461727946756e6374696f6e:

ElementaryFunction(R, F)
========================

:viewcode:`elemntry.spad line 1 <elemntry.spad#L1>` :editcode:`[edit on github] <elemntry.spad#L1>`

* R: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ )

* F: Join(\ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R, \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ )


Provides elementary functions over an integral domain.


.. _l456c656d656e7461727946756e6374696f6e-61636f73:

.. index::
   pair: ElementaryFunction; acos

:spadfun:`acos`\: F -> F 
  \ ``acos(x)``\  applies the inverse cosine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-61636f7368:

.. index::
   pair: ElementaryFunction; acosh

:spadfun:`acosh`\: F -> F 
  \ ``acosh(x)``\  applies the inverse hyperbolic cosine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-61636f74:

.. index::
   pair: ElementaryFunction; acot

:spadfun:`acot`\: F -> F 
  \ ``acot(x)``\  applies the inverse cotangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-61636f7468:

.. index::
   pair: ElementaryFunction; acoth

:spadfun:`acoth`\: F -> F 
  \ ``acoth(x)``\  applies the inverse hyperbolic cotangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-61637363:

.. index::
   pair: ElementaryFunction; acsc

:spadfun:`acsc`\: F -> F 
  \ ``acsc(x)``\  applies the inverse cosecant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6163736368:

.. index::
   pair: ElementaryFunction; acsch

:spadfun:`acsch`\: F -> F 
  \ ``acsch(x)``\  applies the inverse hyperbolic cosecant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-61736563:

.. index::
   pair: ElementaryFunction; asec

:spadfun:`asec`\: F -> F 
  \ ``asec(x)``\  applies the inverse secant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6173656368:

.. index::
   pair: ElementaryFunction; asech

:spadfun:`asech`\: F -> F 
  \ ``asech(x)``\  applies the inverse hyperbolic secant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6173696e:

.. index::
   pair: ElementaryFunction; asin

:spadfun:`asin`\: F -> F 
  \ ``asin(x)``\  applies the inverse sine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6173696e68:

.. index::
   pair: ElementaryFunction; asinh

:spadfun:`asinh`\: F -> F 
  \ ``asinh(x)``\  applies the inverse hyperbolic sine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6174616e:

.. index::
   pair: ElementaryFunction; atan

:spadfun:`atan`\: F -> F 
  \ ``atan(x)``\  applies the inverse tangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6174616e68:

.. index::
   pair: ElementaryFunction; atanh

:spadfun:`atanh`\: F -> F 
  \ ``atanh(x)``\  applies the inverse hyperbolic tangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-62656c6f6e673f:

.. index::
   pair: ElementaryFunction; belong?

:spadfun:`belong?`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``belong?(p)``\  returns \ ``true``\  if operator \ ``p``\  is elementary

.. _l456c656d656e7461727946756e6374696f6e-636f73:

.. index::
   pair: ElementaryFunction; cos

:spadfun:`cos`\: F -> F 
  \ ``cos(x)``\  applies the cosine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-636f7368:

.. index::
   pair: ElementaryFunction; cosh

:spadfun:`cosh`\: F -> F 
  \ ``cosh(x)``\  applies the hyperbolic cosine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-636f74:

.. index::
   pair: ElementaryFunction; cot

:spadfun:`cot`\: F -> F 
  \ ``cot(x)``\  applies the cotangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-636f7468:

.. index::
   pair: ElementaryFunction; coth

:spadfun:`coth`\: F -> F 
  \ ``coth(x)``\  applies the hyperbolic cotangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-637363:

.. index::
   pair: ElementaryFunction; csc

:spadfun:`csc`\: F -> F 
  \ ``csc(x)``\  applies the cosecant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-63736368:

.. index::
   pair: ElementaryFunction; csch

:spadfun:`csch`\: F -> F 
  \ ``csch(x)``\  applies the hyperbolic cosecant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-657870:

.. index::
   pair: ElementaryFunction; exp

:spadfun:`exp`\: F -> F 
  \ ``exp(x)``\  applies the exponential operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-696961636f73:

.. index::
   pair: ElementaryFunction; iiacos

:spadfun:`iiacos`\: F -> F 
  \ ``iiacos(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696961636f7368:

.. index::
   pair: ElementaryFunction; iiacosh

:spadfun:`iiacosh`\: F -> F 
  \ ``iiacosh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696961636f74:

.. index::
   pair: ElementaryFunction; iiacot

:spadfun:`iiacot`\: F -> F 
  \ ``iiacot(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696961636f7468:

.. index::
   pair: ElementaryFunction; iiacoth

:spadfun:`iiacoth`\: F -> F 
  \ ``iiacoth(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696961637363:

.. index::
   pair: ElementaryFunction; iiacsc

:spadfun:`iiacsc`\: F -> F 
  \ ``iiacsc(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696163736368:

.. index::
   pair: ElementaryFunction; iiacsch

:spadfun:`iiacsch`\: F -> F 
  \ ``iiacsch(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696961736563:

.. index::
   pair: ElementaryFunction; iiasec

:spadfun:`iiasec`\: F -> F 
  \ ``iiasec(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696173656368:

.. index::
   pair: ElementaryFunction; iiasech

:spadfun:`iiasech`\: F -> F 
  \ ``iiasech(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696173696e:

.. index::
   pair: ElementaryFunction; iiasin

:spadfun:`iiasin`\: F -> F 
  \ ``iiasin(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696173696e68:

.. index::
   pair: ElementaryFunction; iiasinh

:spadfun:`iiasinh`\: F -> F 
  \ ``iiasinh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696174616e:

.. index::
   pair: ElementaryFunction; iiatan

:spadfun:`iiatan`\: F -> F 
  \ ``iiatan(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696174616e68:

.. index::
   pair: ElementaryFunction; iiatanh

:spadfun:`iiatanh`\: F -> F 
  \ ``iiatanh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969636f73:

.. index::
   pair: ElementaryFunction; iicos

:spadfun:`iicos`\: F -> F 
  \ ``iicos(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969636f7368:

.. index::
   pair: ElementaryFunction; iicosh

:spadfun:`iicosh`\: F -> F 
  \ ``iicosh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969636f74:

.. index::
   pair: ElementaryFunction; iicot

:spadfun:`iicot`\: F -> F 
  \ ``iicot(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969636f7468:

.. index::
   pair: ElementaryFunction; iicoth

:spadfun:`iicoth`\: F -> F 
  \ ``iicoth(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969637363:

.. index::
   pair: ElementaryFunction; iicsc

:spadfun:`iicsc`\: F -> F 
  \ ``iicsc(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696963736368:

.. index::
   pair: ElementaryFunction; iicsch

:spadfun:`iicsch`\: F -> F 
  \ ``iicsch(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969657870:

.. index::
   pair: ElementaryFunction; iiexp

:spadfun:`iiexp`\: F -> F 
  \ ``iiexp(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69696c6f67:

.. index::
   pair: ElementaryFunction; iilog

:spadfun:`iilog`\: F -> F 
  \ ``iilog(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6969736563:

.. index::
   pair: ElementaryFunction; iisec

:spadfun:`iisec`\: F -> F 
  \ ``iisec(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696973656368:

.. index::
   pair: ElementaryFunction; iisech

:spadfun:`iisech`\: F -> F 
  \ ``iisech(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696973696e:

.. index::
   pair: ElementaryFunction; iisin

:spadfun:`iisin`\: F -> F 
  \ ``iisin(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696973696e68:

.. index::
   pair: ElementaryFunction; iisinh

:spadfun:`iisinh`\: F -> F 
  \ ``iisinh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69697371727432:

.. index::
   pair: ElementaryFunction; iisqrt2

:spadfun:`iisqrt2`\: () -> F 
  \ ``iisqrt2()``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-69697371727433:

.. index::
   pair: ElementaryFunction; iisqrt3

:spadfun:`iisqrt3`\: () -> F 
  \ ``iisqrt3()``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696974616e:

.. index::
   pair: ElementaryFunction; iitan

:spadfun:`iitan`\: F -> F 
  \ ``iitan(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-696974616e68:

.. index::
   pair: ElementaryFunction; iitanh

:spadfun:`iitanh`\: F -> F 
  \ ``iitanh(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6c6f63616c5265616c3f:

.. index::
   pair: ElementaryFunction; localReal?

:spadfun:`localReal?`\: F -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``localReal?(x)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-6c6f67:

.. index::
   pair: ElementaryFunction; log

:spadfun:`log`\: F -> F 
  \ ``log(x)``\  applies the logarithm operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-6f70657261746f72:

.. index::
   pair: ElementaryFunction; operator

:spadfun:`operator`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operator(p)``\  returns an elementary operator with the same symbol as \ ``p``\ 

.. _l456c656d656e7461727946756e6374696f6e-7069:

.. index::
   pair: ElementaryFunction; pi

:spadfun:`pi`\: () -> F 
  \ ``pi()``\  returns the \ ``pi``\  operator

.. _l456c656d656e7461727946756e6374696f6e-736563:

.. index::
   pair: ElementaryFunction; sec

:spadfun:`sec`\: F -> F 
  \ ``sec(x)``\  applies the secant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-73656368:

.. index::
   pair: ElementaryFunction; sech

:spadfun:`sech`\: F -> F 
  \ ``sech(x)``\  applies the hyperbolic secant operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-73696e:

.. index::
   pair: ElementaryFunction; sin

:spadfun:`sin`\: F -> F 
  \ ``sin(x)``\  applies the sine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-73696e68:

.. index::
   pair: ElementaryFunction; sinh

:spadfun:`sinh`\: F -> F 
  \ ``sinh(x)``\  applies the hyperbolic sine operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-7370656369616c5472696773:

.. index::
   pair: ElementaryFunction; specialTrigs

:spadfun:`specialTrigs`\: (F, \ :ref:`List <l4c697374>`\  Record(func: F, pole: \ :ref:`Boolean <l426f6f6c65616e>`\ )) -> Union(F, failed) 
  \ ``specialTrigs(x, l)``\  should be local but conditional

.. _l456c656d656e7461727946756e6374696f6e-74616e:

.. index::
   pair: ElementaryFunction; tan

:spadfun:`tan`\: F -> F 
  \ ``tan(x)``\  applies the tangent operator to \ ``x``\ 

.. _l456c656d656e7461727946756e6374696f6e-74616e68:

.. index::
   pair: ElementaryFunction; tanh

:spadfun:`tanh`\: F -> F 
  \ ``tanh(x)``\  applies the hyperbolic tangent operator to \ ``x``\ 


