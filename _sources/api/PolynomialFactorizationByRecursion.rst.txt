.. index:: PolynomialFactorizationByRecursion

.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e:

PolynomialFactorizationByRecursion(R, E, VarSet, S)
===================================================

:viewcode:`pfbr.spad line 1 <pfbr.spad#L1>` :editcode:`[edit on github] <pfbr.spad#L1>`

* R: \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* S: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, VarSet)


PolynomialFactorizationByRecursion(\ ``R``\ , \ ``E``\ , \ ``VarSet``\ , \ ``S``\ ) is used for factorization of sparse univariate polynomials over a domain \ ``S``\  of multivariate polynomials over \ ``R``\ .


.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e-626976617269617465534c50454252:

.. index::
   pair: PolynomialFactorizationByRecursion; bivariateSLPEBR

:spadfun:`bivariateSLPEBR`\: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S, VarSet) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S, failed) 
  \ ``bivariateSLPEBR(lp, p, v)``\  implements the bivariate case of \ :spadfun:`solveLinearPolynomialEquationByRecursion`\ ; its implementation depends on \ ``R``\ 

.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e-666163746f724279526563757273696f6e:

.. index::
   pair: PolynomialFactorizationByRecursion; factorByRecursion

:spadfun:`factorByRecursion`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S 
  \ ``factorByRecursion(p)``\  factors polynomial \ ``p``\ . This function performs the recursion step for factorPolynomial, as defined in \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  category (see \ :spadfun:`factorPolynomial`\ )

.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e-666163746f72537175617265467265654279526563757273696f6e:

.. index::
   pair: PolynomialFactorizationByRecursion; factorSquareFreeByRecursion

:spadfun:`factorSquareFreeByRecursion`\: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S 
  \ ``factorSquareFreeByRecursion(p)``\  returns the square free factorization of \ ``p``\ . This functions performs the recursion step for factorSquareFreePolynomial, as defined in \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  category (see \ :spadfun:`factorSquareFreePolynomial`\ ).

.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e-72616e646f6d52:

.. index::
   pair: PolynomialFactorizationByRecursion; randomR

:spadfun:`randomR`\: \ :ref:`Integer <l496e7465676572>`\  -> R 
  \ ``randomR produces``\  a random element of \ ``R``\ 

.. _l506f6c796e6f6d69616c466163746f72697a6174696f6e4279526563757273696f6e-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e4279526563757273696f6e:

.. index::
   pair: PolynomialFactorizationByRecursion; solveLinearPolynomialEquationByRecursion

:spadfun:`solveLinearPolynomialEquationByRecursion`\: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S, failed) 
  \ ``solveLinearPolynomialEquationByRecursion([p1, ..., pn], p)``\  returns the list of polynomials \ ``[q1, ..., qn]``\  such that \ ``sum qi/pi = p / prod pi``\ , a recursion step for solveLinearPolynomialEquation as defined in \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  category (see \ :spadfun:`solveLinearPolynomialEquation`\ ). If no such list of \ ``qi``\  exists, then "failed" is returned.


