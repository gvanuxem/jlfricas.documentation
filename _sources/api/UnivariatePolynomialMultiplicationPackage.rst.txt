.. index:: UnivariatePolynomialMultiplicationPackage

.. _l556e6976617269617465506f6c796e6f6d69616c4d756c7469706c69636174696f6e5061636b616765:

UnivariatePolynomialMultiplicationPackage(R, U)
===============================================

:viewcode:`poly.spad line 1314 <poly.spad#L1314>` :editcode:`[edit on github] <poly.spad#L1314>`

* R: \ :ref:`Ring <l52696e67>`\ 

* U: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  R


This package implements Karatsuba\ ``'s``\  trick for multiplying (large) univariate polynomials. It could be improved with a version doing the work on place and also with a special case for squares. We've done this in Basicmath, but we believe that this out of the scope of FriCAS.


.. _l556e6976617269617465506f6c796e6f6d69616c4d756c7469706c69636174696f6e5061636b616765-6b6172617473756261:

.. index::
   pair: UnivariatePolynomialMultiplicationPackage; karatsuba

:spadfun:`karatsuba`\: (U, U, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> U 
  \ ``karatsuba(a, b, l, k)``\  returns \ ``a*b``\  by applying Karatsuba\ ``'s``\  trick provided that both \ ``a``\  and \ ``b``\  have at least \ ``l``\  terms and \ ``k > 0``\  holds and by calling \ ``noKaratsuba``\  otherwise. The other multiplications are performed by recursive calls with the same third argument and \ ``k-1``\  as fourth argument.

.. _l556e6976617269617465506f6c796e6f6d69616c4d756c7469706c69636174696f6e5061636b616765-6b61726174737562614f6e6365:

.. index::
   pair: UnivariatePolynomialMultiplicationPackage; karatsubaOnce

:spadfun:`karatsubaOnce`\: (U, U) -> U 
  \ ``karatsuba(a, b)``\  returns \ ``a*b``\  by applying Karatsuba\ ``'s``\  trick once. The other multiplications are performed by calling \ ``*``\  from \ ``U``\ .

.. _l556e6976617269617465506f6c796e6f6d69616c4d756c7469706c69636174696f6e5061636b616765-6e6f4b6172617473756261:

.. index::
   pair: UnivariatePolynomialMultiplicationPackage; noKaratsuba

:spadfun:`noKaratsuba`\: (U, U) -> U 
  \ ``noKaratsuba(a, b)``\  returns \ ``a*b``\  without using Karatsuba\ ``'s``\  trick at all.


