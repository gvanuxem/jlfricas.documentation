.. index:: FiniteRankNonAssociativeAlgebra

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261:

FiniteRankNonAssociativeAlgebra R
=================================

:viewcode:`naalgc.spad line 224 <naalgc.spad#L224>` :editcode:`[edit on github] <naalgc.spad#L224>`

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


A FiniteRankNonAssociativeAlgebra is a non associative algebra over a commutative ring \ ``R``\  which is a free \ ``R``\ -module of finite rank.


.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-5e:

\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-616c7465726e61746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; alternative?

:spadfun:`alternative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``alternative?()``\  tests if \ ``2*associator(a, a, b) = 0 = 2*associator(a, b, b)``\  for all \ ``a``\ , \ ``b``\  in the algebra. Note: we only can test this; in general we don\ ``'t``\  know whether \ ``2*a=0``\  implies \ ``a=0``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-616e74694173736f636961746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; antiAssociative?

:spadfun:`antiAssociative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``antiAssociative?()``\  tests if multiplication in algebra is anti-associative, i.e. \ ``(a*b)*c + a*(b*c) = 0``\  for all \ ``a``\ , \ ``b``\ , \ ``c``\  in the algebra.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-616e7469436f6d6d757461746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; antiCommutative?

:spadfun:`antiCommutative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``antiCommutative?()``\  tests if \ ``a*a = 0``\  for all \ ``a``\  in the algebra. Note: this implies \ ``a*b + b*a = 0``\  for all \ ``a``\  and \ ``b``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6173736f636961746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; associative?

:spadfun:`associative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``associative?()``\  tests if multiplication in algebra is associative.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6173736f636961746f72446570656e64656e6365:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; associatorDependence

:spadfun:`associatorDependence`\: () -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``associatorDependence()``\  looks for the associator identities, i.e. finds a basis of the solutions of the linear combinations of the six permutations of \ ``associator(a, b, c)``\  which yield 0, for all \ ``a``\ , \ ``b``\ , \ ``c``\  in the algebra. The order of the permutations is \ ``123 231 312 132 321 213``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-636f6d6d757461746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; commutative?

:spadfun:`commutative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``commutative?()``\  tests if multiplication in the algebra is commutative.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-636f6e646974696f6e73466f724964656d706f74656e7473:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; conditionsForIdempotents

:spadfun:`conditionsForIdempotents`\: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R 
  \ ``conditionsForIdempotents([v1, ..., vn])``\  determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \ ``R``\ -module basis \ ``v1``\ , ..., \ ``vn``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-636f6f7264696e61746573:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; coordinates

:spadfun:`coordinates`\: (%, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Vector <l566563746f72>`\  R 
  \ ``coordinates(a, [v1, ..., vn])``\  returns the coordinates of \ ``a``\  with respect to the \ ``R``\ -module basis \ ``v1``\ , ..., \ ``vn``\ .


.. index::
   pair: FiniteRankNonAssociativeAlgebra; coordinates

:spadfun:`coordinates`\: (\ :ref:`Vector <l566563746f72>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``coordinates([a1, ..., am], [v1, ..., vn])``\  returns a matrix whose \ ``i``\ -th row is formed by the coordinates of \ ``ai``\  with respect to the \ ``R``\ -module basis \ ``v1``\ , ..., \ ``vn``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-666c657869626c653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; flexible?

:spadfun:`flexible?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``flexible?()``\  tests if \ ``2*associator(a, b, a) = 0``\  for all \ ``a``\ , \ ``b``\  in the algebra. Note: we only can test this; in general we don\ ``'t``\  know whether \ ``2*a=0``\  implies \ ``a=0``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6a61636f62694964656e746974793f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; jacobiIdentity?

:spadfun:`jacobiIdentity?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jacobiIdentity?()``\  tests if \ ``(a*b)*c + (b*c)*a + (c*a)*b = 0``\  for all \ ``a``\ , \ ``b``\ , \ ``c``\  in the algebra. For example, this holds for crossed products of 3-dimensional vectors.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6a6f7264616e41646d69737369626c653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; jordanAdmissible?

:spadfun:`jordanAdmissible?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jordanAdmissible?()``\  tests if 2 is invertible in the coefficient domain and the multiplication defined by \ ``(1/2)(a*b+b*a)``\  determines a Jordan algebra, i.e. satisfies the Jordan identity. The property of \ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  follows from by definition.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6a6f7264616e416c67656272613f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; jordanAlgebra?

:spadfun:`jordanAlgebra?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jordanAlgebra?()``\  tests if the algebra is commutative, characteristic is not 2, and \ ``(a*b)*a^2 - a*(b*a^2) = 0``\  for all \ ``a``\ , \ ``b``\ , \ ``c``\  in the algebra (Jordan identity). Example: for every associative algebra \ ``(A, +, @)``\  we can construct a Jordan algebra \ ``(A, +, *)``\ , where \ ``a*b := (a@b+b@a)/2``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c656674416c7465726e61746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftAlternative?

:spadfun:`leftAlternative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``leftAlternative?()``\  tests if \ ``2*associator(a, a, b) = 0``\  for all \ ``a``\ , \ ``b``\  in the algebra. Note: we only can test this; in general we don\ ``'t``\  know whether \ ``2*a=0``\  implies \ ``a=0``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566744368617261637465726973746963506f6c796e6f6d69616c:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftCharacteristicPolynomial

:spadfun:`leftCharacteristicPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  \ ``leftCharacteristicPolynomial(a)``\  returns the characteristic polynomial of the left regular representation of \ ``a``\  with respect to any basis.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566744469736372696d696e616e74:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftDiscriminant

:spadfun:`leftDiscriminant`\: \ :ref:`Vector <l566563746f72>`\  % -> R 
  \ ``leftDiscriminant([v1, ..., vn])``\  returns the determinant of the \ ``n``\ -by-\ ``n``\  matrix whose element at the \ ``i``\ \ ``-``\ th row and \ ``j``\ \ ``-``\ th column is given by the left trace of the product \ ``vi*vj``\ . Note: the same as \ ``determinant(leftTraceMatrix([v1, ..., vn]))``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566744d696e696d616c506f6c796e6f6d69616c:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftMinimalPolynomial

:spadfun:`leftMinimalPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``leftMinimalPolynomial(a)``\  returns the polynomial determined by the smallest non-trivial linear combination of left powers of \ ``a``\ . Note: the polynomial never has a constant term as in general the algebra has no unit.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566744e6f726d:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftNorm

:spadfun:`leftNorm`\: % -> R 
  \ ``leftNorm(a)``\  returns the determinant of the left regular representation of \ ``a``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c656674506f776572:

\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566745265636970:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftRecip

:spadfun:`leftRecip`\: % -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``leftRecip(a)``\  returns an element, which is a left inverse of \ ``a``\ , or \ ``"failed"``\  if there is no unit element, if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c656674526567756c6172526570726573656e746174696f6e:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftRegularRepresentation

:spadfun:`leftRegularRepresentation`\: (%, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``leftRegularRepresentation(a, [v1, ..., vn])``\  returns the matrix \ ``m``\  of the linear map defined by left multiplication by \ ``a``\  with respect to the \ ``R``\ -module basis \ ``b = [v1, ..., vn]``\ . That is for all \ ``x``\  \ ``coordinates(a*x, b) = m*coordinates(x, b)``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6566745472616365:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftTrace

:spadfun:`leftTrace`\: % -> R 
  \ ``leftTrace(a)``\  returns the trace of the left regular representation of \ ``a``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c65667454726163654d6174726978:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftTraceMatrix

:spadfun:`leftTraceMatrix`\: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``leftTraceMatrix([v1, ..., vn])``\  is the \ ``n``\ -by-\ ``n``\  matrix whose element at the \ ``i``\ \ ``-``\ th row and \ ``j``\ \ ``-``\ th column is given by the left trace of the product \ ``vi*vj``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c656674556e6974:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftUnit

:spadfun:`leftUnit`\: () -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``leftUnit()``\  returns a left unit of the algebra (not necessarily unique), or \ ``"failed"``\  if there is none.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c656674556e697473:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; leftUnits

:spadfun:`leftUnits`\: () -> Union(Record(particular: %, basis: \ :ref:`List <l4c697374>`\  %), failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``leftUnits()``\  returns the affine space of all left units of the algebra, or \ ``"failed"``\  if there is none.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c696541646d69737369626c653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; lieAdmissible?

:spadfun:`lieAdmissible?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lieAdmissible?()``\  tests if the algebra defined by the commutators is a Lie algebra, i.e. satisfies the Jacobi identity. The property of anticommutativity follows from definition.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6c6965416c67656272613f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; lieAlgebra?

:spadfun:`lieAlgebra?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lieAlgebra?()``\  tests if the algebra is anticommutative and \ ``(a*b)*c + (b*c)*a + (c*a)*b = 0``\  for all \ ``a``\ , \ ``b``\ , \ ``c``\  in the algebra (Jacobi identity). Example: for every associative algebra \ ``(A, +, @)``\  we can construct a Lie algebra \ ``(A, +, *)``\ , where \ ``a*b := a@b-b@a``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6e6f6e636f6d6d757461746976654a6f7264616e416c67656272613f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; noncommutativeJordanAlgebra?

:spadfun:`noncommutativeJordanAlgebra?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``noncommutativeJordanAlgebra?()``\  tests if the algebra is flexible and Jordan admissible.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-706f7765724173736f636961746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; powerAssociative?

:spadfun:`powerAssociative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``powerAssociative?()``\  tests if all subalgebras generated by a single element are associative.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72616e6b:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rank

:spadfun:`rank`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``rank()``\  returns the rank of the algebra as \ ``R``\ -module.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7265636970:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; recip

:spadfun:`recip`\: % -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``recip(a)``\  returns an element, which is both a left and a right inverse of \ ``a``\ , or \ ``"failed"``\  if there is no unit element, if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-726570726573656e7473:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; represents

:spadfun:`represents`\: (\ :ref:`Vector <l566563746f72>`\  R, \ :ref:`Vector <l566563746f72>`\  %) -> % 
  \ ``represents([a1, ..., am], [v1, ..., vm])``\  returns the linear combination \ ``a1*vm + ... + an*vm``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7269676874416c7465726e61746976653f:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightAlternative?

:spadfun:`rightAlternative?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``rightAlternative?()``\  tests if \ ``2*associator(a, b, b) = 0``\  for all \ ``a``\ , \ ``b``\  in the algebra. Note: we only can test this; in general we don\ ``'t``\  know whether \ ``2*a=0``\  implies \ ``a=0``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768744368617261637465726973746963506f6c796e6f6d69616c:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightCharacteristicPolynomial

:spadfun:`rightCharacteristicPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  \ ``rightCharacteristicPolynomial(a)``\  returns the characteristic polynomial of the right regular representation of \ ``a``\  with respect to any basis.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768744469736372696d696e616e74:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightDiscriminant

:spadfun:`rightDiscriminant`\: \ :ref:`Vector <l566563746f72>`\  % -> R 
  \ ``rightDiscriminant([v1, ..., vn])``\  returns the determinant of the \ ``n``\ -by-\ ``n``\  matrix whose element at the \ ``i``\ \ ``-``\ th row and \ ``j``\ \ ``-``\ th column is given by the right trace of the product \ ``vi*vj``\ . Note: the same as \ ``determinant(rightTraceMatrix([v1, ..., vn]))``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768744d696e696d616c506f6c796e6f6d69616c:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightMinimalPolynomial

:spadfun:`rightMinimalPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rightMinimalPolynomial(a)``\  returns the polynomial determined by the smallest non-trivial linear combination of right powers of \ ``a``\ . Note: the polynomial never has a constant term as in general the algebra has no unit.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768744e6f726d:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightNorm

:spadfun:`rightNorm`\: % -> R 
  \ ``rightNorm(a)``\  returns the determinant of the right regular representation of \ ``a``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7269676874506f776572:

\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768745265636970:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightRecip

:spadfun:`rightRecip`\: % -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rightRecip(a)``\  returns an element, which is a right inverse of \ ``a``\ , or \ ``"failed"``\  if there is no unit element, if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7269676874526567756c6172526570726573656e746174696f6e:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightRegularRepresentation

:spadfun:`rightRegularRepresentation`\: (%, \ :ref:`Vector <l566563746f72>`\  %) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``rightRegularRepresentation(a, [v1, ..., vn])``\  returns the matrix \ ``m``\  of the linear map defined by right multiplication by \ ``a``\  with respect to the \ ``R``\ -module basis \ ``b = [v1, ..., vn]``\ . That is for all \ ``x``\  \ ``coordinates(x*a, b) = m*coordinates(x, b)``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-72696768745472616365:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightTrace

:spadfun:`rightTrace`\: % -> R 
  \ ``rightTrace(a)``\  returns the trace of the right regular representation of \ ``a``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-726967687454726163654d6174726978:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightTraceMatrix

:spadfun:`rightTraceMatrix`\: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``rightTraceMatrix([v1, ..., vn])``\  is the \ ``n``\ -by-\ ``n``\  matrix whose element at the \ ``i``\ \ ``-``\ th row and \ ``j``\ \ ``-``\ th column is given by the right trace of the product \ ``vi*vj``\ .

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7269676874556e6974:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightUnit

:spadfun:`rightUnit`\: () -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rightUnit()``\  returns a right unit of the algebra (not necessarily unique), or \ ``"failed"``\  if there is none.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7269676874556e697473:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; rightUnits

:spadfun:`rightUnits`\: () -> Union(Record(particular: %, basis: \ :ref:`List <l4c697374>`\  %), failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rightUnits()``\  returns the affine space of all right units of the algebra, or \ ``"failed"``\  if there is none.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-736f6d654261736973:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; someBasis

:spadfun:`someBasis`\: () -> \ :ref:`Vector <l566563746f72>`\  % 
  \ ``someBasis()``\  returns some \ ``R``\ -module basis.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7374727563747572616c436f6e7374616e7473:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; structuralConstants

:spadfun:`structuralConstants`\: \ :ref:`Vector <l566563746f72>`\  % -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``structuralConstants([v1, v2, ..., vm])``\  calculates the structural constants \ ``[(gammaijk) for k in 1..m]``\  defined by \ ``vi * vj = gammaij1 * v1 + ... + gammaijm * vm``\ , where \ ``[v1, ..., vm]``\  is an \ ``R``\ -module basis of a subalgebra.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-756e6974:

.. index::
   pair: FiniteRankNonAssociativeAlgebra; unit

:spadfun:`unit`\: () -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``unit()``\  returns a unit of the algebra (necessarily unique), or \ ``"failed"``\  if there is none.

.. _l46696e69746552616e6b4e6f6e4173736f63696174697665416c6765627261-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R 

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

