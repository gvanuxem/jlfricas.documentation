.. index:: FunctionSpaceAssertions

.. _l46756e6374696f6e5370616365417373657274696f6e73:

FunctionSpaceAssertions(R, F)
=============================

:viewcode:`expr.spad line 972 <expr.spad#L972>` :editcode:`[edit on github] <expr.spad#L972>`

* R: \ :ref:`Comparable <l436f6d70617261626c65>`\ 

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


Attaching assertions to symbols for pattern matching; Date Created: 21 Mar 1989


.. _l46756e6374696f6e5370616365417373657274696f6e73-636f6e7374616e74:

.. index::
   pair: FunctionSpaceAssertions; constant

:spadfun:`constant`\: F -> F 
  \ ``constant(x)``\  tells the pattern matcher that \ ``x``\  should match only the symbol \ ``'x``\  and no other quantity. Error: if \ ``x``\  is not a symbol.

.. _l46756e6374696f6e5370616365417373657274696f6e73-6d756c7469706c65:

.. index::
   pair: FunctionSpaceAssertions; multiple

:spadfun:`multiple`\: F -> F 
  \ ``multiple(x)``\  tells the pattern matcher that \ ``x``\  should preferably match a multi-term quantity in a sum or product. For matching on lists, multiple(\ ``x``\ ) tells the pattern matcher that \ ``x``\  should match a list instead of an element of a list. Error: if \ ``x``\  is not a symbol.

.. _l46756e6374696f6e5370616365417373657274696f6e73-6f7074696f6e616c:

.. index::
   pair: FunctionSpaceAssertions; optional

:spadfun:`optional`\: F -> F 
  \ ``optional(x)``\  tells the pattern matcher that \ ``x``\  can match an identity (0 in a sum, 1 in a product or exponentiation). Error: if \ ``x``\  is not a symbol.


