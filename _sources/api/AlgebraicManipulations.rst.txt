.. index:: AlgebraicManipulations

.. _l416c676562726169634d616e6970756c6174696f6e73:

AlgebraicManipulations(R, F)
============================

:viewcode:`manip.spad line 198 <manip.spad#L198>` :editcode:`[edit on github] <manip.spad#L198>`

* R: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

* F: Join(\ :ref:`Field <l4669656c64>`\ , \ :ref:`ExpressionSpace <l45787072657373696f6e5370616365>`\ ) with

    coerce\: \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, \ :ref:`Kernel <l4b65726e656c>`\  %) -> %

    denom\: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, \ :ref:`Kernel <l4b65726e656c>`\  %)

    numer\: % -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R, \ :ref:`Kernel <l4b65726e656c>`\  %)


AlgebraicManipulations provides functions to simplify and expand expressions involving algebraic operators.


.. _l416c676562726169634d616e6970756c6174696f6e73-72617444656e6f6d:

.. index::
   pair: AlgebraicManipulations; ratDenom

:spadfun:`ratDenom`\: (F, F) -> F 
  \ ``ratDenom(f, a)``\  removes \ ``a``\  from the denominators in \ ``f``\  if \ ``a``\  is an algebraic kernel.


.. index::
   pair: AlgebraicManipulations; ratDenom

:spadfun:`ratDenom`\: (F, \ :ref:`List <l4c697374>`\  F) -> F 
  \ ``ratDenom(f, [a1, ..., an])``\  removes the \ ``ai``\ \ ``'s``\  which are algebraic kernels from the denominators in \ ``f``\ .


.. index::
   pair: AlgebraicManipulations; ratDenom

:spadfun:`ratDenom`\: (F, \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F) -> F 
  \ ``ratDenom(f, [a1, ..., an])``\  removes the \ ``ai``\ \ ``'s``\  which are algebraic from the denominators in \ ``f``\ .


.. index::
   pair: AlgebraicManipulations; ratDenom

:spadfun:`ratDenom`\: F -> F 
  \ ``ratDenom(f)``\  rationalizes the denominators appearing in \ ``f``\  by moving all the algebraic quantities into the numerators.

.. _l416c676562726169634d616e6970756c6174696f6e73-726174506f6c79:

.. index::
   pair: AlgebraicManipulations; ratPoly

:spadfun:`ratPoly`\: F -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F 
  \ ``ratPoly(f)``\  returns a polynomial \ ``p``\  such that \ ``p``\  has no algebraic coefficients, and \ ``p(f) = 0``\ .

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f74466163746f72:

.. index::
   pair: AlgebraicManipulations; rootFactor

:spadfun:`rootFactor`\: F -> F if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  and R has \ :ref:`GcdDomain <l476364446f6d61696e>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  and R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and F has \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R
  \ ``rootFactor(f)``\  transforms every radical of the form \ ``(a1*...*am)^(1/n)``\  appearing in \ ``f``\  into \ ``a^(1/n)*...*am^(1/n)``\ . This transformation is not in general valid for all complex numbers \ ``a``\  and \ ``b``\ .

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f744b657253696d70:

.. index::
   pair: AlgebraicManipulations; rootKerSimp

:spadfun:`rootKerSimp`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> F if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\  and R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  and F has \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R
  \ ``rootKerSimp(op, f, n)``\  should be local but conditional.

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f74506f776572:

.. index::
   pair: AlgebraicManipulations; rootPower

:spadfun:`rootPower`\: F -> F if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\  and R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  and F has \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R
  \ ``rootPower(f)``\  transforms every radical power of the form \ ``(a^(1/n))^m``\  into a simpler form if \ ``m``\  and \ ``n``\  have a common factor.

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f7450726f64756374:

.. index::
   pair: AlgebraicManipulations; rootProduct

:spadfun:`rootProduct`\: F -> F if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\  and R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  and F has \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R
  \ ``rootProduct(f)``\  combines every product of the form \ ``(a^(1/n))^m * (a^(1/s))^t``\  into a single power of a root of \ ``a``\ , and transforms every radical power of the form \ ``(a^(1/n))^m``\  into a simpler form.

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f7453696d70:

.. index::
   pair: AlgebraicManipulations; rootSimp

:spadfun:`rootSimp`\: F -> F if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\  and R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  and F has \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R
  \ ``rootSimp(f)``\  transforms every radical of the form \ ``(a * b^(q*n+r))^(1/n)``\  appearing in \ ``f``\  into \ ``b^q * (a * b^r)^(1/n)``\ . This transformation is not in general valid for all complex numbers \ ``b``\ .

.. _l416c676562726169634d616e6970756c6174696f6e73-726f6f7453706c6974:

.. index::
   pair: AlgebraicManipulations; rootSplit

:spadfun:`rootSplit`\: F -> F 
  \ ``rootSplit(f)``\  transforms every radical of the form \ ``(a/b)^(1/n)``\  appearing in \ ``f``\  into \ ``a^(1/n) / b^(1/n)``\ . This transformation is not in general valid for all complex numbers \ ``a``\  and \ ``b``\ .


