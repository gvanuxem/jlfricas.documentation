.. index:: FortranTemplate

.. _l466f727472616e54656d706c617465:

FortranTemplate
===============

:viewcode:`fortran.spad line 1338 <fortran.spad#L1338>` :editcode:`[edit on github] <fortran.spad#L1338>`


Code to manipulate Fortran templates


.. _l466f727472616e54656d706c617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e54656d706c617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e54656d706c617465-636c6f736521:

\ :ref:`close! <l46696c6543617465676f7279-636c6f736521>`\ \: % -> % 
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l466f727472616e54656d706c617465-666c757368:

\ :ref:`flush <l46696c6543617465676f7279-666c757368>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-666f727472616e436172726961676552657475726e:

.. index::
   pair: FortranTemplate; fortranCarriageReturn

:spadfun:`fortranCarriageReturn`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``fortranCarriageReturn()``\  produces a carriage return on the current Fortran output stream

.. _l466f727472616e54656d706c617465-666f727472616e4c69746572616c:

.. index::
   pair: FortranTemplate; fortranLiteral

:spadfun:`fortranLiteral`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``fortranLiteral(s)``\  writes \ ``s``\  to the current Fortran output stream

.. _l466f727472616e54656d706c617465-666f727472616e4c69746572616c4c696e65:

.. index::
   pair: FortranTemplate; fortranLiteralLine

:spadfun:`fortranLiteralLine`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``fortranLiteralLine(s)``\  writes \ ``s``\  to the current Fortran output stream, followed by a carriage return

.. _l466f727472616e54656d706c617465-696f6d6f6465:

\ :ref:`iomode <l46696c6543617465676f7279-696f6d6f6465>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466f727472616e54656d706c617465-6e616d65:

\ :ref:`name <l46696c6543617465676f7279-6e616d65>`\ \: % -> \ :ref:`FileName <l46696c654e616d65>`\  
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-6f70656e:

\ :ref:`open <l46696c6543617465676f7279-6f70656e>`\ \: (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )


\ :ref:`open <l46696c6543617465676f7279-6f70656e>`\ \: \ :ref:`FileName <l46696c654e616d65>`\  -> % 
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-70726f6365737354656d706c617465:

.. index::
   pair: FortranTemplate; processTemplate

:spadfun:`processTemplate`\: (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`FileName <l46696c654e616d65>`\ ) -> \ :ref:`FileName <l46696c654e616d65>`\  
  \ ``processTemplate(tp, fn)``\  processes the template \ ``tp``\ , writing the result out to \ ``fn``\ .


.. index::
   pair: FortranTemplate; processTemplate

:spadfun:`processTemplate`\: \ :ref:`FileName <l46696c654e616d65>`\  -> \ :ref:`FileName <l46696c654e616d65>`\  
  \ ``processTemplate(tp)``\  processes the template \ ``tp``\ , writing the result to the current FORTRAN output stream.

.. _l466f727472616e54656d706c617465-7265616421:

\ :ref:`read! <l46696c6543617465676f7279-7265616421>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-72656f70656e21:

\ :ref:`reopen! <l46696c6543617465676f7279-72656f70656e21>`\ \: (%, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )

.. _l466f727472616e54656d706c617465-777269746521:

\ :ref:`write! <l46696c6543617465676f7279-777269746521>`\ \: (%, \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ )


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`FileCategory <l46696c6543617465676f7279>`\ (\ :ref:`FileName <l46696c654e616d65>`\ , \ :ref:`String <l537472696e67>`\ ) 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

