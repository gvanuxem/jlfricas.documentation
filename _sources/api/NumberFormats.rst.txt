.. index:: NumberFormats

.. _l4e756d626572466f726d617473:

NumberFormats
=============

:viewcode:`outform.spad line 2 <outform.spad#L2>` :editcode:`[edit on github] <outform.spad#L2>`


NumberFormats provides function to format and read arabic and roman numbers, to convert numbers to strings and to read floating-point numbers.


.. _l4e756d626572466f726d617473-466f726d6174417261626963:

.. index::
   pair: NumberFormats; FormatArabic

:spadfun:`FormatArabic`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``FormatArabic(n)``\  forms an Arabic numeral string from an integer \ ``n``\ .

.. _l4e756d626572466f726d617473-466f726d61745261646978:

.. index::
   pair: NumberFormats; FormatRadix

:spadfun:`FormatRadix`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``FormatRadix(n, r)``\  forms a string from an integer \ ``n``\  in radix \ ``r``\ .

.. _l4e756d626572466f726d617473-466f726d6174526f6d616e:

.. index::
   pair: NumberFormats; FormatRoman

:spadfun:`FormatRoman`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``FormatRoman(n)``\  forms a Roman numeral string from an integer \ ``n``\ .

.. _l4e756d626572466f726d617473-5363616e417261626963:

.. index::
   pair: NumberFormats; ScanArabic

:spadfun:`ScanArabic`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``ScanArabic(s)``\  forms an integer from an Arabic numeral string \ ``s``\ .

.. _l4e756d626572466f726d617473-5363616e466c6f617449676e6f7265537061636573:

.. index::
   pair: NumberFormats; ScanFloatIgnoreSpaces

:spadfun:`ScanFloatIgnoreSpaces`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Float <l466c6f6174>`\  
  \ ``ScanFloatIgnoreSpaces(s)``\  forms a floating point number from the string \ ``s``\  ignoring any spaces. Error is generated if the string is not recognised as a floating point number.

.. _l4e756d626572466f726d617473-5363616e466c6f617449676e6f7265537061636573496643616e:

.. index::
   pair: NumberFormats; ScanFloatIgnoreSpacesIfCan

:spadfun:`ScanFloatIgnoreSpacesIfCan`\: \ :ref:`String <l537472696e67>`\  -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) 
  \ ``ScanFloatIgnoreSpacesIfCan(s)``\  tries to form a floating point number from the string \ ``s``\  ignoring any spaces.

.. _l4e756d626572466f726d617473-5363616e526f6d616e:

.. index::
   pair: NumberFormats; ScanRoman

:spadfun:`ScanRoman`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``ScanRoman(s)``\  forms an integer from a Roman numeral string \ ``s``\ .


