.. index:: RationalIntegration

.. _l526174696f6e616c496e746567726174696f6e:

RationalIntegration(F, UP)
==========================

:viewcode:`intrf.spad line 550 <intrf.spad#L550>` :editcode:`[edit on github] <intrf.spad#L550>`

* F: Join(\ :ref:`Field <l4669656c64>`\ , \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ )

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F


This package provides functions for the base case of the Risch algorithm.


.. _l526174696f6e616c496e746567726174696f6e-696e6669656c64696e74:

.. index::
   pair: RationalIntegration; infieldint

:spadfun:`infieldint`\: \ :ref:`Fraction <l4672616374696f6e>`\  UP -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  UP, failed) 
  \ ``infieldint(f)``\  returns \ ``g``\  such that \ ``g' = f``\  or "failed" if the integral of \ ``f``\  is not a rational function.

.. _l526174696f6e616c496e746567726174696f6e-696e74656772617465:

.. index::
   pair: RationalIntegration; integrate

:spadfun:`integrate`\: \ :ref:`Fraction <l4672616374696f6e>`\  UP -> \ :ref:`IntegrationResult <l496e746567726174696f6e526573756c74>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP 
  \ ``integrate(f)``\  returns \ ``g``\  such that \ ``g' = f``\ .


