.. index:: JLFloatSpecialFunctions2

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332:

JLFloatSpecialFunctions2
========================

:viewcode:`jfsf2.spad line 1 <jfsf2.spad#L1>` :editcode:`[edit on github] <jfsf2.spad#L1>`


Special functions computed using \ ``JL``\ \ ``'s``\  ecosystem. They are here essentially for "completeness" purpose with JLFloat.


.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-616972794169:

.. index::
   pair: JLFloatSpecialFunctions2; airyAi

:spadfun:`airyAi`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``airyAi(z)``\  computes Airy \ ``Ai``\  function at \ ``z``\ 

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-62657373656c4a30:

.. index::
   pair: JLFloatSpecialFunctions2; besselJ0

:spadfun:`besselJ0`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``besselJ0(z)``\  computes besselj(0,\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-62657373656c4a31:

.. index::
   pair: JLFloatSpecialFunctions2; besselJ1

:spadfun:`besselJ1`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``besselJ1(z)``\  computes besselj(1,\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-62657373656c5930:

.. index::
   pair: JLFloatSpecialFunctions2; besselY0

:spadfun:`besselY0`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``besselY0(z)``\  computes bessely(0,\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-62657373656c5931:

.. index::
   pair: JLFloatSpecialFunctions2; besselY1

:spadfun:`besselY1`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``besselY1(z)``\  computes bessely(1,\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-42657461:

.. index::
   pair: JLFloatSpecialFunctions2; Beta

:spadfun:`Beta`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``Beta(x,y)``\  computes beta function at \ ``x``\ ,\ ``y``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-646967616d6d61:

.. index::
   pair: JLFloatSpecialFunctions2; digamma

:spadfun:`digamma`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``digamma(x)``\  computes digamma function (i.e. the derivative of logGamma at \ ``x``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-4569:

.. index::
   pair: JLFloatSpecialFunctions2; Ei

:spadfun:`Ei`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``Ei(x)``\  computes exponential integral \ ``Ei``\ (\ ``x``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-657266:

.. index::
   pair: JLFloatSpecialFunctions2; erf

:spadfun:`erf`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``erf(x,y)``\  computes accurate version of erf(\ ``y``\ ) - erf(\ ``x``\ ).


.. index::
   pair: JLFloatSpecialFunctions2; erf

:spadfun:`erf`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``erf(x)``\  computes error function at \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-65726663:

.. index::
   pair: JLFloatSpecialFunctions2; erfc

:spadfun:`erfc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``erfc(x)``\  computes complementary error function, i.e. the accurate version of 1-erf(\ ``x``\ ) for large \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6572666378:

.. index::
   pair: JLFloatSpecialFunctions2; erfcx

:spadfun:`erfcx`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``erfcx(x)``\  computes scaled complementary error function, i.e. accurate e^{\ ``x^2``\ } erfc(\ ``x``\ ) for large \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-657461:

.. index::
   pair: JLFloatSpecialFunctions2; eta

:spadfun:`eta`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``eta(x)``\  computes Dirichlet eta function at \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-657870696e74:

.. index::
   pair: JLFloatSpecialFunctions2; expint

:spadfun:`expint`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``expint(nu, z)``\  computes exponential integral \ ``E``\ \nu(\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-47616d6d61:

.. index::
   pair: JLFloatSpecialFunctions2; Gamma

:spadfun:`Gamma`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``Gamma(a,z)``\  computes upper incomplete gamma function \Gamma(a,\ ``z``\ ).


.. index::
   pair: JLFloatSpecialFunctions2; Gamma

:spadfun:`Gamma`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``Gamma(z)``\  computes gamma function \Gamma(\ ``z``\ ).

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-696e7665727365457266:

.. index::
   pair: JLFloatSpecialFunctions2; inverseErf

:spadfun:`inverseErf`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``inverseErf(x)``\  computes inverse function of erf.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-696e766572736545726663:

.. index::
   pair: JLFloatSpecialFunctions2; inverseErfc

:spadfun:`inverseErfc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``inverseErfc(x)``\  computes the inverse function of erfc.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6a696e63:

.. index::
   pair: JLFloatSpecialFunctions2; jinc

:spadfun:`jinc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``jinc(x)``\  computes scaled Bessel function of the first kind divided by \ ``x``\ . A.\ ``k``\ .a. sombrero or besinc.

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6c6f6742657461:

.. index::
   pair: JLFloatSpecialFunctions2; logBeta

:spadfun:`logBeta`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``logBeta(x,y)``\  computes accurate log(beta(\ ``x``\ ,\ ``y``\ )) for large \ ``x``\  or \ ``y``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6c6f6765726663:

.. index::
   pair: JLFloatSpecialFunctions2; logerfc

:spadfun:`logerfc`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``logerfc(x)``\  computes log of the complementary error function, i.e. accurate \ ``ln``\ (erfc(\ ``x``\ )) for large \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6c6f676572666378:

.. index::
   pair: JLFloatSpecialFunctions2; logerfcx

:spadfun:`logerfcx`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``logerfcx(x)``\  computes log of the scaled complementary error function, i.e. accurate \ ``ln``\ (erfcx(\ ``x``\ )) for large negative \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-6c6f6747616d6d61:

.. index::
   pair: JLFloatSpecialFunctions2; logGamma

:spadfun:`logGamma`\: (\ :ref:`JLFloat <l4a4c466c6f6174>`\ , \ :ref:`JLFloat <l4a4c466c6f6174>`\ ) -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``logGamma(a,z)``\  computes accurate log(gamma(a,\ ``x``\ )) for large arguments.


.. index::
   pair: JLFloatSpecialFunctions2; logGamma

:spadfun:`logGamma`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``logGamma(x)``\  computes accurate log(gamma(\ ``x``\ )) for large \ ``x``\ .

.. _l4a4c466c6f61745370656369616c46756e6374696f6e7332-7269656d616e6e5a657461:

.. index::
   pair: JLFloatSpecialFunctions2; riemannZeta

:spadfun:`riemannZeta`\: \ :ref:`JLFloat <l4a4c466c6f6174>`\  -> \ :ref:`JLFloat <l4a4c466c6f6174>`\  
  \ ``riemannZeta(x)``\  computes Riemann zeta function at \ ``x``\ .


