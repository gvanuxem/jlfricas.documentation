.. index:: ExpressionSpace2

.. _l45787072657373696f6e537061636532:

ExpressionSpace2 K
==================

:viewcode:`fspace.spad line 1 <fspace.spad#L1>` :editcode:`[edit on github] <fspace.spad#L1>`

* K: \ :ref:`KernelCategory <l4b65726e656c43617465676f7279>`\  %


An expression space is a set which is closed under certain operators.


.. _l45787072657373696f6e537061636532-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l45787072657373696f6e537061636532-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l45787072657373696f6e537061636532-62656c6f6e673f:

.. index::
   pair: ExpressionSpace2; belong?

:spadfun:`belong?`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``belong?(op)``\  tests if \% accepts \ ``op``\  as applicable to its elements.

.. _l45787072657373696f6e537061636532-626f78:

.. index::
   pair: ExpressionSpace2; box

:spadfun:`box`\: % -> % 
  \ ``box(f)``\  returns \ ``f``\  with a 'box' around it that prevents \ ``f``\  from being evaluated when operators are applied to it. For example, \ ``log(1)``\  returns 0, but \ ``log(box 1)``\  returns the formal kernel log(1).

.. _l45787072657373696f6e537061636532-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: K -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  K

.. _l45787072657373696f6e537061636532-646566696e696e67506f6c796e6f6d69616c:

.. index::
   pair: ExpressionSpace2; definingPolynomial

:spadfun:`definingPolynomial`\: % -> % if % has \ :ref:`Ring <l52696e67>`\ 
  \ ``definingPolynomial(x)``\  returns an expression \ ``p``\  such that \ ``p(x) = 0``\ .

.. _l45787072657373696f6e537061636532-64697374726962757465:

.. index::
   pair: ExpressionSpace2; distribute

:spadfun:`distribute`\: % -> % 
  \ ``distribute(f)``\  expands all the kernels in \ ``f``\  that are formally enclosed by a \ :ref:`box <l45787072657373696f6e5370616365-626f78>`\  or \ :ref:`paren <l45787072657373696f6e5370616365-706172656e>`\  expression.


.. index::
   pair: ExpressionSpace2; distribute

:spadfun:`distribute`\: (%, %) -> % 
  \ ``distribute(f, g)``\  expands all the kernels in \ ``f``\  that contain \ ``g``\  in their arguments and that are formally enclosed by a \ :ref:`box <l45787072657373696f6e5370616365-626f78>`\  or a \ :ref:`paren <l45787072657373696f6e5370616365-706172656e>`\  expression.

.. _l45787072657373696f6e537061636532-656c74:

.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  \ ``elt(op, x)``\  or \ ``op``\ (\ ``x``\ ) applies the unary operator \ ``op``\  to \ ``x``\ .


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %) -> % 
  \ ``elt(op, x, y)``\  or \ ``op``\ (\ ``x``\ , \ ``y``\ ) applies the binary operator \ ``op``\  to \ ``x``\  and \ ``y``\ .


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %) -> % 
  \ ``elt(op, x, y, z)``\  or \ ``op``\ (\ ``x``\ , \ ``y``\ , \ ``z``\ ) applies the ternary operator \ ``op``\  to \ ``x``\ , \ ``y``\  and \ ``z``\ .


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t)``\  or \ ``op``\ (\ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\ ) applies the 4-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\  and \ ``t``\ .


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t, s)``\  applies the 5-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\  and \ ``s``\ 


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t, s, r)``\  applies the 6-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\ , \ ``s``\  and \ ``r``\ 


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t, s, r, q)``\  applies the 7-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\ , \ ``s``\ , \ ``r``\  and \ ``q``\ 


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t, s, r, q, p)``\  applies the 8-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\ , \ ``s``\ , \ ``r``\ , \ ``q``\  and \ ``p``\ 


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %, %, %, %, %, %, %, %, %) -> % 
  \ ``elt(op, x, y, z, t, s, r, q, p, o)``\  applies the 9-ary operator \ ``op``\  to \ ``x``\ , \ ``y``\ , \ ``z``\ , \ ``t``\ , \ ``s``\ , \ ``r``\ , \ ``q``\ , \ ``p``\  and \ ``o``\ 


.. index::
   pair: ExpressionSpace2; elt

:spadfun:`elt`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``elt(op, [x1, ..., xn])``\  or \ ``op``\ ([\ ``x1``\ , ..., \ ``xn``\ ]) applies the \ ``n``\ -ary operator \ ``op``\  to \ ``x1``\ , ..., \ ``xn``\ .

.. _l45787072657373696f6e537061636532-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , % -> %) -> % 
  \ ``eval(x, s, f)``\  replaces every \ ``s(a)``\  in \ ``x``\  by \ ``f(a)``\  for any \ ``a``\ .


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  \ ``eval(x, s, f)``\  replaces every \ ``s(a1, .., am)``\  in \ ``x``\  by \ ``f(a1, .., am)``\  for any \ ``a1``\ , ..., \ ``am``\ .


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, K, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  \ ``eval(x, [s1, ..., sm], [f1, ..., fm])``\  replaces every \ ``si(a)``\  in \ ``x``\  by \ ``fi(a)``\  for any \ ``a``\ .


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  \ ``eval(x, [s1, ..., sm], [f1, ..., fm])``\  replaces every \ ``si(a1, ..., an)``\  in \ ``x``\  by \ ``fi(a1, ..., an)``\  for any \ ``a1``\ , ..., \ ``an``\ .


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  K, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %)


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (% -> %)) -> % 
  \ ``eval(x, [s1, ..., sm], [f1, ..., fm])``\  replaces every \ ``si(a)``\  in \ ``x``\  by \ ``fi(a)``\  for any \ ``a``\ .


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\ (\ :ref:`List <l4c697374>`\  % -> %)) -> % 
  \ ``eval(x, [s1, ..., sm], [f1, ..., fm])``\  replaces every \ ``si(a1, ..., an)``\  in \ ``x``\  by \ ``fi(a1, ..., an)``\  for any \ ``a1``\ , ..., \ ``an``\ .


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ , % -> %) -> % 
  \ ``eval(x, s, f)``\  replaces every \ ``s(a)``\  in \ ``x``\  by \ ``f(a)``\  for any \ ``a``\ .


.. index::
   pair: ExpressionSpace2; eval

:spadfun:`eval`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  % -> %) -> % 
  \ ``eval(x, s, f)``\  replaces every \ ``s(a1, .., am)``\  in \ ``x``\  by \ ``f(a1, .., am)``\  for any \ ``a1``\ , ..., \ ``am``\ .

.. _l45787072657373696f6e537061636532-6576656e3f:

.. index::
   pair: ExpressionSpace2; even?

:spadfun:`even?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``even? x``\  is \ ``true``\  if \ ``x``\  is an even integer.

.. _l45787072657373696f6e537061636532-667265654f663f:

.. index::
   pair: ExpressionSpace2; freeOf?

:spadfun:`freeOf?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``freeOf?(x, y)``\  tests if \ ``x``\  does not contain any occurrence of \ ``y``\ , where \ ``y``\  is a single kernel.


.. index::
   pair: ExpressionSpace2; freeOf?

:spadfun:`freeOf?`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``freeOf?(x, s)``\  tests if \ ``x``\  does not contain any operator whose name is \ ``s``\ .

.. _l45787072657373696f6e537061636532-686569676874:

.. index::
   pair: ExpressionSpace2; height

:spadfun:`height`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``height(f)``\  returns the highest nesting level appearing in \ ``f``\ . Constants have height 0. Symbols have height 1. For any operator op and expressions \ ``f1``\ , ..., \ ``fn``\ , \ ``op(f1, ..., fn)``\  has height equal to \ ``1 + max(height(f1), ..., height(fn))``\ .

.. _l45787072657373696f6e537061636532-69733f:

.. index::
   pair: ExpressionSpace2; is?

:spadfun:`is?`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?(x, op)``\  tests if \ ``x``\  is a kernel and if its operator is op.


.. index::
   pair: ExpressionSpace2; is?

:spadfun:`is?`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?(x, s)``\  tests if \ ``x``\  is a kernel and if the name of its operator is \ ``s``\ .

.. _l45787072657373696f6e537061636532-6b65726e656c:

.. index::
   pair: ExpressionSpace2; kernel

:spadfun:`kernel`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , %) -> % 
  \ ``kernel(op, x)``\  constructs \ ``op``\ (\ ``x``\ ) without evaluating it.


.. index::
   pair: ExpressionSpace2; kernel

:spadfun:`kernel`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``kernel(op, [f1, ..., fn])``\  constructs \ ``op(f1, ..., fn)``\  without evaluating it.

.. _l45787072657373696f6e537061636532-6b65726e656c73:

.. index::
   pair: ExpressionSpace2; kernels

:spadfun:`kernels`\: % -> \ :ref:`List <l4c697374>`\  K 
  \ ``kernels(f)``\  returns the list of all the top-level kernels appearing in \ ``f``\ , but not the ones appearing in the arguments of the top-level kernels.


.. index::
   pair: ExpressionSpace2; kernels

:spadfun:`kernels`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  K 
  \ ``kernels([f1,...,fn])``\  returns the list of all the top-level kernels appearing in \ ``f1``\ , ..., \ ``fn``\  but not the ones appearing in the arguments of the top-level kernels.

.. _l45787072657373696f6e537061636532-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l45787072657373696f6e537061636532-6d61696e4b65726e656c:

.. index::
   pair: ExpressionSpace2; mainKernel

:spadfun:`mainKernel`\: % -> Union(K, failed) 
  \ ``mainKernel(f)``\  returns a kernel of \ ``f``\  with maximum nesting level, or "failed" if \ ``f``\  has no kernels (i.e. \ ``f``\  is a constant).

.. _l45787072657373696f6e537061636532-6d6170:

.. index::
   pair: ExpressionSpace2; map

:spadfun:`map`\: (% -> %, K) -> % 
  \ ``map(f, k)``\  returns \ ``op(f(x1), ..., f(xn))``\  where \ ``k = op(x1, ..., xn)``\ .

.. _l45787072657373696f6e537061636532-6d696e506f6c79:

.. index::
   pair: ExpressionSpace2; minPoly

:spadfun:`minPoly`\: K -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if % has \ :ref:`Ring <l52696e67>`\ 
  \ ``minPoly(k)``\  returns \ ``p``\  such that \ ``p(k) = 0``\ .

.. _l45787072657373696f6e537061636532-6f64643f:

.. index::
   pair: ExpressionSpace2; odd?

:spadfun:`odd?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``odd? x``\  is \ ``true``\  if \ ``x``\  is an odd integer.

.. _l45787072657373696f6e537061636532-6f70657261746f72:

.. index::
   pair: ExpressionSpace2; operator

:spadfun:`operator`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operator(op)``\  returns a copy of \ ``op``\  with the domain-dependent properties appropriate for \%.

.. _l45787072657373696f6e537061636532-6f70657261746f7273:

.. index::
   pair: ExpressionSpace2; operators

:spadfun:`operators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operators(f)``\  returns all the basic operators appearing in \ ``f``\ , no matter what their levels are.

.. _l45787072657373696f6e537061636532-706172656e:

.. index::
   pair: ExpressionSpace2; paren

:spadfun:`paren`\: % -> % 
  \ ``paren(f)``\  returns (\ ``f``\ ). This prevents \ ``f``\  from being evaluated when operators are applied to it. For example, \ ``log(1)``\  returns 0, but \ ``log(paren 1)``\  returns the formal kernel log((1)).

.. _l45787072657373696f6e537061636532-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> K 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K

.. _l45787072657373696f6e537061636532-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(K, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K

.. _l45787072657373696f6e537061636532-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l45787072657373696f6e537061636532-7375627374:

.. index::
   pair: ExpressionSpace2; subst

:spadfun:`subst`\: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  \ ``subst(f, k = g)``\  replaces the kernel \ ``k``\  by \ ``g``\  formally in \ ``f``\ .


.. index::
   pair: ExpressionSpace2; subst

:spadfun:`subst`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  \ ``subst(f, [k1 = g1, ..., kn = gn])``\  replaces the kernels \ ``k1``\ , ..., \ ``kn``\  by \ ``g1``\ , ..., \ ``gn``\  formally in \ ``f``\ .


.. index::
   pair: ExpressionSpace2; subst

:spadfun:`subst`\: (%, \ :ref:`List <l4c697374>`\  K, \ :ref:`List <l4c697374>`\  %) -> % 
  \ ``subst(f, [k1..., kn], [g1, ..., gn])``\  replaces the kernels \ ``k1``\ , ..., \ ``kn``\  by \ ``g1``\ , ..., \ ``gn``\  formally in \ ``f``\ .

.. _l45787072657373696f6e537061636532-746f776572:

.. index::
   pair: ExpressionSpace2; tower

:spadfun:`tower`\: % -> \ :ref:`List <l4c697374>`\  K 
  \ ``tower(f)``\  returns all the kernels appearing in \ ``f``\ , no matter what their levels are.


.. index::
   pair: ExpressionSpace2; tower

:spadfun:`tower`\: \ :ref:`List <l4c697374>`\  % -> \ :ref:`List <l4c697374>`\  K 
  \ ``tower([f1,...,fn])``\  returns all the kernels appearing in \ ``f1``\ , ..., \ ``fn``\  no matter what their levels are.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  K 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  % 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (K, %) 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  K 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

