.. index:: CartesianTensor

.. _l43617274657369616e54656e736f72:

CartesianTensor(minix, dim, R)
==============================

:viewcode:`carten.spad line 85 <carten.spad#L85>` :editcode:`[edit on github] <carten.spad#L85>`

* minix: \ :ref:`Integer <l496e7465676572>`\ 

* dim: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ 

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


CartesianTensor(minix, dim, \ ``R``\ ) provides Cartesian tensors with components belonging to a commutative ring \ ``R``\ . These tensors can have any number of indices. Each index takes values from \ ``minix``\  to \ ``minix + dim - 1``\ .


.. _l43617274657369616e54656e736f72-30:

\ :ref:`0 <l4772616465644d6f64756c65-30>`\ \: % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-31:

\ :ref:`1 <l477261646564416c6765627261-31>`\ \: % 
  from \ :ref:`GradedAlgebra <l477261646564416c6765627261>`\ (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-2a:

.. index::
   pair: CartesianTensor; *

:spadfun:`\*`\: (%, %) -> % 
  \ ``s*t``\  is the inner product of the tensors \ ``s``\  and \ ``t``\  which contracts the last index of \ ``s``\  with the first index of \ ``t``\ , i.e. \ ``t*s = contract(t, rank t, s, 1)``\  \ ``t*s = sum(k=1..N, t[i1, .., iN, k]*s[k, j1, .., jM])``\  This is compatible with the use of \ ``M*v``\  to denote the matrix-vector inner product.


\ :ref:`\* <l4772616465644d6f64756c65-2a>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )


\ :ref:`\* <l4772616465644d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )


\ :ref:`\* <l4772616465644d6f64756c65-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )


\ :ref:`\* <l4772616465644d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-2b:

\ :ref:`+ <l4772616465644d6f64756c65-2b>`\ \: (%, %) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-2d:

\ :ref:`- <l4772616465644d6f64756c65-2d>`\ \: % -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )


\ :ref:`- <l4772616465644d6f64756c65-2d>`\ \: (%, %) -> % 
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l43617274657369616e54656e736f72-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l43617274657369616e54656e736f72-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: CartesianTensor; coerce

:spadfun:`coerce`\: \ :ref:`DirectProduct <l44697265637450726f64756374>`\ (dim, R) -> % 
  \ ``coerce(v)``\  views a vector as a rank 1 tensor.


.. index::
   pair: CartesianTensor; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``coerce([t_1, ..., t_dim])``\  allows tensors to be constructed using lists.


.. index::
   pair: CartesianTensor; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  R -> % 
  \ ``coerce([r_1, ..., r_dim])``\  allows tensors to be constructed using lists.


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R


.. index::
   pair: CartesianTensor; coerce

:spadfun:`coerce`\: \ :ref:`SquareMatrix <l5371756172654d6174726978>`\ (dim, R) -> % 
  \ ``coerce(m)``\  views a matrix as a rank 2 tensor.

.. _l43617274657369616e54656e736f72-636f6e7472616374:

.. index::
   pair: CartesianTensor; contract

:spadfun:`contract`\: (%, \ :ref:`Integer <l496e7465676572>`\ , %, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``contract(t, i, s, j)``\  is the inner product of tenors \ ``s``\  and \ ``t``\  which sums along the \ ``k1``\ \ ``-``\ th index of \ ``t``\  and the \ ``k2``\ \ ``-``\ th index of \ ``s``\ . For example, if \ ``r = contract(s, 2, t, 1)``\  for rank 3 tensors rank 3 tensors \ ``s``\  and \ ``t``\ , then \ ``r``\  is the rank 4 \ ``(= 3 + 3 - 2)``\  tensor given by \ ``r(i, j, k, l) = sum(h=1..dim, s(i, h, j)*t(h, k, l))``\ .


.. index::
   pair: CartesianTensor; contract

:spadfun:`contract`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``contract(t, i, j)``\  is the contraction of tensor \ ``t``\  which sums along the \ ``i``\ \ ``-``\ th and \ ``j``\ \ ``-``\ th indices. For example, if \ ``r = contract(t, 1, 3)``\  for a rank 4 tensor \ ``t``\ , then \ ``r``\  is the rank 2 \ ``(= 4 - 2)``\  tensor given by \ ``r(i, j) = sum(h=1..dim, t(h, i, h, j))``\ .

.. _l43617274657369616e54656e736f72-646567726565:

\ :ref:`degree <l4772616465644d6f64756c65-646567726565>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

.. _l43617274657369616e54656e736f72-656c74:

.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: % -> R 
  \ ``elt(t)``\  gives the component of a rank 0 tensor.


.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(t, i)``\  gives a component of a rank 1 tensor.


.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(t, i, j)``\  gives a component of a rank 2 tensor.


.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(t, i, j, k)``\  gives a component of a rank 3 tensor.


.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(t, i, j, k, l)``\  gives a component of a rank 4 tensor.


.. index::
   pair: CartesianTensor; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(t, [i1, ..., iN])``\  gives a component of a rank \ ``N``\  tensor.

.. _l43617274657369616e54656e736f72-6b726f6e65636b657244656c7461:

.. index::
   pair: CartesianTensor; kroneckerDelta

:spadfun:`kroneckerDelta`\: () -> % 
  \ ``kroneckerDelta()``\  is the rank 2 tensor defined by \ ``kroneckerDelta()(i, j)``\  \ ``= 1 if i = j``\  \ ``= 0 if i \~= j``\ 

.. _l43617274657369616e54656e736f72-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l43617274657369616e54656e736f72-6c65766943697669746153796d626f6c:

.. index::
   pair: CartesianTensor; leviCivitaSymbol

:spadfun:`leviCivitaSymbol`\: () -> % 
  \ ``leviCivitaSymbol()``\  is the rank \ ``dim``\  tensor defined by \ ``leviCivitaSymbol()(i1, ...idim) = +1/0/-1``\  if \ ``i1, ..., idim``\  is an even/is nota /is an odd permutation of \ ``minix, ..., minix+dim-1``\ .

.. _l43617274657369616e54656e736f72-70726f64756374:

.. index::
   pair: CartesianTensor; product

:spadfun:`product`\: (%, %) -> % 
  \ ``product(s, t)``\  is the outer product of the tensors \ ``s``\  and \ ``t``\ . For example, if \ ``r = product(s, t)``\  for rank 2 tensors \ ``s``\  and \ ``t``\ , then \ ``r``\  is a rank 4 tensor given by \ ``r(i, j, k, l) = s(i, j)*t(k, l)``\ .

.. _l43617274657369616e54656e736f72-72616e6b:

.. index::
   pair: CartesianTensor; rank

:spadfun:`rank`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rank(t)``\  returns the tensorial rank of \ ``t``\  (that is, the number of indices). This is the same as the graded module degree.

.. _l43617274657369616e54656e736f72-726176656c:

.. index::
   pair: CartesianTensor; ravel

:spadfun:`ravel`\: % -> \ :ref:`List <l4c697374>`\  R 
  \ ``ravel(t)``\  produces a list of components from a tensor such that \ ``unravel(ravel(t)) = t``\ .

.. _l43617274657369616e54656e736f72-7265696e646578:

.. index::
   pair: CartesianTensor; reindex

:spadfun:`reindex`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``reindex(t, [i1, ..., idim])``\  permutes the indices of \ ``t``\ . For example, if \ ``r = reindex(t, [4, 1, 2, 3])``\  for a rank 4 tensor \ ``t``\ , then \ ``r``\  is the rank for tensor given by \ ``r(i, j, k, l) = t(l, i, j, k)``\ .

.. _l43617274657369616e54656e736f72-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l43617274657369616e54656e736f72-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l43617274657369616e54656e736f72-73616d706c65:

.. index::
   pair: CartesianTensor; sample

:spadfun:`sample`\: () -> % 
  \ ``sample()``\  returns an object of type \%.

.. _l43617274657369616e54656e736f72-7472616e73706f7365:

.. index::
   pair: CartesianTensor; transpose

:spadfun:`transpose`\: % -> % 
  \ ``transpose(t)``\  exchanges the first and last indices of \ ``t``\ . For example, if \ ``r = transpose(t)``\  for a rank 4 tensor \ ``t``\ , then \ ``r``\  is the rank 4 tensor given by \ ``r(i, j, k, l) = t(l, j, k, i)``\ .


.. index::
   pair: CartesianTensor; transpose

:spadfun:`transpose`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``transpose(t, i, j)``\  exchanges the \ ``i``\ \ ``-``\ th and \ ``j``\ \ ``-``\ th indices of \ ``t``\ . For example, if \ ``r = transpose(t, 2, 3)``\  for a rank 4 tensor \ ``t``\ , then \ ``r``\  is the rank 4 tensor given by \ ``r(i, j, k, l) = t(i, k, j, l)``\ .

.. _l43617274657369616e54656e736f72-756e726176656c:

.. index::
   pair: CartesianTensor; unravel

:spadfun:`unravel`\: \ :ref:`List <l4c697374>`\  R -> % 
  \ ``unravel(t)``\  produces a tensor from a list of components such that \ ``unravel(ravel(t)) = t``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`GradedAlgebra <l477261646564416c6765627261>`\ (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 

\ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 

\ :ref:`GradedModule <l4772616465644d6f64756c65>`\ (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

