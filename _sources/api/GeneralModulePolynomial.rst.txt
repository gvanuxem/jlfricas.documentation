.. index:: GeneralModulePolynomial

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c:

GeneralModulePolynomial(vl, R, IS, E, ff, P)
============================================

:viewcode:`modmonom.spad line 31 <modmonom.spad#L31>` :editcode:`[edit on github] <modmonom.spad#L31>`

* vl: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

* IS: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* E: \ :ref:`DirectProductCategory <l44697265637450726f6475637443617465676f7279>`\ (# vl, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )

* ff: (Record(index: IS, exponent: E), Record(index: IS, exponent: E)) -> \ :ref:`Boolean <l426f6f6c65616e>`\ 

* P: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, \ :ref:`OrderedVariableList <l4f7264657265645661726961626c654c697374>`\  vl)


This package \undocumented


.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, P) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  P


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


.. index::
   pair: GeneralModulePolynomial; *

:spadfun:`\*`\: (P, %) -> % 
  \ ``p*x``\  \undocumented


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6275696c64:

.. index::
   pair: GeneralModulePolynomial; build

:spadfun:`build`\: (R, IS, E) -> % 
  \ ``build(r, i, e)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6c656164696e67436f656666696369656e74:

.. index::
   pair: GeneralModulePolynomial; leadingCoefficient

:spadfun:`leadingCoefficient`\: % -> R 
  \ ``leadingCoefficient(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6c656164696e674578706f6e656e74:

.. index::
   pair: GeneralModulePolynomial; leadingExponent

:spadfun:`leadingExponent`\: % -> E 
  \ ``leadingExponent(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6c656164696e67496e646578:

.. index::
   pair: GeneralModulePolynomial; leadingIndex

:spadfun:`leadingIndex`\: % -> IS 
  \ ``leadingIndex(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6c656164696e674d6f6e6f6d69616c:

.. index::
   pair: GeneralModulePolynomial; leadingMonomial

:spadfun:`leadingMonomial`\: % -> \ :ref:`ModuleMonomial <l4d6f64756c654d6f6e6f6d69616c>`\ (IS, E, ff) 
  \ ``leadingMonomial(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6d6f6e6f6d69616c:

.. index::
   pair: GeneralModulePolynomial; monomial

:spadfun:`monomial`\: (R, \ :ref:`ModuleMonomial <l4d6f64756c654d6f6e6f6d69616c>`\ (IS, E, ff)) -> % 
  \ ``monomial(r, x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6d756c744d6f6e6f6d:

.. index::
   pair: GeneralModulePolynomial; multMonom

:spadfun:`multMonom`\: (R, E, %) -> % 
  \ ``multMonom(r, e, x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-726564756374756d:

.. index::
   pair: GeneralModulePolynomial; reductum

:spadfun:`reductum`\: % -> % 
  \ ``reductum(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-756e6974566563746f72:

.. index::
   pair: GeneralModulePolynomial; unitVector

:spadfun:`unitVector`\: IS -> % 
  \ ``unitVector(x)``\  \undocumented

.. _l47656e6572616c4d6f64756c65506f6c796e6f6d69616c-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (P, P) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  P 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Module <l4d6f64756c65>`\  P 

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  P 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

