.. index:: DequeueAggregate

.. _l44657175657565416767726567617465:

DequeueAggregate S
==================

:viewcode:`aggcat.spad line 358 <aggcat.spad#L358>` :editcode:`[edit on github] <aggcat.spad#L358>`

* S: \ :ref:`Type <l54797065>`\ 


A dequeue is a doubly ended stack, that is, a bag where first items inserted are the first items extracted, at either the front or the back end of the data structure.


.. _l44657175657565416767726567617465-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44657175657565416767726567617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l44657175657565416767726567617465-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6261636b:

\ :ref:`back <l5175657565416767726567617465-6261636b>`\ \: % -> S 
  from \ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S

.. _l44657175657565416767726567617465-626f74746f6d:

.. index::
   pair: DequeueAggregate; bottom

:spadfun:`bottom`\: % -> S 
  \ ``bottom(d)``\  returns the element at the bottom (back) of the dequeue.

.. _l44657175657565416767726567617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l44657175657565416767726567617465-636f6e737472756374:

\ :ref:`construct <l436f6c6c656374696f6e-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  S -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l44657175657565416767726567617465-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6465717565756521:

\ :ref:`dequeue! <l5175657565416767726567617465-6465717565756521>`\ \: % -> S 
  from \ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S

.. _l44657175657565416767726567617465-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-656e717565756521:

\ :ref:`enqueue! <l5175657565416767726567617465-656e717565756521>`\ \: (S, %) -> S 
  from \ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S

.. _l44657175657565416767726567617465-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  S) -> % if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, S, S) -> % if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)

.. _l44657175657565416767726567617465-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6578747261637421:

\ :ref:`extract! <l426167416767726567617465-6578747261637421>`\ \: % -> S 
  from \ :ref:`BagAggregate <l426167416767726567617465>`\  S

.. _l44657175657565416767726567617465-65787472616374426f74746f6d21:

.. index::
   pair: DequeueAggregate; extractBottom!

:spadfun:`extractBottom!`\: % -> S 
  \ ``extractBottom!(d)``\  destructively extracts the bottom (back) element from the dequeue \ ``d``\ . Error: if \ ``d``\  is empty.

.. _l44657175657565416767726567617465-65787472616374546f7021:

.. index::
   pair: DequeueAggregate; extractTop!

:spadfun:`extractTop!`\: % -> S 
  \ ``extractTop!(d)``\  destructively extracts the top (front) element from the dequeue \ ``d``\ . Error: if \ ``d``\  is empty.

.. _l44657175657565416767726567617465-66696e64:

\ :ref:`find <l436f6c6c656374696f6e-66696e64>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> Union(S, failed) 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-66726f6e74:

\ :ref:`front <l5175657565416767726567617465-66726f6e74>`\ \: % -> S 
  from \ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S

.. _l44657175657565416767726567617465-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l44657175657565416767726567617465-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l44657175657565416767726567617465-696e7365727421:

\ :ref:`insert! <l426167416767726567617465-696e7365727421>`\ \: (S, %) -> % 
  from \ :ref:`BagAggregate <l426167416767726567617465>`\  S

.. _l44657175657565416767726567617465-696e73657274426f74746f6d21:

.. index::
   pair: DequeueAggregate; insertBottom!

:spadfun:`insertBottom!`\: (S, %) -> S 
  \ ``insertBottom!(x, d)``\  destructively inserts \ ``x``\  into the dequeue \ ``d``\  at the bottom (back) of the dequeue.

.. _l44657175657565416767726567617465-696e73657274546f7021:

.. index::
   pair: DequeueAggregate; insertTop!

:spadfun:`insertTop!`\: (S, %) -> S 
  \ ``insertTop!(x, d)``\  destructively inserts \ ``x``\  into the dequeue \ ``d``\ , that is, at the top (front) of the dequeue. The element previously at the top of the dequeue becomes the second in the dequeue, and so on.

.. _l44657175657565416767726567617465-696e7370656374:

\ :ref:`inspect <l426167416767726567617465-696e7370656374>`\ \: % -> S 
  from \ :ref:`BagAggregate <l426167416767726567617465>`\  S

.. _l44657175657565416767726567617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l44657175657565416767726567617465-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (S -> S, %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d6170:

\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (S -> S, %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> S 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  S 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  S 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l44657175657565416767726567617465-706f7021:

\ :ref:`pop! <l537461636b416767726567617465-706f7021>`\ \: % -> S 
  from \ :ref:`StackAggregate <l537461636b416767726567617465>`\  S

.. _l44657175657565416767726567617465-7075736821:

\ :ref:`push! <l537461636b416767726567617465-7075736821>`\ \: (S, %) -> S 
  from \ :ref:`StackAggregate <l537461636b416767726567617465>`\  S

.. _l44657175657565416767726567617465-726564756365:

\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %) -> S 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %, S) -> S 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`reduce <l436f6c6c656374696f6e-726564756365>`\ \: ((S, S) -> S, %, S, S) -> S if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-72656d6f7665:

\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S


\ :ref:`remove <l436f6c6c656374696f6e-72656d6f7665>`\ \: (S, %) -> % if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-72656d6f76654475706c696361746573:

\ :ref:`removeDuplicates <l436f6c6c656374696f6e-72656d6f76654475706c696361746573>`\ \: % -> % if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-7265766572736521:

.. index::
   pair: DequeueAggregate; reverse!

:spadfun:`reverse!`\: % -> % 
  \ ``reverse!(d)``\  destructively replaces \ ``d``\  by its reverse dequeue, i.e. the top (front) element is now the bottom (back) element, and so on.

.. _l44657175657565416767726567617465-726f7461746521:

\ :ref:`rotate! <l5175657565416767726567617465-726f7461746521>`\ \: % -> % 
  from \ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S

.. _l44657175657565416767726567617465-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-73656c656374:

\ :ref:`select <l436f6c6c656374696f6e-73656c656374>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  from \ :ref:`Collection <l436f6c6c656374696f6e>`\  S

.. _l44657175657565416767726567617465-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l44657175657565416767726567617465-746f70:

\ :ref:`top <l537461636b416767726567617465-746f70>`\ \: % -> S 
  from \ :ref:`StackAggregate <l537461636b416767726567617465>`\  S


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BagAggregate <l426167416767726567617465>`\  S 

\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

\ :ref:`Collection <l436f6c6c656374696f6e>`\  S 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  S if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  if S has \ :ref:`Hashable <l4861736861626c65>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S) if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  and S has \ :ref:`Evalable <l4576616c61626c65>`\  S

\ :ref:`QueueAggregate <l5175657565416767726567617465>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

\ :ref:`StackAggregate <l537461636b416767726567617465>`\  S 

