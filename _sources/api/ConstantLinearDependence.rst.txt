.. index:: ConstantLinearDependence

.. _l436f6e7374616e744c696e656172446570656e64656e6365:

ConstantLinearDependence(R, F)
==============================

:viewcode:`rdeefx.spad line 32 <rdeefx.spad#L32>` :editcode:`[edit on github] <rdeefx.spad#L32>`

* R: Join(\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ )

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


\ ``ConstantLinearDependence(R, F)``\  supports solving linear systems with coefficients in \ ``Expression(R)``\  over constants. The parameter \ ``ld``\  to each function is a list of derivations to use. By definition element \ ``f``\  from \ ``Expression(R)``\  is a constant if for each \ ``d``\  in \ ``ld``\  we have \ ``d(f) = 0``\ . We assume that inputs are normalized in such a way that field of constants is generated by constant kernels.


.. _l436f6e7374616e744c696e656172446570656e64656e6365-636f6e7374616e745f7375627370616365:

.. index::
   pair: ConstantLinearDependence; constant_subspace

:spadfun:`constant_subspace`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Record(transform: \ :ref:`Matrix <l4d6174726978>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``constant_subspace(b, ld)``\  returns [\ ``M``\ , \ ``nb``\ ] such that \ ``nb``\  is basis of subspace spanned by \ ``b``\  over \ ``F``\  consistng of vectors with constant coordinates. \ ``M``\  is the transformation matrix, i.e. \ ``mnb``\  = \ ``M``\  \ ``mb``\  where \ ``mb``\  (\ ``mnb``\  respectively) is matrix having \ ``b``\  (\ ``nb``\  respectively) as rows.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-6c696e656172446570656e64656e63654f766572436f6e7374616e7473:

.. index::
   pair: ConstantLinearDependence; linearDependenceOverConstants

:spadfun:`linearDependenceOverConstants`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Union(\ :ref:`Vector <l566563746f72>`\  F, failed) 
  \ ``linearlyDependenceOverConstants([v1, ..., vn], ld)``\  returns \ ``[c1, ..., cn]``\  if \ ``c1*v1 + ... + cn*vn = 0``\  and not all the \ ``ci``\ \ ``'s``\  are 0, "failed" if the \ ``vi``\ \ ``'s``\  are linearly independent over constants.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-6c696e6561726c79446570656e64656e744f766572436f6e7374616e74733f:

.. index::
   pair: ConstantLinearDependence; linearlyDependentOverConstants?

:spadfun:`linearlyDependentOverConstants?`\: (\ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``linearlyDependentOverConstants?([v1, ..., vn], ld)``\  returns \ ``true``\  if the \ ``vi``\ \ ``'s``\  are linearly dependent over constants, \ ``false``\  otherwise.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-6e756c6c53706163654f766572436f6e7374616e7473:

.. index::
   pair: ConstantLinearDependence; nullSpaceOverConstants

:spadfun:`nullSpaceOverConstants`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F 
  \ ``nullSpaceOverConstants(A, ld)``\  returns basis of the homogeneous system \ ``A*vc = 0``\  where \ ``vc``\  is a vector of constants.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-706172746963756c6172536f6c7574696f6e4f766572436f6e7374616e7473:

.. index::
   pair: ConstantLinearDependence; particularSolutionOverConstants

:spadfun:`particularSolutionOverConstants`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Union(\ :ref:`Vector <l566563746f72>`\  F, failed) 
  \ ``solveLinearlyOverConstants([v1, ..., vn], u, ld)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such rational numbers \ ``ci``\ \ ``'s``\  exist.


.. index::
   pair: ConstantLinearDependence; particularSolutionOverConstants

:spadfun:`particularSolutionOverConstants`\: (\ :ref:`Vector <l566563746f72>`\  F, F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Union(\ :ref:`Vector <l566563746f72>`\  F, failed) 
  \ ``particularSolutionOverConstants([v1, ..., vn], u, ld)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such constants numbers \ ``ci``\ \ ``'s``\  exist.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-7265647563656453797374656d:

.. index::
   pair: ConstantLinearDependence; reducedSystem

:spadfun:`reducedSystem`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> \ :ref:`Matrix <l4d6174726978>`\  F 
  \ ``reducedSystem(A, ld)``\  returns a matrix of constants \ ``B``\  such that \ ``A x = 0``\  and \ ``B x = 0``\  have the same solutions over constants.


.. index::
   pair: ConstantLinearDependence; reducedSystem

:spadfun:`reducedSystem`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  F, vec: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``reducedSystem(A, v, ld)``\  returns matrix of constants \ ``B``\  and vector of constants \ ``w``\  such that \ ``A x = v``\  and \ ``B x = w``\  have the same solutions over constants.

.. _l436f6e7374616e744c696e656172446570656e64656e6365-736f6c76654c696e6561724f766572436f6e7374616e7473:

.. index::
   pair: ConstantLinearDependence; solveLinearOverConstants

:spadfun:`solveLinearOverConstants`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solveLinearOverConstants([v1, ..., vn], u, ld)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


.. index::
   pair: ConstantLinearDependence; solveLinearOverConstants

:spadfun:`solveLinearOverConstants`\: (\ :ref:`Vector <l566563746f72>`\  F, F, \ :ref:`List <l4c697374>`\ (F -> F)) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solveLinearOverConstants([v1, ..., vn], u, ld)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


