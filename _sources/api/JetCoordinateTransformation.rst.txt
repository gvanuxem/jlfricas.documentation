.. index:: JetCoordinateTransformation

.. _l4a6574436f6f7264696e6174655472616e73666f726d6174696f6e:

JetCoordinateTransformation(JB1, JB2, Y, W)
===========================================

:viewcode:`jet.spad line 6338 <jet.spad#L6338>` :editcode:`[edit on github] <jet.spad#L6338>`

* JB1: \ :ref:`JetBundleCategory <l4a657442756e646c6543617465676f7279>`\ 

* JB2: \ :ref:`JetBundleCategory <l4a657442756e646c6543617465676f7279>`\ 

* Y: \ :ref:`Vector <l566563746f72>`\  \ :ref:`JetBundleExpression <l4a657442756e646c6545787072657373696f6e>`\  JB2

* W: \ :ref:`Vector <l566563746f72>`\  \ :ref:`JetBundleExpression <l4a657442756e646c6545787072657373696f6e>`\  JB2


\ :ref:`JetCoordinateTransformation <l4a6574436f6f7264696e6174655472616e73666f726d6174696f6e>`\  implements changes of local coordinates. Given are the changes of the coordinates of the base space, i.e. the independent and dependent variables. The transformations of the derivatives are computed via the chain rule. \ ``Y``\  (\ ``W``\ ) contains expressions for the old variables in terms of the new ones.


.. _l4a6574436f6f7264696e6174655472616e73666f726d6174696f6e-7472616e73666f726d:

.. index::
   pair: JetCoordinateTransformation; transform

:spadfun:`transform`\: JB1 -> \ :ref:`JetBundleExpression <l4a657442756e646c6545787072657373696f6e>`\  JB2 
  \ ``transform(jv)``\  transforms a jet variable \ ``jv``\  into a function of the new coordinates.


.. index::
   pair: JetCoordinateTransformation; transform

:spadfun:`transform`\: \ :ref:`JetBundleExpression <l4a657442756e646c6545787072657373696f6e>`\  JB1 -> \ :ref:`JetBundleExpression <l4a657442756e646c6545787072657373696f6e>`\  JB2 
  \ ``transform(f)``\  rewrites a function of the old coordinates in the new ones.


