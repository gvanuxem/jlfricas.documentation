.. index:: LyndonWord

.. _l4c796e646f6e576f7264:

LyndonWord VarSet
=================

:viewcode:`xlpoly.spad line 141 <xlpoly.spad#L141>` :editcode:`[edit on github] <xlpoly.spad#L141>`

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


Lyndon words over arbitrary (ordered) symbols: see Free Lie Algebras by \ ``C``\ . Reutenauer (Oxford science publications). A Lyndon word is a word which is smaller than any of its right factors \ ``w``\ .\ ``r``\ .\ ``t``\ . the pure lexicographical ordering. If \ ``a``\  and \ ``b``\  are two Lyndon words such that \ ``a < b``\  holds \ ``w``\ .\ ``r``\ .\ ``t``\  lexicographical ordering then \ ``a*b``\  is a Lyndon word. Parenthesized Lyndon words can be generated from symbols by using the following rule: \ ``[[a, b], c]``\  is a Lyndon word iff \ ``a*b < c <= b``\  holds. Lyndon words are internally represented by binary trees using the \ :ref:`FreeMagma <l467265654d61676d61>`\  domain constructor. Two ordering are provided: lexicographic and length-lexicographic.   Author : Michel Petitot (petitot@lifl.\ ``fr``\ ).


.. _l4c796e646f6e576f7264-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c796e646f6e576f7264-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c796e646f6e576f7264-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c796e646f6e576f7264-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c796e646f6e576f7264-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c796e646f6e576f7264-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c796e646f6e576f7264-636f65726365:

.. index::
   pair: LyndonWord; coerce

:spadfun:`coerce`\: % -> \ :ref:`FreeMagma <l467265654d61676d61>`\  VarSet 
  \ ``coerce(x)``\  returns the element of \ :ref:`FreeMagma <l467265654d61676d61>`\ (VarSet) corresponding to \ ``x``\ .


.. index::
   pair: LyndonWord; coerce

:spadfun:`coerce`\: % -> \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet 
  \ ``coerce(x)``\  returns the element of \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\ (VarSet) corresponding to \ ``x``\ .


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: VarSet -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  VarSet

.. _l4c796e646f6e576f7264-666163746f72:

.. index::
   pair: LyndonWord; factor

:spadfun:`factor`\: \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet -> \ :ref:`List <l4c697374>`\  % 
  \ ``factor(x)``\  returns the decreasing factorization into Lyndon words.

.. _l4c796e646f6e576f7264-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4c796e646f6e576f7264-6c656674:

.. index::
   pair: LyndonWord; left

:spadfun:`left`\: % -> % 
  \ ``left(x)``\  returns left subtree of \ ``x``\  or error if \ :ref:`retractable? <l4c796e646f6e576f7264-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\ .

.. _l4c796e646f6e576f7264-6c656e677468:

.. index::
   pair: LyndonWord; length

:spadfun:`length`\: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``length(x)``\  returns the number of entries in \ ``x``\ .

.. _l4c796e646f6e576f7264-6c657869636f:

.. index::
   pair: LyndonWord; lexico

:spadfun:`lexico`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lexico(x, y)``\  returns \ ``true``\  iff \ ``x``\  is smaller than \ ``y``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the lexicographical ordering induced by \ ``VarSet``\ .

.. _l4c796e646f6e576f7264-6c796e646f6e3f:

.. index::
   pair: LyndonWord; lyndon?

:spadfun:`lyndon?`\: \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lyndon?(w)``\  test if \ ``w``\  is a Lyndon word.

.. _l4c796e646f6e576f7264-6c796e646f6e:

.. index::
   pair: LyndonWord; lyndon

:spadfun:`lyndon`\: \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet -> % 
  \ ``lyndon(w)``\  convert \ ``w``\  into a Lyndon word, error if \ ``w``\  is not a Lyndon word.

.. _l4c796e646f6e576f7264-6c796e646f6e496643616e:

.. index::
   pair: LyndonWord; lyndonIfCan

:spadfun:`lyndonIfCan`\: \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VarSet -> Union(%, failed) 
  \ ``lyndonIfCan(w)``\  convert \ ``w``\  into a Lyndon word.

.. _l4c796e646f6e576f7264-4c796e646f6e576f7264734c69737431:

.. index::
   pair: LyndonWord; LyndonWordsList1

:spadfun:`LyndonWordsList1`\: (\ :ref:`List <l4c697374>`\  VarSet, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`OneDimensionalArray <l4f6e6544696d656e73696f6e616c4172726179>`\  \ :ref:`List <l4c697374>`\  % 
  \ ``LyndonWordsList1(vl, n)``\  returns an array of lists of Lyndon words over the alphabet \ ``vl``\ , up to order \ ``n``\ .

.. _l4c796e646f6e576f7264-4c796e646f6e576f7264734c697374:

.. index::
   pair: LyndonWord; LyndonWordsList

:spadfun:`LyndonWordsList`\: (\ :ref:`List <l4c697374>`\  VarSet, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``LyndonWordsList(vl, n)``\  returns the list of Lyndon words over the alphabet \ ``vl``\ , up to order \ ``n``\ .

.. _l4c796e646f6e576f7264-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4c796e646f6e576f7264-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4c796e646f6e576f7264-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> VarSet 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet

.. _l4c796e646f6e576f7264-7265747261637461626c653f:

.. index::
   pair: LyndonWord; retractable?

:spadfun:`retractable?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``retractable?(x)``\  tests if \ ``x``\  is a tree with only one entry.

.. _l4c796e646f6e576f7264-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(VarSet, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet

.. _l4c796e646f6e576f7264-7269676874:

.. index::
   pair: LyndonWord; right

:spadfun:`right`\: % -> % 
  \ ``right(x)``\  returns right subtree of \ ``x``\  or error if \ :ref:`retractable? <l4c796e646f6e576f7264-7265747261637461626c653f>`\ (\ ``x``\ ) is \ ``true``\ .

.. _l4c796e646f6e576f7264-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4c796e646f6e576f7264-7661724c697374:

.. index::
   pair: LyndonWord; varList

:spadfun:`varList`\: % -> \ :ref:`List <l4c697374>`\  VarSet 
  \ ``varList(x)``\  returns the list of distinct entries of \ ``x``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  VarSet 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  VarSet 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

