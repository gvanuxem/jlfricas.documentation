.. index:: CombinatorialFunction

.. _l436f6d62696e61746f7269616c46756e6374696f6e:

CombinatorialFunction(R, F)
===========================

:viewcode:`combfunc.spad line 29 <combfunc.spad#L29>` :editcode:`[edit on github] <combfunc.spad#L29>`

* R: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ )

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


Provides combinatorial functions over an integral domain.


.. _l436f6d62696e61746f7269616c46756e6374696f6e-5e:

.. index::
   pair: CombinatorialFunction; ^

:spadfun:`^`\: (F, F) -> F 
  \ ``a ^ b``\  returns the formal exponential a^b.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-62656c6f6e673f:

.. index::
   pair: CombinatorialFunction; belong?

:spadfun:`belong?`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``belong?(op)``\  returns \ ``true``\  if \ ``op``\  is a combinatorial operator.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-62696e6f6d69616c:

.. index::
   pair: CombinatorialFunction; binomial

:spadfun:`binomial`\: (F, F) -> F 
  \ ``binomial(n, r)``\  returns the number of subsets of \ ``r``\  objects taken among \ ``n``\  objects, i.e. \ ``n!/``\ (\ ``r!``\  * (\ ``n``\ -\ ``r``\ )!).

.. _l436f6d62696e61746f7269616c46756e6374696f6e-666163746f7269616c:

.. index::
   pair: CombinatorialFunction; factorial

:spadfun:`factorial`\: F -> F 
  \ ``factorial(n)``\  returns the factorial of \ ``n``\ , i.e. \ ``n!``\ .

.. _l436f6d62696e61746f7269616c46756e6374696f6e-666163746f7269616c73:

.. index::
   pair: CombinatorialFunction; factorials

:spadfun:`factorials`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``factorials(f, x)``\  rewrites the permutations and binomials in \ ``f``\  involving \ ``x``\  in terms of factorials.


.. index::
   pair: CombinatorialFunction; factorials

:spadfun:`factorials`\: F -> F 
  \ ``factorials(f)``\  rewrites the permutations and binomials in \ ``f``\  in terms of factorials.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-696962696e6f6d:

.. index::
   pair: CombinatorialFunction; iibinom

:spadfun:`iibinom`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iibinom(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-69696470726f64:

.. index::
   pair: CombinatorialFunction; iidprod

:spadfun:`iidprod`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iidprod(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-69696473756d:

.. index::
   pair: CombinatorialFunction; iidsum

:spadfun:`iidsum`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iidsum(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-696966616374:

.. index::
   pair: CombinatorialFunction; iifact

:spadfun:`iifact`\: F -> F 
  \ ``iifact(x)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-69697065726d:

.. index::
   pair: CombinatorialFunction; iiperm

:spadfun:`iiperm`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iiperm(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-6969706f77:

.. index::
   pair: CombinatorialFunction; iipow

:spadfun:`iipow`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``iipow(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-69706f77:

.. index::
   pair: CombinatorialFunction; ipow

:spadfun:`ipow`\: \ :ref:`List <l4c697374>`\  F -> F 
  \ ``ipow(l)``\  should be local but conditional.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-6f70657261746f72:

.. index::
   pair: CombinatorialFunction; operator

:spadfun:`operator`\: \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operator(op)``\  returns a copy of \ ``op``\  with the domain-dependent properties appropriate for \ ``F``\ ; error if \ ``op``\  is not a combinatorial operator.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-7065726d75746174696f6e:

.. index::
   pair: CombinatorialFunction; permutation

:spadfun:`permutation`\: (F, F) -> F 
  \ ``permutation(n, r)``\  returns the number of permutations of \ ``n``\  objects taken \ ``r``\  at a time, i.e. \ ``n!/``\ (\ ``n``\ -\ ``r``\ )!.

.. _l436f6d62696e61746f7269616c46756e6374696f6e-70726f64756374:

.. index::
   pair: CombinatorialFunction; product

:spadfun:`product`\: (F, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  F) -> F 
  \ ``product(f(n), n = a..b)``\  returns \ ``f``\ (a) * ... * \ ``f``\ (\ ``b``\ ) as a formal product.


.. index::
   pair: CombinatorialFunction; product

:spadfun:`product`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``product(f(n), n)``\  returns the formal product \ ``P``\ (\ ``n``\ ) which verifies \ ``P``\ (\ ``n+1``\ )\ ``/P``\ (\ ``n``\ ) = \ ``f``\ (\ ``n``\ ).

.. _l436f6d62696e61746f7269616c46756e6374696f6e-73756d6d6174696f6e:

.. index::
   pair: CombinatorialFunction; summation

:spadfun:`summation`\: (F, \ :ref:`SegmentBinding <l5365676d656e7442696e64696e67>`\  F) -> F 
  \ ``summation(f(n), n = a..b)``\  returns \ ``f``\ (a) + ... + \ ``f``\ (\ ``b``\ ) as a formal sum.


.. index::
   pair: CombinatorialFunction; summation

:spadfun:`summation`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F 
  \ ``summation(f(n), n)``\  returns the formal sum \ ``S``\ (\ ``n``\ ) which verifies \ ``S``\ (\ ``n+1``\ ) - \ ``S``\ (\ ``n``\ ) = \ ``f``\ (\ ``n``\ ).


