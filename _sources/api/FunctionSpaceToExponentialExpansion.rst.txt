.. index:: FunctionSpaceToExponentialExpansion

.. _l46756e6374696f6e5370616365546f4578706f6e656e7469616c457870616e73696f6e:

FunctionSpaceToExponentialExpansion(R, FE, x, cen)
==================================================

:viewcode:`fs2expxp.spad line 1 <fs2expxp.spad#L1>` :editcode:`[edit on github] <fs2expxp.spad#L1>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* FE: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)

* x: \ :ref:`Symbol <l53796d626f6c>`\ 

* cen: FE


This package converts expressions in some function space to exponential expansions.


.. _l46756e6374696f6e5370616365546f4578706f6e656e7469616c457870616e73696f6e-65787072546f585850:

.. index::
   pair: FunctionSpaceToExponentialExpansion; exprToXXP

:spadfun:`exprToXXP`\: (FE, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(%expansion: \ :ref:`ExponentialExpansion <l4578706f6e656e7469616c457870616e73696f6e>`\ (R, FE, x, cen), %problem: Record(func: \ :ref:`String <l537472696e67>`\ , prob: \ :ref:`String <l537472696e67>`\ )) 
  \ ``exprToXXP(fcn, posCheck?)``\  converts the expression \ ``fcn``\  to an exponential expansion. If \ ``posCheck?``\  is \ ``true``\ , log\ ``'s``\  of negative numbers are not allowed nor are \ ``n``\ th roots of negative numbers with \ ``n``\  even. If \ ``posCheck?``\  is \ ``false``\ , these are allowed.

.. _l46756e6374696f6e5370616365546f4578706f6e656e7469616c457870616e73696f6e-6c6f63616c416273:

.. index::
   pair: FunctionSpaceToExponentialExpansion; localAbs

:spadfun:`localAbs`\: FE -> FE 
  \ ``localAbs(fcn)``\  = \ ``abs(fcn)``\  or \ ``sqrt(fcn^2)``\  depending on whether or not FE has a function \ ``abs``\ . This should be a local function, but the compiler won\ ``'t``\  allow it.


