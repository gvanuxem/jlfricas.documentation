.. index:: ParametricTranscendentalIntegration

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e:

ParametricTranscendentalIntegration(F, UP)
==========================================

:viewcode:`intpar.spad line 466 <intpar.spad#L466>` :editcode:`[edit on github] <intpar.spad#L466>`

* F: \ :ref:`Field <l4669656c64>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F


This package implements parametric integration in transcendental case.


.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-64696666657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; diffextint

:spadfun:`diffextint`\: (\ :ref:`List <l4c697374>`\  UP -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``diffextint(ext, csolve, [g1, ..., gn])``\  is like primextint and expextint but for differentialy transcendental extensions.

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-657870657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; expextint

:spadfun:`expextint`\: (UP -> UP, (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  F) -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`List <l4c697374>`\  Record(ratpart: \ :ref:`Fraction <l4672616374696f6e>`\  UP, coeffs: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``expextint(', rde, csolve, [g1, ..., gn])``\  returns a basis of solution of the homogeneous system \ ``h' + c1*g1 + ... + cn*gn = 0``\  Argument foo is an parametric \ ``rde``\  solver on \ ``F``\ . \ ``csolve``\  is solver over constants.

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-6c6f67657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; logextint

:spadfun:`logextint`\: (UP -> UP, UP -> \ :ref:`Factored <l466163746f726564>`\  UP, \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  UP -> Record(logands: \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ), \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> Record(logands: \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``logextint(der, ufactor, csolve, rec, [g1, ..., gn])``\  returns [[\ ``u1``\ , ..., um], bas] giving basis of solution of the homogeneous systym \ ``c1*g1 + ... + cn*gn + c_{n+1}u1'/u1 + ... c_{n+m}um'/um = 0``\ 

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-6d6f6e6f6c6f67657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; monologextint

:spadfun:`monologextint`\: (\ :ref:`List <l4c697374>`\  UP, \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  F -> Record(logands: \ :ref:`List <l4c697374>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ )) -> Record(logands: \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``monologextint(lup, csolve, rec)``\  is a helper for logextint

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-7072696d657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; primextint

:spadfun:`primextint`\: (UP -> UP, \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`List <l4c697374>`\  Record(ratpart: \ :ref:`Fraction <l4672616374696f6e>`\  UP, coeffs: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``primextint(', ext, csolve, [g1, ..., gn])``\  returns a basis of solutions of the homogeneous system \ ``h' + c1*g1 + ... + cn*gn = 0``\ . Argument \ ``ext``\  is an extended integration function on \ ``F``\ . \ ``csolve``\  is solver over constants.

.. _l506172616d65747269635472616e7363656e64656e74616c496e746567726174696f6e-756e6b657874696e74:

.. index::
   pair: ParametricTranscendentalIntegration; unkextint

:spadfun:`unkextint`\: (\ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F), \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP) -> \ :ref:`List <l4c697374>`\  Record(ratpart: F, coeffs: \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``unkextint(ext, csolve, [g1, ..., gn])``\  is like primextint and expextint but for makes no assumption about generator of the extension.


