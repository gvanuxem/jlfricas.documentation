.. index:: RecursivePolynomialCategory

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279:

RecursivePolynomialCategory(R, E, V)
====================================

:viewcode:`newpoly.spad line 231 <newpoly.spad#L231>` :editcode:`[edit on github] <newpoly.spad#L231>`

* R: \ :ref:`Ring <l52696e67>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* V: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


A category for general multi-variate polynomials with coefficients in a ring, variables in an ordered set, and exponents from an ordered abelian monoid, with a \ :spadfun:`sup`\  operation. When not constant, such a polynomial is viewed as a univariate polynomial in its main variable \ ``w``\ . \ ``r``\ . \ ``t``\ . to the total ordering on the elements in the ordered set, so that some operations usually defined for univariate polynomials make sense here.


.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-2f:

\ :ref:`/ <l4162656c69616e4d6f6e6f696452696e67-2f>`\ \: (%, R) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-62696e6f6d54686d45787074:

\ :ref:`binomThmExpt <l46696e6974654162656c69616e4d6f6e6f696452696e67-62696e6f6d54686d45787074>`\ \: (%, %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if % has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636861727468526f6f74:

\ :ref:`charthRoot <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-636861727468526f6f74>`\ \: % -> Union(%, failed) if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  and % has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  or R has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f656666696369656e74:

\ :ref:`coefficient <l467265654d6f64756c6543617465676f7279-636f656666696369656e74>`\ \: (%, E) -> R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)


\ :ref:`coefficient <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-636f656666696369656e74>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`coefficient <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-636f656666696369656e74>`\ \: (%, V, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f656666696369656e7473:

\ :ref:`coefficients <l467265654d6f64756c6543617465676f7279-636f656666696369656e7473>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: V -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  V

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6e646974696f6e50:

\ :ref:`conditionP <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-636f6e646974696f6e50>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> Union(\ :ref:`Vector <l566563746f72>`\  %, failed) if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  and % has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6e737472756374:

\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: E, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: E, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6e74656e74:

\ :ref:`content <l46696e6974654162656c69616e4d6f6e6f696452696e67-636f6e74656e74>`\ \: % -> R if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)


\ :ref:`content <l506f6c796e6f6d69616c43617465676f7279-636f6e74656e74>`\ \: (%, V) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 


.. index::
   pair: RecursivePolynomialCategory; convert

:spadfun:`convert`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``convert(p)``\  returns the same as \ ``retract(p)``\ .


.. index::
   pair: RecursivePolynomialCategory; convert

:spadfun:`convert`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``convert(p)``\  returns the same as \ ``retract(p)``\ .


.. index::
   pair: RecursivePolynomialCategory; convert

:spadfun:`convert`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``convert(p)``\  returns the same as \ ``retract(p)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-44:

\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, V) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, V, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-64656570657374496e697469616c:

.. index::
   pair: RecursivePolynomialCategory; deepestInitial

:spadfun:`deepestInitial`\: % -> % 
  \ ``deepestInitial(p)``\  returns an error if \ ``p``\  belongs to \ ``R``\ , otherwise returns the last term of \ ``iteratedInitials(p)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-646565706573745461696c:

.. index::
   pair: RecursivePolynomialCategory; deepestTail

:spadfun:`deepestTail`\: % -> % 
  \ ``deepestTail(p)``\  returns \ ``0``\  if \ ``p``\  belongs to \ ``R``\ , otherwise returns tail(\ ``p``\ ), if \ ``tail(p)``\  belongs to \ ``R``\  or \ ``mvar(tail(p)) < mvar(p)``\ , otherwise returns \ ``deepestTail(tail(p))``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-646567726565:

\ :ref:`degree <l4162656c69616e4d6f6e6f696452696e67-646567726565>`\ \: % -> E 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (R, E)


\ :ref:`degree <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-646567726565>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`degree <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-646567726565>`\ \: (%, V) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-646966666572656e7469617465:

\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, V) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, V, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6469736372696d696e616e74:

\ :ref:`discriminant <l506f6c796e6f6d69616c43617465676f7279-6469736372696d696e616e74>`\ \: (%, V) -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % 
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  R) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, V, %) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, V, R) -> % 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, R)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-657861637451756f7469656e7421:

.. index::
   pair: RecursivePolynomialCategory; exactQuotient!

:spadfun:`exactQuotient!`\: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exactQuotient!(a, b)``\  replaces \ ``a``\  by \ ``exactQuotient(a, b)``\ 


.. index::
   pair: RecursivePolynomialCategory; exactQuotient!

:spadfun:`exactQuotient!`\: (%, R) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exactQuotient!(p, r)``\  replaces \ ``p``\  by \ ``exactQuotient(p, r)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-657861637451756f7469656e74:

.. index::
   pair: RecursivePolynomialCategory; exactQuotient

:spadfun:`exactQuotient`\: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exactQuotient(a, b)``\  computes the exact quotient of \ ``a``\  by \ ``b``\ , which is assumed to be a divisor of \ ``a``\ . No error is returned if this exact quotient fails!


.. index::
   pair: RecursivePolynomialCategory; exactQuotient

:spadfun:`exactQuotient`\: (%, R) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exactQuotient(p, r)``\  computes the exact quotient of \ ``p``\  by \ ``r``\ , which is assumed to be a divisor of \ ``p``\ . No error is returned if this exact quotient fails!

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 


\ :ref:`exquo <l46696e6974654162656c69616e4d6f6e6f696452696e67-657871756f>`\ \: (%, R) -> Union(%, failed) if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-657874656e646564537562526573756c74616e74476364:

.. index::
   pair: RecursivePolynomialCategory; extendedSubResultantGcd

:spadfun:`extendedSubResultantGcd`\: (%, %) -> Record(gcd: %, coef1: %, coef2: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``extendedSubResultantGcd(a, b)``\  returns \ ``[g, ca, cb]``\  such that \ ``g``\  is \ ``subResultantGcd(a, b)``\  and we have \ ``ca * a + cb * cb = g``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-666163746f72506f6c796e6f6d69616c:

\ :ref:`factorPolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f72506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-666163746f7253717561726546726565506f6c796e6f6d69616c:

\ :ref:`factorSquareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f7253717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-666d656367:

\ :ref:`fmecg <l46696e6974654162656c69616e4d6f6e6f696452696e67-666d656367>`\ \: (%, E, R, %) -> % 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


.. index::
   pair: RecursivePolynomialCategory; gcd

:spadfun:`gcd`\: (R, %) -> R if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``gcd(r, p)``\  returns the \ ``gcd``\  of \ ``r``\  and the content of \ ``p``\ .


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-67726f756e643f:

\ :ref:`ground? <l46696e6974654162656c69616e4d6f6e6f696452696e67-67726f756e643f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-67726f756e64:

\ :ref:`ground <l46696e6974654162656c69616e4d6f6e6f696452696e67-67726f756e64>`\ \: % -> R 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68616c66457874656e646564537562526573756c74616e7447636431:

.. index::
   pair: RecursivePolynomialCategory; halfExtendedSubResultantGcd1

:spadfun:`halfExtendedSubResultantGcd1`\: (%, %) -> Record(gcd: %, coef1: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``halfExtendedSubResultantGcd1(a, b)``\  returns \ ``[g, ca]``\  if \ ``extendedSubResultantGcd(a, b)``\  returns \ ``[g, ca, cb]``\  otherwise produces an error.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68616c66457874656e646564537562526573756c74616e7447636432:

.. index::
   pair: RecursivePolynomialCategory; halfExtendedSubResultantGcd2

:spadfun:`halfExtendedSubResultantGcd2`\: (%, %) -> Record(gcd: %, coef2: %) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``halfExtendedSubResultantGcd2(a, b)``\  returns \ ``[g, cb]``\  if \ ``extendedSubResultantGcd(a, b)``\  returns \ ``[g, ca, cb]``\  otherwise produces an error.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if V has \ :ref:`Hashable <l4861736861626c65>`\  and R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if V has \ :ref:`Hashable <l4861736861626c65>`\  and R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68656164:

.. index::
   pair: RecursivePolynomialCategory; head

:spadfun:`head`\: % -> % 
  \ ``head(p)``\  returns \ ``p``\  if \ ``p``\  belongs to \ ``R``\ , otherwise returns its leading term (monomial in the FriCAS sense), where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68656164526564756365:

.. index::
   pair: RecursivePolynomialCategory; headReduce

:spadfun:`headReduce`\: (%, %) -> % 
  \ ``headReduce(a, b)``\  returns a polynomial \ ``r``\  such that \ ``headReduced?(r, b)``\  holds and there exists an integer \ ``e``\  such that \ ``init(b)^e a - r``\  is zero modulo \ ``b``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-68656164526564756365643f:

.. index::
   pair: RecursivePolynomialCategory; headReduced?

:spadfun:`headReduced?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``headReduced?(a, b)``\  returns \ ``true``\  iff \ ``degree(head(a), mvar(b)) < mdeg(b)``\ .


.. index::
   pair: RecursivePolynomialCategory; headReduced?

:spadfun:`headReduced?`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``headReduced?(q, lp)``\  returns \ ``true``\  iff \ ``headReduced?(q, p)``\  holds for every \ ``p``\  in \ ``lp``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-69657861637451756f:

.. index::
   pair: RecursivePolynomialCategory; iexactQuo

:spadfun:`iexactQuo`\: (R, R) -> R if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``iexactQuo(x, y)``\  should be local but conditional

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-696e665269747457753f:

.. index::
   pair: RecursivePolynomialCategory; infRittWu?

:spadfun:`infRittWu?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``infRittWu?(a, b)``\  returns \ ``true``\  if \ ``a``\  is less than \ ``b``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-696e6974:

.. index::
   pair: RecursivePolynomialCategory; init

:spadfun:`init`\: % -> % 
  \ ``init(p)``\  returns an error if \ ``p``\  belongs to \ ``R``\ , otherwise returns its leading coefficient, where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-696e697469616c6c79526564756365:

.. index::
   pair: RecursivePolynomialCategory; initiallyReduce

:spadfun:`initiallyReduce`\: (%, %) -> % 
  \ ``initiallyReduce(a, b)``\  returns a polynomial \ ``r``\  such that \ ``initiallyReduced?(r, b)``\  holds and there exists an integer \ ``e``\  such that \ ``init(b)^e a - r``\  is zero modulo \ ``b``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-696e697469616c6c79526564756365643f:

.. index::
   pair: RecursivePolynomialCategory; initiallyReduced?

:spadfun:`initiallyReduced?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``initiallyReduced?(a, b)``\  returns \ ``false``\  iff there exists an iterated initial of \ ``a``\  which is not reduced \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``b``\ .


.. index::
   pair: RecursivePolynomialCategory; initiallyReduced?

:spadfun:`initiallyReduced?`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``initiallyReduced?(q, lp)``\  returns \ ``true``\  iff \ ``initiallyReduced?(q, p)``\  holds for every \ ``p``\  in \ ``lp``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-697345787074:

\ :ref:`isExpt <l506f6c796e6f6d69616c43617465676f7279-697345787074>`\ \: % -> Union(Record(var: V, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), failed) 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6973506c7573:

\ :ref:`isPlus <l506f6c796e6f6d69616c43617465676f7279-6973506c7573>`\ \: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-697354696d6573:

\ :ref:`isTimes <l506f6c796e6f6d69616c43617465676f7279-697354696d6573>`\ \: % -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6974657261746564496e697469616c73:

.. index::
   pair: RecursivePolynomialCategory; iteratedInitials

:spadfun:`iteratedInitials`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``iteratedInitials(p)``\  returns \ ``[]``\  if \ ``p``\  belongs to \ ``R``\ , otherwise returns the list of the iterated initials of \ ``p``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617374537562526573756c74616e74:

.. index::
   pair: RecursivePolynomialCategory; lastSubResultant

:spadfun:`lastSubResultant`\: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``lastSubResultant(a, b)``\  returns the last non-zero subresultant of \ ``a``\  and \ ``b``\  where \ ``a``\  and \ ``b``\  are assumed to have the same main variable \ ``v``\  and are viewed as univariate polynomials in \ ``v``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-4c617a61726451756f7469656e7432:

.. index::
   pair: RecursivePolynomialCategory; LazardQuotient2

:spadfun:`LazardQuotient2`\: (%, %, %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``LazardQuotient2(p, a, b, n)``\  returns \ ``(a^(n-1) * p) exquo b^(n-1)``\  assuming that this quotient does not fail.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-4c617a61726451756f7469656e74:

.. index::
   pair: RecursivePolynomialCategory; LazardQuotient

:spadfun:`LazardQuotient`\: (%, %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``LazardQuotient(a, b, n)``\  returns \ ``a^n exquo b^(n-1)``\  assuming that this quotient does not fail.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617a795071756f:

.. index::
   pair: RecursivePolynomialCategory; lazyPquo

:spadfun:`lazyPquo`\: (%, %) -> % 
  \ ``lazyPquo(a, b)``\  returns the polynomial \ ``q``\  such that \ ``lazyPseudoDivide(a, b)``\  returns \ ``[c, g, q, r]``\ .


.. index::
   pair: RecursivePolynomialCategory; lazyPquo

:spadfun:`lazyPquo`\: (%, %, V) -> % 
  \ ``lazyPquo(a, b, v)``\  returns the polynomial \ ``q``\  such that \ ``lazyPseudoDivide(a, b, v)``\  returns \ ``[c, g, q, r]``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617a795072656d:

.. index::
   pair: RecursivePolynomialCategory; lazyPrem

:spadfun:`lazyPrem`\: (%, %) -> % 
  \ ``lazyPrem(a, b)``\  returns the polynomial \ ``r``\  reduced \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``b``\  and such that \ ``b``\  divides \ ``init(b)^e a - r``\  where \ ``e``\  is the number of steps of this pseudo-division.


.. index::
   pair: RecursivePolynomialCategory; lazyPrem

:spadfun:`lazyPrem`\: (%, %, V) -> % 
  \ ``lazyPrem(a, b, v)``\  returns the polynomial \ ``r``\  reduced \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``b``\  viewed as univariate polynomials in the variable \ ``v``\  such that \ ``b``\  divides \ ``init(b)^e a - r``\  where \ ``e``\  is the number of steps of this pseudo-division.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617a795072656d5769746844656661756c74:

.. index::
   pair: RecursivePolynomialCategory; lazyPremWithDefault

:spadfun:`lazyPremWithDefault`\: (%, %) -> Record(coef: %, gap: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , remainder: %) 
  \ ``lazyPremWithDefault(a, b)``\  returns \ ``[c, g, r]``\  such that \ ``r = lazyPrem(a, b)``\  and \ ``(c^g)*r = prem(a, b)``\ .


.. index::
   pair: RecursivePolynomialCategory; lazyPremWithDefault

:spadfun:`lazyPremWithDefault`\: (%, %, V) -> Record(coef: %, gap: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , remainder: %) 
  \ ``lazyPremWithDefault(a, b, v)``\  returns \ ``[c, g, r]``\  such that \ ``r = lazyPrem(a, b, v)``\  and \ ``(c^g)*r = prem(a, b, v)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617a7950736575646f446976696465:

.. index::
   pair: RecursivePolynomialCategory; lazyPseudoDivide

:spadfun:`lazyPseudoDivide`\: (%, %) -> Record(coef: %, gap: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , quotient: %, remainder: %) 
  \ ``lazyPseudoDivide(a, b)``\  returns \ ``[c, g, q, r]``\  such that \ ``[c, g, r] = lazyPremWithDefault(a, b)``\  and \ ``q``\  is the pseudo-quotient computed in this lazy pseudo-division.


.. index::
   pair: RecursivePolynomialCategory; lazyPseudoDivide

:spadfun:`lazyPseudoDivide`\: (%, %, V) -> Record(coef: %, gap: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , quotient: %, remainder: %) 
  \ ``lazyPseudoDivide(a, b, v)``\  returns \ ``[c, g, q, r]``\  such that \ ``r = lazyPrem(a, b, v)``\ , \ ``(c^g)*r = prem(a, b, v)``\  and \ ``q``\  is the pseudo-quotient computed in this lazy pseudo-division.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c617a7952657369647565436c617373:

.. index::
   pair: RecursivePolynomialCategory; lazyResidueClass

:spadfun:`lazyResidueClass`\: (%, %) -> Record(polnum: %, polden: %, power: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``lazyResidueClass(a, b)``\  returns \ ``[p, q, n]``\  where \ ``p / q^n``\  represents the residue class of \ ``a``\  modulo \ ``b``\  and \ ``p``\  is reduced \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``b``\  and \ ``q``\  is \ ``init(b)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l496e646578656450726f6475637443617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> R 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)


.. index::
   pair: RecursivePolynomialCategory; leadingCoefficient

:spadfun:`leadingCoefficient`\: (%, V) -> % 
  \ ``leadingCoefficient(p, v)``\  returns the leading coefficient of \ ``p``\ , where \ ``p``\  is viewed as A univariate polynomial in \ ``v``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l496e646578656450726f6475637443617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> E 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: E, c: R) 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656173744d6f6e6f6d69616c:

.. index::
   pair: RecursivePolynomialCategory; leastMonomial

:spadfun:`leastMonomial`\: % -> % 
  \ ``leastMonomial(p)``\  returns an error if \ ``p``\  is \ ``O``\ , otherwise, if \ ``p``\  belongs to \ ``R``\  returns \ ``1``\ , otherwise, the monomial of \ ``p``\  with lowest degree, where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c696e656172457874656e64:

\ :ref:`linearExtend <l467265654d6f64756c6543617465676f7279-6c696e656172457874656e64>`\ \: (E -> R, %) -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6c6973744f665465726d73:

\ :ref:`listOfTerms <l496e646578656444697265637450726f6475637443617465676f7279-6c6973744f665465726d73>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(k: E, c: R) 
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e436f656666696369656e7473:

.. index::
   pair: RecursivePolynomialCategory; mainCoefficients

:spadfun:`mainCoefficients`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``mainCoefficients(p)``\  returns an error if \ ``p``\  is \ ``O``\ , otherwise, if \ ``p``\  belongs to \ ``R``\  returns [\ ``p``\ ], otherwise returns the list of the coefficients of \ ``p``\ , where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e436f6e74656e74:

.. index::
   pair: RecursivePolynomialCategory; mainContent

:spadfun:`mainContent`\: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``mainContent(p)``\  returns the content of \ ``p``\  viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \ ``R``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e4d6f6e6f6d69616c:

.. index::
   pair: RecursivePolynomialCategory; mainMonomial

:spadfun:`mainMonomial`\: % -> % 
  \ ``mainMonomial(p)``\  returns an error if \ ``p``\  is \ ``O``\ , otherwise, if \ ``p``\  belongs to \ ``R``\  returns \ ``1``\ , otherwise, \ ``mvar(p)``\  raised to the power \ ``mdeg(p)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e4d6f6e6f6d69616c73:

.. index::
   pair: RecursivePolynomialCategory; mainMonomials

:spadfun:`mainMonomials`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``mainMonomials(p)``\  returns an error if \ ``p``\  is \ ``O``\ , otherwise, if \ ``p``\  belongs to \ ``R``\  returns [1], otherwise returns the list of the monomials of \ ``p``\ , where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e5072696d697469766550617274:

.. index::
   pair: RecursivePolynomialCategory; mainPrimitivePart

:spadfun:`mainPrimitivePart`\: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``mainPrimitivePart(p)``\  returns the primitive part of \ ``p``\  viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \ ``R``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e5371756172654672656550617274:

.. index::
   pair: RecursivePolynomialCategory; mainSquareFreePart

:spadfun:`mainSquareFreePart`\: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``mainSquareFreePart(p)``\  returns the square free part of \ ``p``\  viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \ ``R``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61696e5661726961626c65:

\ :ref:`mainVariable <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-6d61696e5661726961626c65>`\ \: % -> Union(V, failed) 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6170:

\ :ref:`map <l496e646578656450726f6475637443617465676f7279-6d6170>`\ \: (R -> R, %) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d61704578706f6e656e7473:

\ :ref:`mapExponents <l46696e6974654162656c69616e4d6f6e6f696452696e67-6d61704578706f6e656e7473>`\ \: (E -> E, %) -> % 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d646567:

.. index::
   pair: RecursivePolynomialCategory; mdeg

:spadfun:`mdeg`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``mdeg(p)``\  returns an error if \ ``p``\  is \ ``0``\ , otherwise, if \ ``p``\  belongs to \ ``R``\  returns \ ``0``\ , otherwise, returns the degree of \ ``p``\  in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d696e696d756d446567726565:

\ :ref:`minimumDegree <l46696e6974654162656c69616e4d6f6e6f696452696e67-6d696e696d756d446567726565>`\ \: % -> E 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)


\ :ref:`minimumDegree <l506f6c796e6f6d69616c43617465676f7279-6d696e696d756d446567726565>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`minimumDegree <l506f6c796e6f6d69616c43617465676f7279-6d696e696d756d446567726565>`\ \: (%, V) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e69633f:

.. index::
   pair: RecursivePolynomialCategory; monic?

:spadfun:`monic?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``monic?(p)``\  returns \ ``false``\  if \ ``p``\  belongs to \ ``R``\ , otherwise returns \ ``true``\  iff \ ``p``\  is monic as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e6963446976696465:

\ :ref:`monicDivide <l506f6c796e6f6d69616c43617465676f7279-6d6f6e6963446976696465>`\ \: (%, %, V) -> Record(quotient: %, remainder: %) 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e69634d6f64756c6f:

.. index::
   pair: RecursivePolynomialCategory; monicModulo

:spadfun:`monicModulo`\: (%, %) -> % 
  \ ``monicModulo(a, b)``\  computes \ ``a mod b``\ , if \ ``b``\  is monic as univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c3f:

\ :ref:`monomial? <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c:

\ :ref:`monomial <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c>`\ \: (%, \ :ref:`List <l4c697374>`\  V, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`monomial <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c>`\ \: (%, V, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (R, E) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c73:

\ :ref:`monomials <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-6d6f6e6f6d69616c73>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d756c746976617269617465:

\ :ref:`multivariate <l506f6c796e6f6d69616c43617465676f7279-6d756c746976617269617465>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, V) -> % 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`multivariate <l506f6c796e6f6d69616c43617465676f7279-6d756c746976617269617465>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R, V) -> % 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6d766172:

.. index::
   pair: RecursivePolynomialCategory; mvar

:spadfun:`mvar`\: % -> V 
  \ ``mvar(p)``\  returns an error if \ ``p``\  belongs to \ ``R``\ , otherwise returns its main variable \ ``w``\ . \ ``r``\ . \ ``t``\ . to the total ordering on the elements in \ ``V``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6e6578745f737562526573756c74616e7432:

.. index::
   pair: RecursivePolynomialCategory; next_subResultant2

:spadfun:`next_subResultant2`\: (%, %, %, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``next_subResultant2(p, q, z, s)``\  is the multivariate version of the operation \ :ref:`\\ ``next_sousResultant2``\\  <l50736575646f52656d61696e64657253657175656e6365-5c2060606e6578745f736f7573526573756c74616e743260605c20>`\  from the \ :ref:`PseudoRemainderSequence <l50736575646f52656d61696e64657253657175656e6365>`\  constructor.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6e6f726d616c697a65643f:

.. index::
   pair: RecursivePolynomialCategory; normalized?

:spadfun:`normalized?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``normalized?(a, b)``\  returns \ ``true``\  iff \ ``a``\  and its iterated initials have degree zero \ ``w``\ .\ ``r``\ .\ ``t``\ . the main variable of \ ``b``\ 


.. index::
   pair: RecursivePolynomialCategory; normalized?

:spadfun:`normalized?`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``normalized?(q, lp)``\  returns \ ``true``\  iff \ ``normalized?(q, p)``\  holds for every \ ``p``\  in \ ``lp``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6e756d6265724f664d6f6e6f6d69616c73:

\ :ref:`numberOfMonomials <l496e646578656444697265637450726f6475637443617465676f7279-6e756d6265724f664d6f6e6f6d69616c73>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7061747465726e4d61746368:

\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Float <l466c6f6174>`\ , %) if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  and V has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`patternMatch <l5061747465726e4d6174636861626c65-7061747465726e4d61746368>`\ \: (%, \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (\ :ref:`Integer <l496e7465676572>`\ , %) if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\  and V has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  or R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-706f6d6f706f21:

\ :ref:`pomopo! <l46696e6974654162656c69616e4d6f6e6f696452696e67-706f6d6f706f21>`\ \: (%, R, E, %) -> % 
  from \ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7071756f:

.. index::
   pair: RecursivePolynomialCategory; pquo

:spadfun:`pquo`\: (%, %) -> % 
  \ ``pquo(a, b)``\  computes the pseudo-quotient of \ ``a``\  by \ ``b``\ , both viewed as univariate polynomials in the main variable of \ ``b``\ .


.. index::
   pair: RecursivePolynomialCategory; pquo

:spadfun:`pquo`\: (%, %, V) -> % 
  \ ``pquo(a, b, v)``\  computes the pseudo-quotient of \ ``a``\  by \ ``b``\ , both viewed as univariate polynomials in \ ``v``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072656d:

.. index::
   pair: RecursivePolynomialCategory; prem

:spadfun:`prem`\: (%, %) -> % 
  \ ``prem(a, b)``\  computes the pseudo-remainder of \ ``a``\  by \ ``b``\ , both viewed as univariate polynomials in the main variable of \ ``b``\ .


.. index::
   pair: RecursivePolynomialCategory; prem

:spadfun:`prem`\: (%, %, V) -> % 
  \ ``prem(a, b, v)``\  computes the pseudo-remainder of \ ``a``\  by \ ``b``\ , both viewed as univariate polynomials in \ ``v``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d69746976654d6f6e6f6d69616c73:

\ :ref:`primitiveMonomials <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-7072696d69746976654d6f6e6f6d69616c73>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d69746976655061727421:

.. index::
   pair: RecursivePolynomialCategory; primitivePart!

:spadfun:`primitivePart!`\: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  \ ``primitivePart!(p)``\  replaces \ ``p``\  by its primitive part.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d697469766550617274:

\ :ref:`primitivePart <l506f6c796e6f6d69616c43617465676f7279-7072696d697469766550617274>`\ \: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`primitivePart <l506f6c796e6f6d69616c43617465676f7279-7072696d697469766550617274>`\ \: (%, V) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d50617274456c7365556e697443616e6f6e6963616c21:

.. index::
   pair: RecursivePolynomialCategory; primPartElseUnitCanonical!

:spadfun:`primPartElseUnitCanonical!`\: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``primPartElseUnitCanonical!(p)``\  replaces \ ``p``\  by \ ``primPartElseUnitCanonical(p)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7072696d50617274456c7365556e697443616e6f6e6963616c:

.. index::
   pair: RecursivePolynomialCategory; primPartElseUnitCanonical

:spadfun:`primPartElseUnitCanonical`\: % -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``primPartElseUnitCanonical(p)``\  returns \ ``primitivePart(p)``\  if \ ``R``\  is a \ ``gcd``\ -domain, otherwise \ ``unitCanonical(p)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-70736575646f446976696465:

.. index::
   pair: RecursivePolynomialCategory; pseudoDivide

:spadfun:`pseudoDivide`\: (%, %) -> Record(quotient: %, remainder: %) 
  \ ``pseudoDivide(a, b)``\  computes \ ``[pquo(a, b), prem(a, b)]``\ , both polynomials viewed as univariate polynomials in the main variable of \ ``b``\ , if \ ``b``\  is not a constant polynomial.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-71756173694d6f6e69633f:

.. index::
   pair: RecursivePolynomialCategory; quasiMonic?

:spadfun:`quasiMonic?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``quasiMonic?(p)``\  returns \ ``false``\  if \ ``p``\  belongs to \ ``R``\ , otherwise returns \ ``true``\  iff the initial of \ ``p``\  lies in the base ring \ ``R``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-726564756365643f:

.. index::
   pair: RecursivePolynomialCategory; reduced?

:spadfun:`reduced?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``reduced?(a, b)``\  returns \ ``true``\  iff \ ``degree(a, mvar(b)) < mdeg(b)``\ .


.. index::
   pair: RecursivePolynomialCategory; reduced?

:spadfun:`reduced?`\: (%, \ :ref:`List <l4c697374>`\  %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``reduced?(q, lp)``\  returns \ ``true``\  iff \ ``reduced?(q, p)``\  holds for every \ ``p``\  in \ ``lp``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7265647563656453797374656d:

\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: (\ :ref:`Matrix <l4d6174726978>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ , vec: \ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ ) if R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: (\ :ref:`Matrix <l4d6174726978>`\  %, \ :ref:`Vector <l566563746f72>`\  %) -> Record(mat: \ :ref:`Matrix <l4d6174726978>`\  R, vec: \ :ref:`Vector <l566563746f72>`\  R) 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`reducedSystem <l4c696e6561726c794578706c696369744f766572-7265647563656453797374656d>`\ \: \ :ref:`Matrix <l4d6174726978>`\  % -> \ :ref:`Matrix <l4d6174726978>`\  R 
  from \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-726564756374756d:

\ :ref:`reductum <l496e646578656450726f6475637443617465676f7279-726564756374756d>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E)


.. index::
   pair: RecursivePolynomialCategory; reductum

:spadfun:`reductum`\: (%, V) -> % 
  \ ``reductum(p, v)``\  returns the reductum of \ ``p``\ , where \ ``p``\  is viewed as a univariate polynomial in \ ``v``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-726573756c74616e74:

.. index::
   pair: RecursivePolynomialCategory; resultant

:spadfun:`resultant`\: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``resultant(a, b)``\  computes the resultant of \ ``a``\  and \ ``b``\  where \ ``a``\  and \ ``b``\  are assumed to have the same main variable \ ``v``\  and are viewed as univariate polynomials in \ ``v``\ .


\ :ref:`resultant <l506f6c796e6f6d69616c43617465676f7279-726573756c74616e74>`\ \: (%, %, V) -> % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> V 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  V


.. index::
   pair: RecursivePolynomialCategory; retract

:spadfun:`retract`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``retract(p)``\  returns \ ``p``\  as an element of the current domain, if \ ``retractIfCan(p)``\  does not return "failed", otherwise an error is produced.


.. index::
   pair: RecursivePolynomialCategory; retract

:spadfun:`retract`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``retract(p)``\  returns \ ``p``\  as an element of the current domain, if \ ``retractIfCan(p)``\  does not return "failed", otherwise an error is produced.


.. index::
   pair: RecursivePolynomialCategory; retract

:spadfun:`retract`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> % if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``retract(p)``\  returns \ ``p``\  as an element of the current domain, if \ ``retractIfCan(p)``\  does not return "failed", otherwise an error is produced.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(V, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  V


.. index::
   pair: RecursivePolynomialCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``retractIfCan(p)``\  returns \ ``p``\  as an element of the current domain, if all its variables belong to \ ``V``\ .


.. index::
   pair: RecursivePolynomialCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``retractIfCan(p)``\  returns \ ``p``\  as an element of the current domain, if all its variables belong to \ ``V``\ .


.. index::
   pair: RecursivePolynomialCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R -> Union(%, failed) if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``retractIfCan(p)``\  returns \ ``p``\  as an element of the current domain, if all its variables belong to \ ``V``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-526974745775436f6d70617265:

.. index::
   pair: RecursivePolynomialCategory; RittWuCompare

:spadfun:`RittWuCompare`\: (%, %) -> Union(\ :ref:`Boolean <l426f6f6c65616e>`\ , failed) 
  \ ``RittWuCompare(a,b)``\  returns \ ``"failed"``\  if \ ``a``\  and \ ``b``\  have same rank \ ``w``\ .\ ``r``\ .\ ``t``\ . Ritt and Wu Wen Tsun ordering using the refinement of Lazard, otherwise returns \ ``infRittWu?(a, b)``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

\ :ref:`solveLinearPolynomialEquation <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e>`\ \: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, failed) if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-73717561726546726565:

\ :ref:`squareFree <l506f6c796e6f6d69616c43617465676f7279-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7371756172654672656550617274:

\ :ref:`squareFreePart <l506f6c796e6f6d69616c43617465676f7279-7371756172654672656550617274>`\ \: % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-73717561726546726565506f6c796e6f6d69616c:

\ :ref:`squareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-73717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-737562526573756c74616e74436861696e:

.. index::
   pair: RecursivePolynomialCategory; subResultantChain

:spadfun:`subResultantChain`\: (%, %) -> \ :ref:`List <l4c697374>`\  % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``subResultantChain(a, b)``\ , where \ ``a``\  and \ ``b``\  are not constant polynomials with the same main variable, returns the subresultant chain of \ ``a``\  and \ ``b``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-737562526573756c74616e74476364:

.. index::
   pair: RecursivePolynomialCategory; subResultantGcd

:spadfun:`subResultantGcd`\: (%, %) -> % if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``subResultantGcd(a, b)``\  computes a \ ``gcd``\  of \ ``a``\  and \ ``b``\  where \ ``a``\  and \ ``b``\  are assumed to have the same main variable \ ``v``\  and are viewed as univariate polynomials in \ ``v``\  with coefficients in the fraction field of the polynomial ring generated by their other variables over \ ``R``\ .

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-737570706f7274:

\ :ref:`support <l467265654d6f64756c6543617465676f7279-737570706f7274>`\ \: % -> \ :ref:`List <l4c697374>`\  E 
  from \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7375705269747457753f:

.. index::
   pair: RecursivePolynomialCategory; supRittWu?

:spadfun:`supRittWu?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``supRittWu?(a, b)``\  returns \ ``true``\  if \ ``a``\  is greater than \ ``b``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7461696c:

.. index::
   pair: RecursivePolynomialCategory; tail

:spadfun:`tail`\: % -> % 
  \ ``tail(p)``\  returns its reductum, where \ ``p``\  is viewed as a univariate polynomial in its main variable.

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-746f74616c446567726565:

\ :ref:`totalDegree <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-746f74616c446567726565>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`totalDegree <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-746f74616c446567726565>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-746f74616c446567726565536f72746564:

\ :ref:`totalDegreeSorted <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-746f74616c446567726565536f72746564>`\ \: (%, \ :ref:`List <l4c697374>`\  V) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-756e6976617269617465:

\ :ref:`univariate <l506f6c796e6f6d69616c43617465676f7279-756e6976617269617465>`\ \: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)


\ :ref:`univariate <l506f6c796e6f6d69616c43617465676f7279-756e6976617269617465>`\ \: (%, V) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7661726961626c6573:

\ :ref:`variables <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279-7661726961626c6573>`\ \: % -> \ :ref:`List <l4c697374>`\  V 
  from \ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

.. _l526563757273697665506f6c796e6f6d69616c43617465676f7279-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (R, E) 

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  R 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Algebra <l416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  if R has \ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\ 

\ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  if R has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  if R has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  V 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  and R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  R if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  if V has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`EntireRing <l456e7469726552696e67>`\  if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  % 

\ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (R, E) 

\ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\ (R, E) 

\ :ref:`FullyLinearlyExplicitOver <l46756c6c794c696e6561726c794578706c696369744f766572>`\  R 

\ :ref:`FullyRetractableTo <l46756c6c795265747261637461626c65546f>`\  R 

\ :ref:`GcdDomain <l476364446f6d61696e>`\  if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

\ :ref:`Hashable <l4861736861626c65>`\  if V has \ :ref:`Hashable <l4861736861626c65>`\  and R has \ :ref:`Hashable <l4861736861626c65>`\ 

\ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, E) 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, E) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, %) 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (V, R) 

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

\ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  R 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`MaybeSkewPolynomialCategory <l4d61796265536b6577506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V) 

\ :ref:`Module <l4d6f64756c65>`\  % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Module <l4d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  if R has \ :ref:`EntireRing <l456e7469726552696e67>`\ 

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  V 

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\  and V has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Float <l466c6f6174>`\ 

\ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\  and V has \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V) 

\ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  V 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  if R has \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

\ :ref:`VariablesCommuteWithCoefficients <l5661726961626c6573436f6d6d75746557697468436f656666696369656e7473>`\  

