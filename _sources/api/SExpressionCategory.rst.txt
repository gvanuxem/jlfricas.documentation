.. index:: SExpressionCategory

.. _l5345787072657373696f6e43617465676f7279:

SExpressionCategory(Str, Sym, Int, Flt)
=======================================

:viewcode:`sex.spad line 1 <sex.spad#L1>` :editcode:`[edit on github] <sex.spad#L1>`

* Str: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* Sym: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* Int: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* Flt: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


This category allows the manipulation of Lisp values while keeping the grunge fairly localized.


.. _l5345787072657373696f6e43617465676f7279-23:

.. index::
   pair: SExpressionCategory; #

:spadfun:`#`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``\#((a1, ..., an))``\  returns \ ``n``\ .

.. _l5345787072657373696f6e43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5345787072657373696f6e43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5345787072657373696f6e43617465676f7279-61746f6d3f:

.. index::
   pair: SExpressionCategory; atom?

:spadfun:`atom?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``atom?(s)``\  is \ ``true``\  if \ ``s``\  is a Lisp atom.

.. _l5345787072657373696f6e43617465676f7279-636172:

.. index::
   pair: SExpressionCategory; car

:spadfun:`car`\: % -> % 
  \ ``car((a1, ..., an))``\  returns \ ``a1``\ .

.. _l5345787072657373696f6e43617465676f7279-636472:

.. index::
   pair: SExpressionCategory; cdr

:spadfun:`cdr`\: % -> % 
  \ ``cdr((a1, ..., an))``\  returns \ ``(a2, ..., an)``\ .

.. _l5345787072657373696f6e43617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5345787072657373696f6e43617465676f7279-636f6e76657274:

.. index::
   pair: SExpressionCategory; convert

:spadfun:`convert`\: Flt -> % 
  \ ``convert(x)``\  returns the Lisp atom \ ``x``\ .


.. index::
   pair: SExpressionCategory; convert

:spadfun:`convert`\: Int -> % 
  \ ``convert(x)``\  returns the Lisp atom \ ``x``\ .


.. index::
   pair: SExpressionCategory; convert

:spadfun:`convert`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``convert([a1, ..., an])``\  returns the \ ``S``\ -expression \ ``(a1, ..., an)``\ .


.. index::
   pair: SExpressionCategory; convert

:spadfun:`convert`\: Str -> % 
  \ ``convert(x)``\  returns the Lisp atom \ ``x``\ .


.. index::
   pair: SExpressionCategory; convert

:spadfun:`convert`\: Sym -> % 
  \ ``convert(x)``\  returns the Lisp atom \ ``x``\ .

.. _l5345787072657373696f6e43617465676f7279-6465737472756374:

.. index::
   pair: SExpressionCategory; destruct

:spadfun:`destruct`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``destruct((a1, ..., an))``\  returns the list [\ ``a1``\ , ..., an].

.. _l5345787072657373696f6e43617465676f7279-656c74:

.. index::
   pair: SExpressionCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt((a1, ..., an), i)``\  returns \ ``ai``\ .


.. index::
   pair: SExpressionCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(s, [i1, ..., im])``\  recursively selects subexpression, that is elt(\ ``s``\ , []) is just \ ``s``\  and elt(\ ``s``\ , [\ ``i1``\ , ..., im]) is the same as elt(elt(\ ``s``\ , \ ``i1``\ ), [\ ``i2``\ , ..., im]).

.. _l5345787072657373696f6e43617465676f7279-6571:

.. index::
   pair: SExpressionCategory; eq

:spadfun:`eq`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``eq(s, t)``\  is \ ``true``\  if EQ(\ ``s``\ , \ ``t``\ ) is \ ``true``\  in Lisp.

.. _l5345787072657373696f6e43617465676f7279-666c6f61743f:

.. index::
   pair: SExpressionCategory; float?

:spadfun:`float?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``float?(s)``\  is \ ``true``\  if \ ``s``\  is an atom and belong to \ ``Flt``\ .

.. _l5345787072657373696f6e43617465676f7279-666c6f6174:

.. index::
   pair: SExpressionCategory; float

:spadfun:`float`\: % -> Flt 
  \ ``float(s)``\  returns \ ``s``\  as an element of \ ``Flt``\ ; Error: if \ ``s``\  is not an atom that also belongs to \ ``Flt``\ .

.. _l5345787072657373696f6e43617465676f7279-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l5345787072657373696f6e43617465676f7279-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l5345787072657373696f6e43617465676f7279-696e74656765723f:

.. index::
   pair: SExpressionCategory; integer?

:spadfun:`integer?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``integer?(s)``\  is \ ``true``\  if \ ``s``\  is an atom and belong to Int.

.. _l5345787072657373696f6e43617465676f7279-696e7465676572:

.. index::
   pair: SExpressionCategory; integer

:spadfun:`integer`\: % -> Int 
  \ ``integer(s)``\  returns \ ``s``\  as an element of Int. Error: if \ ``s``\  is not an atom that also belongs to Int.

.. _l5345787072657373696f6e43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5345787072657373696f6e43617465676f7279-6c6973743f:

.. index::
   pair: SExpressionCategory; list?

:spadfun:`list?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``list?(s)``\  is \ ``true``\  if \ ``s``\  is a Lisp list, possibly ().

.. _l5345787072657373696f6e43617465676f7279-6e756c6c3f:

.. index::
   pair: SExpressionCategory; null?

:spadfun:`null?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``null?(s)``\  is \ ``true``\  if \ ``s``\  is the \ ``S``\ -expression ().

.. _l5345787072657373696f6e43617465676f7279-706169723f:

.. index::
   pair: SExpressionCategory; pair?

:spadfun:`pair?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``pair?(s)``\  is \ ``true``\  if \ ``s``\  has is a non-null Lisp list.

.. _l5345787072657373696f6e43617465676f7279-737472696e673f:

.. index::
   pair: SExpressionCategory; string?

:spadfun:`string?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``string?(s)``\  is \ ``true``\  if \ ``s``\  is an atom and belong to \ ``Str``\ .

.. _l5345787072657373696f6e43617465676f7279-737472696e67:

.. index::
   pair: SExpressionCategory; string

:spadfun:`string`\: % -> Str 
  \ ``string(s)``\  returns \ ``s``\  as an element of \ ``Str``\ . Error: if \ ``s``\  is not an atom that also belongs to \ ``Str``\ .

.. _l5345787072657373696f6e43617465676f7279-73796d626f6c3f:

.. index::
   pair: SExpressionCategory; symbol?

:spadfun:`symbol?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``symbol?(s)``\  is \ ``true``\  if \ ``s``\  is an atom and belong to \ ``Sym``\ .

.. _l5345787072657373696f6e43617465676f7279-73796d626f6c:

.. index::
   pair: SExpressionCategory; symbol

:spadfun:`symbol`\: % -> Sym 
  \ ``symbol(s)``\  returns \ ``s``\  as an element of \ ``Sym``\ . Error: if \ ``s``\  is not an atom that also belongs to \ ``Sym``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

