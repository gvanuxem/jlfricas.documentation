.. index:: Plot

.. _l506c6f74:

Plot
====

:viewcode:`plot.spad line 1 <plot.spad#L1>` :editcode:`[edit on github] <plot.spad#L1>`


The Plot domain supports plotting of functions defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example floating point numbers and infinite continued fractions. The facilities at this point are limited to 2-dimensional plots or either a single function or a parametric function.


.. _l506c6f74-61646170746976653f:

.. index::
   pair: Plot; adaptive?

:spadfun:`adaptive?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``adaptive?()``\  determines whether plotting be done adaptively

.. _l506c6f74-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l506c6f74-6465627567:

.. index::
   pair: Plot; debug

:spadfun:`debug`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``debug(true)``\  turns debug mode on \ ``debug(false)``\  turns debug mode off

.. _l506c6f74-6c6973744272616e63686573:

\ :ref:`listBranches <l506c6f747461626c65506c616e65437572766543617465676f7279-6c6973744272616e63686573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottablePlaneCurveCategory <l506c6f747461626c65506c616e65437572766543617465676f7279>`\ 

.. _l506c6f74-6d6178506f696e7473:

.. index::
   pair: Plot; maxPoints

:spadfun:`maxPoints`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxPoints()``\  returns the maximum number of points in a plot

.. _l506c6f74-6d696e506f696e7473:

.. index::
   pair: Plot; minPoints

:spadfun:`minPoints`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minPoints()``\  returns the minimum number of points in a plot

.. _l506c6f74-6e756d46756e4576616c73:

.. index::
   pair: Plot; numFunEvals

:spadfun:`numFunEvals`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``numFunEvals()``\  returns the number of points computed

.. _l506c6f74-706172616d65747269633f:

.. index::
   pair: Plot; parametric?

:spadfun:`parametric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``parametric? determines``\  whether it is a parametric plot?

.. _l506c6f74-706c6f74:

.. index::
   pair: Plot; plot

:spadfun:`plot`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(x, r)``\  \undocumented


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f, g, a..b)``\  plots the parametric curve \ ``x = f(t)``\ , \ ``y = g(t)``\  as \ ``t``\  ranges over the interval \ ``[a, b]``\ .


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f, g, a..b, c..d, e..f)``\  plots the parametric curve \ ``x = f(t)``\ , \ ``y = g(t)``\  as \ ``t``\  ranges over the interval \ ``[a, b]``\ ; \ ``x``\ -range of \ ``[c, d]``\  and \ ``y``\ -range of \ ``[e, f]``\  are noted in Plot object.


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f, a..b)``\  plots the function \ ``f(x)``\  on the interval \ ``[a, b]``\ .


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f, a..b, c..d)``\  plots the function \ ``f(x)``\  on the interval \ ``[a, b]``\ ; \ ``y``\ -range of \ ``[c, d]``\  is noted in Plot object.


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`List <l4c697374>`\ (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ), \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot([f1, ..., fm], a..b)``\  plots the functions \ ``y = f1(x)``\ , ..., \ ``y = fm(x)``\  on the interval \ ``a..b``\ .


.. index::
   pair: Plot; plot

:spadfun:`plot`\: (\ :ref:`List <l4c697374>`\ (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ), \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot([f1, ..., fm], a..b, c..d)``\  plots the functions \ ``y = f1(x)``\ , ..., \ ``y = fm(x)``\  on the interval \ ``a..b``\ ; \ ``y``\ -range of \ ``[c, d]``\  is noted in Plot object.

.. _l506c6f74-706c6f74506f6c6172:

.. index::
   pair: Plot; plotPolar

:spadfun:`plotPolar`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plotPolar(f)``\  plots the polar curve \ ``r = f(theta)``\  as theta ranges over the interval \ ``[0, 2*\%pi]``\ ; this is the same as the parametric curve \ ``x = f(t) * cos(t)``\ , \ ``y = f(t) * sin(t)``\ .


.. index::
   pair: Plot; plotPolar

:spadfun:`plotPolar`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plotPolar(f, a..b)``\  plots the polar curve \ ``r = f(theta)``\  as theta ranges over the interval \ ``[a, b]``\ ; this is the same as the parametric curve \ ``x = f(t) * cos(t)``\ , \ ``y = f(t) * sin(t)``\ .

.. _l506c6f74-706f696e74506c6f74:

.. index::
   pair: Plot; pointPlot

:spadfun:`pointPlot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``pointPlot(t +-> (f(t), g(t)), a..b)``\  plots the parametric curve \ ``x = f(t)``\ , \ ``y = g(t)``\  as \ ``t``\  ranges over the interval \ ``[a, b]``\ .


.. index::
   pair: Plot; pointPlot

:spadfun:`pointPlot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``pointPlot(t +-> (f(t), g(t)), a..b, c..d, e..f)``\  plots the parametric curve \ ``x = f(t)``\ , \ ``y = g(t)``\  as \ ``t``\  ranges over the interval \ ``[a, b]``\ ; \ ``x``\ -range of \ ``[c, d]``\  and \ ``y``\ -range of \ ``[e, f]``\  are noted in Plot object.

.. _l506c6f74-726566696e65:

.. index::
   pair: Plot; refine

:spadfun:`refine`\: % -> % 
  \ ``refine(p)``\  performs a refinement on the plot \ ``p``\ 


.. index::
   pair: Plot; refine

:spadfun:`refine`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``refine(x, r)``\  \undocumented

.. _l506c6f74-73637265656e5265736f6c7574696f6e:

.. index::
   pair: Plot; screenResolution

:spadfun:`screenResolution`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``screenResolution()``\  returns the screen resolution

.. _l506c6f74-7365744164617074697665:

.. index::
   pair: Plot; setAdaptive

:spadfun:`setAdaptive`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``setAdaptive(true)``\  turns adaptive plotting on \ ``setAdaptive(false)``\  turns adaptive plotting off

.. _l506c6f74-7365744d6178506f696e7473:

.. index::
   pair: Plot; setMaxPoints

:spadfun:`setMaxPoints`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setMaxPoints(i)``\  sets the maximum number of points in a plot to \ ``i``\ 

.. _l506c6f74-7365744d696e506f696e7473:

.. index::
   pair: Plot; setMinPoints

:spadfun:`setMinPoints`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setMinPoints(i)``\  sets the minimum number of points in a plot to \ ``i``\ 

.. _l506c6f74-73657453637265656e5265736f6c7574696f6e:

.. index::
   pair: Plot; setScreenResolution

:spadfun:`setScreenResolution`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setScreenResolution(i)``\  sets the screen resolution to \ ``i``\ 

.. _l506c6f74-7452616e6765:

.. index::
   pair: Plot; tRange

:spadfun:`tRange`\: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``tRange(p)``\  returns the range of the parameter in a parametric plot \ ``p``\ 

.. _l506c6f74-7852616e6765:

\ :ref:`xRange <l506c6f747461626c65506c616e65437572766543617465676f7279-7852616e6765>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottablePlaneCurveCategory <l506c6f747461626c65506c616e65437572766543617465676f7279>`\ 

.. _l506c6f74-7952616e6765:

\ :ref:`yRange <l506c6f747461626c65506c616e65437572766543617465676f7279-7952616e6765>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottablePlaneCurveCategory <l506c6f747461626c65506c616e65437572766543617465676f7279>`\ 

.. _l506c6f74-7a6f6f6d:

.. index::
   pair: Plot; zoom

:spadfun:`zoom`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``zoom(x, r)``\  \undocumented


.. index::
   pair: Plot; zoom

:spadfun:`zoom`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``zoom(x, r, s)``\  \undocumented


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`PlottablePlaneCurveCategory <l506c6f747461626c65506c616e65437572766543617465676f7279>`\  

