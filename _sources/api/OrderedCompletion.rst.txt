.. index:: OrderedCompletion

.. _l4f726465726564436f6d706c6574696f6e:

OrderedCompletion R
===================

:viewcode:`complet.spad line 1 <complet.spad#L1>` :editcode:`[edit on github] <complet.spad#L1>`

* R: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


Adjunction of two real infinites quantities to a set. Date Created: 4 Oct 1989


.. _l4f726465726564436f6d706c6574696f6e-2b:

.. index::
   pair: OrderedCompletion; +

:spadfun:`+`\: (%, %) -> % if R has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 
  

.. _l4f726465726564436f6d706c6574696f6e-2d:

.. index::
   pair: OrderedCompletion; -

:spadfun:`-`\: % -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  

.. _l4f726465726564436f6d706c6574696f6e-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f726465726564436f6d706c6574696f6e-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f726465726564436f6d706c6574696f6e-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f726465726564436f6d706c6574696f6e-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f726465726564436f6d706c6574696f6e-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4f726465726564436f6d706c6574696f6e-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4f726465726564436f6d706c6574696f6e-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R

.. _l4f726465726564436f6d706c6574696f6e-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l4f726465726564436f6d706c6574696f6e-66696e6974653f:

.. index::
   pair: OrderedCompletion; finite?

:spadfun:`finite?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``finite?(x)``\  tests if \ ``x``\  is finite.

.. _l4f726465726564436f6d706c6574696f6e-696e66696e6974653f:

.. index::
   pair: OrderedCompletion; infinite?

:spadfun:`infinite?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``infinite?(x)``\  tests if \ ``x``\  is +infinity or -infinity,

.. _l4f726465726564436f6d706c6574696f6e-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4f726465726564436f6d706c6574696f6e-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4f726465726564436f6d706c6574696f6e-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4f726465726564436f6d706c6574696f6e-6d696e7573496e66696e697479:

.. index::
   pair: OrderedCompletion; minusInfinity

:spadfun:`minusInfinity`\: () -> % 
  \ ``minusInfinity()``\  returns -infinity.

.. _l4f726465726564436f6d706c6574696f6e-706c7573496e66696e697479:

.. index::
   pair: OrderedCompletion; plusInfinity

:spadfun:`plusInfinity`\: () -> % 
  \ ``plusInfinity()``\  returns +infinity.

.. _l4f726465726564436f6d706c6574696f6e-726174696f6e616c3f:

.. index::
   pair: OrderedCompletion; rational?

:spadfun:`rational?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rational?(x)``\  tests if \ ``x``\  is a finite rational number.

.. _l4f726465726564436f6d706c6574696f6e-726174696f6e616c:

.. index::
   pair: OrderedCompletion; rational

:spadfun:`rational`\: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rational(x)``\  returns \ ``x``\  as a finite rational number. Error: if \ ``x``\  cannot be so converted.

.. _l4f726465726564436f6d706c6574696f6e-726174696f6e616c496643616e:

.. index::
   pair: OrderedCompletion; rationalIfCan

:spadfun:`rationalIfCan`\: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rationalIfCan(x)``\  returns \ ``x``\  as a finite rational number if it is one and "failed" otherwise.

.. _l4f726465726564436f6d706c6574696f6e-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l4f726465726564436f6d706c6574696f6e-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l4f726465726564436f6d706c6574696f6e-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4f726465726564436f6d706c6574696f6e-77686174496e66696e697479:

.. index::
   pair: OrderedCompletion; whatInfinity

:spadfun:`whatInfinity`\: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  \ ``whatInfinity(x)``\  returns 0 if \ ``x``\  is finite, 1 if \ ``x``\  is +infinity, and \ ``-1``\  if \ ``x``\  is -infinity.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`FullyRetractableTo <l46756c6c795265747261637461626c65546f>`\  R 

\ :ref:`OrderedSet <l4f726465726564536574>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

