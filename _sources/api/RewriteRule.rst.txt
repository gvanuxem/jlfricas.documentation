.. index:: RewriteRule

.. _l5265777269746552756c65:

RewriteRule(Base, R, F)
=======================

:viewcode:`rule.spad line 1 <rule.spad#L1>` :editcode:`[edit on github] <rule.spad#L1>`

* Base: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* R: Join(\ :ref:`Ring <l52696e67>`\ , \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  Base, \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  Base)

* F: Join(\ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R, \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  Base, \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  Base)


Rules for the pattern matcher Author: Manuel Bronstein Date Created: 24 Oct 1988 Keywords: pattern, matching, rule.


.. _l5265777269746552756c65-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5265777269746552756c65-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5265777269746552756c65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Equation <l4571756174696f6e>`\  F -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Equation <l4571756174696f6e>`\  F

.. _l5265777269746552756c65-656c74:

\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, F) -> F 
  from \ :ref:`Eltable <l456c7461626c65>`\ (F, F)


.. index::
   pair: RewriteRule; elt

:spadfun:`elt`\: (%, F, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> F 
  \ ``elt(r, f, n)``\  or \ ``r``\ (\ ``f``\ , \ ``n``\ ) applies the rule \ ``r``\  to \ ``f``\  at most \ ``n``\  times.

.. _l5265777269746552756c65-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5265777269746552756c65-6c6873:

.. index::
   pair: RewriteRule; lhs

:spadfun:`lhs`\: % -> F 
  \ ``lhs(r)``\  returns the left hand side of the rule \ ``r``\ .

.. _l5265777269746552756c65-7061747465726e:

.. index::
   pair: RewriteRule; pattern

:spadfun:`pattern`\: % -> \ :ref:`Pattern <l5061747465726e>`\  Base 
  \ ``pattern(r)``\  returns the pattern corresponding to the left hand side of the rule \ ``r``\ .

.. _l5265777269746552756c65-71756f7465644f70657261746f7273:

.. index::
   pair: RewriteRule; quotedOperators

:spadfun:`quotedOperators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``quotedOperators(r)``\  returns the list of operators on the right hand side of \ ``r``\  that are considered quoted, that is they are not evaluated during any rewrite, but just applied formally to their arguments.

.. _l5265777269746552756c65-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Equation <l4571756174696f6e>`\  F 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Equation <l4571756174696f6e>`\  F

.. _l5265777269746552756c65-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Equation <l4571756174696f6e>`\  F, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Equation <l4571756174696f6e>`\  F

.. _l5265777269746552756c65-726873:

.. index::
   pair: RewriteRule; rhs

:spadfun:`rhs`\: % -> F 
  \ ``rhs(r)``\  returns the right hand side of the rule \ ``r``\ .

.. _l5265777269746552756c65-72756c65:

.. index::
   pair: RewriteRule; rule

:spadfun:`rule`\: (F, F) -> % 
  \ ``rule(f, g)``\  creates the rewrite rule: \ ``f == eval(g, g is f)``\ , with left-hand side \ ``f``\  and right-hand side \ ``g``\ .


.. index::
   pair: RewriteRule; rule

:spadfun:`rule`\: (F, F, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  \ ``rule(f, g, [f1, ..., fn])``\  creates the rewrite rule \ ``f == eval(eval(g, g is f), [f1, ..., fn])``\ , that is a rule with left-hand side \ ``f``\  and right-hand side \ ``g``\ ; The symbols \ ``f1``\ , ..., \ ``fn``\  are the operators that are considered quoted, that is they are not evaluated during any rewrite, but just applied formally to their arguments.

.. _l5265777269746552756c65-7375636854686174:

.. index::
   pair: RewriteRule; suchThat

:spadfun:`suchThat`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  F -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``suchThat(r, [a1, ..., an], f)``\  returns the rewrite rule \ ``r``\  with the predicate \ ``f(a1, ..., an)``\  attached to it.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Equation <l4571756174696f6e>`\  F 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Eltable <l456c7461626c65>`\ (F, F) 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Equation <l4571756174696f6e>`\  F 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

