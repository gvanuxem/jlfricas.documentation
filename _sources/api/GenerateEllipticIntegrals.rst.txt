.. index:: GenerateEllipticIntegrals

.. _l47656e6572617465456c6c6970746963496e74656772616c73:

GenerateEllipticIntegrals(F, UP, UPUP, R)
=========================================

:viewcode:`intspec.spad line 1 <intspec.spad#L1>` :editcode:`[edit on github] <intspec.spad#L1>`

* F: \ :ref:`Field <l4669656c64>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* UPUP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP

* R: Join(\ :ref:`Field <l4669656c64>`\ , \ :ref:`MonogenicAlgebra <l4d6f6e6f67656e6963416c6765627261>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  UP, UPUP))


This package provides support functions for generating elliptic integrals.


.. _l47656e6572617465456c6c6970746963496e74656772616c73-6673717274:

.. index::
   pair: GenerateEllipticIntegrals; fsqrt

:spadfun:`fsqrt`\: F -> F 
  \ ``fsqrt(f)``\  should be local but conditional

.. _l47656e6572617465456c6c6970746963496e74656772616c73-67656e5f6566:

.. index::
   pair: GenerateEllipticIntegrals; gen_ef

:spadfun:`gen_ef`\: (F, UP, R, R) -> Union(Record(result1: \ :ref:`Fraction <l4672616374696f6e>`\  UP, result2: F), failed) 
  \ ``gen_ef(f_var, f_pol, cfr, cer)``\  produces linear combination

.. _l47656e6572617465456c6c6970746963496e74656772616c73-6765745f656c6c697074696373:

.. index::
   pair: GenerateEllipticIntegrals; get_elliptics

:spadfun:`get_elliptics`\: (UP -> UP, F) -> \ :ref:`List <l4c697374>`\  Record(f_form: R, e_form: R, f_var: F, f_pol: UP) 
  \ ``get_elliptics(der, x)``\  tries to find elliptic forms on \ ``R``\  \ ``x``\  is expression for variable of integration in \ ``F``\ 


