.. index:: GaloisGroupFactorizer

.. _l47616c6f697347726f7570466163746f72697a6572:

GaloisGroupFactorizer UP
========================

:viewcode:`galfact.spad line 383 <galfact.spad#L383>` :editcode:`[edit on github] <galfact.spad#L383>`

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`GaloisGroupFactorizer <l47616c6f697347726f7570466163746f72697a6572>`\  provides functions to factor resolvents.


.. _l47616c6f697347726f7570466163746f72697a6572-62747746616374:

.. index::
   pair: GaloisGroupFactorizer; btwFact

:spadfun:`btwFact`\: (UP, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Set <l536574>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(contp: \ :ref:`Integer <l496e7465676572>`\ , factors: \ :ref:`List <l4c697374>`\  Record(irr: UP, pow: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``btwFact(p, sqf, pd, r)``\  returns the factorization of \ ``p``\ , the result is a Record such that \ ``contp=``\ content \ ``p``\ , \ ``factors=``\ List of irreducible factors of \ ``p``\  with exponent. If \ ``sqf=true``\  the polynomial is assumed to be square free (i.e. without repeated factors). \ ``pd``\  is the \ :ref:`Set <l536574>`\  of possible degrees. \ ``r``\  is a lower bound for the number of factors of \ ``p``\ . Please do not use this function in your code because its design may change.

.. _l47616c6f697347726f7570466163746f72697a6572-646567726565506172746974696f6e:

.. index::
   pair: GaloisGroupFactorizer; degreePartition

:spadfun:`degreePartition`\: \ :ref:`List <l4c697374>`\  Record(factor: UP, degree: \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Multiset <l4d756c7469736574>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``degreePartition(ddfactorization)``\  returns the degree partition of the polynomial \ ``f``\  modulo \ ``p``\  where \ ``ddfactorization``\  is the distinct degree factorization of \ ``f``\  computed by \ ``ddfact``\  from modular factorization package for some prime \ ``p``\ .

.. _l47616c6f697347726f7570466163746f72697a6572-656973656e737465696e4972726564756369626c653f:

.. index::
   pair: GaloisGroupFactorizer; eisensteinIrreducible?

:spadfun:`eisensteinIrreducible?`\: UP -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``eisensteinIrreducible?(p)``\  returns \ ``true``\  if \ ``p``\  can be shown to be irreducible by Eisenstein\ ``'s``\  criterion, \ ``false``\  is inconclusive.

.. _l47616c6f697347726f7570466163746f72697a6572-666163746f72:

.. index::
   pair: GaloisGroupFactorizer; factor

:spadfun:`factor`\: (UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, listOfDegrees)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm and knowing that \ ``p``\  has for possible splitting of its degree listOfDegrees.


.. index::
   pair: GaloisGroupFactorizer; factor

:spadfun:`factor`\: (UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, listOfDegrees, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm, knowing that \ ``p``\  has for possible splitting of its degree \ ``listOfDegrees``\  and that \ ``p``\  has at least \ ``r``\  factors.


.. index::
   pair: GaloisGroupFactorizer; factor

:spadfun:`factor`\: (UP, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm and knowing that \ ``p``\  has at least \ ``r``\  factors.


.. index::
   pair: GaloisGroupFactorizer; factor

:spadfun:`factor`\: (UP, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, d, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm, knowing that \ ``d``\  divides the degree of all factors of \ ``p``\  and that \ ``p``\  has at least \ ``r``\  factors.


.. index::
   pair: GaloisGroupFactorizer; factor

:spadfun:`factor`\: UP -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p)``\  returns the factorization of \ ``p``\  over the integers.

.. _l47616c6f697347726f7570466163746f72697a6572-666163746f724f66446567726565:

.. index::
   pair: GaloisGroupFactorizer; factorOfDegree

:spadfun:`factorOfDegree`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , UP) -> Union(UP, failed) 
  \ ``factorOfDegree(d, p)``\  returns a factor of \ ``p``\  of degree \ ``d``\ .


.. index::
   pair: GaloisGroupFactorizer; factorOfDegree

:spadfun:`factorOfDegree`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(UP, failed) 
  \ ``factorOfDegree(d, p, listOfDegrees)``\  returns a factor of \ ``p``\  of degree \ ``d``\  knowing that \ ``p``\  has for possible splitting of its degree listOfDegrees.


.. index::
   pair: GaloisGroupFactorizer; factorOfDegree

:spadfun:`factorOfDegree`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(UP, failed) 
  \ ``factorOfDegree(d, p, listOfDegrees, r)``\  returns a factor of \ ``p``\  of degree \ ``d``\  knowing that \ ``p``\  has for possible splitting of its degree \ ``listOfDegrees``\ , and that \ ``p``\  has at least \ ``r``\  factors.


.. index::
   pair: GaloisGroupFactorizer; factorOfDegree

:spadfun:`factorOfDegree`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(UP, failed) 
  \ ``factorOfDegree(d, p, listOfDegrees, r, sqf)``\  returns a factor of \ ``p``\  of degree \ ``d``\  knowing that \ ``p``\  has for possible splitting of its degree \ ``listOfDegrees``\ , and that \ ``p``\  has at least \ ``r``\  factors. If \ ``sqf=true``\  the polynomial is assumed to be square free (i.e. without repeated factors).


.. index::
   pair: GaloisGroupFactorizer; factorOfDegree

:spadfun:`factorOfDegree`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , UP, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(UP, failed) 
  \ ``factorOfDegree(d, p, r)``\  returns a factor of \ ``p``\  of degree \ ``d``\  knowing that \ ``p``\  has at least \ ``r``\  factors.

.. _l47616c6f697347726f7570466163746f72697a6572-666163746f7253717561726546726565:

.. index::
   pair: GaloisGroupFactorizer; factorSquareFree

:spadfun:`factorSquareFree`\: (UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p, listOfDegrees)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm and knowing that \ ``p``\  has for possible splitting of its degree listOfDegrees. \ ``p``\  is supposed not having any repeated factor (this is not checked).


.. index::
   pair: GaloisGroupFactorizer; factorSquareFree

:spadfun:`factorSquareFree`\: (UP, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p, listOfDegrees, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm, knowing that \ ``p``\  has for possible splitting of its degree \ ``listOfDegrees``\  and that \ ``p``\  has at least \ ``r``\  factors. \ ``p``\  is supposed not having any repeated factor (this is not checked).


.. index::
   pair: GaloisGroupFactorizer; factorSquareFree

:spadfun:`factorSquareFree`\: (UP, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm and knowing that \ ``p``\  has at least \ ``r``\  factors. \ ``p``\  is supposed not having any repeated factor (this is not checked).


.. index::
   pair: GaloisGroupFactorizer; factorSquareFree

:spadfun:`factorSquareFree`\: (UP, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p, d, r)``\  factorizes the polynomial \ ``p``\  using the single factor bound algorithm, knowing that \ ``d``\  divides the degree of all factors of \ ``p``\  and that \ ``p``\  has at least \ ``r``\  factors. \ ``p``\  is supposed not having any repeated factor (this is not checked).


.. index::
   pair: GaloisGroupFactorizer; factorSquareFree

:spadfun:`factorSquareFree`\: UP -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factorSquareFree(p)``\  returns the factorization of \ ``p``\  which is supposed not having any repeated factor (this is not checked).

.. _l47616c6f697347726f7570466163746f72697a6572-68656e73656c46616374:

.. index::
   pair: GaloisGroupFactorizer; henselFact

:spadfun:`henselFact`\: (UP, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Record(contp: \ :ref:`Integer <l496e7465676572>`\ , factors: \ :ref:`List <l4c697374>`\  Record(irr: UP, pow: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) 
  \ ``henselFact(p, sqf)``\  returns the factorization of \ ``p``\ , the result is a Record such that \ ``contp=``\ content \ ``p``\ , \ ``factors=``\ List of irreducible factors of \ ``p``\  with exponent. If \ ``sqf=true``\  the polynomial is assumed to be square free (i.e. without repeated factors).

.. _l47616c6f697347726f7570466163746f72697a6572-6d616b654652:

.. index::
   pair: GaloisGroupFactorizer; makeFR

:spadfun:`makeFR`\: Record(contp: \ :ref:`Integer <l496e7465676572>`\ , factors: \ :ref:`List <l4c697374>`\  Record(irr: UP, pow: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``makeFR(flist)``\  turns the final factorization of henselFact into a \ :ref:`Factored <l466163746f726564>`\  object.

.. _l47616c6f697347726f7570466163746f72697a6572-6d6f64756c6172466163746f72:

.. index::
   pair: GaloisGroupFactorizer; modularFactor

:spadfun:`modularFactor`\: (UP, \ :ref:`Set <l536574>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Record(prime: \ :ref:`Integer <l496e7465676572>`\ , factors: \ :ref:`List <l4c697374>`\  UP) 
  \ ``modularFactor(f, d)``\  chooses a "good" prime and returns the factorization of \ ``f``\  modulo this prime in a form that may be used by \ :ref:`completeHensel <l47656e6572616c48656e73656c5061636b616765-636f6d706c65746548656e73656c>`\ . If prime is zero it means that \ ``f``\  has been proved to be irreducible over the integers or that \ ``f``\  is a unit (i.e. 1 or \ ``-1``\ ). \ ``f``\  shall be primitive (i.e. content(\ ``p``\ )\ ``=1``\ ) and square free (i.e. without repeated factors). \ ``d``\  is set of possible degrees of factors.

.. _l47616c6f697347726f7570466163746f72697a6572-6d7573736572547269616c73:

.. index::
   pair: GaloisGroupFactorizer; musserTrials

:spadfun:`musserTrials`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``musserTrials()``\  returns the number of primes that are tried in \ :spadfun:`modularFactor`\ .


.. index::
   pair: GaloisGroupFactorizer; musserTrials

:spadfun:`musserTrials`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``musserTrials(n)``\  sets to \ ``n``\  the number of primes to be tried in \ :spadfun:`modularFactor`\  and returns the previous value.

.. _l47616c6f697347726f7570466163746f72697a6572-6e756d6265724f66466163746f7273:

.. index::
   pair: GaloisGroupFactorizer; numberOfFactors

:spadfun:`numberOfFactors`\: \ :ref:`List <l4c697374>`\  Record(factor: UP, degree: \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``numberOfFactors(ddfactorization)``\  returns the number of factors of the polynomial \ ``f``\  modulo \ ``p``\  where \ ``ddfactorization``\  is the distinct degree factorization of \ ``f``\  computed by modular factorization package for some prime \ ``p``\ .

.. _l47616c6f697347726f7570466163746f72697a6572-73746f704d7573736572547269616c73:

.. index::
   pair: GaloisGroupFactorizer; stopMusserTrials

:spadfun:`stopMusserTrials`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``stopMusserTrials()``\  returns the bound on the number of factors for which \ :spadfun:`modularFactor`\  stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \ ``2^stopMusserTrials()``\  trials.


.. index::
   pair: GaloisGroupFactorizer; stopMusserTrials

:spadfun:`stopMusserTrials`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``stopMusserTrials(n)``\  sets to \ ``n``\  the bound on the number of factors for which \ :spadfun:`modularFactor`\  stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \ ``2^n``\  trials. Returns the previous value.

.. _l47616c6f697347726f7570466163746f72697a6572-74727946756e6374696f6e616c4465636f6d706f736974696f6e3f:

.. index::
   pair: GaloisGroupFactorizer; tryFunctionalDecomposition?

:spadfun:`tryFunctionalDecomposition?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``tryFunctionalDecomposition?()``\  returns \ ``true``\  if factorizers try functional decomposition of polynomials before factoring them.

.. _l47616c6f697347726f7570466163746f72697a6572-74727946756e6374696f6e616c4465636f6d706f736974696f6e:

.. index::
   pair: GaloisGroupFactorizer; tryFunctionalDecomposition

:spadfun:`tryFunctionalDecomposition`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``tryFunctionalDecomposition(b)``\  chooses whether factorizers have to look for functional decomposition of polynomials (\ ``true``\ ) or not (\ ``false``\ ). Returns the previous value.

.. _l47616c6f697347726f7570466163746f72697a6572-757365456973656e737465696e437269746572696f6e3f:

.. index::
   pair: GaloisGroupFactorizer; useEisensteinCriterion?

:spadfun:`useEisensteinCriterion?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``useEisensteinCriterion?()``\  returns \ ``true``\  if factorizers check Eisenstein\ ``'s``\  criterion before factoring.

.. _l47616c6f697347726f7570466163746f72697a6572-757365456973656e737465696e437269746572696f6e:

.. index::
   pair: GaloisGroupFactorizer; useEisensteinCriterion

:spadfun:`useEisensteinCriterion`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``useEisensteinCriterion(b)``\  chooses whether factorizers check Eisenstein\ ``'s``\  criterion before factoring: \ ``true``\  for using it, \ ``false``\  else. Returns the previous value.

.. _l47616c6f697347726f7570466163746f72697a6572-75736553696e676c65466163746f72426f756e643f:

.. index::
   pair: GaloisGroupFactorizer; useSingleFactorBound?

:spadfun:`useSingleFactorBound?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``useSingleFactorBound?()``\  returns \ ``true``\  if algorithm with single factor bound is used for factorization, \ ``false``\  for algorithm with overall bound.

.. _l47616c6f697347726f7570466163746f72697a6572-75736553696e676c65466163746f72426f756e64:

.. index::
   pair: GaloisGroupFactorizer; useSingleFactorBound

:spadfun:`useSingleFactorBound`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``useSingleFactorBound(b)``\  chooses the algorithm to be used by the factorizers: \ ``true``\  for algorithm with single factor bound, \ ``false``\  for algorithm with overall bound. Returns the previous value.


