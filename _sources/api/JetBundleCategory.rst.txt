.. index:: JetBundleCategory

.. _l4a657442756e646c6543617465676f7279:

JetBundleCategory
=================

:viewcode:`jet.spad line 37 <jet.spad#L37>` :editcode:`[edit on github] <jet.spad#L37>`


\ :ref:`JetBundleCategory <l4a657442756e646c6543617465676f7279>`\  provides basic data structures and procedures for jet bundles. Nearly all necessary functions are implemented already here. Only the representation and functions which directly access it must be implemented in a domain. Two notations of derivatives are supported. Default is multi-index notation, where the \ ``i``\ -th entry of the index denotes the number of differentiations taken with respect to \ ``x^i``\ . In repeated index notation each entry \ ``i``\  in the index denotes a differentiation with respect to \ ``x^i``\ . The choice affects, however, only in- and output. Internally, multi-index notation is used throughout.


.. _l4a657442756e646c6543617465676f7279-31:

.. index::
   pair: JetBundleCategory; 1

:spadfun:`1`\: % 
  \ ``1``\  generates the special "jet variable" 1, which is needed for the representation of linear functions.

.. _l4a657442756e646c6543617465676f7279-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a657442756e646c6543617465676f7279-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a657442756e646c6543617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a657442756e646c6543617465676f7279-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4a657442756e646c6543617465676f7279-3e:

.. index::
   pair: JetBundleCategory; >

:spadfun:`>`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jv1 > jv2``\  checks whether \ ``jv1``\  is greater than \ ``jv2``\  in the internal ordering.

.. _l4a657442756e646c6543617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a657442756e646c6543617465676f7279-616c6c5265706561746564:

.. index::
   pair: JetBundleCategory; allRepeated

:spadfun:`allRepeated`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``allRepeated(ind)``\  returns a list of all possible realizations of a given multi-index as repeated index.

.. _l4a657442756e646c6543617465676f7279-636c617373:

.. index::
   pair: JetBundleCategory; class

:spadfun:`class`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``class(jv)``\  yields the class of the jet variable \ ``jv``\  (Class of multi-index for derivative, 0 else).


.. index::
   pair: JetBundleCategory; class

:spadfun:`class`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``class(ind)``\  yields the class of the multi-index \ ``ind``\  (Position for first non-vanishing entry).

.. _l4a657442756e646c6543617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4a657442756e646c6543617465676f7279-646572697661746976654f663f:

.. index::
   pair: JetBundleCategory; derivativeOf?

:spadfun:`derivativeOf?`\: (%, %) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``derivativeOf?(jv1, jv2)``\  checks whether \ ``jv1``\  is a derivative of \ ``jv2``\ . In this case, the difference of their multi-indices is returned. Otherwise, an empty list is returned.

.. _l4a657442756e646c6543617465676f7279-646966666572656e7469617465:

.. index::
   pair: JetBundleCategory; differentiate

:spadfun:`differentiate`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(%, 0) 
  \ ``differentiate(jv, i)``\  differentiates \ ``jv``\  \ ``wrt``\  the \ ``i``\ \ ``-``\ th independent variable.

.. _l4a657442756e646c6543617465676f7279-64696d4a:

.. index::
   pair: JetBundleCategory; dimJ

:spadfun:`dimJ`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``dimJ(q)``\  computes the (fibre) dimension of the \ ``q``\ \ ``-``\ th order jet bundle.

.. _l4a657442756e646c6543617465676f7279-64696d53:

.. index::
   pair: JetBundleCategory; dimS

:spadfun:`dimS`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``dimS(q)``\  computes dimension of \ ``SqT``\  \ ``x``\  VE (= number of derivatives of order \ ``q``\ ).

.. _l4a657442756e646c6543617465676f7279-6765744e6f746174696f6e:

.. index::
   pair: JetBundleCategory; getNotation

:spadfun:`getNotation`\: () -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``getNotation()``\  shows the currently used notation.

.. _l4a657442756e646c6543617465676f7279-696e646578:

.. index::
   pair: JetBundleCategory; index

:spadfun:`index`\: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``index(jv)``\  yields number of the jet variable \ ``jv``\ .

.. _l4a657442756e646c6543617465676f7279-696e74656772617465:

.. index::
   pair: JetBundleCategory; integrate

:spadfun:`integrate`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``integrate(jv, i)``\  is like \ ``integrateIfCan(jv, i)``\  but yields an error, if the integration is not possible.

.. _l4a657442756e646c6543617465676f7279-696e74656772617465496643616e:

.. index::
   pair: JetBundleCategory; integrateIfCan

:spadfun:`integrateIfCan`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(%, failed) 
  \ ``integrate(jv, i)``\  integrated \ ``jv``\  \ ``wrt``\  the \ ``i``\ \ ``-``\ th independent variable, if possible.

.. _l4a657442756e646c6543617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a657442756e646c6543617465676f7279-6d3272:

.. index::
   pair: JetBundleCategory; m2r

:spadfun:`m2r`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``m2r(ind)``\  transforms a multi-index into a repeated index.

.. _l4a657442756e646c6543617465676f7279-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4a657442756e646c6543617465676f7279-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4a657442756e646c6543617465676f7279-6d756c7469496e646578:

.. index::
   pair: JetBundleCategory; multiIndex

:spadfun:`multiIndex`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``multiIndex(jv)``\  returns the multi-index of the jet variable \ ``jv``\ .

.. _l4a657442756e646c6543617465676f7279-6e616d65:

.. index::
   pair: JetBundleCategory; name

:spadfun:`name`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``name(jv)``\  yields the name of the jet variable \ ``jv``\ .

.. _l4a657442756e646c6543617465676f7279-6e756d446570566172:

.. index::
   pair: JetBundleCategory; numDepVar

:spadfun:`numDepVar`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``numDepVar``\  returns the number of dependent variables.

.. _l4a657442756e646c6543617465676f7279-6e756d496e64566172:

.. index::
   pair: JetBundleCategory; numIndVar

:spadfun:`numIndVar`\: () -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``numIndVar``\  returns the number of independent variables.

.. _l4a657442756e646c6543617465676f7279-6f6e653f:

.. index::
   pair: JetBundleCategory; one?

:spadfun:`one?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``one?(jv)``\  checks whether the jet variables \ ``jv``\  is the special variable 1.

.. _l4a657442756e646c6543617465676f7279-6f72646572:

.. index::
   pair: JetBundleCategory; order

:spadfun:`order`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``order(jv)``\  yields the order of the jet variable \ ``jv``\  (Order as derivative).

.. _l4a657442756e646c6543617465676f7279-50:

.. index::
   pair: JetBundleCategory; P

:spadfun:`P`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``P(i, ind)``\  generates the derivative of the \ ``i``\ \ ``-``\ th dependent variable \ ``wrt``\  the index \ ``ind``\ . Whether \ ``ind``\  is interpreted as multi-index or as repeated index depends on the chosen notation.


.. index::
   pair: JetBundleCategory; P

:spadfun:`P`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``P(i, j)``\  generates the \ ``j``\ \ ``-``\ th derivative of the \ ``i``\ \ ``-``\ th independent variable \ ``wrt``\  the only independent variable.


.. index::
   pair: JetBundleCategory; P

:spadfun:`P`\: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``P(ind)``\  generates the derivative of the only dependent variable \ ``wrt``\  the index \ ``ind``\ .


.. index::
   pair: JetBundleCategory; P

:spadfun:`P`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``P(i)``\  generates the \ ``i``\ \ ``-``\ th derivative of the only dependent variable \ ``wrt``\  the only independent variable.

.. _l4a657442756e646c6543617465676f7279-506d:

.. index::
   pair: JetBundleCategory; Pm

:spadfun:`Pm`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``Pm(i, ind)``\  is like \ ``P(i, ind)``\  but \ ``ind``\  is always a multi-index.

.. _l4a657442756e646c6543617465676f7279-5072:

.. index::
   pair: JetBundleCategory; Pr

:spadfun:`Pr`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``Pr(i, ind)``\  is like \ ``P(i, ind)``\  but \ ``ind``\  is always a repeated index.

.. _l4a657442756e646c6543617465676f7279-72326d:

.. index::
   pair: JetBundleCategory; r2m

:spadfun:`r2m`\: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``r2m(ind)``\  transforms a repeated index into a multi-index.

.. _l4a657442756e646c6543617465676f7279-7265706561746564496e646578:

.. index::
   pair: JetBundleCategory; repeatedIndex

:spadfun:`repeatedIndex`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``repeatedIndex(jv)``\  returns the multi-index of the jet variable \ ``jv``\  in repeated index notation.

.. _l4a657442756e646c6543617465676f7279-7365744e6f746174696f6e:

.. index::
   pair: JetBundleCategory; setNotation

:spadfun:`setNotation`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``setNotation(s)``\  chooses the notation used for derivatives. Returns the old value.

.. _l4a657442756e646c6543617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4a657442756e646c6543617465676f7279-74797065:

.. index::
   pair: JetBundleCategory; type

:spadfun:`type`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``type(jv)``\  yields the type (\ ``Const, Indep, Dep, Deriv``\ ) of the jet variable \ ``jv``\ .

.. _l4a657442756e646c6543617465676f7279-55:

.. index::
   pair: JetBundleCategory; U

:spadfun:`U`\: () -> % 
  \ ``U()``\  generates the only dependent variable.


.. index::
   pair: JetBundleCategory; U

:spadfun:`U`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``U(i)``\  generates the \ ``i``\ \ ``-``\ th dependent variable.

.. _l4a657442756e646c6543617465676f7279-7661726961626c6573:

.. index::
   pair: JetBundleCategory; variables

:spadfun:`variables`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``variables(q, c)``\  computes all jet variables of order \ ``q``\  whose class is greater than or equal to \ ``c``\ .


.. index::
   pair: JetBundleCategory; variables

:spadfun:`variables`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  % 
  \ ``variables(q)``\  computes the list of all jet variables up to order \ ``q``\ .

.. _l4a657442756e646c6543617465676f7279-776569676874:

.. index::
   pair: JetBundleCategory; weight

:spadfun:`weight`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``weight(jv)``\  assigns each jet variable a unique integer reflecting its position in the internal ordering. The variable with the greater weight is also greater in this ordering.

.. _l4a657442756e646c6543617465676f7279-58:

.. index::
   pair: JetBundleCategory; X

:spadfun:`X`\: () -> % 
  \ ``X()``\  generates the only independent variable.


.. index::
   pair: JetBundleCategory; X

:spadfun:`X`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  \ ``X(i)``\  generates the \ ``i``\ \ ``-``\ th independent variable.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

