.. index:: FreeModuleCategory

.. _l467265654d6f64756c6543617465676f7279:

FreeModuleCategory(R, S)
========================

:viewcode:`poly.spad line 19 <poly.spad#L19>` :editcode:`[edit on github] <poly.spad#L19>`

* R: Join(\ :ref:`SemiRng <l53656d69526e67>`\ , \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ )

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


A domain of this category implements formal linear combinations of elements from a domain \ ``Basis``\  with coefficients in a domain \ ``R``\ . The domain \ ``Basis``\  needs only to belong to the category \ :ref:`SetCategory <l53657443617465676f7279>`\  and \ ``R``\  to the category \ :ref:`Ring <l52696e67>`\ . Thus the coefficient ring may be non-commutative. See the \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\  constructor for examples of domains built with the \ :ref:`FreeModuleCategory <l467265654d6f64756c6543617465676f7279>`\  category constructor. Author: Michel Petitot (petitot@lifl.\ ``fr``\ )   Note (Franz Lehner, June 2009): \ ``FreeModule``\  originally was not of FreeModuleCategory. Some functions (like \ ``support``\ , \ ``coefficients``\ , \ ``monomials``\ , ...) from here could be moved to \ ``IndexedDirectProductCategory``\  but at the moment there is no need for this.


.. _l467265654d6f64756c6543617465676f7279-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l467265654d6f64756c6543617465676f7279-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l467265654d6f64756c6543617465676f7279-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l467265654d6f64756c6543617465676f7279-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l467265654d6f64756c6543617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d6f64756c6543617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l467265654d6f64756c6543617465676f7279-636f656666696369656e74:

.. index::
   pair: FreeModuleCategory; coefficient

:spadfun:`coefficient`\: (%, S) -> R 
  \ ``coefficient(x, s)``\  returns the coefficient of the basis element \ ``s``\ 

.. _l467265654d6f64756c6543617465676f7279-636f656666696369656e7473:

.. index::
   pair: FreeModuleCategory; coefficients

:spadfun:`coefficients`\: % -> \ :ref:`List <l4c697374>`\  R 
  \ ``coefficients(x)``\  returns the list of coefficients of \ ``x``\ .

.. _l467265654d6f64756c6543617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l467265654d6f64756c6543617465676f7279-636f6e737472756374:

\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: S, c: R) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: S, c: R) -> % if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l467265654d6f64756c6543617465676f7279-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l496e646578656450726f6475637443617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> R if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l496e646578656450726f6475637443617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> S if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: S, c: R) if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6c696e656172457874656e64:

.. index::
   pair: FreeModuleCategory; linearExtend

:spadfun:`linearExtend`\: (S -> R, %) -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``linearExtend: (f, x)``\  returns the linear extension of a map defined on the basis applied to a linear combination

.. _l467265654d6f64756c6543617465676f7279-6c6973744f665465726d73:

\ :ref:`listOfTerms <l496e646578656444697265637450726f6475637443617465676f7279-6c6973744f665465726d73>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(k: S, c: R) 
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6d6170:

\ :ref:`map <l496e646578656450726f6475637443617465676f7279-6d6170>`\ \: (R -> R, %) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6d6f6e6f6d69616c3f:

\ :ref:`monomial? <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6d6f6e6f6d69616c:

\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (R, S) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6d6f6e6f6d69616c73:

.. index::
   pair: FreeModuleCategory; monomials

:spadfun:`monomials`\: % -> \ :ref:`List <l4c697374>`\  % 
  \ ``monomials(x)``\  returns the list of \ ``r_i*b_i``\  whose sum is \ ``x``\ .

.. _l467265654d6f64756c6543617465676f7279-6e756d6265724f664d6f6e6f6d69616c73:

\ :ref:`numberOfMonomials <l496e646578656444697265637450726f6475637443617465676f7279-6e756d6265724f664d6f6e6f6d69616c73>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l467265654d6f64756c6543617465676f7279-726564756374756d:

\ :ref:`reductum <l496e646578656450726f6475637443617465676f7279-726564756374756d>`\ \: % -> % if S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S)

.. _l467265654d6f64756c6543617465676f7279-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l467265654d6f64756c6543617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l467265654d6f64756c6543617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l467265654d6f64756c6543617465676f7279-737570706f7274:

.. index::
   pair: FreeModuleCategory; support

:spadfun:`support`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``support(x)``\  returns the list of basis elements with nonzero coefficients.

.. _l467265654d6f64756c6543617465676f7279-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  R 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\  and S has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`IndexedDirectProductCategory <l496e646578656444697265637450726f6475637443617465676f7279>`\ (R, S) 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (R, S) 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Module <l4d6f64756c65>`\  R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

