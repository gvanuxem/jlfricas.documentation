.. index:: ExpressionSpaceODESolver

.. _l45787072657373696f6e53706163654f4445536f6c766572:

ExpressionSpaceODESolver(R, F)
==============================

:viewcode:`utsode.spad line 125 <utsode.spad#L125>` :editcode:`[edit on github] <utsode.spad#L125>`

* R: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ )

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R


Taylor series solutions of explicit ODE\ ``'s``\ .


.. _l45787072657373696f6e53706163654f4445536f6c766572-736572696573536f6c7665:

.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`Equation <l4571756174696f6e>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x=a, y a = b)``\  returns a Taylor series solution of \ ``eq``\  around \ ``x``\  = a with initial condition \ ``y(a) = b``\ . Note: \ ``eq``\  must be of the form \ ``f(x, y x) y'(x) + g(x, y x) = h(x, y x)``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x=a, b)``\  is equivalent to \ ``seriesSolve(eq, y, x=a, y a = b)``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x=a, [b0, ..., b(n-1)])``\  returns a Taylor series solution of \ ``eq``\  around \ ``x = a``\  with initial conditions \ ``y(a) = b0``\ , \ ``y'(a) = b1``\ , \ ``y''(a) = b2``\ , ..., \ ``y(n-1)(a) = b(n-1)``\  \ ``eq``\  must be of the form \ ``f(x, y x, y'(x), ..., y(n-1)(x)) y(n)(x) + g(x, y x, y'(x), ..., y(n-1)(x)) = h(x, y x, y'(x), ..., y(n-1)(x))``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`Equation <l4571756174696f6e>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x = a, y a = b)``\  is equivalent to \ ``seriesSolve(eq=0, y, x=a, y a = b)``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x = a, b)``\  is equivalent to \ ``seriesSolve(eq = 0, y, x = a, y a = b)``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve(eq, y, x = a, [b0, ..., bn])``\  is equivalent to \ ``seriesSolve(eq = 0, y, x = a, [b0, ..., b(n-1)])``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve([eq1, ..., eqn], [y1, ..., yn], x = a, [y1 a = b1, ..., yn a = bn])``\  returns a taylor series solution of \ ``[eq1, ..., eqn]``\  around \ ``x = a``\  with initial conditions \ ``yi(a) = bi``\ . Note: eqi must be of the form \ ``fi(x, y1 x, y2 x, ..., yn x) y1'(x) + gi(x, y1 x, y2 x, ..., yn x) = h(x, y1 x, y2 x, ..., yn x)``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve([eq1, ..., eqn], [y1, ..., yn], x=a, [b1, ..., bn])``\  is equivalent to \ ``seriesSolve([eq1, ..., eqn], [y1, ..., yn], x = a, [y1 a = b1, ..., yn a = bn])``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve([eq1, ..., eqn], [y1, ..., yn], x = a, [y1 a = b1, ..., yn a = bn])``\  is equivalent to \ ``seriesSolve([eq1=0, ..., eqn=0], [y1, ..., yn], x = a, [y1 a = b1, ..., yn a = bn])``\ .


.. index::
   pair: ExpressionSpaceODESolver; seriesSolve

:spadfun:`seriesSolve`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> \ :ref:`Any <l416e79>`\  
  \ ``seriesSolve([eq1, ..., eqn], [y1, ..., yn], x=a, [b1, ..., bn])``\  is equivalent to \ ``seriesSolve([eq1=0, ..., eqn=0], [y1, ..., yn], x=a, [b1, ..., bn])``\ .


