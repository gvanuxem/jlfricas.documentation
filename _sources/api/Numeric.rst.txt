.. index:: Numeric

.. _l4e756d65726963:

Numeric S
=========

:viewcode:`numeric.spad line 1 <numeric.spad#L1>` :editcode:`[edit on github] <numeric.spad#L1>`

* S: \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 


Numeric provides real and complex numerical evaluation functions for various symbolic types.


.. _l4e756d65726963-636f6d706c65784e756d65726963:

.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Expression <l45787072657373696f6e>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\ 


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: (S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``complexNumeric(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Complex <l436f6d706c6578>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Expression <l45787072657373696f6e>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .


.. index::
   pair: Numeric; complexNumeric

:spadfun:`complexNumeric`\: S -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``complexNumeric(x)``\  returns a complex approximation of \ ``x``\ .

.. _l4e756d65726963-636f6d706c65784e756d65726963496643616e:

.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Expression <l45787072657373696f6e>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``complexNumericIfCan(x, n)``\  returns a complex approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Complex <l436f6d706c6578>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not constant.


.. index::
   pair: Numeric; complexNumericIfCan

:spadfun:`complexNumericIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> Union(\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``complexNumericIfCan(x)``\  returns a complex approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.

.. _l4e756d65726963-6e756d65726963:

.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: (\ :ref:`Expression <l45787072657373696f6e>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``numeric(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``numeric(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``numeric(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: (S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Float <l466c6f6174>`\  
  \ ``numeric(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places.


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: \ :ref:`Expression <l45787072657373696f6e>`\  S -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``numeric(x)``\  returns a real approximation of \ ``x``\ .


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``numeric(x)``\  returns a real approximation of \ ``x``\ .


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``numeric(x)``\  returns a real approximation of \ ``x``\ .


.. index::
   pair: Numeric; numeric

:spadfun:`numeric`\: S -> \ :ref:`Float <l466c6f6174>`\  
  \ ``numeric(x)``\  returns a real approximation of \ ``x``\ .

.. _l4e756d65726963-6e756d65726963496643616e:

.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: (\ :ref:`Expression <l45787072657373696f6e>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``numericIfCan(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``numericIfCan(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: (\ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``numericIfCan(x, n)``\  returns a real approximation of \ ``x``\  up to \ ``n``\  decimal places, or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: \ :ref:`Expression <l45787072657373696f6e>`\  S -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  and S has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  \ ``numericIfCan(x)``\  returns a real approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``numericIfCan(x)``\  returns a real approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


.. index::
   pair: Numeric; numericIfCan

:spadfun:`numericIfCan`\: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  S -> Union(\ :ref:`Float <l466c6f6174>`\ , failed) if S has \ :ref:`Ring <l52696e67>`\ 
  \ ``numericIfCan(x)``\  returns a real approximation of \ ``x``\ , or "failed" if \ ``x``\  is not a constant.


