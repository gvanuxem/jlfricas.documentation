.. index:: JLWSObject

.. _l4a4c57534f626a656374:

JLWSObject
==========

:viewcode:`jws.spad line 1 <jws.spad#L1>` :editcode:`[edit on github] <jws.spad#L1>`


Julia Wolfram Symbolic Object category using the Wolfram Symbol Transport Protocol.


.. _l4a4c57534f626a656374-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a4c57534f626a656374-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a4c57534f626a656374-636f65726365:

\ :ref:`coerce <l4a4c4f626a65637454797065-636f65726365>`\ \: % -> \ :ref:`JLObject <l4a4c4f626a656374>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4a4c57534f626a656374-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 

.. _l4a4c57534f626a656374-6a6c41626f7574:

\ :ref:`jlAbout <l4a4c4f626a65637454797065-6a6c41626f7574>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c4170706c79:

\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c446973706c6179:

\ :ref:`jlDisplay <l4a4c4f626a65637454797065-6a6c446973706c6179>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c44756d70:

\ :ref:`jlDump <l4a4c4f626a65637454797065-6a6c44756d70>`\ \: \ :ref:`JLObject <l4a4c4f626a656374>`\  -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c4576616c:

.. index::
   pair: JLWSObject; jlEval

:spadfun:`jlEval`\: % -> % 
  \ ``jlEval(expr)``\  evaluate \ ``expr``\  using the Wolfram Symbolic Transport Protocol.

.. _l4a4c57534f626a656374-6a6c48656164:

.. index::
   pair: JLWSObject; jlHead

:spadfun:`jlHead`\: % -> \ :ref:`JLWSSymbol <l4a4c575353796d626f6c>`\  
  \ ``jlHead(expr)``\  returns the Head type of \ ``expr``\ .

.. _l4a4c57534f626a656374-6a6c4964:

\ :ref:`jlId <l4a4c4f626a65637454797065-6a6c4964>`\ \: % -> \ :ref:`JLInt64 <l4a4c496e743634>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c4e756d65726963:

.. index::
   pair: JLWSObject; jlNumeric

:spadfun:`jlNumeric`\: % -> % 
  \ ``jlNumeric(expr)``\  returns numerical \ ``expr``\ .


.. index::
   pair: JLWSObject; jlNumeric

:spadfun:`jlNumeric`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``jlNumeric(expr, prec)``\  returns numerical \ ``expr``\  with digits precision prec.

.. _l4a4c57534f626a656374-6a6c4f626a656374:

\ :ref:`jlObject <l4a4c4f626a65637454797065-6a6c4f626a656374>`\ \: () -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c526566:

\ :ref:`jlRef <l4a4c4f626a65637454797065-6a6c526566>`\ \: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c726566:

\ :ref:`jlref <l4a4c4f626a65637454797065-6a6c726566>`\ \: \ :ref:`String <l537472696e67>`\  -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a6c53796d626f6c6963:

.. index::
   pair: JLWSObject; jlSymbolic

:spadfun:`jlSymbolic`\: % -> \ :ref:`String <l537472696e67>`\  
  jlSymbolix(expr) returns the symbolic 'FullForm'

.. _l4a4c57534f626a656374-6a6c54797065:

\ :ref:`jlType <l4a4c4f626a65637454797065-6a6c54797065>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6a5753496e74657270726574:

.. index::
   pair: JLWSObject; jWSInterpret

:spadfun:`jWSInterpret`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> % 
  \ ``jWSInterpret(Type, Expr)``\  interprets Expr to be of type \ ``Type``\  using the Wolfram Symbolic Language. For example: \example{jWSInterpret("Number","3.2")@JWSREAL} \example{jWSInterpret("Real","3.2")@JWSREAL}

.. _l4a4c57534f626a656374-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a4c57534f626a656374-6d757461626c653f:

\ :ref:`mutable? <l4a4c4f626a65637454797065-6d757461626c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-6e6f7468696e673f:

\ :ref:`nothing? <l4a4c4f626a65637454797065-6e6f7468696e673f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c57534f626a656374-737472696e67:

\ :ref:`string <l4a4c54797065-737472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLType <l4a4c54797065>`\ 

.. _l4a4c57534f626a656374-746f537472696e67:

.. index::
   pair: JLWSObject; toString

:spadfun:`toString`\: % -> \ :ref:`String <l537472696e67>`\  
  \ ``toString(obj)``\  returns its string representation.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\  

\ :ref:`JLType <l4a4c54797065>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

