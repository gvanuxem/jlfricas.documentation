.. index:: DistributionCategory

.. _l446973747269627574696f6e43617465676f7279:

DistributionCategory R
======================

:viewcode:`distro.spad line 595 <distro.spad#L595>` :editcode:`[edit on github] <distro.spad#L595>`

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


Category of distributions formally given by moments.


.. _l446973747269627574696f6e43617465676f7279-30:

.. index::
   pair: DistributionCategory; 0

:spadfun:`0`\: % 
  \ ``0``\  is the Dirac distribution

.. _l446973747269627574696f6e43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l446973747269627574696f6e43617465676f7279-5e:

.. index::
   pair: DistributionCategory; ^

:spadfun:`^`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``x^k``\  constructs the distribution of the \ ``k``\ th power of the random variable with distribution \ ``X``\  by picking every \ ``k``\ -th moment.

.. _l446973747269627574696f6e43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l446973747269627574696f6e43617465676f7279-626f6f6c65616e436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; booleanConvolution

:spadfun:`booleanConvolution`\: (%, %) -> % 
  \ ``booleanConvolution(x, y)``\  returns the boolean convolution of the distributions \ ``x``\  and \ ``y``\ 

.. _l446973747269627574696f6e43617465676f7279-626f6f6c65616e43756d756c616e74:

.. index::
   pair: DistributionCategory; booleanCumulant

:spadfun:`booleanCumulant`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> R 
  \ ``booleanCumulant(x, n)``\  returns the \ ``n``\ -th boolean cumulant of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-626f6f6c65616e43756d756c616e7473:

.. index::
   pair: DistributionCategory; booleanCumulants

:spadfun:`booleanCumulants`\: % -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``booleanCumulants(x)``\  returns the sequence of boolean cumulants of the distribution \ ``x``\ .

.. _l446973747269627574696f6e43617465676f7279-636c6173736963616c436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; classicalConvolution

:spadfun:`classicalConvolution`\: (%, %) -> % 
  \ ``classicalConvolution(x, y)``\  returns the classical convolution of the distributions \ ``x``\  and \ ``y``\ 

.. _l446973747269627574696f6e43617465676f7279-636c6173736963616c43756d756c616e74:

.. index::
   pair: DistributionCategory; classicalCumulant

:spadfun:`classicalCumulant`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> R 
  \ ``classicalCumulant(x, n)``\  returns the \ ``n``\ -th classical cumulant of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-636c6173736963616c43756d756c616e7473:

.. index::
   pair: DistributionCategory; classicalCumulants

:spadfun:`classicalCumulants`\: % -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``classicalCumulants(x)``\  returns sequence of classical cumulants of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l446973747269627574696f6e43617465676f7279-66726565436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; freeConvolution

:spadfun:`freeConvolution`\: (%, %) -> % 
  \ ``freeConvolution(x, y)``\  returns the free convolution of the distributions \ ``x``\  and \ ``y``\ 

.. _l446973747269627574696f6e43617465676f7279-6672656543756d756c616e74:

.. index::
   pair: DistributionCategory; freeCumulant

:spadfun:`freeCumulant`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> R 
  \ ``freeCumulant(x, n)``\  returns the \ ``n``\ -th free cumulant of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-6672656543756d756c616e7473:

.. index::
   pair: DistributionCategory; freeCumulants

:spadfun:`freeCumulants`\: % -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``freeCumulants(x)``\  returns the sequence of free cumulants of the distribution \ ``x``\ .

.. _l446973747269627574696f6e43617465676f7279-68616e6b656c44657465726d696e616e7473:

.. index::
   pair: DistributionCategory; hankelDeterminants

:spadfun:`hankelDeterminants`\: % -> \ :ref:`Stream <l53747265616d>`\  R 
  \ ``hankelDeterminants(x)``\  returns the stream of hankel determinants of the distribution \ ``x``\ .

.. _l446973747269627574696f6e43617465676f7279-6a61636f6269506172616d6574657273:

.. index::
   pair: DistributionCategory; jacobiParameters

:spadfun:`jacobiParameters`\: % -> Record(an: \ :ref:`Stream <l53747265616d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  R, bn: \ :ref:`Stream <l53747265616d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  R) if R hasn't \ :ref:`Field <l4669656c64>`\  and R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``jacobiParameters(x)``\  returns the pair of streams of Jacobi parameters of the distribution \ ``x``\ .


.. index::
   pair: DistributionCategory; jacobiParameters

:spadfun:`jacobiParameters`\: % -> Record(an: \ :ref:`Stream <l53747265616d>`\  R, bn: \ :ref:`Stream <l53747265616d>`\  R) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``jacobiParameters(x)``\  returns the pair of streams of Jacobi parameters of the distribution \ ``x``\ .

.. _l446973747269627574696f6e43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l446973747269627574696f6e43617465676f7279-6d6f6d656e74:

.. index::
   pair: DistributionCategory; moment

:spadfun:`moment`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> R 
  \ ``moment(x, n)``\  returns the \ ``n``\ -th moment of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-6d6f6d656e7473:

.. index::
   pair: DistributionCategory; moments

:spadfun:`moments`\: % -> \ :ref:`Sequence <l53657175656e6365>`\  R 
  \ ``moments(x)``\  returns the sequence of moments of the distribution \ ``x``\ 

.. _l446973747269627574696f6e43617465676f7279-6d6f6e6f746f6e65436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; monotoneConvolution

:spadfun:`monotoneConvolution`\: (%, %) -> % 
  \ ``monotoneConvolution(x, y)``\  returns the monotone convolution of the distributions \ ``x``\  and \ ``y``\ 

.. _l446973747269627574696f6e43617465676f7279-6d6f6e6f746f6e6543756d756c616e7473:

.. index::
   pair: DistributionCategory; monotoneCumulants

:spadfun:`monotoneCumulants`\: % -> \ :ref:`Sequence <l53657175656e6365>`\  R if R has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``monotoneCumulants(x)``\  returns the sequence of monotone cumulants of the distribution \ ``x``\ .

.. _l446973747269627574696f6e43617465676f7279-6f7274686f676f6e616c436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; orthogonalConvolution

:spadfun:`orthogonalConvolution`\: (%, %) -> % 
  \ ``orthogonalConvolution(x, y)``\  returns the orthogonal convolution of the distributions \ ``x``\  and \ ``y``\ 

.. _l446973747269627574696f6e43617465676f7279-6f7274686f676f6e616c506f6c796e6f6d69616c73:

.. index::
   pair: DistributionCategory; orthogonalPolynomials

:spadfun:`orthogonalPolynomials`\: % -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Fraction <l4672616374696f6e>`\  R if R hasn't \ :ref:`Field <l4669656c64>`\  and R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``orthogonalPolynomials(x)``\  returns the stream of orthogonal polynomials.


.. index::
   pair: DistributionCategory; orthogonalPolynomials

:spadfun:`orthogonalPolynomials`\: % -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  R if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``orthogonalPolynomials(x)``\  returns the stream of orthogonal polynomials.

.. _l446973747269627574696f6e43617465676f7279-7375626f7264696e6174696f6e436f6e766f6c7574696f6e:

.. index::
   pair: DistributionCategory; subordinationConvolution

:spadfun:`subordinationConvolution`\: (%, %) -> % 
  \ ``subordinationConvolution(x, y)``\  returns the subordination convolution of the distributions \ ``x``\  and \ ``y``\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

