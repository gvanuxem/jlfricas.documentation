.. index:: PowerSeriesLimitPackage

.. _l506f7765725365726965734c696d69745061636b616765:

PowerSeriesLimitPackage(R, FE)
==============================

:viewcode:`limitps.spad line 1 <limitps.spad#L1>` :editcode:`[edit on github] <limitps.spad#L1>`

* R: Join(\ :ref:`GcdDomain <l476364446f6d61696e>`\ , \ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ )

* FE: Join(\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ , \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R)


PowerSeriesLimitPackage implements limits of expressions in one or more variables as one of the variables approaches a limiting value. Included are two-sided limits, left- and right- hand limits, and limits at plus or minus infinity.


.. _l506f7765725365726965734c696d69745061636b616765-636f6d706c65784c696d6974:

.. index::
   pair: PowerSeriesLimitPackage; complexLimit

:spadfun:`complexLimit`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`OnePointCompletion <l4f6e65506f696e74436f6d706c6574696f6e>`\  FE) -> Union(\ :ref:`OnePointCompletion <l4f6e65506f696e74436f6d706c6574696f6e>`\  FE, failed) 
  \ ``complexLimit(f(x), x = a)``\  computes the complex limit \ ``lim(x -> a, f(x))``\ .

.. _l506f7765725365726965734c696d69745061636b616765-6c696d6974:

.. index::
   pair: PowerSeriesLimitPackage; limit

:spadfun:`limit`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  FE, \ :ref:`String <l537472696e67>`\ ) -> Union(\ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  FE, failed) 
  \ ``limit(f(x),x=a,"left")``\  computes the left hand real limit \ ``lim(x -> a-, f(x))``\ ; \ ``limit(f(x),x=a,"right")``\  computes the right hand real limit \ ``lim(x -> a+, f(x))``\ .


.. index::
   pair: PowerSeriesLimitPackage; limit

:spadfun:`limit`\: (FE, \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  FE) -> Union(\ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  FE, Record(leftHandLimit: Union(\ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  FE, failed), rightHandLimit: Union(\ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  FE, failed)), failed) 
  \ ``limit(f(x), x = a)``\  computes the real limit \ ``lim(x -> a, f(x))``\ .


