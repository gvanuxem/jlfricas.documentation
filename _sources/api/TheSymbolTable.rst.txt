.. index:: TheSymbolTable

.. _l54686553796d626f6c5461626c65:

TheSymbolTable
==============

:viewcode:`forttyp.spad line 430 <forttyp.spad#L430>` :editcode:`[edit on github] <forttyp.spad#L430>`


Creates and manipulates one global symbol table for FORTRAN code generation, containing details of types, dimensions, and argument lists.


.. _l54686553796d626f6c5461626c65-617267756d656e744c69737421:

.. index::
   pair: TheSymbolTable; argumentList!

:spadfun:`argumentList!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``argumentList!(f, l)``\  declares that the argument list for subprogram \ ``f``\  in the global symbol table is \ ``l``\ .


.. index::
   pair: TheSymbolTable; argumentList!

:spadfun:`argumentList!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`Void <l566f6964>`\  
  \ ``argumentList!(f, l, tab)``\  declares that the argument list for subprogram \ ``f``\  in symbol table tab is \ ``l``\ .


.. index::
   pair: TheSymbolTable; argumentList!

:spadfun:`argumentList!`\: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``argumentList!(l)``\  declares that the argument list for the current subprogram in the global symbol table is \ ``l``\ .

.. _l54686553796d626f6c5461626c65-617267756d656e744c6973744f66:

.. index::
   pair: TheSymbolTable; argumentListOf

:spadfun:`argumentListOf`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``argumentListOf(f, tab)``\  returns the argument list of \ ``f``\ 

.. _l54686553796d626f6c5461626c65-636c65617254686553796d626f6c5461626c65:

.. index::
   pair: TheSymbolTable; clearTheSymbolTable

:spadfun:`clearTheSymbolTable`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``clearTheSymbolTable()``\  clears the current symbol table.


.. index::
   pair: TheSymbolTable; clearTheSymbolTable

:spadfun:`clearTheSymbolTable`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``clearTheSymbolTable(x)``\  removes the symbol \ ``x``\  from the table

.. _l54686553796d626f6c5461626c65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l54686553796d626f6c5461626c65-63757272656e7453756250726f6772616d:

.. index::
   pair: TheSymbolTable; currentSubProgram

:spadfun:`currentSubProgram`\: () -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``currentSubProgram()``\  returns the name of the current subprogram being processed

.. _l54686553796d626f6c5461626c65-6465636c61726521:

.. index::
   pair: TheSymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(u, t, asp, tab)``\  declares the parameters \ ``u``\  of subprogram \ ``asp``\  to have type \ ``t``\  in symbol table tab.


.. index::
   pair: TheSymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ ) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(u, t)``\  declares the parameter \ ``u``\  to have type \ ``t``\  in the current level of the symbol table.


.. index::
   pair: TheSymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(u, t, asp)``\  declares the parameter \ ``u``\  to have type \ ``t``\  in asp.


.. index::
   pair: TheSymbolTable; declare!

:spadfun:`declare!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`FortranType <l466f727472616e54797065>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`FortranType <l466f727472616e54797065>`\  
  \ ``declare!(u, t, asp, tab)``\  declares the parameter \ ``u``\  of subprogram \ ``asp``\  to have type \ ``t``\  in symbol table tab.

.. _l54686553796d626f6c5461626c65-656d707479:

.. index::
   pair: TheSymbolTable; empty

:spadfun:`empty`\: () -> % 
  \ ``empty()``\  creates a new, empty symbol table.

.. _l54686553796d626f6c5461626c65-656e6453756250726f6772616d:

.. index::
   pair: TheSymbolTable; endSubProgram

:spadfun:`endSubProgram`\: () -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``endSubProgram()``\  asserts that we are no longer processing the current subprogram.

.. _l54686553796d626f6c5461626c65-6e657753756250726f6772616d:

.. index::
   pair: TheSymbolTable; newSubProgram

:spadfun:`newSubProgram`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``newSubProgram(f)``\  asserts that from now on type declarations are part of subprogram \ ``f``\ .

.. _l54686553796d626f6c5461626c65-7072696e74486561646572:

.. index::
   pair: TheSymbolTable; printHeader

:spadfun:`printHeader`\: () -> \ :ref:`Void <l566f6964>`\  
  \ ``printHeader()``\  produces the FORTRAN header for the current subprogram in the global symbol table on the current FORTRAN output stream.


.. index::
   pair: TheSymbolTable; printHeader

:spadfun:`printHeader`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`Void <l566f6964>`\  
  \ ``printHeader(f, tab)``\  produces the FORTRAN header for subprogram \ ``f``\  in symbol table tab on the current FORTRAN output stream.


.. index::
   pair: TheSymbolTable; printHeader

:spadfun:`printHeader`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``printHeader(f)``\  produces the FORTRAN header for subprogram \ ``f``\  in the global symbol table on the current FORTRAN output stream.

.. _l54686553796d626f6c5461626c65-7072696e745479706573:

.. index::
   pair: TheSymbolTable; printTypes

:spadfun:`printTypes`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``printTypes(tab)``\  produces FORTRAN type declarations from \ ``tab``\ , on the current FORTRAN output stream

.. _l54686553796d626f6c5461626c65-72657475726e5479706521:

.. index::
   pair: TheSymbolTable; returnType!

:spadfun:`returnType!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void)) -> \ :ref:`Void <l566f6964>`\  
  \ ``returnType!(f, t)``\  declares that the return type of subprogram \ ``f``\  in the global symbol table is \ ``t``\ .


.. index::
   pair: TheSymbolTable; returnType!

:spadfun:`returnType!`\: (\ :ref:`Symbol <l53796d626f6c>`\ , Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void), %) -> \ :ref:`Void <l566f6964>`\  
  \ ``returnType!(f, t, tab)``\  declares that the return type of subprogram \ ``f``\  in symbol table tab is \ ``t``\ .


.. index::
   pair: TheSymbolTable; returnType!

:spadfun:`returnType!`\: Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void) -> \ :ref:`Void <l566f6964>`\  
  \ ``returnType!(t)``\  declares that the return type of he current subprogram in the global symbol table is \ ``t``\ .

.. _l54686553796d626f6c5461626c65-72657475726e547970654f66:

.. index::
   pair: TheSymbolTable; returnTypeOf

:spadfun:`returnTypeOf`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void) 
  \ ``returnTypeOf(f, tab)``\  returns the type of the object returned by \ ``f``\ 

.. _l54686553796d626f6c5461626c65-73686f7754686553796d626f6c5461626c65:

.. index::
   pair: TheSymbolTable; showTheSymbolTable

:spadfun:`showTheSymbolTable`\: () -> % 
  \ ``showTheSymbolTable()``\  returns the current symbol table.

.. _l54686553796d626f6c5461626c65-73796d626f6c5461626c654f66:

.. index::
   pair: TheSymbolTable; symbolTableOf

:spadfun:`symbolTableOf`\: (\ :ref:`Symbol <l53796d626f6c>`\ , %) -> \ :ref:`SymbolTable <l53796d626f6c5461626c65>`\  
  \ ``symbolTableOf(f, tab)``\  returns the symbol table of \ ``f``\ 


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

