.. index:: ListFunctions2

.. _l4c69737446756e6374696f6e7332:

ListFunctions2(A, B)
====================

:viewcode:`list.spad line 292 <list.spad#L292>` :editcode:`[edit on github] <list.spad#L292>`

* A: \ :ref:`Type <l54797065>`\ 

* B: \ :ref:`Type <l54797065>`\ 


\ :ref:`ListFunctions2 <l4c69737446756e6374696f6e7332>`\  implements utility functions that operate on two kinds of lists, each with a possibly different type of element.


.. _l4c69737446756e6374696f6e7332-6d6170:

.. index::
   pair: ListFunctions2; map

:spadfun:`map`\: (A -> B, \ :ref:`List <l4c697374>`\  A) -> \ :ref:`List <l4c697374>`\  B 
  \ ``map(fn, u)``\  applies \ ``fn``\  to each element of list \ ``u``\  and returns a new list with the results. For example \ ``map(square, [1, 2, 3]) = [1, 4, 9]``\ .

.. _l4c69737446756e6374696f6e7332-726564756365:

.. index::
   pair: ListFunctions2; reduce

:spadfun:`reduce`\: ((A, B) -> B, \ :ref:`List <l4c697374>`\  A, B) -> B 
  \ ``reduce(fn, u, ident)``\  successively uses the binary function \ ``fn``\  on the elements of list \ ``u``\  and the result of previous applications. \ ``ident``\  is returned if the \ ``u``\  is empty. Note the order of application in the following examples: \ ``reduce(fn, [1, 2, 3], 0) = fn(3, fn(2, fn(1, 0)))``\  and \ ``reduce(*, [2, 3], 1) = 3 * (2 * 1)``\ .

.. _l4c69737446756e6374696f6e7332-7363616e:

.. index::
   pair: ListFunctions2; scan

:spadfun:`scan`\: ((A, B) -> B, \ :ref:`List <l4c697374>`\  A, B) -> \ :ref:`List <l4c697374>`\  B 
  \ ``scan(fn, u, ident)``\  successively uses the binary function \ ``fn``\  to reduce more and more of list \ ``u``\ . \ ``ident``\  is returned if the \ ``u``\  is empty. The result is a list of the reductions at each step. See \ :spadfun:`reduce`\  for more information. Examples: \ ``scan(fn, [1, 2], 0) = [fn(2, fn(1, 0)), fn(1, 0)]``\  and \ ``scan(*, [2, 3], 1) = [2 * 1, 3 * (2 * 1)]``\ .


