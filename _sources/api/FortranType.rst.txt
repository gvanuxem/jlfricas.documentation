.. index:: FortranType

.. _l466f727472616e54797065:

FortranType
===========

:viewcode:`forttyp.spad line 147 <forttyp.spad#L147>` :editcode:`[edit on github] <forttyp.spad#L147>`


Creates and manipulates objects which correspond to FORTRAN data types, including array dimensions.


.. _l466f727472616e54797065-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e54797065-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466f727472616e54797065-636f65726365:

.. index::
   pair: FortranType; coerce

:spadfun:`coerce`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``coerce(x)``\  provides a printable form for \ ``x``\ 


.. index::
   pair: FortranType; coerce

:spadfun:`coerce`\: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\  -> % 
  \ ``coerce(t)``\  creates an element from a scalar type

.. _l466f727472616e54797065-636f6e737472756374:

.. index::
   pair: FortranType; construct

:spadfun:`construct`\: (Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void), \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``construct(type, dims)``\  creates an element of FortranType


.. index::
   pair: FortranType; construct

:spadfun:`construct`\: (Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void), \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> % 
  \ ``construct(type, dims)``\  creates an element of FortranType

.. _l466f727472616e54797065-64696d656e73696f6e734f66:

.. index::
   pair: FortranType; dimensionsOf

:spadfun:`dimensionsOf`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``dimensionsOf(t)``\  returns the dimensions of \ ``t``\ 

.. _l466f727472616e54797065-65787465726e616c3f:

.. index::
   pair: FortranType; external?

:spadfun:`external?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``external?(u)``\  returns \ ``true``\  if \ ``u``\  is declared to be EXTERNAL

.. _l466f727472616e54797065-666f727472616e436861726163746572:

.. index::
   pair: FortranType; fortranCharacter

:spadfun:`fortranCharacter`\: () -> % 
  \ ``fortranCharacter()``\  returns CHARACTER, an element of FortranType

.. _l466f727472616e54797065-666f727472616e436f6d706c6578:

.. index::
   pair: FortranType; fortranComplex

:spadfun:`fortranComplex`\: () -> % 
  \ ``fortranComplex()``\  returns COMPLEX, an element of FortranType

.. _l466f727472616e54797065-666f727472616e446f75626c65:

.. index::
   pair: FortranType; fortranDouble

:spadfun:`fortranDouble`\: () -> % 
  \ ``fortranDouble()``\  returns DOUBLE PRECISION, an element of FortranType

.. _l466f727472616e54797065-666f727472616e446f75626c65436f6d706c6578:

.. index::
   pair: FortranType; fortranDoubleComplex

:spadfun:`fortranDoubleComplex`\: () -> % 
  \ ``fortranDoubleComplex()``\  returns DOUBLE COMPLEX, an element of FortranType

.. _l466f727472616e54797065-666f727472616e496e7465676572:

.. index::
   pair: FortranType; fortranInteger

:spadfun:`fortranInteger`\: () -> % 
  \ ``fortranInteger()``\  returns INTEGER, an element of FortranType

.. _l466f727472616e54797065-666f727472616e4c6f676963616c:

.. index::
   pair: FortranType; fortranLogical

:spadfun:`fortranLogical`\: () -> % 
  \ ``fortranLogical()``\  returns LOGICAL, an element of FortranType

.. _l466f727472616e54797065-666f727472616e5265616c:

.. index::
   pair: FortranType; fortranReal

:spadfun:`fortranReal`\: () -> % 
  \ ``fortranReal()``\  returns REAL, an element of FortranType

.. _l466f727472616e54797065-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466f727472616e54797065-7363616c6172547970654f66:

.. index::
   pair: FortranType; scalarTypeOf

:spadfun:`scalarTypeOf`\: % -> Union(fst: \ :ref:`FortranScalarType <l466f727472616e5363616c617254797065>`\ , void: void) 
  \ ``scalarTypeOf(t)``\  returns the FORTRAN data type of \ ``t``\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

