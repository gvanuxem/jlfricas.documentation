.. index:: LinearSystemMatrixPackage1

.. _l4c696e65617253797374656d4d61747269785061636b61676531:

LinearSystemMatrixPackage1 F
============================

:viewcode:`solvelin.spad line 91 <solvelin.spad#L91>` :editcode:`[edit on github] <solvelin.spad#L91>`

* F: \ :ref:`Field <l4669656c64>`\ 


This package solves linear system in the matrix form \ ``AX = B``\ . It is essentially a particular instantiation of the package \ :ref:`LinearSystemMatrixPackage <l4c696e65617253797374656d4d61747269785061636b616765>`\  for Matrix and Vector. This package\ ``'s``\  existence makes it easier to use \ :spadfun:`solve`\  in the FriCAS interpreter.


.. _l4c696e65617253797374656d4d61747269785061636b61676531-686173536f6c7574696f6e3f:

.. index::
   pair: LinearSystemMatrixPackage1; hasSolution?

:spadfun:`hasSolution?`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hasSolution?(A, B)``\  tests if the linear system \ ``AX = B``\  has a solution.

.. _l4c696e65617253797374656d4d61747269785061636b61676531-706172746963756c6172536f6c7574696f6e:

.. index::
   pair: LinearSystemMatrixPackage1; particularSolution

:spadfun:`particularSolution`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> Union(\ :ref:`Vector <l566563746f72>`\  F, failed) 
  \ ``particularSolution(A, B)``\  finds a particular solution of the linear system \ ``AX = B``\ .

.. _l4c696e65617253797374656d4d61747269785061636b61676531-72616e6b:

.. index::
   pair: LinearSystemMatrixPackage1; rank

:spadfun:`rank`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``rank(A, B)``\  computes the rank of the complete matrix \ ``(A|B)``\  of the linear system \ ``AX = B``\ .

.. _l4c696e65617253797374656d4d61747269785061636b61676531-736f6c7665:

.. index::
   pair: LinearSystemMatrixPackage1; solve

:spadfun:`solve`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`List <l4c697374>`\  Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solve(A, LB)``\  finds a particular soln of the systems \ ``AX = B``\  and a basis of the associated homogeneous systems \ ``AX = 0``\  where \ ``B``\  varies in the list of column vectors \ ``LB``\ .


.. index::
   pair: LinearSystemMatrixPackage1; solve

:spadfun:`solve`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solve(A, B)``\  finds a particular solution of the system \ ``AX = B``\  and a basis of the associated homogeneous system \ ``AX = 0``\ .


.. index::
   pair: LinearSystemMatrixPackage1; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) -> \ :ref:`List <l4c697374>`\  Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solve(A, LB)``\  finds a particular soln of the systems \ ``AX = B``\  and a basis of the associated homogeneous systems \ ``AX = 0``\  where \ ``B``\  varies in the list of column vectors \ ``LB``\ .


.. index::
   pair: LinearSystemMatrixPackage1; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  F, failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F) 
  \ ``solve(A, B)``\  finds a particular solution of the system \ ``AX = B``\  and a basis of the associated homogeneous system \ ``AX = 0``\ .


