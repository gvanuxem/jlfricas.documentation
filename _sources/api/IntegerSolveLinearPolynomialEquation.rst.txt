.. index:: IntegerSolveLinearPolynomialEquation

.. _l496e7465676572536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

IntegerSolveLinearPolynomialEquation
====================================

:viewcode:`integer.spad line 1 <integer.spad#L1>` :editcode:`[edit on github] <integer.spad#L1>`


This package provides the implementation for the \ :spadfun:`solveLinearPolynomialEquation`\  operation over the integers. It uses a lifting technique from the package GenExEuclid


.. _l496e7465676572536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

.. index::
   pair: IntegerSolveLinearPolynomialEquation; solveLinearPolynomialEquation

:spadfun:`solveLinearPolynomialEquation`\: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``solveLinearPolynomialEquation([f1, ..., fn], g)``\  (where the \ ``fi``\  are relatively prime to each other) returns a list of \ ``ai``\  such that \ ``g/prod fi = sum ai/fi``\  or returns "failed" if no such list of \ ``ai``\ \ ``'s``\  exists.


