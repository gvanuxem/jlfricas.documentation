.. index:: ExtendedPolynomialReduction

.. _l457874656e646564506f6c796e6f6d69616c526564756374696f6e:

ExtendedPolynomialReduction(C, E, R)
====================================

:viewcode:`extred.spad line 1 <extred.spad#L1>` :editcode:`[edit on github] <extred.spad#L1>`

* C: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* R: Join(\ :ref:`FiniteAbelianMonoidRing <l46696e6974654162656c69616e4d6f6e6f696452696e67>`\ (C, E), \ :ref:`VariablesCommuteWithCoefficients <l5661726961626c6573436f6d6d75746557697468436f656666696369656e7473>`\ )


ExtendedPolynomialReduction(\ ``C``\ , \ ``E``\ , \ ``R``\ ) is a package that allows denominatorFree reductions of a polynomial \ ``r``\  from \ ``R``\  \ ``wrt``\  a list of polynomials from \ ``R``\  (usually such a list is a Groebner basis \ ``wrt``\  the order given via \ ``E``\ ). Additionally, the reduction steps are recorded and provided in the output.


.. _l457874656e646564506f6c796e6f6d69616c526564756374696f6e-726564756365:

.. index::
   pair: ExtendedPolynomialReduction; reduce

:spadfun:`reduce`\: (R, \ :ref:`List <l4c697374>`\  R) -> Record(poly: R, repr: \ :ref:`Vector <l566563746f72>`\  R, mult: C) 
  \ ``reduce(r, bas)``\  returns a triple (\ ``p``\ , \ ``v``\ , \ ``m``\ ) such that \ ``m*r``\  = sum(bas.\ ``i``\  * \ ``v``\ .\ ``i``\ , \ ``i=1``\ ..\#bas) + \ ``p``\ 


