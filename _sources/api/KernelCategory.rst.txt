.. index:: KernelCategory

.. _l4b65726e656c43617465676f7279:

KernelCategory S
================

:viewcode:`kl.spad line 226 <kl.spad#L226>` :editcode:`[edit on github] <kl.spad#L226>`

* S: \ :ref:`Comparable <l436f6d70617261626c65>`\ 


A kernel over a set \ ``S``\  is an operator applied to a given list of arguments from \ ``S``\ .


.. _l4b65726e656c43617465676f7279-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4b65726e656c43617465676f7279-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4b65726e656c43617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4b65726e656c43617465676f7279-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4b65726e656c43617465676f7279-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4b65726e656c43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4b65726e656c43617465676f7279-617267756d656e74:

.. index::
   pair: KernelCategory; argument

:spadfun:`argument`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``argument(op(a1, ..., an))``\  returns \ ``[a1, ..., an]``\ .

.. _l4b65726e656c43617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4b65726e656c43617465676f7279-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l4b65726e656c43617465676f7279-686569676874:

.. index::
   pair: KernelCategory; height

:spadfun:`height`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``height(k)``\  returns the nesting level of \ ``k``\ .

.. _l4b65726e656c43617465676f7279-69733f:

.. index::
   pair: KernelCategory; is?

:spadfun:`is?`\: (%, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?(op(a1, ..., an), f)``\  tests if op = \ ``f``\ .


.. index::
   pair: KernelCategory; is?

:spadfun:`is?`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``is?(op(a1, ..., an), s)``\  tests if the name of op is \ ``s``\ .

.. _l4b65726e656c43617465676f7279-6b65726e656c:

.. index::
   pair: KernelCategory; kernel

:spadfun:`kernel`\: (\ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``kernel(op, [a1, ..., an], m)``\  returns the kernel \ ``op(a1, ..., an)``\  of nesting level \ ``m``\ . Error: if \ ``op``\  is \ ``k``\ -ary for some \ ``k``\  not equal to \ ``n``\ .


.. index::
   pair: KernelCategory; kernel

:spadfun:`kernel`\: \ :ref:`Symbol <l53796d626f6c>`\  -> % 
  \ ``kernel(x)``\  returns \ ``x``\  viewed as a kernel.

.. _l4b65726e656c43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4b65726e656c43617465676f7279-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4b65726e656c43617465676f7279-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4b65726e656c43617465676f7279-6e616d65:

.. index::
   pair: KernelCategory; name

:spadfun:`name`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``name(op(a1, ..., an))``\  returns the name of op.

.. _l4b65726e656c43617465676f7279-6f70657261746f72:

.. index::
   pair: KernelCategory; operator

:spadfun:`operator`\: % -> \ :ref:`BasicOperator <l42617369634f70657261746f72>`\  
  \ ``operator(op(a1, ..., an))``\  returns the operator op.

.. _l4b65726e656c43617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4b65726e656c43617465676f7279-73796d626f6c496643616e:

.. index::
   pair: KernelCategory; symbolIfCan

:spadfun:`symbolIfCan`\: % -> Union(\ :ref:`Symbol <l53796d626f6c>`\ , failed) 
  \ ``symbolIfCan(k)``\  returns \ ``k``\  viewed as a symbol if \ ``k``\  is a symbol, and "failed" otherwise.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Float <l466c6f6174>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Pattern <l5061747465726e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`Patternable <l5061747465726e61626c65>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

