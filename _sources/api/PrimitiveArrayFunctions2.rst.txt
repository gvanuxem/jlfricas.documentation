.. index:: PrimitiveArrayFunctions2

.. _l5072696d6974697665417272617946756e6374696f6e7332:

PrimitiveArrayFunctions2(A, B)
==============================

:viewcode:`array1.spad line 31 <array1.spad#L31>` :editcode:`[edit on github] <array1.spad#L31>`

* A: \ :ref:`Type <l54797065>`\ 

* B: \ :ref:`Type <l54797065>`\ 


This package provides tools for operating on primitive arrays with unary and binary functions involving different underlying types


.. _l5072696d6974697665417272617946756e6374696f6e7332-6d6170:

.. index::
   pair: PrimitiveArrayFunctions2; map

:spadfun:`map`\: (A -> B, \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  A) -> \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  B 
  \ ``map(f, a)``\  applies function \ ``f``\  to each member of primitive array \ ``a``\  resulting in a new primitive array over a possibly different underlying domain.

.. _l5072696d6974697665417272617946756e6374696f6e7332-726564756365:

.. index::
   pair: PrimitiveArrayFunctions2; reduce

:spadfun:`reduce`\: ((A, B) -> B, \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  A, B) -> B 
  \ ``reduce(f, a, r)``\  applies function \ ``f``\  to each successive element of the primitive array \ ``a``\  and an accumulant initialized to \ ``r``\ . For example, \ ``reduce(_+\$Integer, [1, 2, 3], 0)``\  does \ ``3+(2+(1+0))``\ . Note: third argument \ ``r``\  may be regarded as the identity element for the function \ ``f``\ .

.. _l5072696d6974697665417272617946756e6374696f6e7332-7363616e:

.. index::
   pair: PrimitiveArrayFunctions2; scan

:spadfun:`scan`\: ((A, B) -> B, \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  A, B) -> \ :ref:`PrimitiveArray <l5072696d69746976654172726179>`\  B 
  \ ``scan(f, a, r)``\  successively applies \ ``reduce(f, x, r)``\  to more and more leading sub-arrays \ ``x``\  of primitive array \ ``a``\ . More precisely, if \ ``a``\  is \ ``[a1, a2, ...]``\ , then \ ``scan(f, a, r)``\  returns \ ``[reduce(f, [a1], r), reduce(f, [a1, a2], r), ...]``\ .


