.. index:: JLObjPy

.. _l4a4c4f626a5079:

JLObjPy
=======

:viewcode:`jobject.spad line 938 <jobject.spad#L938>` :editcode:`[edit on github] <jobject.spad#L938>`


Convenience domain for Julia Python objects that are used within Julia, and not directly by the underlying FriCAS Common LISP. The PythonCall package has to be installed in Julia. Note that the PythonCall Julia package uses a similar scheme for Julia Python objects to the one of jlFriCAS for JLObjectType references.


.. _l4a4c4f626a5079-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a4c4f626a5079-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a4c4f626a5079-636f65726365:

\ :ref:`coerce <l4a4c4f626a65637454797065-636f65726365>`\ \: % -> \ :ref:`JLObject <l4a4c4f626a656374>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: JLObjPy; coerce

:spadfun:`coerce`\: \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``coerce(f)``\  coerces \ ``f``\  to a Julia Python object.


.. index::
   pair: JLObjPy; coerce

:spadfun:`coerce`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``coerce(i)``\  coerces the integer \ ``i``\  to a Julia Python object.


.. index::
   pair: JLObjPy; coerce

:spadfun:`coerce`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``coerce(str)``\  coerces the string \ ``str``\  to a Julia Python string object.

.. _l4a4c4f626a5079-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 

.. _l4a4c4f626a5079-6a6c41626f7574:

\ :ref:`jlAbout <l4a4c4f626a65637454797065-6a6c41626f7574>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c4170706c79:

\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


.. index::
   pair: JLObjPy; jlApply

:spadfun:`jlApply`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , %) -> % 
  \ ``jlApply(func, mod, pyobj)``\  applies the Python function \ ``func``\  from the module \ ``mod``\  to the Python object pyobj. For example: Numpy needs to be installed, see the Julia package CondaPkg. \example{jlApply("array", "numpy", jpyobj("[1,2,3]"))} creates a numpy array from the Python list [1,2,3]. jlApply("sqrt", "math", 2) computes the square root of 2.


.. index::
   pair: JLObjPy; jlApply

:spadfun:`jlApply`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , %, %) -> % 
  \ ``jlApply(func, mod, pyobj1, pyobj2)``\  applies the Python function \ ``func``\  from the module \ ``mod``\  to the Python objects \ ``pyobj1``\  and \ ``pyobj2``\ 


.. index::
   pair: JLObjPy; jlApply

:spadfun:`jlApply`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  \ ``jlApply(func, mod, pyobj1, pyobj2, pyobj3)``\  applies the Python function \ ``func``\  from the module \ ``mod``\  to the Python objects \ ``pyobj1``\ , \ ``pyobj2``\  and \ ``pyobj3``\ .


.. index::
   pair: JLObjPy; jlApply

:spadfun:`jlApply`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  \ ``jlApply(func, mod, pyobj1, pyobj2, pyobj3, pyobj4)``\  applies the Python function \ ``func``\  from the module \ ``mod``\  to the Python objects \ ``pyobj1``\ , \ ``pyobj2``\ , \ ``pyobj3``\  and \ ``pyobj4``\ .


.. index::
   pair: JLObjPy; jlApply

:spadfun:`jlApply`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  \ ``jlApply(func, mod, pyobj1, pyobj2, pyobj3, pyobj4, pyobj5)``\  applies the Python function \ ``func``\  from the module \ ``mod``\  to the Python objects \ ``pyobj1``\ , \ ``pyobj2``\ , \ ``pyobj3``\ , \ ``pyobj4``\  and \ ``pyobj5``\ .

.. _l4a4c4f626a5079-6a6c446973706c6179:

\ :ref:`jlDisplay <l4a4c4f626a65637454797065-6a6c446973706c6179>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c44756d70:

\ :ref:`jlDump <l4a4c4f626a65637454797065-6a6c44756d70>`\ \: \ :ref:`JLObject <l4a4c4f626a656374>`\  -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c4964:

\ :ref:`jlId <l4a4c4f626a65637454797065-6a6c4964>`\ \: % -> \ :ref:`JLInt64 <l4a4c496e743634>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c4f626a656374:

\ :ref:`jlObject <l4a4c4f626a65637454797065-6a6c4f626a656374>`\ \: () -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c5079436f6e76657274:

.. index::
   pair: JLObjPy; jlPyConvert

:spadfun:`jlPyConvert`\: (%, \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`JLObject <l4a4c4f626a656374>`\  
  \ ``jlPyConvert(pyobj, type)``\  converts the Python object \ ``pyobj``\  to the Julia type 'type'.

.. _l4a4c4f626a5079-6a6c5079446f63756d656e746174696f6e:

.. index::
   pair: JLObjPy; jlPyDocumentation

:spadfun:`jlPyDocumentation`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlPyDocumentation(obj)``\  displays the Python documentation for the Python object \ ``obj``\ .

.. _l4a4c4f626a5079-6a6c5079496d706f7274:

.. index::
   pair: JLObjPy; jlPyImport

:spadfun:`jlPyImport`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``jlPyImport(mod)``\  imports the Python module \ ``mod``\  in the Julia Python environment. No use at this time.

.. _l4a4c4f626a5079-6a6c526566:

\ :ref:`jlRef <l4a4c4f626a65637454797065-6a6c526566>`\ \: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c726566:

\ :ref:`jlref <l4a4c4f626a65637454797065-6a6c726566>`\ \: \ :ref:`String <l537472696e67>`\  -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a6c54797065:

\ :ref:`jlType <l4a4c4f626a65637454797065-6a6c54797065>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6a70796f626a:

.. index::
   pair: JLObjPy; jpyobj

:spadfun:`jpyobj`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``jpyobj(str)``\  coerces the string \ ``str``\  to a Julia Python object. Use jlDisplay(pyobj) to display the Python object pyobj.

.. _l4a4c4f626a5079-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a4c4f626a5079-6d757461626c653f:

\ :ref:`mutable? <l4a4c4f626a65637454797065-6d757461626c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-6e6f7468696e673f:

\ :ref:`nothing? <l4a4c4f626a65637454797065-6e6f7468696e673f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4a4c4f626a5079-737472696e67:

\ :ref:`string <l4a4c54797065-737472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLType <l4a4c54797065>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\  

\ :ref:`JLType <l4a4c54797065>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

