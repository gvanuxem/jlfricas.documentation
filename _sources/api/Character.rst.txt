.. index:: Character

.. _l436861726163746572:

Character
=========

:viewcode:`string.spad line 1 <string.spad#L1>` :editcode:`[edit on github] <string.spad#L1>`


This domain provides the basic character data type.


.. _l436861726163746572-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l436861726163746572-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l436861726163746572-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l436861726163746572-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l436861726163746572-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l436861726163746572-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l436861726163746572-616c70686162657469633f:

.. index::
   pair: Character; alphabetic?

:spadfun:`alphabetic?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``alphabetic?(c)``\  tests if \ ``c``\  is a letter, i.e. one of a..\ ``z``\  or A..\ ``Z``\ .

.. _l436861726163746572-616c7068616e756d657269633f:

.. index::
   pair: Character; alphanumeric?

:spadfun:`alphanumeric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``alphanumeric?(c)``\  tests if \ ``c``\  is either a letter or number, i.e. one of 0..9, a..\ ``z``\  or A..\ ``Z``\ .

.. _l436861726163746572-63686172:

.. index::
   pair: Character; char

:spadfun:`char`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``char(i)``\  provides a character corresponding to the integer code \ ``i``\ . It is always \ ``true``\  that \ ``ord char i = i``\ .


.. index::
   pair: Character; char

:spadfun:`char`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``char(s)``\  provides a character from a string \ ``s``\  of length one.

.. _l436861726163746572-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l436861726163746572-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l436861726163746572-64696769743f:

.. index::
   pair: Character; digit?

:spadfun:`digit?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``digit?(c)``\  tests if \ ``c``\  is a digit character, i.e. one of 0..9.

.. _l436861726163746572-656e756d6572617465:

\ :ref:`enumerate <l46696e697465-656e756d6572617465>`\ \: () -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l436861726163746572-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l436861726163746572-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l436861726163746572-68657844696769743f:

.. index::
   pair: Character; hexDigit?

:spadfun:`hexDigit?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hexDigit?(c)``\  tests if \ ``c``\  is a hexadecimal numeral, i.e. one of 0..9, a..\ ``f``\  or A..\ ``F``\ .

.. _l436861726163746572-696e646578:

\ :ref:`index <l46696e697465-696e646578>`\ \: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l436861726163746572-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l436861726163746572-6c6f6f6b7570:

\ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ \: % -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l436861726163746572-6c6f776572436173653f:

.. index::
   pair: Character; lowerCase?

:spadfun:`lowerCase?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``lowerCase?(c)``\  tests if \ ``c``\  is an lower case letter, i.e. one of a..\ ``z``\ .

.. _l436861726163746572-6c6f77657243617365:

.. index::
   pair: Character; lowerCase

:spadfun:`lowerCase`\: % -> % 
  \ ``lowerCase(c)``\  converts an upper case letter to the corresponding lower case letter. If \ ``c``\  is not an upper case letter, then it is returned unchanged.

.. _l436861726163746572-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l436861726163746572-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l436861726163746572-6e65776c696e65:

.. index::
   pair: Character; newline

:spadfun:`newline`\: () -> % 
  \ ``newline()``\  provides the newline character.

.. _l436861726163746572-6f7264:

.. index::
   pair: Character; ord

:spadfun:`ord`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``ord(c)``\  provides an integral code corresponding to the character \ ``c``\ . It is always \ ``true``\  that \ ``char ord c = c``\ .

.. _l436861726163746572-71756f7465:

.. index::
   pair: Character; quote

:spadfun:`quote`\: () -> % 
  \ ``quote()``\  provides the string quote character, \ ``"``\ .

.. _l436861726163746572-72616e646f6d:

\ :ref:`random <l46696e697465-72616e646f6d>`\ \: () -> % 
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l436861726163746572-73697a65:

\ :ref:`size <l46696e697465-73697a65>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Finite <l46696e697465>`\ 

.. _l436861726163746572-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l436861726163746572-7370616365:

.. index::
   pair: Character; space

:spadfun:`space`\: () -> % 
  \ ``space()``\  provides the blank character.

.. _l436861726163746572-756e64657273636f7265:

.. index::
   pair: Character; underscore

:spadfun:`underscore`\: () -> % 
  \ ``underscore()``\  provides the underscore character, \ ``_``\ , which is used to allow quotes and other characters \ *within*\  strings.

.. _l436861726163746572-7570706572436173653f:

.. index::
   pair: Character; upperCase?

:spadfun:`upperCase?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``upperCase?(c)``\  tests if \ ``c``\  is an upper case letter, i.e. one of A..\ ``Z``\ .

.. _l436861726163746572-757070657243617365:

.. index::
   pair: Character; upperCase

:spadfun:`upperCase`\: % -> % 
  \ ``upperCase(c)``\  converts a lower case letter to the corresponding upper case letter. If \ ``c``\  is not a lower case letter, then it is returned unchanged.


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  

\ :ref:`Finite <l46696e697465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  

\ :ref:`OrderedFinite <l4f72646572656446696e697465>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

