.. index:: IntegerLinearDependence

.. _l496e74656765724c696e656172446570656e64656e6365:

IntegerLinearDependence R
=========================

:viewcode:`lindep.spad line 133 <lindep.spad#L133>` :editcode:`[edit on github] <lindep.spad#L133>`

* R: \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ 


Test for linear dependence over the integers.


.. _l496e74656765724c696e656172446570656e64656e6365-6c696e656172446570656e64656e63654f7665725a:

.. index::
   pair: IntegerLinearDependence; linearDependenceOverZ

:spadfun:`linearDependenceOverZ`\: \ :ref:`Vector <l566563746f72>`\  R -> Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``linearlyDependenceOverZ([v1, ..., vn])``\  returns \ ``[c1, ..., cn]``\  if \ ``c1*v1 + ... + cn*vn = 0``\  and not all the \ ``ci``\ \ ``'s``\  are 0, "failed" if the \ ``vi``\ \ ``'s``\  are linearly independent over the integers.

.. _l496e74656765724c696e656172446570656e64656e6365-6c696e6561726c79446570656e64656e744f7665725a3f:

.. index::
   pair: IntegerLinearDependence; linearlyDependentOverZ?

:spadfun:`linearlyDependentOverZ?`\: \ :ref:`Vector <l566563746f72>`\  R -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``linearlyDependentOverZ?([v1, ..., vn])``\  returns \ ``true``\  if the \ ``vi``\ \ ``'s``\  are linearly dependent over the integers, \ ``false``\  otherwise.

.. _l496e74656765724c696e656172446570656e64656e6365-706172746963756c6172536f6c7574696f6e4f76657251:

.. index::
   pair: IntegerLinearDependence; particularSolutionOverQ

:spadfun:`particularSolutionOverQ`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``solveLinearlyOverQ([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such rational numbers \ ``ci``\ \ ``'s``\  exist.


.. index::
   pair: IntegerLinearDependence; particularSolutionOverQ

:spadfun:`particularSolutionOverQ`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  \ ``particularSolutionOverQ([v1, ..., vn], u)``\  returns \ ``[c1, ..., cn]``\  such that \ ``c1*v1 + ... + cn*vn = u``\ , "failed" if no such rational numbers \ ``ci``\ \ ``'s``\  exist.

.. _l496e74656765724c696e656172446570656e64656e6365-736f6c76654c696e6561726c794f76657251:

.. index::
   pair: IntegerLinearDependence; solveLinearlyOverQ

:spadfun:`solveLinearlyOverQ`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Vector <l566563746f72>`\  R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``solveLinearlyOverQ([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


.. index::
   pair: IntegerLinearDependence; solveLinearlyOverQ

:spadfun:`solveLinearlyOverQ`\: (\ :ref:`Vector <l566563746f72>`\  R, R) -> Record(particular: Union(\ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed), basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``solveLinearlyOverQ([v1, ..., vn], u)``\  returns solution of the system \ ``c1*v1 + ... + cn*vn = u``\  and and a basis of the associated homogeneous system \ ``c1*v1 + ... + cn*vn = 0``\ 


