.. index:: TableauxBumpers

.. _l5461626c6561757842756d70657273:

TableauxBumpers S
=================

:viewcode:`tableau.spad line 45 <tableau.spad#L45>` :editcode:`[edit on github] <tableau.spad#L45>`

* S: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


TableauBumpers implements the Schenstead-Knuth correspondence between sequences and pairs of Young tableaux. The 2 Young tableaux are represented as a single tableau with pairs as components.


.. _l5461626c6561757842756d70657273-62617431:

.. index::
   pair: TableauxBumpers; bat1

:spadfun:`bat1`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``bat1(llp)``\  unbumps a tableau \ ``llp``\ . Operation \ ``bat1``\  is the inverse of \ ``tab1``\ .

.. _l5461626c6561757842756d70657273-626174:

.. index::
   pair: TableauxBumpers; bat

:spadfun:`bat`\: \ :ref:`Tableau <l5461626c656175>`\  \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``bat(ls)``\  unbumps a tableau \ ``ls``\ 

.. _l5461626c6561757842756d70657273-62756d70726f77:

.. index::
   pair: TableauxBumpers; bumprow

:spadfun:`bumprow`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) -> Record(fs: \ :ref:`Boolean <l426f6f6c65616e>`\ , sd: \ :ref:`List <l4c697374>`\  S, td: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) 
  \ ``bumprow(cf, pr, r)``\  is an auxiliary function which bumps a row \ ``r``\  with a pair \ ``pr``\  using comparison function \ ``cf``\ , and returns a record

.. _l5461626c6561757842756d70657273-62756d7074616231:

.. index::
   pair: TableauxBumpers; bumptab1

:spadfun:`bumptab1`\: (\ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``bumptab1(pr, t)``\  bumps a tableau \ ``t``\  with a pair \ ``pr``\  using comparison function \ :spadfun:`<`\ , returning a new tableau

.. _l5461626c6561757842756d70657273-62756d70746162:

.. index::
   pair: TableauxBumpers; bumptab

:spadfun:`bumptab`\: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``bumptab(cf, pr, t)``\  bumps a tableau \ ``t``\  with a pair \ ``pr``\  using comparison function \ ``cf``\ , returning a new tableau

.. _l5461626c6561757842756d70657273-696e7665727365:

.. index::
   pair: TableauxBumpers; inverse

:spadfun:`inverse`\: \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  S 
  \ ``inverse(ls)``\  forms the inverse of a sequence \ ``ls``\ 

.. _l5461626c6561757842756d70657273-6c6578:

.. index::
   pair: TableauxBumpers; lex

:spadfun:`lex`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``lex(ls)``\  sorts a list of pairs to lexicographic order

.. _l5461626c6561757842756d70657273-6d6178726f77:

.. index::
   pair: TableauxBumpers; maxrow

:spadfun:`maxrow`\: (\ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) -> Record(f1: \ :ref:`List <l4c697374>`\  S, f2: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, f3: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, f4: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) 
  \ ``maxrow(a, b, c, d, e)``\  is an auxiliary function for \ ``mr``\ 

.. _l5461626c6561757842756d70657273-6d72:

.. index::
   pair: TableauxBumpers; mr

:spadfun:`mr`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> Record(f1: \ :ref:`List <l4c697374>`\  S, f2: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, f3: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, f4: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) 
  \ ``mr(t)``\  is an auxiliary function which finds the position of the maximum element of a tableau \ ``t``\  which is in the lowest row, producing a record of results

.. _l5461626c6561757842756d70657273-736c6578:

.. index::
   pair: TableauxBumpers; slex

:spadfun:`slex`\: \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``slex(ls)``\  sorts the argument sequence \ ``ls``\ , then zips (see map) the original argument sequence with the sorted result to a list of pairs

.. _l5461626c6561757842756d70657273-74616231:

.. index::
   pair: TableauxBumpers; tab1

:spadfun:`tab1`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``tab1(lp)``\  creates a tableau from a list of pairs \ ``lp``\ 

.. _l5461626c6561757842756d70657273-746162:

.. index::
   pair: TableauxBumpers; tab

:spadfun:`tab`\: \ :ref:`List <l4c697374>`\  S -> \ :ref:`Tableau <l5461626c656175>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``tab(ls)``\  creates a tableau from \ ``ls``\  by first creating a list of pairs using slex, then creating a tableau using \\ ``tab1``\\ .

.. _l5461626c6561757842756d70657273-756e746162:

.. index::
   pair: TableauxBumpers; untab

:spadfun:`untab`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``untab(lp, llp)``\  is an auxiliary function which unbumps a tableau \ ``llp``\ , using \ ``lp``\  to accumulate pairs


