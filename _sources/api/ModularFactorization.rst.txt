.. index:: ModularFactorization

.. _l4d6f64756c6172466163746f72697a6174696f6e:

ModularFactorization
====================

:viewcode:`ffact.spad line 624 <ffact.spad#L624>` :editcode:`[edit on github] <ffact.spad#L624>`


This package is a specialization of \ :ref:`ModularFactorizationGeneral <l4d6f64756c6172466163746f72697a6174696f6e47656e6572616c>`\  using operations from \ :ref:`ModularFactorizationTools1 <l4d6f64756c6172466163746f72697a6174696f6e546f6f6c7331>`\ .


.. _l4d6f64756c6172466163746f72697a6174696f6e-646466616374:

.. index::
   pair: ModularFactorization; ddfact

:spadfun:`ddfact`\: (\ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  Record(poly: \ :ref:`U32Vector <l553332566563746f72>`\ , degree: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , separate_factors: () -> \ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ ) 
  

.. _l4d6f64756c6172466163746f72697a6174696f6e-6972726564756369626c653f:

.. index::
   pair: ModularFactorization; irreducible?

:spadfun:`irreducible?`\: (\ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  

.. _l4d6f64756c6172466163746f72697a6174696f6e-6d666163746f72:

.. index::
   pair: ModularFactorization; mfactor

:spadfun:`mfactor`\: (\ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\  
  


