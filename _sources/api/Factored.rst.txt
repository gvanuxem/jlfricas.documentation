.. index:: Factored

.. _l466163746f726564:

Factored R
==========

:viewcode:`fr.spad line 1 <fr.spad#L1>` :editcode:`[edit on github] <fr.spad#L1>`

* R: \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 


\ :ref:`Factored <l466163746f726564>`\  creates a domain whose objects are kept in factored form as long as possible. Thus certain operations like multiplication and \ ``gcd``\  are relatively easy to do. Others, like addition require somewhat more work, and unless the argument domain provides a factor function, the result may not be completely factored. Each object consists of a unit and a list of factors, where a factor has a member of \ ``R``\  (the "base"), and exponent and a flag indicating what is known about the base. A flag may be one of "nil", "sqfr", "irred" or "prime", which respectively mean that nothing is known about the base, it is square-free, it is irreducible, or it is prime. The current restriction to integral domains allows simplification to be performed without worrying about multiplication order.


.. _l466163746f726564-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466163746f726564-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l466163746f726564-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l466163746f726564-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l466163746f726564-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466163746f726564-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466163746f726564-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l466163746f726564-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l466163746f726564-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l466163746f726564-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466163746f726564-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466163746f726564-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l466163746f726564-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: R -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R

.. _l466163746f726564-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l466163746f726564-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  if R has \ :ref:`RealConstant <l5265616c436f6e7374616e74>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`RealConstant <l5265616c436f6e7374616e74>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

.. _l466163746f726564-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % if R has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l446966666572656e7469616c457874656e73696f6e-44>`\ \: (%, R -> R) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  R


\ :ref:`D <l446966666572656e7469616c457874656e73696f6e-44>`\ \: (%, R -> R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  R


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l466163746f726564-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: % -> % if R has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l446966666572656e7469616c457874656e73696f6e-646966666572656e7469617465>`\ \: (%, R -> R) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  R


\ :ref:`differentiate <l446966666572656e7469616c457874656e73696f6e-646966666572656e7469617465>`\ \: (%, R -> R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  R


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l466163746f726564-656c74:

\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, %) -> % if R has \ :ref:`Eltable <l456c7461626c65>`\ (%, %)
  from \ :ref:`Eltable <l456c7461626c65>`\ (%, %)


\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, R) -> % if R has \ :ref:`Eltable <l456c7461626c65>`\ (R, R)
  from \ :ref:`Eltable <l456c7461626c65>`\ (R, %)

.. _l466163746f726564-6576616c:

\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, %, %) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  %
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  %) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  %
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  %
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %)


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  %) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  %
  from \ :ref:`Evalable <l4576616c61626c65>`\  %


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  %) -> % if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, R, R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , %) -> % if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , R) -> % if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R)
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R)

.. _l466163746f726564-657870616e64:

.. index::
   pair: Factored; expand

:spadfun:`expand`\: % -> R 
  \ ``expand(f)``\  multiplies the unit and factors together, yielding an "unfactored" object. Note: this is purposely not called \ :spadfun:`coerce`\  which would cause the interpreter to do this automatically.

.. _l466163746f726564-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466163746f726564-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466163746f726564-666163746f724c697374:

.. index::
   pair: Factored; factorList

:spadfun:`factorList`\: % -> \ :ref:`List <l4c697374>`\  Record(flag: Union(nil, sqfr, irred, prime), factor: R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``factorList(u)``\  returns the list of factors with flags (for use by factoring code).

.. _l466163746f726564-666163746f7273:

.. index::
   pair: Factored; factors

:spadfun:`factors`\: % -> \ :ref:`List <l4c697374>`\  Record(factor: R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``factors(u)``\  returns a list of the factors in a form suitable for iteration. That is, it returns a list where each element is a record containing a base and exponent. The original object is the product of all the factors and the unit (which can be extracted by \ ``unit(u)``\ ).

.. _l466163746f726564-666c6167466163746f72:

.. index::
   pair: Factored; flagFactor

:spadfun:`flagFactor`\: (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , Union(nil, sqfr, irred, prime)) -> % 
  \ ``flagFactor(base, exponent, flag)``\  creates a factored object with a single factor whose \ ``base``\  is asserted to be properly described by the information flag.

.. _l466163746f726564-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466163746f726564-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466163746f726564-6972726564756369626c65466163746f72:

.. index::
   pair: Factored; irreducibleFactor

:spadfun:`irreducibleFactor`\: (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``irreducibleFactor(base, exponent)``\  creates a factored object with a single factor whose \ ``base``\  is asserted to be irreducible (flag = "irred").

.. _l466163746f726564-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l466163746f726564-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l466163746f726564-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l466163746f726564-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466163746f726564-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-6d616b654652:

.. index::
   pair: Factored; makeFR

:spadfun:`makeFR`\: (R, \ :ref:`List <l4c697374>`\  Record(flag: Union(nil, sqfr, irred, prime), factor: R, exponent: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  \ ``makeFR(unit, listOfFactors)``\  creates a factored object (for use by factoring code).

.. _l466163746f726564-6d6170:

.. index::
   pair: Factored; map

:spadfun:`map`\: (R -> R, %) -> % 
  \ ``map(fn, u)``\  maps the function \userfun{\ ``fn``\ } across the factors of \spadvar{\ ``u``\ } and creates a new factored object. Note: this clears the information flags (sets them to "nil") because the effect of \userfun{\ ``fn``\ } is clearly not known in general.

.. _l466163746f726564-6d65726765466163746f7273:

.. index::
   pair: Factored; mergeFactors

:spadfun:`mergeFactors`\: (%, %) -> % 
  \ ``mergeFactors(u, v)``\  is used when the factorizations of \spadvar{\ ``u``\ } and \spadvar{\ ``v``\ } are known to be disjoint, e.g. resulting from a content/primitive part split. Essentially, it creates a new factored object by multiplying the units together and appending the lists of factors.

.. _l466163746f726564-6e696c466163746f72:

.. index::
   pair: Factored; nilFactor

:spadfun:`nilFactor`\: (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``nilFactor(base, exponent)``\  creates a factored object with a single factor with no information about the kind of \ ``base``\  (flag = "nil").

.. _l466163746f726564-6e756d6265724f66466163746f7273:

.. index::
   pair: Factored; numberOfFactors

:spadfun:`numberOfFactors`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``numberOfFactors(u)``\  returns the number of factors in \spadvar{\ ``u``\ }.

.. _l466163746f726564-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l466163746f726564-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l466163746f726564-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466163746f726564-7072696d65466163746f72:

.. index::
   pair: Factored; primeFactor

:spadfun:`primeFactor`\: (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``primeFactor(base, exponent)``\  creates a factored object with a single factor whose \ ``base``\  is asserted to be prime (flag = "prime").

.. _l466163746f726564-726174696f6e616c3f:

.. index::
   pair: Factored; rational?

:spadfun:`rational?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rational?(u)``\  tests if \spadvar{\ ``u``\ } is actually a rational number (see Fraction Integer).

.. _l466163746f726564-726174696f6e616c:

.. index::
   pair: Factored; rational

:spadfun:`rational`\: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rational(u)``\  assumes spadvar{\ ``u``\ } is actually a rational number and does the conversion to rational number (see Fraction Integer).

.. _l466163746f726564-726174696f6e616c496643616e:

.. index::
   pair: Factored; rationalIfCan

:spadfun:`rationalIfCan`\: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 
  \ ``rationalIfCan(u)``\  returns a rational number if \ ``u``\  really is one, and "failed" otherwise.

.. _l466163746f726564-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> R 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l466163746f726564-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(R, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R

.. _l466163746f726564-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l466163746f726564-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l466163746f726564-73716672466163746f72:

.. index::
   pair: Factored; sqfrFactor

:spadfun:`sqfrFactor`\: (R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``sqfrFactor(base, exponent)``\  creates a factored object with a single factor whose \ ``base``\  is asserted to be square-free (flag = "sqfr").

.. _l466163746f726564-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466163746f726564-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l466163746f726564-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l466163746f726564-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466163746f726564-756e6974:

.. index::
   pair: Factored; unit

:spadfun:`unit`\: % -> R 
  \ ``unit(u)``\  extracts the unit part of the factorization.

.. _l466163746f726564-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466163746f726564-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l466163746f726564-756e69744e6f726d616c697a65:

.. index::
   pair: Factored; unitNormalize

:spadfun:`unitNormalize`\: % -> % 
  \ ``unitNormalize(u)``\  normalizes the unit part of the factorization. For example, when working with factored integers, this operation will ensure that the bases are all positive integers.

.. _l466163746f726564-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`Algebra <l416c6765627261>`\  R 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  R 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  if R has \ :ref:`RealConstant <l5265616c436f6e7374616e74>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`Float <l466c6f6174>`\  if R has \ :ref:`RealConstant <l5265616c436f6e7374616e74>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if R has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`DifferentialExtension <l446966666572656e7469616c457874656e73696f6e>`\  R 

\ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\  if R has \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 

\ :ref:`Eltable <l456c7461626c65>`\ (%, %) if R has \ :ref:`Eltable <l456c7461626c65>`\ (%, %)

\ :ref:`Eltable <l456c7461626c65>`\ (R, %) if R has \ :ref:`Eltable <l456c7461626c65>`\ (R, R)

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`Evalable <l4576616c61626c65>`\  % if R has \ :ref:`Evalable <l4576616c61626c65>`\  %

\ :ref:`Evalable <l4576616c61626c65>`\  R if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`FullyEvalableOver <l46756c6c794576616c61626c654f766572>`\  R 

\ :ref:`FullyRetractableTo <l46756c6c795265747261637461626c65546f>`\  R 

\ :ref:`GcdDomain <l476364446f6d61696e>`\  if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (%, %) if R has \ :ref:`Evalable <l4576616c61626c65>`\  %

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R) if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %) if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , %)

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R) if R has \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (\ :ref:`Symbol <l53796d626f6c>`\ , R)

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  if R has \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  R 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  if R has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

\ :ref:`RealConstant <l5265616c436f6e7374616e74>`\  if R has \ :ref:`RealConstant <l5265616c436f6e7374616e74>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  if R has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  R 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  if R has \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

