.. index:: Reference

.. _l5265666572656e6365:

Reference S
===========

:viewcode:`boolean.spad line 1 <boolean.spad#L1>` :editcode:`[edit on github] <boolean.spad#L1>`

* S: \ :ref:`Type <l54797065>`\ 


\ :ref:`Reference <l5265666572656e6365>`\  is for making a changeable instance of something.


.. _l5265666572656e6365-3d:

.. index::
   pair: Reference; =

:spadfun:`=`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``a=b``\  tests if \ ``a``\  and \ ``b``\  are the same pointer/reference.

.. _l5265666572656e6365-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5265666572656e6365-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5265666572656e6365-6465726566:

.. index::
   pair: Reference; deref

:spadfun:`deref`\: % -> S 
  \ ``deref(n)``\  is equivalent to \ ``elt(n)``\ .

.. _l5265666572656e6365-656c74:

.. index::
   pair: Reference; elt

:spadfun:`elt`\: % -> S 
  \ ``elt(n)``\  returns the object \ ``n``\ .

.. _l5265666572656e6365-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5265666572656e6365-726566:

.. index::
   pair: Reference; ref

:spadfun:`ref`\: S -> % 
  \ ``ref(n)``\  creates a pointer (reference) to the object \ ``n``\ .

.. _l5265666572656e6365-736574656c7421:

.. index::
   pair: Reference; setelt!

:spadfun:`setelt!`\: (%, S) -> S 
  \ ``setelt!(n, m)``\  changes the value of the object \ ``n``\  to \ ``m``\ .

.. _l5265666572656e6365-736574726566:

.. index::
   pair: Reference; setref

:spadfun:`setref`\: (%, S) -> S 
  \ ``setref(n, m)``\  same as \ ``setelt!(n, m)``\ .


\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

