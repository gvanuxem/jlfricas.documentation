.. index:: NormalizationPackage

.. _l4e6f726d616c697a6174696f6e5061636b616765:

NormalizationPackage(R, E, V, P, TS)
====================================

:viewcode:`nregset.spad line 35 <nregset.spad#L35>` :editcode:`[edit on github] <nregset.spad#L35>`

* R: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* E: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* V: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* P: \ :ref:`RecursivePolynomialCategory <l526563757273697665506f6c796e6f6d69616c43617465676f7279>`\ (R, E, V)

* TS: \ :ref:`RegularTriangularSetCategory <l526567756c6172547269616e67756c617253657443617465676f7279>`\ (R, E, V, P)


A package for computing normalized associates of univariate polynomials with coefficients in a tower of simple extensions of a field.


.. _l4e6f726d616c697a6174696f6e5061636b616765-6e6f726d616c697a65:

.. index::
   pair: NormalizationPackage; normalize

:spadfun:`normalize`\: (P, TS) -> \ :ref:`List <l4c697374>`\  Record(val: P, tower: TS) 
  \ ``normalize(p, ts)``\  normalizes \ ``p``\  \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``ts``\ .

.. _l4e6f726d616c697a6174696f6e5061636b616765-6e6f726d616c697a65644173736f6369617465:

.. index::
   pair: NormalizationPackage; normalizedAssociate

:spadfun:`normalizedAssociate`\: (P, TS) -> P 
  \ ``normalizedAssociate(p, ts)``\  returns a normalized polynomial \ ``n``\  \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``ts``\  such that \ ``n``\  and \ ``p``\  are associates \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``ts``\  and assuming that \ ``p``\  is invertible \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``ts``\ .

.. _l4e6f726d616c697a6174696f6e5061636b616765-6e6f726d496e7665727469626c653f:

.. index::
   pair: NormalizationPackage; normInvertible?

:spadfun:`normInvertible?`\: (P, TS) -> \ :ref:`List <l4c697374>`\  Record(val: \ :ref:`Boolean <l426f6f6c65616e>`\ , tower: TS) 
  \ ``normInvertible?(p, ts)``\  is an internal subroutine, exported only for development.

.. _l4e6f726d616c697a6174696f6e5061636b616765-6f757470757441726773:

.. index::
   pair: NormalizationPackage; outputArgs

:spadfun:`outputArgs`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , P, TS) -> \ :ref:`Void <l566f6964>`\  
  \ ``outputArgs(s1, s2, p, ts)``\  is an internal subroutine, exported only for development.

.. _l4e6f726d616c697a6174696f6e5061636b616765-7265636970:

.. index::
   pair: NormalizationPackage; recip

:spadfun:`recip`\: (P, TS) -> Record(num: P, den: P) 
  \ ``recip(p, ts)``\  returns the inverse of \ ``p``\  \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``ts``\  assuming that \ ``p``\  is invertible \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``ts``\ .


