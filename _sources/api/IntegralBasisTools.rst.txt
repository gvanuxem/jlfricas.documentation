.. index:: IntegralBasisTools

.. _l496e74656772616c4261736973546f6f6c73:

IntegralBasisTools(R, UP, F)
============================

:viewcode:`intclos.spad line 62 <intclos.spad#L62>` :editcode:`[edit on github] <intclos.spad#L62>`

* R: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  with

    squareFree\: % -> \ :ref:`Factored <l466163746f726564>`\  %

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  R

* F: \ :ref:`FramedAlgebra <l4672616d6564416c6765627261>`\ (R, UP)


This package contains functions used in the packages FunctionFieldIntegralBasis and NumberFieldIntegralBasis.


.. _l496e74656772616c4261736973546f6f6c73-646961676f6e616c50726f64756374:

.. index::
   pair: IntegralBasisTools; diagonalProduct

:spadfun:`diagonalProduct`\: \ :ref:`Matrix <l4d6174726978>`\  R -> R 
  \ ``diagonalProduct(m)``\  returns the product of the elements on the diagonal of the matrix \ ``m``\ 

.. _l496e74656772616c4261736973546f6f6c73-646976696465496643616e21:

.. index::
   pair: IntegralBasisTools; divideIfCan!

:spadfun:`divideIfCan!`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Matrix <l4d6174726978>`\  R, R, \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``divideIfCan!(matrix, matrixOut, prime, n)``\  attempts to divide the entries of \ ``matrix``\  by \ ``prime``\  and store the result in \ ``matrixOut``\ . If it is successful, 1 is returned and if not, \ ``prime``\  is returned. Here both \ ``matrix``\  and \ ``matrixOut``\  are \ ``n``\ -by-\ ``n``\  upper triangular matrices.

.. _l496e74656772616c4261736973546f6f6c73-696465616c69736572:

.. index::
   pair: IntegralBasisTools; idealiser

:spadfun:`idealiser`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Matrix <l4d6174726978>`\  R) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``idealiser(m1, m2)``\  computes the order of an ideal defined by \ ``m1``\  and \ ``m2``\ 


.. index::
   pair: IntegralBasisTools; idealiser

:spadfun:`idealiser`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Matrix <l4d6174726978>`\  R, R) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``idealiser(m1, m2, d)``\  computes the order of an ideal defined by \ ``m1``\  and \ ``m2``\  where \ ``d``\  is the known part of the denominator

.. _l496e74656772616c4261736973546f6f6c73-696465616c697365724d6174726978:

.. index::
   pair: IntegralBasisTools; idealiserMatrix

:spadfun:`idealiserMatrix`\: (\ :ref:`Matrix <l4d6174726978>`\  R, \ :ref:`Matrix <l4d6174726978>`\  R) -> \ :ref:`Matrix <l4d6174726978>`\  R 
  \ ``idealiserMatrix(m1, m2)``\  returns the matrix representing the linear conditions on the Ring associated with an ideal defined by \ ``m1``\  and \ ``m2``\ .

.. _l496e74656772616c4261736973546f6f6c73-6c65617374506f776572:

.. index::
   pair: IntegralBasisTools; leastPower

:spadfun:`leastPower`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``leastPower(p, n)``\  returns \ ``e``\ , where \ ``e``\  is the smallest integer such that \ ``p ^e >= n``\ 

.. _l496e74656772616c4261736973546f6f6c73-6d6174726978476364:

.. index::
   pair: IntegralBasisTools; matrixGcd

:spadfun:`matrixGcd`\: (\ :ref:`Matrix <l4d6174726978>`\  R, R, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> R 
  \ ``matrixGcd(mat, sing, n)``\  is \ ``gcd(sing, g)``\  where \ ``g``\  is the \ ``gcd``\  of the entries of the \ ``n``\ -by-\ ``n``\  upper-triangular matrix \ ``mat``\ .

.. _l496e74656772616c4261736973546f6f6c73-6d6f64756c6553756d:

.. index::
   pair: IntegralBasisTools; moduleSum

:spadfun:`moduleSum`\: (Record(basis: \ :ref:`Matrix <l4d6174726978>`\  R, basisDen: R, basisInv: \ :ref:`Matrix <l4d6174726978>`\  R), Record(basis: \ :ref:`Matrix <l4d6174726978>`\  R, basisDen: R, basisInv: \ :ref:`Matrix <l4d6174726978>`\  R)) -> Record(basis: \ :ref:`Matrix <l4d6174726978>`\  R, basisDen: R, basisInv: \ :ref:`Matrix <l4d6174726978>`\  R) 
  \ ``moduleSum(m1, m2)``\  returns the sum of two modules in the framed algebra \ ``F``\ . Each module \ ``mi``\  is represented as follows: \ ``F``\  is a framed algebra with \ ``R``\ -module basis \ ``w1, w2, ..., wn``\  and \ ``mi``\  is a record \ ``[basis, basisDen, basisInv]``\ . If \ ``basis``\  is the matrix \ ``(aij, i = 1..n, j = 1..n)``\ , then a basis \ ``v1, ..., vn``\  for \ ``mi``\  is given by \ ``vi = (1/basisDen) * sum(aij * wj, j = 1..n)``\ , i.e. the \ ``i``\ th row of 'basis' contains the coordinates of the \ ``i``\ th basis vector. Similarly, the \ ``i``\ th row of the matrix \ ``basisInv``\  contains the coordinates of \ ``wi``\  with respect to the basis \ ``v1, ..., vn``\ : if \ ``basisInv``\  is the matrix \ ``(bij, i = 1..n, j = 1..n)``\ , then \ ``wi = sum(bij * vj, j = 1..n)``\ .


