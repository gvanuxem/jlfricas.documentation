.. index:: IntegrationResult

.. _l496e746567726174696f6e526573756c74:

IntegrationResult F
===================

:viewcode:`intaux.spad line 1 <intaux.spad#L1>` :editcode:`[edit on github] <intaux.spad#L1>`

* F: \ :ref:`Field <l4669656c64>`\ 


If a function \ ``f``\  has an elementary integral \ ``g``\ , then \ ``g``\  can be written in the form \ ``g = h + c1 log(u1) + c2 log(u2) + ... + cn log(un)``\  where \ ``h``\ , which is in the same field as \ ``f``\ , is called the rational part of the integral, and \ ``c1 log(u1) + ... cn log(un)``\  is called the logarithmic part of the integral. This domain manipulates integrals represented in that form, by keeping both parts separately. The logs are not explicitly computed.


.. _l496e746567726174696f6e526573756c74-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l496e746567726174696f6e526573756c74-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l496e746567726174696f6e526573756c74-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l496e746567726174696f6e526573756c74-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l496e746567726174696f6e526573756c74-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l496e746567726174696f6e526573756c74-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l496e746567726174696f6e526573756c74-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: F -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  F

.. _l496e746567726174696f6e526573756c74-646966666572656e7469617465:

.. index::
   pair: IntegrationResult; differentiate

:spadfun:`differentiate`\: (%, F -> F) -> F 
  \ ``differentiate(ir, D)``\  differentiates \ ``ir``\  with respect to the derivation \ ``D``\ .


.. index::
   pair: IntegrationResult; differentiate

:spadfun:`differentiate`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> F if F has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``differentiate(ir, x)``\  differentiates \ ``ir``\  with respect to \ ``x``\ 

.. _l496e746567726174696f6e526573756c74-656c656d3f:

.. index::
   pair: IntegrationResult; elem?

:spadfun:`elem?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``elem?(ir)``\  tests if an integration result is elementary over \ ``F?``\ 

.. _l496e746567726174696f6e526573756c74-696e74656772616c:

.. index::
   pair: IntegrationResult; integral

:spadfun:`integral`\: (F, F) -> % 
  \ ``integral(f, x)``\  returns the formal integral of \ ``f``\  with respect to \ ``x``\ 


.. index::
   pair: IntegrationResult; integral

:spadfun:`integral`\: (F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``integral(f, x)``\  returns the formal integral of \ ``f``\  with respect to \ ``x``\ 

.. _l496e746567726174696f6e526573756c74-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l496e746567726174696f6e526573756c74-6c6f6770617274:

.. index::
   pair: IntegrationResult; logpart

:spadfun:`logpart`\: % -> \ :ref:`List <l4c697374>`\  Record(scalar: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , coeff: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F, logand: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F) 
  \ ``logpart(ir)``\  returns the logarithmic part of an integration result

.. _l496e746567726174696f6e526573756c74-6d6b416e73776572:

.. index::
   pair: IntegrationResult; mkAnswer

:spadfun:`mkAnswer`\: (F, \ :ref:`List <l4c697374>`\  Record(scalar: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , coeff: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F, logand: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  F), \ :ref:`List <l4c697374>`\  Record(integrand: F, intvar: F)) -> % 
  \ ``mkAnswer(r, l, ne)``\  creates an integration result from a rational part \ ``r``\ , a logarithmic part \ ``l``\ , and a non-elementary part ne.

.. _l496e746567726174696f6e526573756c74-6e6f74656c656d:

.. index::
   pair: IntegrationResult; notelem

:spadfun:`notelem`\: % -> \ :ref:`List <l4c697374>`\  Record(integrand: F, intvar: F) 
  \ ``notelem(ir)``\  returns the non-elementary part of an integration result

.. _l496e746567726174696f6e526573756c74-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l496e746567726174696f6e526573756c74-72617470617274:

.. index::
   pair: IntegrationResult; ratpart

:spadfun:`ratpart`\: % -> F 
  \ ``ratpart(ir)``\  returns the rational part of an integration result

.. _l496e746567726174696f6e526573756c74-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> F 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  F

.. _l496e746567726174696f6e526573756c74-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(F, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  F

.. _l496e746567726174696f6e526573756c74-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l496e746567726174696f6e526573756c74-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l496e746567726174696f6e526573756c74-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  F 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  F 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

