.. index:: PermutationGroup

.. _l5065726d75746174696f6e47726f7570:

PermutationGroup S
==================

:viewcode:`permgrps.spad line 1 <permgrps.spad#L1>` :editcode:`[edit on github] <permgrps.spad#L1>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


PermutationGroup implements permutation groups acting on a set \ ``S``\ , i.e. all subgroups of the symmetric group of \ ``S``\ , represented as a list of permutations (generators). Note that therefore the objects are not members of the \Language category \ :ref:`Group <l47726f7570>`\ . Using the idea of base and strong generators by Sims, basic routines and algorithms are implemented so that the word problem for permutation groups can be solved.


.. _l5065726d75746174696f6e47726f7570-3c3d:

.. index::
   pair: PermutationGroup; <=

:spadfun:`<=`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``gp1 <= gp2``\  returns \ ``true``\  if and only if \ *gp1*\  is a subgroup of \ *gp2*\ . Note: because of a bug in the parser you have to call this function explicitly by \ *gp1 <=\$(PERMGRP S) gp2*\ .

.. _l5065726d75746174696f6e47726f7570-3c:

.. index::
   pair: PermutationGroup; <

:spadfun:`<`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``gp1 < gp2``\  returns \ ``true``\  if and only if \ *gp1*\  is a proper subgroup of \ *gp2*\ .

.. _l5065726d75746174696f6e47726f7570-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e47726f7570-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5065726d75746174696f6e47726f7570-62617365:

.. index::
   pair: PermutationGroup; base

:spadfun:`base`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``base(gp)``\  returns a base for the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-636f65726365:

.. index::
   pair: PermutationGroup; coerce

:spadfun:`coerce`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``coerce(gp)``\  returns the generators of the group \ *gp*\ .


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: PermutationGroup; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S -> % 
  \ ``coerce(ls)``\  coerces a list of permutations \ *ls*\  to the group generated by this list.

.. _l5065726d75746174696f6e47726f7570-646567726565:

.. index::
   pair: PermutationGroup; degree

:spadfun:`degree`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``degree(gp)``\  returns the number of points moved by all permutations of the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-656c74:

.. index::
   pair: PermutationGroup; elt

:spadfun:`elt`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``elt(gp, i)``\  returns the \ ``i``\ -th generator of the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-67656e657261746f7273:

.. index::
   pair: PermutationGroup; generators

:spadfun:`generators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``generators(gp)``\  returns the generators of the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-696e697469616c697a6547726f7570466f72576f726450726f626c656d:

.. index::
   pair: PermutationGroup; initializeGroupForWordProblem

:spadfun:`initializeGroupForWordProblem`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``initializeGroupForWordProblem(gp)``\  initializes the group \ *gp*\  for the word problem. Notes: it calls the other function of this name with parameters 0 and 1: \ *initializeGroupForWordProblem(gp, 0, 1)*\ . Notes: (1) be careful: invoking this routine will destroy the possibly information about your group (but will recompute it again) (2) users need not call this function normally for the solution of the word problem.


.. index::
   pair: PermutationGroup; initializeGroupForWordProblem

:spadfun:`initializeGroupForWordProblem`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``initializeGroupForWordProblem(gp, m, n)``\  initializes the group \ *gp*\  for the word problem. Notes: (1) with a small integer you get shorter words, but the routine takes longer than the standard routine for longer words. (2) be careful: invoking this routine will destroy the possibly stored information about your group (but will recompute it again). (3) users need not call this function normally for the solution of the word problem.

.. _l5065726d75746174696f6e47726f7570-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5065726d75746174696f6e47726f7570-6d656d6265723f:

.. index::
   pair: PermutationGroup; member?

:spadfun:`member?`\: (\ :ref:`Permutation <l5065726d75746174696f6e>`\  S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``member?(pp, gp)``\  answers the question, whether the permutation \ *pp*\  is in the group \ *gp*\  or not.

.. _l5065726d75746174696f6e47726f7570-6d6f766564506f696e7473:

.. index::
   pair: PermutationGroup; movedPoints

:spadfun:`movedPoints`\: % -> \ :ref:`Set <l536574>`\  S 
  \ ``movedPoints(gp)``\  returns the points moved by the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-6f72626974:

.. index::
   pair: PermutationGroup; orbit

:spadfun:`orbit`\: (%, \ :ref:`List <l4c697374>`\  S) -> \ :ref:`Set <l536574>`\  \ :ref:`List <l4c697374>`\  S 
  \ ``orbit(gp, ls)``\  returns the orbit of the ordered list \ *ls*\  under the group \ *gp*\ . Note: return type is \ ``L``\  \ ``L``\  \ ``S``\  temporarily because FSET \ ``L``\  \ ``S``\  has an error.


.. index::
   pair: PermutationGroup; orbit

:spadfun:`orbit`\: (%, S) -> \ :ref:`Set <l536574>`\  S 
  \ ``orbit(gp, el)``\  returns the orbit of the element \ *el*\  under the group \ *gp*\ , i.e. the set of all points gained by applying each group element to \ *el*\ .


.. index::
   pair: PermutationGroup; orbit

:spadfun:`orbit`\: (%, \ :ref:`Set <l536574>`\  S) -> \ :ref:`Set <l536574>`\  \ :ref:`Set <l536574>`\  S 
  \ ``orbit(gp, els)``\  returns the orbit of the unordered set \ *els*\  under the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-6f7262697473:

.. index::
   pair: PermutationGroup; orbits

:spadfun:`orbits`\: % -> \ :ref:`Set <l536574>`\  \ :ref:`Set <l536574>`\  S 
  \ ``orbits(gp)``\  returns the orbits of the group \ *gp*\ , i.e. it partitions the (finite) of all moved points.

.. _l5065726d75746174696f6e47726f7570-6f72646572:

.. index::
   pair: PermutationGroup; order

:spadfun:`order`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``order(gp)``\  returns the order of the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-7065726d5f746f5f766563:

.. index::
   pair: PermutationGroup; perm_to_vec

:spadfun:`perm_to_vec`\: (\ :ref:`List <l4c697374>`\  S, \ :ref:`Permutation <l5065726d75746174696f6e>`\  S, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``perm_to_vec(supp, p, degree)``\  should be local but conditional

.. _l5065726d75746174696f6e47726f7570-7065726d75746174696f6e47726f7570:

.. index::
   pair: PermutationGroup; permutationGroup

:spadfun:`permutationGroup`\: \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S -> % 
  \ ``permutationGroup(ls)``\  coerces a list of permutations \ *ls*\  to the group generated by this list.

.. _l5065726d75746174696f6e47726f7570-706f696e744c697374:

.. index::
   pair: PermutationGroup; pointList

:spadfun:`pointList`\: % -> \ :ref:`List <l4c697374>`\  S 
  \ ``pointList(gp)``\  should be local but conditional

.. _l5065726d75746174696f6e47726f7570-72616e646f6d:

.. index::
   pair: PermutationGroup; random

:spadfun:`random`\: % -> \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``random(gp)``\  returns a random product of maximal 20 generators of the group \ *gp*\ . Note: \ *random(gp)=random(gp, 20)*\ .


.. index::
   pair: PermutationGroup; random

:spadfun:`random`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``random(gp, i)``\  returns a random product of maximal \ ``i``\  generators of the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-72656c6174696f6e73496e47656e657261746f7273:

.. index::
   pair: PermutationGroup; relationsInGenerators

:spadfun:`relationsInGenerators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``relationsInGenerators(gp)``\  computes relations between generators.

.. _l5065726d75746174696f6e47726f7570-72656c6174696f6e73496e5374726f6e6747656e657261746f7273:

.. index::
   pair: PermutationGroup; relationsInStrongGenerators

:spadfun:`relationsInStrongGenerators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``relationsInStrongGenerators(gp)``\  computes relations between strong generators.

.. _l5065726d75746174696f6e47726f7570-7374726f6e6747656e657261746f7273:

.. index::
   pair: PermutationGroup; strongGenerators

:spadfun:`strongGenerators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S 
  \ ``strongGenerators(gp)``\  returns strong generators for the group \ *gp*\ .

.. _l5065726d75746174696f6e47726f7570-776f7264496e47656e657261746f7273:

.. index::
   pair: PermutationGroup; wordInGenerators

:spadfun:`wordInGenerators`\: (\ :ref:`Permutation <l5065726d75746174696f6e>`\  S, %) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``wordInGenerators(p, gp)``\  returns the word for the permutation \ ``p``\  in the original generators of the group \ *gp*\ , represented by the indices of the list, given by \ *generators*\ .

.. _l5065726d75746174696f6e47726f7570-776f7264496e5374726f6e6747656e657261746f7273:

.. index::
   pair: PermutationGroup; wordInStrongGenerators

:spadfun:`wordInStrongGenerators`\: (\ :ref:`Permutation <l5065726d75746174696f6e>`\  S, %) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``wordInStrongGenerators(p, gp)``\  returns the word for the permutation \ ``p``\  in the strong generators of the group \ *gp*\ , represented by the indices of the list, given by \ *strongGenerators*\ .

.. _l5065726d75746174696f6e47726f7570-776f726473466f725374726f6e6747656e657261746f7273:

.. index::
   pair: PermutationGroup; wordsForStrongGenerators

:spadfun:`wordsForStrongGenerators`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``wordsForStrongGenerators(gp)``\  returns the words for the strong generators of the group \ *gp*\  in the original generators of \ *gp*\ , represented by their indices in the list, given by \ *generators*\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

