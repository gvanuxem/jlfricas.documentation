.. index:: InnerSparseUnivariatePowerSeries

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573:

InnerSparseUnivariatePowerSeries Coef
=====================================

:viewcode:`sups.spad line 1 <sups.spad#L1>` :editcode:`[edit on github] <sups.spad#L1>`

* Coef: \ :ref:`Ring <l52696e67>`\ 


InnerSparseUnivariatePowerSeries is an internal domain used for creating sparse Taylor and Laurent series.


.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, Coef) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  Coef


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (Coef, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  Coef


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-2f:

\ :ref:`/ <l4162656c69616e4d6f6e6f696452696e67-2f>`\ \: (%, Coef) -> % if Coef has \ :ref:`Field <l4669656c64>`\ 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-5e:

\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-617070726f78696d617465:

\ :ref:`approximate <l556e6976617269617465506f77657253657269657343617465676f7279-617070726f78696d617465>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Coef if Coef has ^\: (Coef, \ :ref:`Integer <l496e7465676572>`\ ) -> Coef and Coef has coerce\: \ :ref:`Symbol <l53796d626f6c>`\  -> Coef
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341636f73:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcos

:spadfun:`cAcos`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcos(f)``\  computes the arccosine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341636f7368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcosh

:spadfun:`cAcosh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcosh(f)``\  computes the inverse hyperbolic cosine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341636f74:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcot

:spadfun:`cAcot`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcot(f)``\  computes the arccotangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341636f7468:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcoth

:spadfun:`cAcoth`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcoth(f)``\  computes the inverse hyperbolic cotangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341637363:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcsc

:spadfun:`cAcsc`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcsc(f)``\  computes the arccosecant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634163736368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAcsch

:spadfun:`cAcsch`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAcsch(f)``\  computes the inverse hyperbolic cosecant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6341736563:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAsec

:spadfun:`cAsec`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAsec(f)``\  computes the arcsecant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634173656368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAsech

:spadfun:`cAsech`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAsech(f)``\  computes the inverse hyperbolic secant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634173696e:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAsin

:spadfun:`cAsin`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAsin(f)``\  computes the arcsine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634173696e68:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAsinh

:spadfun:`cAsinh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAsinh(f)``\  computes the inverse hyperbolic sine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634174616e:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAtan

:spadfun:`cAtan`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAtan(f)``\  computes the arctangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634174616e68:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cAtanh

:spadfun:`cAtanh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cAtanh(f)``\  computes the inverse hyperbolic tangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63436f73:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCos

:spadfun:`cCos`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCos(f)``\  computes the cosine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63436f7368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCosh

:spadfun:`cCosh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCosh(f)``\  computes the hyperbolic cosine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63436f74:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCot

:spadfun:`cCot`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCot(f)``\  computes the cotangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63436f7468:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCoth

:spadfun:`cCoth`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCoth(f)``\  computes the hyperbolic cotangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63437363:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCsc

:spadfun:`cCsc`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCsc(f)``\  computes the cosecant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6343736368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cCsch

:spadfun:`cCsch`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cCsch(f)``\  computes the hyperbolic cosecant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63656e746572:

\ :ref:`center <l556e6976617269617465506f77657253657269657343617465676f7279-63656e746572>`\ \: % -> Coef 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63457870:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cExp

:spadfun:`cExp`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cExp(f)``\  computes the exponential of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636861727468526f6f74:

\ :ref:`charthRoot <l43686172616374657269737469634e6f6e5a65726f-636861727468526f6f74>`\ \: % -> Union(%, failed) if Coef has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 
  from \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-634c6f67:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cLog

:spadfun:`cLog`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cLog(f)``\  computes the logarithm of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f656666696369656e74:

\ :ref:`coefficient <l4162656c69616e4d6f6e6f696452696e67-636f656666696369656e74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Coef 
  from \ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  %


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: Coef -> % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  Coef


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f6d706c657465:

\ :ref:`complete <l506f77657253657269657343617465676f7279-636f6d706c657465>`\ \: % -> % 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f6e737472756374:

\ :ref:`construct <l496e646578656450726f6475637443617465676f7279-636f6e737472756374>`\ \: \ :ref:`List <l4c697374>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-636f6e7374727563744f726465726564:

\ :ref:`constructOrdered <l496e646578656450726f6475637443617465676f7279-636f6e7374727563744f726465726564>`\ \: \ :ref:`List <l4c697374>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63506f776572:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cPower

:spadfun:`cPower`\: (%, Coef) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cPower(f, r)``\  computes \ ``f^r``\ , where \ ``f``\  has constant coefficient 1. For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63526174696f6e616c506f776572:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cRationalPower

:spadfun:`cRationalPower`\: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cRationalPower(f, r)``\  computes \ ``f^r``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-63536563:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cSec

:spadfun:`cSec`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cSec(f)``\  computes the secant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6353656368:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cSech

:spadfun:`cSech`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cSech(f)``\  computes the hyperbolic secant of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6353696e:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cSin

:spadfun:`cSin`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cSin(f)``\  computes the sine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6353696e68:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cSinh

:spadfun:`cSinh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cSinh(f)``\  computes the hyperbolic sine of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6354616e:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cTan

:spadfun:`cTan`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cTan(f)``\  computes the tangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6354616e68:

.. index::
   pair: InnerSparseUnivariatePowerSeries; cTanh

:spadfun:`cTanh`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``cTanh(f)``\  computes the hyperbolic tangent of the power series \ ``f``\ . For use when the coefficient ring is commutative.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`D <l5061727469616c446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-646567726565:

\ :ref:`degree <l506f77657253657269657343617465676f7279-646567726565>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: % -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 


\ :ref:`differentiate <l5061727469616c446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  from \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-656c74:

\ :ref:`elt <l456c7461626c65-656c74>`\ \: (%, %) -> % 
  from \ :ref:`Eltable <l456c7461626c65>`\ (%, %)


\ :ref:`elt <l556e6976617269617465506f77657253657269657343617465676f7279-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Coef 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6576616c:

\ :ref:`eval <l556e6976617269617465506f77657253657269657343617465676f7279-6576616c>`\ \: (%, Coef) -> \ :ref:`Stream <l53747265616d>`\  Coef if Coef has ^\: (Coef, \ :ref:`Integer <l496e7465676572>`\ ) -> Coef
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-657874656e64:

\ :ref:`extend <l556e6976617269617465506f77657253657269657343617465676f7279-657874656e64>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-676574526566:

.. index::
   pair: InnerSparseUnivariatePowerSeries; getRef

:spadfun:`getRef`\: % -> \ :ref:`Reference <l5265666572656e6365>`\  \ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``getRef(f)``\  returns a reference containing the order to which the terms of \ ``f``\  have been computed.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-67657453747265616d:

.. index::
   pair: InnerSparseUnivariatePowerSeries; getStream

:spadfun:`getStream`\: % -> \ :ref:`Stream <l53747265616d>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) 
  \ ``getStream(f)``\  returns the stream of terms representing the series \ ``f``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-69436f6d706f7365:

.. index::
   pair: InnerSparseUnivariatePowerSeries; iCompose

:spadfun:`iCompose`\: (%, %) -> % 
  \ ``iCompose(f, g)``\  returns \ ``f(g(x))``\ . This is an internal function which should only be called for Taylor series \ ``f(x)``\  and \ ``g(x)``\  such that the constant coefficient of \ ``g(x)``\  is zero.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-69457871756f:

.. index::
   pair: InnerSparseUnivariatePowerSeries; iExquo

:spadfun:`iExquo`\: (%, %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> Union(%, failed) 
  \ ``iExquo(f, g, taylor?)``\  is the quotient of the power series \ ``f``\  and \ ``g``\ . If \ ``taylor?``\  is \ ``true``\ , then we must have \ ``order(f) >= order(g)``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-696e74656772617465:

.. index::
   pair: InnerSparseUnivariatePowerSeries; integrate

:spadfun:`integrate`\: % -> % if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``integrate(f(x))``\  returns an anti-derivative of the power series \ ``f(x)``\  with constant coefficient 0. Warning: function does not check for a term of degree \ ``-1``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c656164696e67436f656666696369656e74:

\ :ref:`leadingCoefficient <l506f77657253657269657343617465676f7279-6c656164696e67436f656666696369656e74>`\ \: % -> Coef 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c656164696e674d6f6e6f6d69616c:

\ :ref:`leadingMonomial <l506f77657253657269657343617465676f7279-6c656164696e674d6f6e6f6d69616c>`\ \: % -> % 
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c656164696e67537570706f7274:

\ :ref:`leadingSupport <l496e646578656450726f6475637443617465676f7279-6c656164696e67537570706f7274>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c656164696e675465726d:

\ :ref:`leadingTerm <l496e646578656450726f6475637443617465676f7279-6c656164696e675465726d>`\ \: % -> Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d616b65536572696573:

.. index::
   pair: InnerSparseUnivariatePowerSeries; makeSeries

:spadfun:`makeSeries`\: (\ :ref:`Reference <l5265666572656e6365>`\  \ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Stream <l53747265616d>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef)) -> % 
  \ ``makeSeries(refer, str)``\  creates a power series from the reference \ ``refer``\  and the stream \ ``str``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d6170:

\ :ref:`map <l496e646578656450726f6475637443617465676f7279-6d6170>`\ \: (Coef -> Coef, %) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d6f6e6f6d69616c3f:

.. index::
   pair: InnerSparseUnivariatePowerSeries; monomial?

:spadfun:`monomial?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``monomial?(f)``\  tests if \ ``f``\  is a single monomial.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d6f6e6f6d69616c:

\ :ref:`monomial <l496e646578656450726f6475637443617465676f7279-6d6f6e6f6d69616c>`\ \: (Coef, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d756c7469706c79436f656666696369656e7473:

.. index::
   pair: InnerSparseUnivariatePowerSeries; multiplyCoefficients

:spadfun:`multiplyCoefficients`\: (\ :ref:`Integer <l496e7465676572>`\  -> Coef, %) -> % 
  \ ``multiplyCoefficients(fn, f)``\  returns the series \ ``sum(fn(n) * an * x^n, n = n0..)``\ , where \ ``f``\  is the series \ ``sum(an * x^n, n = n0..)``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6d756c7469706c794578706f6e656e7473:

\ :ref:`multiplyExponents <l556e6976617269617465506f77657253657269657343617465676f7279-6d756c7469706c794578706f6e656e7473>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-6f72646572:

\ :ref:`order <l556e6976617269617465506f77657253657269657343617465676f7279-6f72646572>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )


\ :ref:`order <l556e6976617269617465506f77657253657269657343617465676f7279-6f72646572>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  or Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-706f6c653f:

\ :ref:`pole? <l506f77657253657269657343617465676f7279-706f6c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-726564756374756d:

\ :ref:`reductum <l496e646578656450726f6475637443617465676f7279-726564756374756d>`\ \: % -> % 
  from \ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-73616d706c65:

\ :ref:`sample <l4d61676d6157697468556e6974-73616d706c65>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-736572696573:

.. index::
   pair: InnerSparseUnivariatePowerSeries; series

:spadfun:`series`\: \ :ref:`Stream <l53747265616d>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) -> % 
  \ ``series(st)``\  creates a series from a stream of non-zero terms, where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents.

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-736572696573546f4f7574707574466f726d:

.. index::
   pair: InnerSparseUnivariatePowerSeries; seriesToOutputForm

:spadfun:`seriesToOutputForm`\: (\ :ref:`Stream <l53747265616d>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef), \ :ref:`Reference <l5265666572656e6365>`\  \ :ref:`OrderedCompletion <l4f726465726564436f6d706c6574696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , Coef, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``seriesToOutputForm(st, refer, var, cen, r)``\  prints the series \ ``f((var - cen)^r)``\ .

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7461796c6f7251756f4279566172:

.. index::
   pair: InnerSparseUnivariatePowerSeries; taylorQuoByVar

:spadfun:`taylorQuoByVar`\: % -> % 
  \ ``taylorQuoByVar(a0 + a1 x + a2 x^2 + ...)``\  returns \ ``a1 + a2 x + a3 x^2 + ...``\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7465726d73:

\ :ref:`terms <l556e6976617269617465506f77657253657269657343617465676f7279-7465726d73>`\ \: % -> \ :ref:`Stream <l53747265616d>`\  Record(k: \ :ref:`Integer <l496e7465676572>`\ , c: Coef) 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7472756e63617465:

\ :ref:`truncate <l556e6976617269617465506f77657253657269657343617465676f7279-7472756e63617465>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )


\ :ref:`truncate <l556e6976617269617465506f77657253657269657343617465676f7279-7472756e63617465>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7661726961626c65:

\ :ref:`variable <l556e6976617269617465506f77657253657269657343617465676f7279-7661726961626c65>`\ \: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  from \ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ )

.. _l496e6e6572537061727365556e6976617269617465506f776572536572696573-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianMonoidRing <l4162656c69616e4d6f6e6f696452696e67>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`AbelianProductCategory <l4162656c69616e50726f6475637443617465676f7279>`\  Coef 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Algebra <l416c6765627261>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (Coef, Coef) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\  if Coef has \ :ref:`CharacteristicNonZero <l43686172616374657269737469634e6f6e5a65726f>`\ 

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  if Coef has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\  if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef

\ :ref:`Eltable <l456c7461626c65>`\ (%, %) 

\ :ref:`EntireRing <l456e7469726552696e67>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`IndexedProductCategory <l496e646578656450726f6475637443617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  Coef 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Module <l4d6f64756c65>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  Coef if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  if Coef has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 

\ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\  if Coef has \*\: (\ :ref:`Integer <l496e7465676572>`\ , Coef) -> Coef and Coef has \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ 

\ :ref:`PowerSeriesCategory <l506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`SingletonAsOrderedSet <l53696e676c65746f6e41734f726465726564536574>`\ ) 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  Coef 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  if Coef has \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  if Coef has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

\ :ref:`UnivariatePowerSeriesCategory <l556e6976617269617465506f77657253657269657343617465676f7279>`\ (Coef, \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`VariablesCommuteWithCoefficients <l5661726961626c6573436f6d6d75746557697468436f656666696369656e7473>`\  

