.. index:: PatternMatchPushDown

.. _l5061747465726e4d6174636850757368446f776e:

PatternMatchPushDown(S, A, B)
=============================

:viewcode:`patmatch1.spad line 311 <patmatch1.spad#L311>` :editcode:`[edit on github] <patmatch1.spad#L311>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 

* A: \ :ref:`PatternMatchable <l5061747465726e4d6174636861626c65>`\  S

* B: Join(\ :ref:`SetCategory <l53657443617465676f7279>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  A)


This packages provides tools for matching recursively in type towers.


.. _l5061747465726e4d6174636850757368446f776e-666978507265646963617465:

.. index::
   pair: PatternMatchPushDown; fixPredicate

:spadfun:`fixPredicate`\: (B -> \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> A -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``fixPredicate(f)``\  returns \ ``g``\  defined by \ ``g``\ (a) = \ ``f``\ (a::B).

.. _l5061747465726e4d6174636850757368446f776e-7061747465726e4d61746368:

.. index::
   pair: PatternMatchPushDown; patternMatch

:spadfun:`patternMatch`\: (A, \ :ref:`Pattern <l5061747465726e>`\  S, \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (S, B)) -> \ :ref:`PatternMatchResult <l5061747465726e4d61746368526573756c74>`\ (S, B) 
  \ ``patternMatch(expr, pat, res)``\  matches the pattern \ ``pat``\  to the expression \ ``expr``\ ; res contains the variables of \ ``pat``\  which are already matched and their matches. Note: this function handles type towers by changing the predicates and calling the matching function provided by \ ``A``\ .


