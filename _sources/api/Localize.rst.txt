.. index:: Localize

.. _l4c6f63616c697a65:

Localize(M, R)
==============

:viewcode:`fraction.spad line 1 <fraction.spad#L1>` :editcode:`[edit on github] <fraction.spad#L1>`

* M: \ :ref:`Module <l4d6f64756c65>`\  R

* R: \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 


Localize(\ ``M``\ , \ ``R``\ ) produces fractions with numerators from an \ ``R``\  module \ ``M``\  and denominators being the nonzero elements of \ ``R``\ .


.. _l4c6f63616c697a65-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6f63616c697a65-2a:

\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, R) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  R


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (R, %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R

.. _l4c6f63616c697a65-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4c6f63616c697a65-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l4c6f63616c697a65-2f:

.. index::
   pair: Localize; /

:spadfun:`/`\: (%, R) -> % 
  \ ``x / d``\  divides the element \ ``x``\  by \ ``d``\ .


.. index::
   pair: Localize; /

:spadfun:`/`\: (M, R) -> % 
  \ ``m / d``\  divides the element \ ``m``\  by \ ``d``\ .

.. _l4c6f63616c697a65-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c6f63616c697a65-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c6f63616c697a65-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c6f63616c697a65-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c6f63616c697a65-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l4c6f63616c697a65-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4c6f63616c697a65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4c6f63616c697a65-64656e6f6d:

.. index::
   pair: Localize; denom

:spadfun:`denom`\: % -> R 
  \ ``denom x``\  returns the denominator of \ ``x``\ .

.. _l4c6f63616c697a65-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4c6f63616c697a65-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4c6f63616c697a65-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l4c6f63616c697a65-6e756d6572:

.. index::
   pair: Localize; numer

:spadfun:`numer`\: % -> M 
  \ ``numer x``\  returns the numerator of \ ``x``\ .

.. _l4c6f63616c697a65-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6f63616c697a65-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6f63616c697a65-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4c6f63616c697a65-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l4c6f63616c697a65-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (R, R) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  R 

\ :ref:`Module <l4d6f64756c65>`\  R 

\ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`OrderedCancellationAbelianMonoid <l4f72646572656443616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`OrderedSet <l4f726465726564536574>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  if M has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  R 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

