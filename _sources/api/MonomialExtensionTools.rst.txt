.. index:: MonomialExtensionTools

.. _l4d6f6e6f6d69616c457874656e73696f6e546f6f6c73:

MonomialExtensionTools(F, UP)
=============================

:viewcode:`intrf.spad line 109 <intrf.spad#L109>` :editcode:`[edit on github] <intrf.spad#L109>`

* F: \ :ref:`Field <l4669656c64>`\ 

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F


Tools for handling monomial extensions.


.. _l4d6f6e6f6d69616c457874656e73696f6e546f6f6c73-6465636f6d706f7365:

.. index::
   pair: MonomialExtensionTools; decompose

:spadfun:`decompose`\: (\ :ref:`Fraction <l4672616374696f6e>`\  UP, UP -> UP) -> Record(poly: UP, normal: \ :ref:`Fraction <l4672616374696f6e>`\  UP, special: \ :ref:`Fraction <l4672616374696f6e>`\  UP) 
  \ ``decompose(f, D)``\  returns \ ``[p, n, s]``\  such that \ ``f = p+n+s``\ , all the squarefree factors of \ ``denom(n)``\  are normal \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``D``\ , \ ``denom(s)``\  is special \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``D``\ , and \ ``n``\  and \ ``s``\  are proper fractions (no pole at infinity). \ ``D``\  is the derivation to use.

.. _l4d6f6e6f6d69616c457874656e73696f6e546f6f6c73-6e6f726d616c44656e6f6d:

.. index::
   pair: MonomialExtensionTools; normalDenom

:spadfun:`normalDenom`\: (\ :ref:`Fraction <l4672616374696f6e>`\  UP, UP -> UP) -> UP 
  \ ``normalDenom(f, D)``\  returns the product of all the normal factors of \ ``denom(f)``\ . \ ``D``\  is the derivation to use.

.. _l4d6f6e6f6d69616c457874656e73696f6e546f6f6c73-73706c6974:

.. index::
   pair: MonomialExtensionTools; split

:spadfun:`split`\: (UP, UP -> UP) -> Record(normal: UP, special: UP) 
  \ ``split(p, D)``\  returns \ ``[n, s]``\  such that \ ``p = n s``\ , all the squarefree factors of \ ``n``\  are normal \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``D``\ , and \ ``s``\  is special \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``D``\ . \ ``D``\  is the derivation to use.

.. _l4d6f6e6f6d69616c457874656e73696f6e546f6f6c73-73706c697453717561726566726565:

.. index::
   pair: MonomialExtensionTools; splitSquarefree

:spadfun:`splitSquarefree`\: (UP, UP -> UP) -> Record(normal: \ :ref:`Factored <l466163746f726564>`\  UP, special: \ :ref:`Factored <l466163746f726564>`\  UP) 
  \ ``splitSquarefree(p, D)``\  returns \ ``[n_1 n_2\^2 ... n_m\^m, s_1 s_2\^2 ... s_q\^q]``\  such that \ ``p = n_1 n_2\^2 ... n_m\^m s_1 s_2\^2 ... s_q\^q``\ , each \ ``n_i``\  is normal \ ``w``\ .\ ``r``\ .\ ``t``\ . \ ``D``\  and each \ ``s_i``\  is special \ ``w``\ .\ ``r``\ .\ ``t``\  \ ``D``\ . \ ``D``\  is the derivation to use.


