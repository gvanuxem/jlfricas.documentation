.. index:: JLF64MatrixTranscendentalFunctions

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73:

JLF64MatrixTranscendentalFunctions
==================================

:viewcode:`jla64.spad line 676 <jla64.spad#L676>` :editcode:`[edit on github] <jla64.spad#L676>`


Linear Algebra functions computed using Julia and its algorithms.


.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f73:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acos

:spadfun:`acos`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acos(m)``\  computes the inverse matrix cosine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f7364:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acosd

:spadfun:`acosd`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acosd(m)``\  computes the inverse matrix cosine of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f7368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acosh

:spadfun:`acosh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acosh(m)``\  computes the inverse matrix hyperbolic cosine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f74:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acot

:spadfun:`acot`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acot(m)``\  computes the inverse matrix cotangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f7464:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acotd

:spadfun:`acotd`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acotd(m)``\  computes the inverse matrix cotangent of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61636f7468:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acoth

:spadfun:`acoth`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acoth(m)``\  computes the inverse matrix hyperbolic cotangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61637363:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acsc

:spadfun:`acsc`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acsc(m)``\  computes the inverse matrix cosecant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6163736364:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acscd

:spadfun:`acscd`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acscd(m)``\  computes the inverse matrix cosecant of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6163736368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; acsch

:spadfun:`acsch`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``acsch(m)``\  computes the inverse matrix hyperbolic cosecant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-61736563:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asec

:spadfun:`asec`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asec(m)``\  computes the inverse matrix secant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6173656364:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asecd

:spadfun:`asecd`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asecd(m)``\  computes the inverse matrix secant of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6173656368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asech

:spadfun:`asech`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asech(m)``\  computes the inverse matrix hyperbolic secant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6173696e:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asin

:spadfun:`asin`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asin(m)``\  computes the inverse matrix sine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6173696e64:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asind

:spadfun:`asind`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asind(m)``\  computes the inverse matrix sine of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6173696e68:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; asinh

:spadfun:`asinh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``asinh(m)``\  computes the inverse matrix hyperbolic sine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6174616e:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; atan

:spadfun:`atan`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``atan(m)``\  computes the inverse matrix tangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6174616e64:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; atand

:spadfun:`atand`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``atand(m)``\  computes the inverse matrix tangent of \ ``m``\ . Output is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-6174616e68:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; atanh

:spadfun:`atanh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``atanh(m)``\  computes the inverse matrix hyperbolic tangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636973:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; cis

:spadfun:`cis`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLComplexF64Matrix <l4a4c436f6d706c65784636344d6174726978>`\  
  \ ``cis(x)``\  returns exp(\%i*x) computed efficiently.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636f73:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; cos

:spadfun:`cos`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``cos(m)``\  computes the matrix cosine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636f7364:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; cosd

:spadfun:`cosd`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``cosd(m)``\  computes the matrix cosine of \ ``m``\ , where \ ``m``\  is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636f7368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; cosh

:spadfun:`cosh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``cosh(m)``\  computes the matrix hyperbolic cosine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636f74:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; cot

:spadfun:`cot`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``cot(m)``\  computes the matrix cotangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-636f7468:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; coth

:spadfun:`coth`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``coth(m)``\  computes the matrix hyperbolic cotangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-637363:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; csc

:spadfun:`csc`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``csc(m)``\  computes the matrix cosecant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-63736368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; csch

:spadfun:`csch`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``csch(m)``\  computes the matrix hyperbolic cosecant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-736563:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; sec

:spadfun:`sec`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``sec(m)``\  computes the matrix secant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-73656368:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; sech

:spadfun:`sech`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``sech(m)``\  computes the matrix hyperbolic secant of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-73696e:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; sin

:spadfun:`sin`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``sin(m)``\  computes the matrix sine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-73696e64:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; sind

:spadfun:`sind`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``sind(m)``\  computes the matrix sine of \ ``m``\ , where \ ``m``\  is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-73696e68:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; sinh

:spadfun:`sinh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``sinh(m)``\  computes the matrix hyperbolic sine of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-74616e:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; tan

:spadfun:`tan`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``tan(m)``\  computes the matrix tangent of \ ``m``\ .

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-74616e64:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; tand

:spadfun:`tand`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``tand(m)``\  computes the matrix tangent of \ ``m``\ , where \ ``m``\  is in degrees.

.. _l4a4c4636344d61747269785472616e7363656e64656e74616c46756e6374696f6e73-74616e68:

.. index::
   pair: JLF64MatrixTranscendentalFunctions; tanh

:spadfun:`tanh`\: \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  -> \ :ref:`JLFloat64Matrix <l4a4c466c6f617436344d6174726978>`\  
  \ ``tanh(m)``\  computes the matrix hyperbolic tangent of \ ``m``\ .


