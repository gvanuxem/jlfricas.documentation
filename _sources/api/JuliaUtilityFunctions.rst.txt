.. index:: JuliaUtilityFunctions

.. _l4a756c69615574696c69747946756e6374696f6e73:

JuliaUtilityFunctions
=====================

:viewcode:`jutils.spad line 1 <jutils.spad#L1>` :editcode:`[edit on github] <jutils.spad#L1>`


This package provides different Julia utility functions.


.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c4164645061636b616765:

.. index::
   pair: JuliaUtilityFunctions; jlAddPackage

:spadfun:`jlAddPackage`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlAddPackage(package)``\  add \ ``package``\  to Julia project.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c417070726f783f:

.. index::
   pair: JuliaUtilityFunctions; jlApprox?

:spadfun:`jlApprox?`\: (\ :ref:`JuliaComplexF64 <l4a756c6961436f6d706c6578463634>`\ , \ :ref:`JuliaComplexF64 <l4a756c6961436f6d706c6578463634>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlApprox?(x,y)``\  computes inexact equality comparison with default parameters. Two numbers compare equal if their relative distance or their absolute distance is within tolerance bounds. Applied component-wise.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c446566696e65643f:

.. index::
   pair: JuliaUtilityFunctions; jlDefined?

:spadfun:`jlDefined?`\: \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlDefined?(sym)``\  tests whether or not \ ``sym``\  is defined in Julia.


.. index::
   pair: JuliaUtilityFunctions; jlDefined?

:spadfun:`jlDefined?`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlDefined?(str)``\  tests whether or not \ ``str``\  is defined in Julia.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c4576616c537472696e67:

.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is a Boolean.


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is an Integer.


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is a \ ``JuliaFloat64``\ .


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`JuliaInt64 <l4a756c6961496e743634>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is a \ ``JuliaInt64``\ .


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is an Non Negative Integer.


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is an Positive Integer.


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`String <l537472696e67>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia, where the output is a String.


.. index::
   pair: JuliaUtilityFunctions; jlEvalString

:spadfun:`jlEvalString`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Void <l566f6964>`\  
  \ ``jlEvalString(str)``\  evaluates \ ``str``\  in Julia with no output.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e32463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64Function2F64

:spadfun:`jlF64Function2F64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64Function2F64(func,x,y)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e33463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64Function3F64

:spadfun:`jlF64Function3F64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64Function3F64(func, x, y, z)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e434636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionCF64Mat

:spadfun:`jlF64FunctionCF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionF64Mat(func, cmat, \ ``nr``\ ) returns the output value of func applied to cmat, internally a vector, where the number of rows is \ ``nr``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e434636344d6174463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionCF64MatF64

:spadfun:`jlF64FunctionCF64MatF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionF64Mat(func, cmat, \ ``nr``\ , \ ``p``\ ) returns the output value of func applied to cmat, internally a vector, where the number of rows is \ ``nr``\  and \ ``p``\  an additional parameter.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e43463634566563:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionCF64Vec

:spadfun:`jlF64FunctionCF64Vec`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64FunctionCF64Vec(func, cvec)``\  returns the output value of \ ``func``\  applied to cvec.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e43463634566563463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionCF64VecF64

:spadfun:`jlF64FunctionCF64VecF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionCF64Vec(func, cvec, \ ``p``\ ) returns the output value of func applied to cvec with parameter \ ``p``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64

:spadfun:`jlF64FunctionF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64FunctionF64(func,x)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e463634493634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64I64

:spadfun:`jlF64FunctionF64I64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaInt64 <l4a756c6961496e743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64FunctionF64I64(func,x,i)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e4636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64Mat

:spadfun:`jlF64FunctionF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64FunctionF64Mat(func, mat, nr)``\  returns the output value of \ ``func``\  applied to \ ``mat``\ , internally a vector, where the number of rows is \ ``nr``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e4636344d6174463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64MatF64

:spadfun:`jlF64FunctionF64MatF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionF64Mat(func, mat, \ ``nr``\ , \ ``p``\ ) returns the output value of func applied to mat, internally a vector, where the number of rows is \ ``nr``\  and \ ``p``\  an additional parameter.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e463634566563:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64Vec

:spadfun:`jlF64FunctionF64Vec`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionCF64Vec(func, vec) returns the output value of func applied to vec.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e463634566563463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionF64VecF64

:spadfun:`jlF64FunctionF64VecF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  jlF64FunctionCF64Vec(func, vec, \ ``p``\ ) returns the output value of func applied to vec with parameter \ ``p``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46363446756e6374696f6e493634463634:

.. index::
   pair: JuliaUtilityFunctions; jlF64FunctionI64F64

:spadfun:`jlF64FunctionI64F64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaInt64 <l4a756c6961496e743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``jlF64FunctionI64F64(func,i,x)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e32434636344d617421:

.. index::
   pair: JuliaUtilityFunctions; jlFunction2CF64Mat!

:spadfun:`jlFunction2CF64Mat!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Matrix <l4a756c6961436f6d706c65784636344d6174726978>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaComplexF64Matrix <l4a756c6961436f6d706c65784636344d6174726978>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2CF64Mat(func, \ ``cmat1``\ , \ ``cmat2``\ ) applies the Julia function func to \ ``cmat2``\  that overwrites \ ``cmat1``\  with the result. Please note that the overwriting is done by Julia and not FriCAS. See Julia 'copy!' or adjoint! for example.


.. index::
   pair: JuliaUtilityFunctions; jlFunction2CF64Mat!

:spadfun:`jlFunction2CF64Mat!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2CF64Mat(func, \ ``cmat1``\ , \ ``nr1``\ , \ ``cmat2``\ , \ ``nr2``\ ) applies func to the pair of matrices \ ``cmat1``\  and \ ``cmat2``\  (internally vectors). \ ``nr1``\  and \ ``nr2``\  are respectively the number of rows.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e324346363456656321:

.. index::
   pair: JuliaUtilityFunctions; jlFunction2CF64Vec!

:spadfun:`jlFunction2CF64Vec!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2CF64Vec(func, \ ``cvec1``\ , \ ``cvec2``\ ) applies the Julia function func to \ ``cvec2``\  that overwrites \ ``cvec1``\  with the result. Please note that the overwriting is done by Julia and not FriCAS. See Julia 'copy!' for example.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e32463634:

.. index::
   pair: JuliaUtilityFunctions; jlFunction2F64

:spadfun:`jlFunction2F64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunction2F64(func,x,y)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e324636344d617421:

.. index::
   pair: JuliaUtilityFunctions; jlFunction2F64Mat!

:spadfun:`jlFunction2F64Mat!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2F64Mat(func, \ ``mat1``\ , \ ``mat2``\ ) applies the Julia function func to \ ``mat2``\  that overwrites \ ``mat1``\  with the result. Please note that the overwriting is done by Julia and not FriCAS. See Julia 'copy!' or transpose! for example.


.. index::
   pair: JuliaUtilityFunctions; jlFunction2F64Mat!

:spadfun:`jlFunction2F64Mat!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2CF64Mat!(func, \ ``mat1``\ , \ ``nr1``\ , \ ``mat2``\ , \ ``nr2``\ ) applies func to the pair of matrices \ ``mat1``\  and \ ``mat2``\  (internally vectors). \ ``nr1``\  and \ ``nr2``\  are respectively the number of rows.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e3246363456656321:

.. index::
   pair: JuliaUtilityFunctions; jlFunction2F64Vec!

:spadfun:`jlFunction2F64Vec!`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunction2F64Vec(func, \ ``vec1``\ , \ ``vec2``\ ) applies the Julia function func to \ ``vec2``\  that overwrites \ ``vec1``\  with the result. Please note that the overwriting is done by Julia and not FriCAS. See Julia 'copy!' for example.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e33463634:

.. index::
   pair: JuliaUtilityFunctions; jlFunction3F64

:spadfun:`jlFunction3F64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunction3F64(func,x,y,z)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e434636344172726179434636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionCF64ArrayCF64Mat

:spadfun:`jlFunctionCF64ArrayCF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  jlFunctionF64ArrayCF64Mat(func, carray, cmat, \ ``nr``\ ) applies the function func to the matrix cmat and returns the result in carray. It is FriCAS that puts, at the \ ``C``\  level, the resulting matrix in carray.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e4346363441727261794636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionCF64ArrayF64Mat

:spadfun:`jlFunctionCF64ArrayF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunctionCF64ArrayF64Mat(func, carray, mat, nr)``\  applies the function \ ``func``\  to the matrix \ ``mat``\  and returns the result in \ ``carray``\ . It is FriCAS that puts, at the \ ``C``\  level, the resulting matrix in \ ``carray``\ . Can be used with Julia 'sqrt' for example.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e434636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionCF64Mat

:spadfun:`jlFunctionCF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunctionF64Mat(func, cmat, \ ``nr``\ ) applies func to the matrix mat, internally a vector, where the numer of rows is \ ``nr``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e43463634566563:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionCF64Vec

:spadfun:`jlFunctionCF64Vec`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlF64FunctionF64Vec(func, vec) applies func to cvec.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e463634:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionF64

:spadfun:`jlFunctionF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunctionF64(func,x)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e4636344172726179434636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionF64ArrayCF64Mat

:spadfun:`jlFunctionF64ArrayCF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaComplexF64Vector <l4a756c6961436f6d706c6578463634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunctionF64ArrayCF64Mat(func, array, cmat, nr)``\  applies the function \ ``func``\  to the matrix \ ``cmat``\  and returns the result in \ ``array``\ . It is FriCAS that puts, at the \ ``C``\  level, the resulting matrix in \ ``array``\ . Can be used with Julia 'real' or 'imag' for example.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e46363441727261794636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionF64ArrayF64Mat

:spadfun:`jlFunctionF64ArrayF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunctionF64ArrayF64Mat(func, array, mat, nr)``\  applies the function \ ``func``\  to the matrix \ ``mat``\  and returns the result in \ ``array``\ . It is FriCAS that puts, at the \ ``C``\  level, the resulting matrix in \ ``array``\ . Can be used with Julia 'inv' for example.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e4636344d6174:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionF64Mat

:spadfun:`jlFunctionF64Mat`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``jlFunctionF64Mat(func, mat, nr)``\  applies \ ``func``\  to the matrix \ ``mat``\ , internally a vector, where the numer of rows is \ ``nr``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c46756e6374696f6e463634566563:

.. index::
   pair: JuliaUtilityFunctions; jlFunctionF64Vec

:spadfun:`jlFunctionF64Vec`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\ ) -> \ :ref:`Void <l566f6964>`\  
  jlFunctionF64Vector(func, vec) applies func to vec.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c49363446756e6374696f6e463634:

.. index::
   pair: JuliaUtilityFunctions; jlI64FunctionF64

:spadfun:`jlI64FunctionF64`\: (\ :ref:`String <l537472696e67>`\ , \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\ ) -> \ :ref:`JuliaInt64 <l4a756c6961496e743634>`\  
  \ ``jlI64FunctionF64(func,x)``\ 

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c496d706f7274:

.. index::
   pair: JuliaUtilityFunctions; jlImport

:spadfun:`jlImport`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlImport(modpackfunc)``\  imports the module, package or function \ ``modpackfunc``\  and makes its exported name(\ ``s``\ ) available. Returns \ ``false``\  if it can not be imported.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c496e697469616c697a65:

.. index::
   pair: JuliaUtilityFunctions; jlInitialize

:spadfun:`jlInitialize`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlInitialize(init)``\  initializes the Julia environment if \ ``init``\  is \ ``true``\ , otherwise clears the Julia environment. Normally, it should not be used since it is automatically called.

.. _l4a756c69615574696c69747946756e6374696f6e73-6a6c5573696e67:

.. index::
   pair: JuliaUtilityFunctions; jlUsing

:spadfun:`jlUsing`\: \ :ref:`String <l537472696e67>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``jlUsing(modpack)``\  loads the module or package \ ``modpack``\  and makes its exported names available. Returns \ ``false``\  if it can not be loaded.

.. _l4a756c69615574696c69747946756e6374696f6e73-6d65616e:

.. index::
   pair: JuliaUtilityFunctions; mean

:spadfun:`mean`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``mean(vec)``\  returns mean of the elements of vector \ ``vec``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-6d656469616e:

.. index::
   pair: JuliaUtilityFunctions; median

:spadfun:`median`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``median(vec)``\  returns median of the elements of vector \ ``vec``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-737464:

.. index::
   pair: JuliaUtilityFunctions; std

:spadfun:`std`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``std(vec)``\  returns standard deviation (sum scaled with \ ``n``\ -1) of the elements of vector \ ``vec``\ .

.. _l4a756c69615574696c69747946756e6374696f6e73-766172:

.. index::
   pair: JuliaUtilityFunctions; var

:spadfun:`var`\: \ :ref:`JuliaFloat64Vector <l4a756c6961466c6f61743634566563746f72>`\  -> \ :ref:`JuliaFloat64 <l4a756c6961466c6f61743634>`\  
  \ ``var(vec)``\  returns variance of the elements of vector \ ``vec``\ .


