.. index:: PointsOfFiniteOrder

.. _l506f696e74734f6646696e6974654f72646572:

PointsOfFiniteOrder(R0, F, UP, UPUP, R)
=======================================

:viewcode:`pfo.spad line 257 <pfo.spad#L257>` :editcode:`[edit on github] <pfo.spad#L257>`

* R0: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ )

* F: \ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  R0

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* UPUP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  \ :ref:`Fraction <l4672616374696f6e>`\  UP

* R: \ :ref:`FunctionFieldCategory <l46756e6374696f6e4669656c6443617465676f7279>`\ (F, UP, UPUP)


This package provides function for testing whether a divisor on a curve is a torsion divisor.


.. _l506f696e74734f6646696e6974654f72646572-636d756c74:

.. index::
   pair: PointsOfFiniteOrder; cmult

:spadfun:`cmult`\: \ :ref:`List <l4c697374>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R0, \ :ref:`Kernel <l4b65726e656c>`\  F) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (R0, \ :ref:`Kernel <l4b65726e656c>`\  F) 
  \ ``cmult(x)``\  should be local but conditional

.. _l506f696e74734f6646696e6974654f72646572-68616e646c655f696d6167696e617279:

.. index::
   pair: PointsOfFiniteOrder; handle_imaginary

:spadfun:`handle_imaginary`\: \ :ref:`FiniteDivisor <l46696e69746544697669736f72>`\ (F, UP, UPUP, R) -> Record(ncurve: UPUP, n_div_numer: \ :ref:`Vector <l566563746f72>`\  UPUP, n_div_denom: UPUP, need_change: \ :ref:`Boolean <l426f6f6c65616e>`\ ) 
  \ ``handle_imaginary(d)``\  should be local but conditional.

.. _l506f696e74734f6646696e6974654f72646572-6f72646572:

.. index::
   pair: PointsOfFiniteOrder; order

:spadfun:`order`\: \ :ref:`FiniteDivisor <l46696e69746544697669736f72>`\ (F, UP, UPUP, R) -> Union(\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  \ ``order(fd)``\  returns order of divisor \ ``fd``\  or \ ``"failed"``\  if \ ``fd``\  is not of finite order.

.. _l506f696e74734f6646696e6974654f72646572-706f737369626c654f72646572:

.. index::
   pair: PointsOfFiniteOrder; possibleOrder

:spadfun:`possibleOrder`\: \ :ref:`FiniteDivisor <l46696e69746544697669736f72>`\ (F, UP, UPUP, R) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``possibleOrder(d)``\  returns \ ``n``\  such that \ ``d``\  is of order \ ``n``\ , or of infinite order.

.. _l506f696e74734f6646696e6974654f72646572-73696d706c696679436f65666673:

.. index::
   pair: PointsOfFiniteOrder; simplifyCoeffs

:spadfun:`simplifyCoeffs`\: (Record(ncurve: UPUP, n_div_numer: \ :ref:`Vector <l566563746f72>`\  UPUP, n_div_denom: UPUP, need_change: \ :ref:`Boolean <l426f6f6c65616e>`\ ), \ :ref:`List <l4c697374>`\  \ :ref:`Kernel <l4b65726e656c>`\  F) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R0 has \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  and F has \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 
  \ ``simplifyCoeffs(d, la)``\  should be local but conditional.

.. _l506f696e74734f6646696e6974654f72646572-746f7273696f6e3f:

.. index::
   pair: PointsOfFiniteOrder; torsion?

:spadfun:`torsion?`\: \ :ref:`FiniteDivisor <l46696e69746544697669736f72>`\ (F, UP, UPUP, R) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``torsion?(fd)``\  returns \ ``true``\  if \ ``fd``\  is of finite order, \ ``false``\  otherwise.

.. _l506f696e74734f6646696e6974654f72646572-746f7273696f6e496643616e:

.. index::
   pair: PointsOfFiniteOrder; torsionIfCan

:spadfun:`torsionIfCan`\: \ :ref:`FiniteDivisor <l46696e69746544697669736f72>`\ (F, UP, UPUP, R) -> Union(Record(order: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , function: R), failed) 
  \ ``torsionIfCan(fd)``\  returns \ ``[n, f]``\  such that \ ``n*fd = div(f)``\  when \ ``fd``\  is of finite order. torsionIfCan(\ ``fd``\ ) returns \ ``"failed"``\  if \ ``fd``\  is not of finite order.


