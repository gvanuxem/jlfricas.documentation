.. index:: FiniteFieldSolveLinearPolynomialEquation

.. _l46696e6974654669656c64536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

FiniteFieldSolveLinearPolynomialEquation(F, FP, FPP)
====================================================

:viewcode:`ffcat.spad line 645 <ffcat.spad#L645>` :editcode:`[edit on github] <ffcat.spad#L645>`

* F: \ :ref:`FiniteFieldCategory <l46696e6974654669656c6443617465676f7279>`\ 

* FP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  F

* FPP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  FP


This package solves linear diophantine equations for Bivariate polynomials over finite fields


.. _l46696e6974654669656c64536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

.. index::
   pair: FiniteFieldSolveLinearPolynomialEquation; solveLinearPolynomialEquation

:spadfun:`solveLinearPolynomialEquation`\: (\ :ref:`List <l4c697374>`\  FPP, FPP) -> Union(\ :ref:`List <l4c697374>`\  FPP, failed) 
  \ ``solveLinearPolynomialEquation([f1, ..., fn], g)``\  (where the \ ``fi``\  are relatively prime to each other) returns a list of \ ``ai``\  such that \ ``g/prod fi = sum ai/fi``\  or returns "failed" if no such list of \ ``ai``\ \ ``'s``\  exists.


