.. index:: Hashable

.. _l4861736861626c65:

Hashable
========

:viewcode:`catdef.spad line 1435 <catdef.spad#L1435>` :editcode:`[edit on github] <catdef.spad#L1435>`


All domains for which we can compute hash function compatible with equality.


.. _l4861736861626c65-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4861736861626c65-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4861736861626c65-68617368:

.. index::
   pair: Hashable; hash

:spadfun:`hash`\: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  
  \ ``hash(s)``\  calculates a hash code for \ ``s``\ .

.. _l4861736861626c65-6861736855706461746521:

.. index::
   pair: Hashable; hashUpdate!

:spadfun:`hashUpdate!`\: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  
  \ ``hashUpdate!(hs, s)``\  computes new HashState from old and \ ``s``\  used for incremental computation of hash values. hashUpdate! might destructively work on its first argument.


\ :ref:`BasicType <l426173696354797065>`\  

