.. index:: ComplexRootFindingPackage

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765:

ComplexRootFindingPackage(R, UP)
================================

:viewcode:`crfp.spad line 1 <crfp.spad#L1>` :editcode:`[edit on github] <crfp.spad#L1>`

* R: Join(\ :ref:`Field <l4669656c64>`\ , \ :ref:`OrderedRing <l4f72646572656452696e67>`\ )

* UP: \ :ref:`UnivariatePolynomialCategory <l556e6976617269617465506f6c796e6f6d69616c43617465676f7279>`\  \ :ref:`Complex <l436f6d706c6578>`\  R


\ :ref:`ComplexRootFindingPackage <l436f6d706c6578526f6f7446696e64696e675061636b616765>`\  provides functions to find all roots of a polynomial \ ``p``\  over the complex number by using Plesken\ ``'s``\  idea to calculate in the polynomial ring modulo \ ``f``\  and employing the Chinese Remainder Theorem. In this first version, the precision (see \ :ref:`digits <l466c6f6174-646967697473>`\ ) is not increased when this is necessary to avoid rounding errors. Hence it is the user\ ``'s``\  responsibility to increase the precision if necessary. Note also, if this package is called with e.g. Fraction Integer, the precise calculations could require a lot of time. Also note that evaluating the zeros is not necessarily a good check whether the result is correct: already evaluation can cause rounding errors.


.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-636f6d706c65785a65726f73:

.. index::
   pair: ComplexRootFindingPackage; complexZeros

:spadfun:`complexZeros`\: (UP, R) -> \ :ref:`List <l4c697374>`\  \ :ref:`Complex <l436f6d706c6578>`\  R 
  \ ``complexZeros(p, eps)``\  tries to determine all complex zeros of the polynomial \ ``p``\  with accuracy given by \ *eps*\ .


.. index::
   pair: ComplexRootFindingPackage; complexZeros

:spadfun:`complexZeros`\: UP -> \ :ref:`List <l4c697374>`\  \ :ref:`Complex <l436f6d706c6578>`\  R 
  \ ``complexZeros(p)``\  tries to determine all complex zeros of the polynomial \ ``p``\  with accuracy given by the package constant \ *globalEps*\  which you may change by \ *setErrorBound*\ .

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-64697669736f7243617363616465:

.. index::
   pair: ComplexRootFindingPackage; divisorCascade

:spadfun:`divisorCascade`\: (UP, UP) -> \ :ref:`List <l4c697374>`\  Record(factors: \ :ref:`List <l4c697374>`\  UP, error: R) 
  \ ``divisorCascade(p, tp)``\  assumes that degree of polynomial \ *tp*\  is smaller than degree of polynomial \ ``p``\ , both monic. A sequence of divisions is calculated using the remainder, made monic, as divisor for the the next division. The result contains also the error of the factorizations, i.e. the norm of the remainder polynomial.


.. index::
   pair: ComplexRootFindingPackage; divisorCascade

:spadfun:`divisorCascade`\: (UP, UP, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`List <l4c697374>`\  Record(factors: \ :ref:`List <l4c697374>`\  UP, error: R) 
  \ ``divisorCascade(p, tp)``\  assumes that degree of polynomial \ *tp*\  is smaller than degree of polynomial \ ``p``\ , both monic. A sequence of divisions are calculated using the remainder, made monic, as divisor for the next division. The result contains also the error of the factorizations, i.e. the norm of the remainder polynomial. If \ *info*\  is \ *true*\ , then information messages are issued.

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-666163746f72:

.. index::
   pair: ComplexRootFindingPackage; factor

:spadfun:`factor`\: (UP, R) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, eps)``\  tries to factor \ ``p``\  into linear factors with error at most \ *eps*\ . An overall error bound \ *eps0*\  is determined and iterated tree-like calls to \ *pleskenSplit*\  are used to get the factorization.


.. index::
   pair: ComplexRootFindingPackage; factor

:spadfun:`factor`\: (UP, R, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p, eps, info)``\  tries to factor \ ``p``\  into linear factors with error at most \ *eps*\ . An overall error bound \ *eps0*\  is determined and iterated tree-like calls to \ *pleskenSplit*\  are used to get the factorization. If \ *info*\  is \ *true*\ , then information messages are given.


.. index::
   pair: ComplexRootFindingPackage; factor

:spadfun:`factor`\: UP -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``factor(p)``\  tries to factor \ ``p``\  into linear factors with error at most \ *globalEps*\ , the internal error bound, which can be set by \ *setErrorBound*\ . An overall error bound \ *eps0*\  is determined and iterated tree-like calls to \ *pleskenSplit*\  are used to get the factorization.

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-67726165666665:

.. index::
   pair: ComplexRootFindingPackage; graeffe

:spadfun:`graeffe`\: UP -> UP 
  \ ``graeffe p``\  determines \ ``q``\  such that \ ``q(-z^2) = p(z)*p(-z)``\ . Note that the roots of \ ``q``\  are the squares of the roots of \ ``p``\ .

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-6e6f726d:

.. index::
   pair: ComplexRootFindingPackage; norm

:spadfun:`norm`\: UP -> R 
  \ ``norm(p)``\  determines sum of absolute values of coefficients Note: this function depends on \ :ref:`abs <l436f6d706c6578-616273>`\ .

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-706c65736b656e53706c6974:

.. index::
   pair: ComplexRootFindingPackage; pleskenSplit

:spadfun:`pleskenSplit`\: (UP, R) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``pleskenSplit(poly, eps)``\  determines a start polynomial \ *start*\ \\ by using "startPolynomial then it increases the exponent \ ``n``\  of \ *start ^ n mod poly*\  to get an approximate factor of \ *poly*\ , in general of degree "degree \ ``poly``\  \ ``-1"``\ . Then a divisor cascade is calculated and the best splitting is chosen, as soon as the error is small enough.


.. index::
   pair: ComplexRootFindingPackage; pleskenSplit

:spadfun:`pleskenSplit`\: (UP, R, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Factored <l466163746f726564>`\  UP 
  \ ``pleskenSplit(poly, eps, info)``\  determines a start polynomial \ *start*\  by using "startPolynomial then it increases the exponent \ ``n``\  of \ *start ^ n mod poly*\  to get an approximate factor of \ *poly*\ , in general of degree "degree \ ``poly``\  \ ``-1"``\ . Then a divisor cascade is calculated and the best splitting is chosen, as soon as the error is small enough. If \ *info*\  is \ *true*\ , then information messages are issued.

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-7265636970726f63616c506f6c796e6f6d69616c:

.. index::
   pair: ComplexRootFindingPackage; reciprocalPolynomial

:spadfun:`reciprocalPolynomial`\: UP -> UP 
  \ ``reciprocalPolynomial(p)``\  calculates a polynomial which has exactly the inverses of the non-zero roots of \ ``p``\  as roots, and the same number of 0-roots.

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-726f6f74526164697573:

.. index::
   pair: ComplexRootFindingPackage; rootRadius

:spadfun:`rootRadius`\: (UP, R) -> R 
  \ ``rootRadius(p, errQuot)``\  calculates the root radius of \ ``p``\  with a maximal error quotient of \ *errQuot*\ .


.. index::
   pair: ComplexRootFindingPackage; rootRadius

:spadfun:`rootRadius`\: UP -> R 
  \ ``rootRadius(p)``\  calculates the root radius of \ ``p``\  with a maximal error quotient of \ *1+globalEps*\ , where \ *globalEps*\  is the internal error bound, which can be set by \ *setErrorBound*\ .

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-73636877657270756e6b74:

.. index::
   pair: ComplexRootFindingPackage; schwerpunkt

:spadfun:`schwerpunkt`\: UP -> \ :ref:`Complex <l436f6d706c6578>`\  R 
  \ ``schwerpunkt(p)``\  determines the 'Schwerpunkt' of the roots of the polynomial \ ``p``\  of degree \ ``n``\ , i.e. the center of gravity, which is \ *coefficient of \ ``x^(n-1)``\ *\  divided by \ *n times coefficient of \ ``x^n``\ *\ .

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-7365744572726f72426f756e64:

.. index::
   pair: ComplexRootFindingPackage; setErrorBound

:spadfun:`setErrorBound`\: R -> R 
  \ ``setErrorBound(eps)``\  changes the internal error bound, by default being \ *10 ^ (-3)*\  to \ ``eps``\ , if \ ``R``\  is a member in the category QuotientFieldCategory Integer. The internal \ *globalDigits*\  is set to \ *ceiling(1/r)^2*10*\  being \ *10^7*\  by default.

.. _l436f6d706c6578526f6f7446696e64696e675061636b616765-7374617274506f6c796e6f6d69616c:

.. index::
   pair: ComplexRootFindingPackage; startPolynomial

:spadfun:`startPolynomial`\: UP -> Record(start: UP, factors: \ :ref:`Factored <l466163746f726564>`\  UP) 
  \ ``startPolynomial(p)``\  uses the ideas of Schoenhage\ ``'s``\  variant of Graeffe\ ``'s``\  method to construct circles which separate roots to get a good start polynomial, i.e. one whose image under the Chinese Remainder Isomorphism has both entries of norm smaller and greater or equal to 1. In case the roots are found during internal calculations. The corresponding factors are in \ *factors*\  which are otherwise 1.


