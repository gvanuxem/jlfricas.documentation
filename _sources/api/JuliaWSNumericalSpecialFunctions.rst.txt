.. index:: JuliaWSNumericalSpecialFunctions

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73:

JuliaWSNumericalSpecialFunctions R
==================================

:viewcode:`jwsnsf.spad line 1 <jwsnsf.spad#L1>` :editcode:`[edit on github] <jwsnsf.spad#L1>`

* R: \ :ref:`JuliaWSNumber <l4a756c696157534e756d626572>`\ 


Julia Wolfram Symbolic numerical special functions using Wolfram Symbolic Transport Protocol.


.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-616972794169:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; airyAi

:spadfun:`airyAi`\: R -> R 
  \ ``airyAi(z)``\  is the Airy function \ ``Ai(z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6169727941695072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; airyAiPrime

:spadfun:`airyAiPrime`\: R -> R 
  \ ``airyAiPrime(z)``\  is the derivative of the Airy function \ ``Ai(z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-616972794269:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; airyBi

:spadfun:`airyBi`\: R -> R 
  \ ``airyBi(z)``\  is the Airy function \ ``Bi(z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6169727942695072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; airyBiPrime

:spadfun:`airyBiPrime`\: R -> R 
  \ ``airyBiPrime(z)``\  is the derivative of the Airy function \ ``Bi(z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-616e6765724a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; angerJ

:spadfun:`angerJ`\: (R, R) -> R 
  \ ``angerJ(v, z)``\  is the Anger \ ``J``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6261726e657347:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; barnesG

:spadfun:`barnesG`\: R -> R 
  \ ``barnesG(z)``\  computes the Barnes \ ``G``\ -function of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-62657373656c49:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; besselI

:spadfun:`besselI`\: (R, R) -> R 
  \ ``besselI(v, z)``\  is the modified Bessel function of the first kind.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-62657373656c4a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; besselJ

:spadfun:`besselJ`\: (R, R) -> R 
  \ ``besselJ(v, z)``\  is the Bessel function of the first kind.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-62657373656c4b:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; besselK

:spadfun:`besselK`\: (R, R) -> R 
  \ ``besselK(v, z)``\  is the modified Bessel function of the second kind.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-62657373656c59:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; besselY

:spadfun:`besselY`\: (R, R) -> R 
  \ ``besselY(v, z)``\  is the Bessel function of the second kind.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-42657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; Beta

:spadfun:`Beta`\: (R, R) -> R 
  \ ``Beta(x, y)``\  is \ ``Gamma(x) * Gamma(y)/Gamma(x+y)``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; Beta

:spadfun:`Beta`\: (R, R, R) -> R 
  \ ``Beta(z, a, b)``\  is the incomplete Beta function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-42657461526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; BetaRegularized

:spadfun:`BetaRegularized`\: (R, R, R) -> R 
  \ ``BetaRegularized(z,a,b)``\  computes the regularized incomplete beta function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-636861726c69657243:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; charlierC

:spadfun:`charlierC`\: (R, R, R) -> R 
  \ ``charlierC(n, a, z)``\  is the Charlier polynomial

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-63686562797368657654:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; chebyshevT

:spadfun:`chebyshevT`\: (R, R) -> R 
  \ ``chebyshevT(n, z)``\  evaluates the chebyshev polynomial of the first kind at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-63686562797368657655:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; chebyshevU

:spadfun:`chebyshevU`\: (R, R) -> R 
  \ ``chebyshevU(n, expr)``\  evaluates the chebyshev polynomial of the second kind at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-636f756c6f6d6246:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; coulombF

:spadfun:`coulombF`\: (R, R, R) -> R 
  \ ``coulombF(l,eta,ro)``\  is the regular Coulomb wave function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-636f756c6f6d6247:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; coulombG

:spadfun:`coulombG`\: (R, R, R) -> R 
  \ ``coulombG(l,eta,ro)``\  is the irregular Coulomb wave function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-636f756c6f6d624831:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; coulombH1

:spadfun:`coulombH1`\: (R, R, R) -> R 
  \ ``coulombH1(l,eta,ro)``\  is the incoming irregular Coulomb wave function \ ``H^``\ (+).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-636f756c6f6d624832:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; coulombH2

:spadfun:`coulombH2`\: (R, R, R) -> R 
  \ ``coulombH2(l,eta,ro)``\  is the incoming irregular Coulomb wave function \ ``H^``\ (-).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-646177736f6e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; dawson

:spadfun:`dawson`\: R -> R 
  \ ``dawson(x)``\  computes the Dawson integral of \ ``x``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-646564656b696e64457461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; dedekindEta

:spadfun:`dedekindEta`\: R -> R 
  \ ``dedekindEta(tau)``\  computes the Dedekind modular elliptic eta.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-646967616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; digamma

:spadfun:`digamma`\: (R, R) -> R 
  \ ``digamma(n,z)``\  the \ ``n``\ -th derivative of the digamma function


.. index::
   pair: JuliaWSNumericalSpecialFunctions; digamma

:spadfun:`digamma`\: R -> R 
  \ ``digamma(z)``\  is the logarithmic derivative of \ ``Gamma(z)``\  (often written \ ``psi(z)``\  in the literature).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6469726963686c6574457461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; dirichletEta

:spadfun:`dirichletEta`\: R -> R 
  \ ``dirichletEta(z)``\  computes the Dirichlet eta of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6469726963686c65744c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; dirichletL

:spadfun:`dirichletL`\: (R, R, R) -> R 
  \ ``dirichletL(k,j,s)``\  returns Dirichlet \ ``L``\ -function of \ ``s``\ , modulus \ ``k``\ , index \ ``j``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-4569456e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; EiEn

:spadfun:`EiEn`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R) -> R 
  \ ``EiEn(n,z)``\  returns the exponential integral En of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c697074696345:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticE

:spadfun:`ellipticE`\: (R, R) -> R 
  \ ``ellipticE(z, m)``\  is the incomplete elliptic integral of the second kind: \ ``ellipticE(z, m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..z)``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticE

:spadfun:`ellipticE`\: R -> R 
  \ ``ellipticE(m)``\  is the complete elliptic integral of the second kind: \ ``ellipticE(m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..1)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c697074696346:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticF

:spadfun:`ellipticF`\: (R, R) -> R 
  \ ``ellipticF(z, m)``\  is the incomplete elliptic integral of the first kind : \ ``ellipticF(z, m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c69707469634b:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticK

:spadfun:`ellipticK`\: R -> R 
  \ ``ellipticK(m)``\  is the complete elliptic integral of the first kind: \ ``ellipticK(m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..1)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c69707469635069:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticPi

:spadfun:`ellipticPi`\: (R, R) -> R 
  \ ``ellipticPi(n,m)``\  computes the complete elliptic integral of the third kind.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticPi

:spadfun:`ellipticPi`\: (R, R, R) -> R 
  \ ``ellipticPi(z, n, m)``\  is the incomplete elliptic integral of the third kind: \ ``ellipticPi(z, n, m) = integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))), t = 0..z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c69707469635468657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticTheta

:spadfun:`ellipticTheta`\: (R, R, R) -> R 
  \ ``ellipticTheta(a, u, q)``\  computes the theta function, a ranges from 1 to 4.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-656c6c697074696354686574615072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ellipticThetaPrime

:spadfun:`ellipticThetaPrime`\: (R, R, R) -> R 
  \ ``ellipticThetaPrime(a, u, q)``\  computes the derivative of the theta function, a ranges from 1 to 4.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6669626f6e61636369:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; fibonacci

:spadfun:`fibonacci`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R) -> R 
  \ ``fibonacci(n, z)``\  evaluates the Fibonacci polynomial at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-47616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; Gamma

:spadfun:`Gamma`\: (R, R) -> R 
  \ ``Gamma(a, z)``\  is the incomplete Gamma function.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; Gamma

:spadfun:`Gamma`\: (R, R, R) -> R 
  \ ``Gamma(a,z1,z2)``\  computes the generalized incomplete gamma function.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; Gamma

:spadfun:`Gamma`\: R -> R 
  \ ``Gamma(z)``\  is the Euler Gamma function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-47616d6d61526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; GammaRegularized

:spadfun:`GammaRegularized`\: (R, R) -> R 
  \ ``GammaRegularized(a,z)``\  computes the regularized incomplete gamma function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-676567656e626175657243:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; gegenbauerC

:spadfun:`gegenbauerC`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R) -> R 
  \ ``gegenbauerC(n,z)``\  evaluates the renormalized form of the Gegenbauer polynomial at \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; gegenbauerC

:spadfun:`gegenbauerC`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R, R) -> R 
  \ ``gegenbauerC(n,lambda,z)``\  evaluates the Gegenbauer polynomial at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-67756465726d616e6e69616e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; gudermannian

:spadfun:`gudermannian`\: R -> R 
  \ ``gudermannian(z)``\  computes the gudermannian of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-68616e6b656c4831:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hankelH1

:spadfun:`hankelH1`\: (R, R) -> R 
  \ ``hankelH1(v, z)``\  is first Hankel function (Bessel function of the third kind).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-68616e6b656c4832:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hankelH2

:spadfun:`hankelH2`\: (R, R) -> R 
  \ ``hankelH2(v, z)``\  is the second Hankel function (Bessel function of the third kind).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-686176657273696e65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; haversine

:spadfun:`haversine`\: R -> R 
  \ ``haversine(z)``\  computes the haversine of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6865726d69746548:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hermiteH

:spadfun:`hermiteH`\: (R, R) -> R 
  \ ``hermiteH(n, z)``\  evaluates the Hermite polynomial at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6875727769747a4c65726368506869:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hurwitzLerchPhi

:spadfun:`hurwitzLerchPhi`\: (R, R, R) -> R 
  \ ``hurwitzLerchPhi(z,s,a)``\  computes the Hurwitz–Lerch transcendent phi function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6875727769747a5a657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hurwitzZeta

:spadfun:`hurwitzZeta`\: (R, R) -> R 
  \ ``hurwitzZeta(s,a)``\  computes the Hurwitz zeta.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6879706572466163746f7269616c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hyperFactorial

:spadfun:`hyperFactorial`\: R -> R 
  \ ``hyperFactorial(n)``\  computes the hyperfactorial of \ ``n``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-687970657267656f6d6574726963304631:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hypergeometric0F1

:spadfun:`hypergeometric0F1`\: (R, R) -> R 
  \ ``hypergeometric0F1(a,z)``\  is the hypergeometric 0F1.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-687970657267656f6d6574726963304631526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hypergeometric0F1Regularized

:spadfun:`hypergeometric0F1Regularized`\: (R, R) -> R 
  \ ``hypergeometric0F1Regularized(a,z)``\  is the regularized hypergeometric 0F1.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-687970657267656f6d6574726963314631:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hypergeometric1F1

:spadfun:`hypergeometric1F1`\: (R, R, R) -> R 
  \ ``hypergeometric1F1(a,b,z)``\  is the Kummer confluent hypergeometric function 1F1.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-687970657267656f6d6574726963314631526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hypergeometric1F1Regularized

:spadfun:`hypergeometric1F1Regularized`\: (R, R, R) -> R 
  \ ``hypergeometric1F1Regularized(a,b,z)``\  is the regularized confluent hypergeometric function 1F1.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-687970657267656f6d657472696355:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; hypergeometricU

:spadfun:`hypergeometricU`\: (R, R, R) -> R 
  \ ``hypergeometricU(a,b,z)``\  is the confluent hypergeometric function \ ``U``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e766572736542657461526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseBetaRegularized

:spadfun:`inverseBetaRegularized`\: (R, R, R) -> R 
  \ ``inverseBetaRegularized(s,a,b)``\  computes the beta inverse.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e7665727365457266:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseErf

:spadfun:`inverseErf`\: R -> R 
  \ ``inverseErf(z)``\  computes the inverse error function of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e766572736545726663:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseErfc

:spadfun:`inverseErfc`\: R -> R 
  \ ``inverseErfc(z)``\  computes the inverse complementary error function of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e766572736547616d6d61526567756c6172697a6564:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseGammaRegularized

:spadfun:`inverseGammaRegularized`\: (R, R) -> R 
  \ ``inverseGammaRegularized(a,s)``\  computes the gamma inverse.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e766572736547756465726d616e6e69616e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseGudermannian

:spadfun:`inverseGudermannian`\: R -> R 
  \ ``inverseGudermannian(z)``\  computes the inverse gudermannian.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e7665727365486176657273696e65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseHaversine

:spadfun:`inverseHaversine`\: R -> R 
  \ ``inverseHaversine(z)``\  computes the inverse haversine.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e76657273654a61636f6269436e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseJacobiCn

:spadfun:`inverseJacobiCn`\: (R, R) -> R 
  \ ``inverseJacobiCn(nu, m)``\  computes the inverse JacobiCN elliptic function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-696e76657273654a61636f6269536e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; inverseJacobiSn

:spadfun:`inverseJacobiSn`\: (R, R) -> R 
  \ ``inverseJacobiSn(nu, m)``\  computes the inverse JacobiSN elliptic function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f6269416d706c6974756465:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiAmplitude

:spadfun:`jacobiAmplitude`\: (R, R) -> R 
  \ ``jacobiAmplitude(u,m)``\  computes the amplitude function am.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f6269436e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiCn

:spadfun:`jacobiCn`\: (R, R) -> R 
  \ ``jacobiCn(z, m)``\  is the Jacobi elliptic \ ``cn``\  function, defined by \ ``jacobiCn(z, m)^2 + jacobiSn(z, m)^2 = 1``\  and \ ``jacobiCn(0, m) = 1``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f6269446e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiDn

:spadfun:`jacobiDn`\: (R, R) -> R 
  \ ``jacobiDn(z, m)``\  is the Jacobi elliptic \ ``dn``\  function, defined by \ ``jacobiDn(z, m)^2 + m*jacobiSn(z, m)^2 = 1``\  and \ ``jacobiDn(0, m) = 1``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f626950:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiP

:spadfun:`jacobiP`\: (R, R, R, R) -> R 
  \ ``jacobiP(n, a, b, z)``\  evaluates the Jacobi polynomial at \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f6269536e:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiSn

:spadfun:`jacobiSn`\: (R, R) -> R 
  \ ``jacobiSn(z, m)``\  is the Jacobi elliptic \ ``sn``\  function, defined by the formula \ ``jacobiSn(ellipticF(z, m), m) = z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f62695468657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiTheta

:spadfun:`jacobiTheta`\: (R, R) -> R 
  \ ``jacobiTheta(z, m)``\  is the Jacobi Theta function in Jacobi notation.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6a61636f62695a657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; jacobiZeta

:spadfun:`jacobiZeta`\: (R, R) -> R 
  \ ``jacobiZeta(z, m)``\  is the Jacobi elliptic zeta function, defined by \ ``D(jacobiZeta(z, m), z) = jacobiDn(z, m)^2 - ellipticE(m)/ellipticK(m)``\  and \ ``jacobiZeta(0, m) = 0``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b656c76696e426569:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kelvinBei

:spadfun:`kelvinBei`\: (R, R) -> R 
  \ ``kelvinBei(v, z)``\  is the Kelvin bei function defined by equality \ ``kelvinBei(v, z) = imag(besselJ(v, exp(3*Rpi*Ri/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b656c76696e426572:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kelvinBer

:spadfun:`kelvinBer`\: (R, R) -> R 
  \ ``kelvinBer(v, z)``\  is the Kelvin ber function defined by equality \ ``kelvinBer(v, z) = real(besselJ(v, exp(3*Rpi*Ri/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b656c76696e4b6569:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kelvinKei

:spadfun:`kelvinKei`\: (R, R) -> R 
  \ ``kelvinKei(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKei(v, z) = imag(exp(-v*Rpi*Ri/2)*besselK(v, exp(Rpi*Ri/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b656c76696e4b6572:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kelvinKer

:spadfun:`kelvinKer`\: (R, R) -> R 
  \ ``kelvinKer(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKer(v, z) = real(exp(-v*Rpi*Ri/2)*besselK(v, exp(Rpi*Ri/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b6c65696e496e76617269616e744a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kleinInvariantJ

:spadfun:`kleinInvariantJ`\: R -> R 
  \ ``kleinInvariantJ(tau)``\  computes the Klein\ ``'s``\  absolute invariant.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b756d6d65724d:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kummerM

:spadfun:`kummerM`\: (R, R, R) -> R 
  \ ``kummerM(mu, nu, z)``\  is the Kummer \ ``M``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6b756d6d657255:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; kummerU

:spadfun:`kummerU`\: (R, R, R) -> R 
  \ ``kummerU(mu, nu, z)``\  is the Kummer \ ``U``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c616775657272654c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; laguerreL

:spadfun:`laguerreL`\: (R, R) -> R 
  \ ``laguerreL(n, z)``\  evaluates the Laguerre polynomial at \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; laguerreL

:spadfun:`laguerreL`\: (R, R, R) -> R 
  \ ``laguerreL(n, a, z)``\  evaluates he genralized Laguerre polynomial a \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c616d6265727457:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; lambertW

:spadfun:`lambertW`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R) -> R 
  \ ``lambertW(k,z)``\  returns the \ ``k``\ -th solution to LambertW function.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; lambertW

:spadfun:`lambertW`\: R -> R 
  \ ``lambertW(z)``\  = \ ``w``\  is the principial branch of the solution to the equation \ ``we^w = z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6567656e64726550:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; legendreP

:spadfun:`legendreP`\: (R, R) -> R 
  \ ``legendreP(n, z)``\  evaluates the legendre polynomial of the first kind at \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; legendreP

:spadfun:`legendreP`\: (R, R, R) -> R 
  \ ``legendreP(nu, mu, z)``\  is the Legendre \ ``P``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6567656e64726551:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; legendreQ

:spadfun:`legendreQ`\: (R, R) -> R 
  \ ``legendreQ(n, z)``\  returns the Legendre function of the second kind.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; legendreQ

:spadfun:`legendreQ`\: (R, R, R) -> R 
  \ ``legendreQ(nu, mu, z)``\  is the Legendre \ ``Q``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c65726368506869:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; lerchPhi

:spadfun:`lerchPhi`\: (R, R, R) -> R 
  \ ``lerchPhi(z, s, a)``\  is the Lerch Phi function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6f674261726e657347:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; logBarnesG

:spadfun:`logBarnesG`\: R -> R 
  \ ``logBarnesG(z)``\  is the logarithm of Barnes-\ ``G``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6f6747616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; logGamma

:spadfun:`logGamma`\: R -> R 
  \ ``logGamma(z)``\  returns the log-gamma of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6f6d6d656c5331:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; lommelS1

:spadfun:`lommelS1`\: (R, R, R) -> R 
  \ ``lommelS1(mu, nu, z)``\  is the Lommel \ ``s``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6c6f6d6d656c5332:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; lommelS2

:spadfun:`lommelS2`\: (R, R, R) -> R 
  \ ``lommelS2(mu, nu, z)``\  is the Lommel \ ``S``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d61746869657543:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuC

:spadfun:`mathieuC`\: (R, R, R) -> R 
  \ ``mathieuC(a,q,z)``\  is the even Mathieu function with characteristic a and parameter \ ``q``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d617468696575436861726163746572697374696341:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuCharacteristicA

:spadfun:`mathieuCharacteristicA`\: (R, R) -> R 
  \ ``mathieuCharacteristicA(r,q)``\  returns the characteristic for even Mathieu function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d617468696575436861726163746572697374696342:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuCharacteristicB

:spadfun:`mathieuCharacteristicB`\: (R, R) -> R 
  \ ``mathieuCharacteristicB(r,q)``\  returns the characteristic for odd Mathieu function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d61746869657543686172616374657269737469634578706f6e656e74:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuCharacteristicExponent

:spadfun:`mathieuCharacteristicExponent`\: (R, R) -> R 
  \ ``mathieuCharacteristicExponent(a,q)``\  returns the characterisitc exponent \ ``o``\  he Mathieu function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d617468696575435072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuCPrime

:spadfun:`mathieuCPrime`\: (R, R, R) -> R 
  \ ``mathieuCPrime(a,q,z)``\  derivative of the even Mathieu function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d61746869657553:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuS

:spadfun:`mathieuS`\: (R, R, R) -> R 
  \ ``mathieuS(b,q,z)``\  is the odd Mathieu function with characteristic \ ``b``\  and parameter \ ``q``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d617468696575535072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; mathieuSPrime

:spadfun:`mathieuSPrime`\: (R, R, R) -> R 
  \ ``mathieuSPrime(b,q,z)``\  derivative of the odd Mathieu function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d6569786e65724d:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; meixnerM

:spadfun:`meixnerM`\: (R, R, R, R) -> R 
  \ ``meixnerM(n, b, c, z)``\  is the Meixner polynomial

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-6d6f64756c61724c616d626461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; modularLambda

:spadfun:`modularLambda`\: R -> R 
  \ ``modularLambda()``\  computes the lambda modular function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-70617261626f6c696343796c696e64657244:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; parabolicCylinderD

:spadfun:`parabolicCylinderD`\: (R, R) -> R 
  \ ``parabolicCylinderD(nu,z)``\  computes the parabolic cylinder function \ ``D``\  of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-706f636868616d6d6572:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; pochhammer

:spadfun:`pochhammer`\: (R, R) -> R 
  \ ``pochhammer(a,n)``\  returns the Pochhammer symbol.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-706f6c7967616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; polygamma

:spadfun:`polygamma`\: (R, R) -> R 
  \ ``polygamma(k, z)``\  is the \ ``k-th``\  derivative of \ ``digamma(z)``\ , (often written \ ``psi(k, z)``\  in the literature).

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-706f6c796c6f67:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; polylog

:spadfun:`polylog`\: (R, R) -> R 
  \ ``polylog(s, z)``\  is the polylogarithm of order \ ``s``\  at \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; polylog

:spadfun:`polylog`\: (R, R, R) -> R 
  \ ``polylog(n,p,z)``\  is the Nielsen generalized polylogarithm function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-5142696e6f6d69616c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; QBinomial

:spadfun:`QBinomial`\: (R, R, R) -> R 
  \ ``QBinomial(n,m,q)``\  returns the \ ``q``\ -analog of binomial coefficient.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-51466163746f7269616c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; QFactorial

:spadfun:`QFactorial`\: (R, R) -> R 
  \ ``QFactorial(z,q)``\  returns the \ ``q``\ -analog of factorial of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-5147616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; QGamma

:spadfun:`QGamma`\: (R, R) -> R 
  \ ``QGamma(z,q)``\  returns the \ ``q``\ -analog of Euler gamma of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-51506f636868616d6d6572:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; QPochhammer

:spadfun:`QPochhammer`\: (R, R) -> R 
  \ ``QPochhammer(z,q)``\  returns the \ ``q``\ -Pochammer symbol of \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; QPochhammer

:spadfun:`QPochhammer`\: (R, R, R) -> R 
  \ ``QPochhammer(z,q,n)``\  returns the \ ``q``\ -Pochammer symbol of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-51506f6c7947616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; QPolyGamma

:spadfun:`QPolyGamma`\: (R, R) -> R 
  \ ``QPolyGamma(z,q)``\  returs the \ ``q``\ -digamma of \ ``z``\ .


.. index::
   pair: JuliaWSNumericalSpecialFunctions; QPolyGamma

:spadfun:`QPolyGamma`\: (R, R, R) -> R 
  \ ``QPolyGamma(n,z,q)``\  returns the \ ``n``\ -th derivative of the \ ``q``\ -digamma function of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-72616d616e756a616e546175:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ramanujanTau

:spadfun:`ramanujanTau`\: R -> R 
  \ ``ramanujanTau(n)``\  returns the Ramanujan tau of \ ``n``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-72616d616e756a616e5461754c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ramanujanTauL

:spadfun:`ramanujanTauL`\: R -> R 
  \ ``ramanujanTauL(s)``\  computes the Ramanujan tau Dirichlet \ ``L``\ -function of \ ``s``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-72616d616e756a616e5461755468657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ramanujanTauTheta

:spadfun:`ramanujanTauTheta`\: R -> R 
  \ ``ramanujanTauTheta(z)``\  returns the Ramanujan tau theta of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-72616d616e756a616e5461755a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; ramanujanTauZ

:spadfun:`ramanujanTauZ`\: R -> R 
  \ ``ramanujanTauZ(t)``\  computes the Ramanujan tau \ ``Z``\ -function of \ ``t``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7269656d616e6e53696567656c5468657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; riemannSiegelTheta

:spadfun:`riemannSiegelTheta`\: R -> R 
  \ ``riemannSiegelTheta(t)``\  returns the Riemann-Siegel theta function of \ ``t``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7269656d616e6e53696567656c5a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; riemannSiegelZ

:spadfun:`riemannSiegelZ`\: R -> R 
  \ ``riemannSiegelZ(t)``\  computes the Riemann-Siegel \ ``Z``\  function of \ ``t``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7269656d616e6e5a657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; riemannZeta

:spadfun:`riemannZeta`\: (R, R) -> R 
  \ ``riemannZeta(s,a)``\  is the generalized Riemann zeta function.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; riemannZeta

:spadfun:`riemannZeta`\: R -> R 
  \ ``riemannZeta(z)``\  is the Riemann Zeta function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73706865726963616c42657373656c4a:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; sphericalBesselJ

:spadfun:`sphericalBesselJ`\: (R, R) -> R 
  \ ``sphericalBesselJ(n,z)``\  returns the spherical Bessel of the first kind of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73706865726963616c42657373656c59:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; sphericalBesselY

:spadfun:`sphericalBesselY`\: (R, R) -> R 
  \ ``sphericalBesselY(n,z)``\  returns the spherical Bessel of the second kind of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73706865726963616c48616e6b656c4831:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; sphericalHankelH1

:spadfun:`sphericalHankelH1`\: (R, R) -> R 
  \ ``sphericalHankelH1(n,z)``\  returns the spherical Hankel of the first kind of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73706865726963616c48616e6b656c4832:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; sphericalHankelH2

:spadfun:`sphericalHankelH2`\: (R, R) -> R 
  \ ``sphericalHankelH2(n,z)``\  computes the spherical Hankel of the second kind of \ ``z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73706865726963616c4861726d6f6e696359:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; sphericalHarmonicY

:spadfun:`sphericalHarmonicY`\: (R, R, R, R) -> R 
  \ ``sphericalHarmonicY(l, m, theta, phi)``\  returns the spherical harmonic \ ``Y``\  or evaluates it.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-737469656c746a657347616d6d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; stieltjesGamma

:spadfun:`stieltjesGamma`\: (\ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\ , R) -> R 
  \ ``stieltjesGamma(n,a)``\  returns the generalized \ ``n``\ -th Stieltjes constant.


.. index::
   pair: JuliaWSNumericalSpecialFunctions; stieltjesGamma

:spadfun:`stieltjesGamma`\: \ :ref:`JuliaWSInteger <l4a756c69615753496e7465676572>`\  -> R 
  \ ``stieltjesGamma(n)``\  returns the \ ``n``\ -th Stieltjes constant.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-73747275766548:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; struveH

:spadfun:`struveH`\: (R, R) -> R 
  \ ``struveH(v, z)``\  is the Struve \ ``H``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7374727576654c:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; struveL

:spadfun:`struveL`\: (R, R) -> R 
  \ ``struveL(v, z)``\  is the Struve \ ``L``\  function defined by the formula \ ``struveL(v, z) = -Ri^exp(-v*Rpi*Ri/2)*struveH(v, Ri*z)``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-776562657245:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weberE

:spadfun:`weberE`\: (R, R) -> R 
  \ ``weberE(v, z)``\  is the Weber \ ``E``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-776569657273747261737350:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weierstrassP

:spadfun:`weierstrassP`\: (R, R, R) -> R 
  \ ``weierstrassP(g2, g3, z)``\  is the Weierstrass \ ``P``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-776569657273747261737350496e7665727365:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weierstrassPInverse

:spadfun:`weierstrassPInverse`\: (R, R, R) -> R 
  \ ``weierstrassPInverse(g2, g3, z)``\  is the inverse of Weierstrass \ ``P``\  function, defined by the formula \ ``weierstrassP(g2, g3, weierstrassPInverse(g2, g3, z)) = z``\ .

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7765696572737472617373505072696d65:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weierstrassPPrime

:spadfun:`weierstrassPPrime`\: (R, R, R) -> R 
  \ ``weierstrassPPrime(g2, g3, z)``\  is the derivative of Weierstrass \ ``P``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-77656965727374726173735369676d61:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weierstrassSigma

:spadfun:`weierstrassSigma`\: (R, R, R) -> R 
  \ ``weierstrassSigma(g2, g3, z)``\  is the Weierstrass Sigma function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-77656965727374726173735a657461:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; weierstrassZeta

:spadfun:`weierstrassZeta`\: (R, R, R) -> R 
  \ ``weierstrassZeta(g2, g3, z)``\  is the Weierstrass Zeta function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7768697474616b65724d:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; whittakerM

:spadfun:`whittakerM`\: (R, R, R) -> R 
  \ ``whittakerM(k, m, z)``\  is the Whittaker \ ``M``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7768697474616b657257:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; whittakerW

:spadfun:`whittakerW`\: (R, R, R) -> R 
  \ ``whittakerW(k, m, z)``\  is the Whittaker \ ``W``\  function.

.. _l4a756c696157534e756d65726963616c5370656369616c46756e6374696f6e73-7a65726e696b6552:

.. index::
   pair: JuliaWSNumericalSpecialFunctions; zernikeR

:spadfun:`zernikeR`\: (R, R, R) -> R 
  \ ``zernikeR(n, m, z)``\  evaluates the Zernike radial polynomial at \ ``z``\ .


