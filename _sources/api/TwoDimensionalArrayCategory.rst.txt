.. index:: TwoDimensionalArrayCategory

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279:

TwoDimensionalArrayCategory(R, Row, Col)
========================================

:viewcode:`array2.spad line 1 <array2.spad#L1>` :editcode:`[edit on github] <array2.spad#L1>`

* R: \ :ref:`Type <l54797065>`\ 

* Row: \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , R)

* Col: \ :ref:`IndexedAggregate <l496e6465786564416767726567617465>`\ (\ :ref:`Integer <l496e7465676572>`\ , R)


TwoDimensionalArrayCategory is a general array category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. The index of the 'first' row may be obtained by calling the function 'minRowIndex'. The index of the 'first' column may be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.


.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-617272617932:

.. index::
   pair: TwoDimensionalArrayCategory; array2

:spadfun:`array2`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R -> % 
  \ ``array2(ll)``\  constructs a 2-dimensional array, the inner list being the rows.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-626c6f636b436f6e636174:

.. index::
   pair: TwoDimensionalArrayCategory; blockConcat

:spadfun:`blockConcat`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % -> % 
  \ ``blockConcat(ll)``\  concatenates arrays row and column wise, building a array from blocks. The order is row major as in \ ``matrix``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-626c6f636b53706c6974:

.. index::
   pair: TwoDimensionalArrayCategory; blockSplit

:spadfun:`blockSplit`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % 
  \ ``blockSplit(a, [n1,...,ni], [m1,...,mi])``\  splits a into multiple subarraus row and column wise, such that element at position \ ``k``\ , \ ``l``\  has \ ``nk``\  rows and \ ``ml``\  columns. Error: if number of rows of a is different than \ ``n1``\  + ... + \ ``ni``\  or number of columns of a is different than \ ``m1``\  + ... + \ ``mj``\ 


.. index::
   pair: TwoDimensionalArrayCategory; blockSplit

:spadfun:`blockSplit`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % 
  \ ``blockSplit(a, n, m)``\  splits a into \ ``n*m``\  subarrays of equal size row and column wise, dividing a into blocks. Error: if number of rows of a is not divisible by \ ``n``\  or number of columns of a is not divisible by \ ``m``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if R has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-636f6c536c696365:

.. index::
   pair: TwoDimensionalArrayCategory; colSlice

:spadfun:`colSlice`\: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``colSlice(m)``\  returns a segment \ ``s``\  such that for \ ``m``\  the access \ ``m``\ (\ ``i``\ , \ ``s``\ ) gives the \ ``i``\ -th row.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-636f6c756d6e:

.. index::
   pair: TwoDimensionalArrayCategory; column

:spadfun:`column`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Col 
  \ ``column(m, j)``\  returns the \ ``j``\ th column of \ ``m``\  error check to determine if index is in proper ranges

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74:

.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``elt(m, i, j)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the array \ ``m``\  error check to determine if indices are in proper ranges


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  \ ``elt(m, i, j, r)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the array \ ``m``\ , if \ ``m``\  has an \ ``i``\ th row and a \ ``j``\ th column, and returns \ ``r``\  otherwise


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, row, colList)``\  returns an 1-by-\ ``n``\  array consisting of elements of \ ``x``\ , where \ ``n = \# colList``\ . If \ ``colList = [j<1>, j<2>, ..., j<n>]``\ , then the \ ``(k, l)``\ th entry of \ ``elt(x, row, colList)``\  is \ ``x(row, j<l>)``\ .


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, row, ls2)``\  is equivalent to \ ``elt(x, row, l2)``\  where \ ``l2``\  is obtained appending expansions of elements of \ ``ls2``\ , but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, rowList, col)``\  returns an \ ``m``\ -by-1 array consisting of elements of \ ``x``\ , where \ ``m = \# rowList``\ . If \ ``rowList = [i<1>, i<2>, ..., i<m>]``\ , then the \ ``(k, l)``\ th entry of \ ``elt(x, rowList, col)``\  is \ ``x(i<k>, col)``\ .


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, rowList, colList)``\  returns an \ ``m``\ -by-\ ``n``\  array consisting of elements of \ ``x``\ , where \ ``m = \# rowList``\  and \ ``n = \# colList``\ . If \ ``rowList = [i<1>, i<2>, ..., i<m>]``\  and \ ``colList = [j<1>, j<2>, ..., j<n>]``\ , then the \ ``(k, l)``\ th entry of \ ``elt(x, rowList, colList)``\  is \ ``x(i<k>, j<l>)``\ .


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, rowList, s)``\  is equivalent to \ ``elt(x, rowList, expand(s))``\  but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, ls1, col)``\  is equivalent to \ ``elt(x, l1, col)``\  where \ ``l1``\  is obtained appending expansions of elements of \ ``ls1``\ , but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, ls1, ls2)``\  is equivalent to \ ``elt(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, ls1, s2)``\  is equivalent to \ ``elt(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, s, colList)``\  is equivalent to \ ``elt(x, expand(s), colList)``\  but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, s1, ls2)``\  is equivalent to \ ``elt(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; elt

:spadfun:`elt`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``elt(x, s1, s2)``\  is equivalent to \ ``elt(x, expand(s1), expand(s2))``\  but should be more convenient and more efficient.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, R, R) -> % if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-66696c6c21:

.. index::
   pair: TwoDimensionalArrayCategory; fill!

:spadfun:`fill!`\: (%, R) -> % 
  \ ``fill!(m, r)``\  fills \ ``m``\  with \ ``r``\ \ ``'s``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a436f6e636174:

.. index::
   pair: TwoDimensionalArrayCategory; horizConcat

:spadfun:`horizConcat`\: (%, %) -> % 
  \ ``horizConcat(x, y)``\  horizontally concatenates two arrays with an equal number of rows. The entries of \ ``y``\  appear to the right of the entries of \ ``x``\ . Error: if the arrays do not have the same number of rows.


.. index::
   pair: TwoDimensionalArrayCategory; horizConcat

:spadfun:`horizConcat`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``horizConcat(l)``\  horizontally concatenates all members of \ ``l``\  Error: if the arrays do not have the same number of rows.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a53706c6974:

.. index::
   pair: TwoDimensionalArrayCategory; horizSplit

:spadfun:`horizSplit`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``horizSplit(a, [n1, n2, ..., ni])``\  splits a into arrays having \ ``n1``\ , ..., \ ``ni``\  columns. Error: if number of columns of a is different than \ ``n1``\  + ... + \ ``ni``\ .


.. index::
   pair: TwoDimensionalArrayCategory; horizSplit

:spadfun:`horizSplit`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``horizSplit(a, n)``\  splits a into \ ``n``\  arrays of equal size column wise. Error: if number of columns of a is not divisible by \ ``n``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if R has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6c6973744f664c69737473:

.. index::
   pair: TwoDimensionalArrayCategory; listOfLists

:spadfun:`listOfLists`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R 
  \ ``listOfLists(m)``\  returns the rows of the array \ ``m``\  as a list of lists.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d617021:

.. index::
   pair: TwoDimensionalArrayCategory; map!

:spadfun:`map!`\: (R -> R, %) -> % 
  \ ``map!(f, a)``\  assign \ ``a(i, j)``\  to \ ``f(a(i, j))``\  for all \ ``i, j``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6170:

.. index::
   pair: TwoDimensionalArrayCategory; map

:spadfun:`map`\: ((R, R) -> R, %, %) -> % 
  \ ``map(f, a, b)``\  returns \ ``c``\ , where \ ``c(i, j) = f(a(i, j), b(i, j))``\  for all \ ``i, j``\ 


.. index::
   pair: TwoDimensionalArrayCategory; map

:spadfun:`map`\: ((R, R) -> R, %, %, R) -> % 
  \ ``map(f, a, b, r)``\  returns \ ``c``\ , where \ ``c(i, j) = f(a(i, j), b(i, j))``\  when both \ ``a(i, j)``\  and \ ``b(i, j)``\  exist; else \ ``c(i, j) = f(r, b(i, j))``\  when \ ``a(i, j)``\  does not exist; else \ ``c(i, j) = f(a(i, j), r)``\  when \ ``b(i, j)``\  does not exist; otherwise \ ``c(i, j) = f(r, r)``\ .


.. index::
   pair: TwoDimensionalArrayCategory; map

:spadfun:`map`\: (R -> R, %) -> % 
  \ ``map(f, a)``\  returns \ ``b``\ , where \ ``b(i, j) = f(a(i, j))``\  for all \ ``i, j``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((R, R) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6178436f6c496e646578:

.. index::
   pair: TwoDimensionalArrayCategory; maxColIndex

:spadfun:`maxColIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxColIndex(m)``\  returns the index of the 'last' column of the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6178526f77496e646578:

.. index::
   pair: TwoDimensionalArrayCategory; maxRowIndex

:spadfun:`maxRowIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxRowIndex(m)``\  returns the index of the 'last' row of the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (R, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d696e436f6c496e646578:

.. index::
   pair: TwoDimensionalArrayCategory; minColIndex

:spadfun:`minColIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minColIndex(m)``\  returns the index of the 'first' column of the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d696e526f77496e646578:

.. index::
   pair: TwoDimensionalArrayCategory; minRowIndex

:spadfun:`minRowIndex`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minRowIndex(m)``\  returns the index of the 'first' row of the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6e636f6c73:

.. index::
   pair: TwoDimensionalArrayCategory; ncols

:spadfun:`ncols`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``ncols(m)``\  returns the number of columns in the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6e6577:

.. index::
   pair: TwoDimensionalArrayCategory; new

:spadfun:`new`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , R) -> % 
  \ ``new(m, n, r)``\  is an \ ``m``\ -by-\ ``n``\  array all of whose entries are \ ``r``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-6e726f7773:

.. index::
   pair: TwoDimensionalArrayCategory; nrows

:spadfun:`nrows`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``nrows(m)``\  returns the number of rows in the array \ ``m``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7061727473:

.. index::
   pair: TwoDimensionalArrayCategory; parts

:spadfun:`parts`\: % -> \ :ref:`List <l4c697374>`\  R 
  \ ``parts(m)``\  returns a list of the elements of \ ``m``\  in row major order

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-71656c74:

.. index::
   pair: TwoDimensionalArrayCategory; qelt

:spadfun:`qelt`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  \ ``qelt(m, i, j)``\  returns the element in the \ ``i``\ th row and \ ``j``\ th column of the array \ ``m``\  NO error check to determine if indices are in proper ranges

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-716e6577:

.. index::
   pair: TwoDimensionalArrayCategory; qnew

:spadfun:`qnew`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``qnew(m, n)``\  is is an \ ``m``\ -by-\ ``n``\  uninitilized array

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-71736574656c7421:

.. index::
   pair: TwoDimensionalArrayCategory; qsetelt!

:spadfun:`qsetelt!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  \ ``qsetelt!(m, i, j, r)``\  sets the element in the \ ``i``\ th row and \ ``j``\ th column of \ ``m``\  to \ ``r``\  NO error check to determine if indices are in proper ranges

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-726f77:

.. index::
   pair: TwoDimensionalArrayCategory; row

:spadfun:`row`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Row 
  \ ``row(m, i)``\  returns the \ ``i``\ th row of \ ``m``\  error check to determine if index is in proper ranges

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-726f77536c696365:

.. index::
   pair: TwoDimensionalArrayCategory; rowSlice

:spadfun:`rowSlice`\: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``rowSlice(m)``\  returns a segment \ ``s``\  such that for \ ``m``\  the access \ ``m``\ (\ ``s``\ , \ ``j``\ ) gives the \ ``j``\ -th column.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-736574436f6c756d6e21:

.. index::
   pair: TwoDimensionalArrayCategory; setColumn!

:spadfun:`setColumn!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , Col) -> % 
  \ ``setColumn!(m, j, v)``\  sets to \ ``j``\ th column of \ ``m``\  to \ ``v``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421:

.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  \ ``setelt!(m, i, j, r)``\  sets the element in the \ ``i``\ th row and \ ``j``\ th column of \ ``m``\  to \ ``r``\  error check to determine if indices are in proper ranges


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, row, colList)``\  assigns to an 1-by-\ ``n``\  selection of the array, where \ ``n = \# colList``\ .


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, row, ls2)``\  is equivalent to \ ``setelt!(x, row, l2)``\  where \ ``l2``\  is obtained appending expansions of elements of \ ``ls2``\ , but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, rowList, col)``\  assigns to an \ ``m``\ -by-1 selection of the array, where \ ``m = \# rowList``\ .


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, rowList, colList, y)``\  destructively alters the array \ ``x``\ . If \ ``y``\  is \ ``m``\ -by-\ ``n``\ , \ ``rowList = [i<1>, i<2>, ..., i<m>]``\  and \ ``colList = [j<1>, j<2>, ..., j<n>]``\ , then \ ``x(i<k>, j<l>)``\  is set to \ ``y(k, l)``\  for \ ``k = 1, ..., m``\  and \ ``l = 1, ..., n``\ .


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, l1, s2)``\  is equivalent to \ ``setelt!(x, l1, expand(s2))``\  but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, ls1, col)``\  is equivalent to \ ``setelt!(x, l1, col)``\  where \ ``l1``\  is obtained appending expansions of elements of \ ``ls1``\ , but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, ls1, ls1)``\  is equivalent to \ ``setelt!(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, ls1, s2)``\  is equivalent to \ ``setelt!(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, s1, l2)``\  is equivalent to \ ``setelt!(x, expand(s1), l2)``\  but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, s1, ls2)``\  is equivalent to \ ``setelt!(x, l1, l2)``\  where \ ``li``\  is obtained appending expansions of elements of lsi, but should be more convenient and more efficient.


.. index::
   pair: TwoDimensionalArrayCategory; setelt!

:spadfun:`setelt!`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setelt!(x, s1, s2)``\  is equivalent to \ ``setelt!(x, expand(s1), expand(s2))``\  but should be more convenient and more efficient.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-736574526f7721:

.. index::
   pair: TwoDimensionalArrayCategory; setRow!

:spadfun:`setRow!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , Row) -> % 
  \ ``setRow!(m, i, v)``\  sets to \ ``i``\ th row of \ ``m``\  to \ ``v``\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7365747375624d617472697821:

.. index::
   pair: TwoDimensionalArrayCategory; setsubMatrix!

:spadfun:`setsubMatrix!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  \ ``setsubMatrix(x, i1, j1, y)``\  destructively alters the array \ ``x``\ . Here \ ``x(i, j)``\  is set to \ ``y(i-i1+1, j-j1+1)``\  for \ ``i = i1, ..., i1-1+nrows y``\  and \ ``j = j1, ..., j1-1+ncols y``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-737175617265546f70:

.. index::
   pair: TwoDimensionalArrayCategory; squareTop

:spadfun:`squareTop`\: % -> % 
  \ ``squareTop(m)``\  returns an \ ``n``\ -by-\ ``n``\  array consisting of the first \ ``n``\  rows of the \ ``m``\ -by-\ ``n``\  array \ ``m``\ . Error: if \ ``m < n``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7375624d6174726978:

.. index::
   pair: TwoDimensionalArrayCategory; subMatrix

:spadfun:`subMatrix`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``subMatrix(x, i1, i2, j1, j2)``\  extracts the submatrix \ ``[x(i, j)]``\  where the index \ ``i``\  ranges from \ ``i1``\  to \ ``i2``\  and the index \ ``j``\  ranges from \ ``j1``\  to \ ``j2``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-73776170436f6c756d6e7321:

.. index::
   pair: TwoDimensionalArrayCategory; swapColumns!

:spadfun:`swapColumns!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``swapColumns!(m, i, j)``\  interchanges the \ ``i``\ th and \ ``j``\ th columns of \ ``m``\ . This destructively alters the array.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-73776170526f777321:

.. index::
   pair: TwoDimensionalArrayCategory; swapRows!

:spadfun:`swapRows!`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``swapRows!(m, i, j)``\  interchanges the \ ``i``\ th and \ ``j``\ th rows of \ ``m``\ . This destructively alters the array.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7472616e73706f7365:

.. index::
   pair: TwoDimensionalArrayCategory; transpose

:spadfun:`transpose`\: % -> % 
  \ ``transpose(m)``\  returns the transpose of the array \ ``m``\ .

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-76657274436f6e636174:

.. index::
   pair: TwoDimensionalArrayCategory; vertConcat

:spadfun:`vertConcat`\: (%, %) -> % 
  \ ``vertConcat(x, y)``\  vertically concatenates two arrays with an equal number of columns. The entries of \ ``y``\  appear below of the entries of \ ``x``\ . Error: if the arrays do not have the same number of columns.


.. index::
   pair: TwoDimensionalArrayCategory; vertConcat

:spadfun:`vertConcat`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``vertConcat(l)``\  vertically concatenates all members of \ ``l``\  Error: if the arrays do not have the same number of columns.

.. _l54776f44696d656e73696f6e616c417272617943617465676f7279-7665727453706c6974:

.. index::
   pair: TwoDimensionalArrayCategory; vertSplit

:spadfun:`vertSplit`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``vertSplit(a, [n1, ..., ni])``\  splits a into arrays having \ ``n1``\ , ..., \ ``ni``\  rows. Error: if number of rows of a is different than \ ``n1+``\  ... + \ ``ni``\ .


.. index::
   pair: TwoDimensionalArrayCategory; vertSplit

:spadfun:`vertSplit`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  \ ``vertSplit(a, n)``\  splits a into \ ``n``\  arrays of equal size row wise. Error: if number of rows of a is not divisible by \ ``n``\ .


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  if R has \ :ref:`BasicType <l426173696354797065>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if R has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  R if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R) if R has \ :ref:`SetCategory <l53657443617465676f7279>`\  and R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`SetCategory <l53657443617465676f7279>`\  if R has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

