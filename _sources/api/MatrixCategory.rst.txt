.. index:: MatrixCategory

.. _l4d617472697843617465676f7279:

MatrixCategory(R, Row, Col)
===========================

:viewcode:`matcat.spad line 63 <matcat.spad#L63>` :editcode:`[edit on github] <matcat.spad#L63>`

* R: \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

* Row: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R

* Col: \ :ref:`FiniteLinearAggregate <l46696e6974654c696e656172416767726567617465>`\  R


\ :ref:`MatrixCategory <l4d617472697843617465676f7279>`\  is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \ :spadfun:`minRowIndex`\ . The index of the 'first' column may be obtained by calling the function \ :spadfun:`minColIndex`\ . The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa.


.. _l4d617472697843617465676f7279-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-2a:

.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (%, %) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``x * y``\  is the product of the matrices \ ``x``\  and \ ``y``\ . Error: if the dimensions are incompatible.


.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (%, Col) -> Col if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``x * c``\  is the product of the matrix \ ``x``\  and the column vector \ ``c``\ . Error: if the dimensions are incompatible.


.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (%, R) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``x * r``\  is the right scalar multiple of the scalar \ ``r``\  and the matrix \ ``x``\ .


.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``n * x``\  is an integer multiple.


.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (R, %) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``r*x``\  is the left scalar multiple of the scalar \ ``r``\  and the matrix \ ``x``\ .


.. index::
   pair: MatrixCategory; *

:spadfun:`\*`\: (Row, %) -> Row if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``r * x``\  is the product of the row vector \ ``r``\  and the matrix \ ``x``\ . Error: if the dimensions are incompatible.

.. _l4d617472697843617465676f7279-2b:

.. index::
   pair: MatrixCategory; +

:spadfun:`+`\: (%, %) -> % 
  \ ``x + y``\  is the sum of the matrices \ ``x``\  and \ ``y``\ . Error: if the dimensions are incompatible.

.. _l4d617472697843617465676f7279-2d:

.. index::
   pair: MatrixCategory; -

:spadfun:`-`\: % -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``-x``\  returns the negative of the matrix \ ``x``\ .


.. index::
   pair: MatrixCategory; -

:spadfun:`-`\: (%, %) -> % if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``x - y``\  is the difference of the matrices \ ``x``\  and \ ``y``\ . Error: if the dimensions are incompatible.

.. _l4d617472697843617465676f7279-2f:

.. index::
   pair: MatrixCategory; /

:spadfun:`/`\: (%, R) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``m/r``\  divides the elements of \ ``m``\  by \ ``r``\ . Error: if \ ``r = 0``\ .

.. _l4d617472697843617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d617472697843617465676f7279-5e:

.. index::
   pair: MatrixCategory; ^

:spadfun:`^`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``m^n``\  computes an integral power of the matrix \ ``m``\ . Error: if matrix is not square or if the matrix is square but not invertible.


.. index::
   pair: MatrixCategory; ^

:spadfun:`^`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`Monoid <l4d6f6e6f6964>`\ 
  \ ``x ^ n``\  computes a non-negative integral power of the matrix \ ``x``\ . Error: if the matrix is not square.

.. _l4d617472697843617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d617472697843617465676f7279-616e746973796d6d65747269633f:

.. index::
   pair: MatrixCategory; antisymmetric?

:spadfun:`antisymmetric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``antisymmetric?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and antisymmetric (i.e. \ ``m[i, j] = -m[j, i]``\  for all \ ``i``\  and \ ``j``\ ) and \ ``false``\  otherwise.

.. _l4d617472697843617465676f7279-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-617272617932:

\ :ref:`array2 <l54776f44696d656e73696f6e616c417272617943617465676f7279-617272617932>`\ \: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-626c6f636b436f6e636174:

\ :ref:`blockConcat <l54776f44696d656e73696f6e616c417272617943617465676f7279-626c6f636b436f6e636174>`\ \: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-626c6f636b53706c6974:

\ :ref:`blockSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-626c6f636b53706c6974>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`blockSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-626c6f636b53706c6974>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: MatrixCategory; coerce

:spadfun:`coerce`\: Col -> % 
  \ ``coerce(col)``\  converts the column \ ``col``\  to a column matrix.

.. _l4d617472697843617465676f7279-636f6c536c696365:

\ :ref:`colSlice <l54776f44696d656e73696f6e616c417272617943617465676f7279-636f6c536c696365>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-636f6c756d6e:

\ :ref:`column <l54776f44696d656e73696f6e616c417272617943617465676f7279-636f6c756d6e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Col 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-636f6c756d6e5370616365:

.. index::
   pair: MatrixCategory; columnSpace

:spadfun:`columnSpace`\: % -> \ :ref:`List <l4c697374>`\  Col if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``columnSpace(m)``\  returns a sublist of columns of the matrix \ ``m``\  forming a basis of its column space

.. _l4d617472697843617465676f7279-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (R, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-64657465726d696e616e74:

.. index::
   pair: MatrixCategory; determinant

:spadfun:`determinant`\: % -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``determinant(m)``\  returns the determinant of the matrix \ ``m``\ . Error: if the matrix is not square.

.. _l4d617472697843617465676f7279-646961676f6e616c3f:

.. index::
   pair: MatrixCategory; diagonal?

:spadfun:`diagonal?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``diagonal?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and diagonal (i.e. all entries of \ ``m``\  not on the diagonal are zero) and \ ``false``\  otherwise.

.. _l4d617472697843617465676f7279-646961676f6e616c4d6174726978:

.. index::
   pair: MatrixCategory; diagonalMatrix

:spadfun:`diagonalMatrix`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``diagonalMatrix([m1, ..., mk])``\  creates a block diagonal matrix \ ``M``\  with block matrices \ *m1*\ , ..., \ *mk*\  down the diagonal, with 0 block matrices elsewhere. More precisely: if \ ``ri := nrows mi``\ , \ ``ci := ncols mi``\ , then \ ``m``\  is an (\ ``r1+``\ ..\ ``+rk``\ ) by (\ ``c1+``\ ..\ ``+ck``\ ) - matrix with entries \ ``m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))``\ , if \ ``(r1+..+r(l-1)) < i <= r1+..+rl``\  and \ ``(c1+..+c(l-1)) < i <= c1+..+cl``\ , \ ``m.i.j``\  = 0 otherwise.


.. index::
   pair: MatrixCategory; diagonalMatrix

:spadfun:`diagonalMatrix`\: \ :ref:`List <l4c697374>`\  R -> % 
  \ ``diagonalMatrix(l)``\  returns a diagonal matrix with the elements of \ ``l``\  on the diagonal.

.. _l4d617472697843617465676f7279-656c74:

\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`elt <l54776f44696d656e73696f6e616c417272617943617465676f7279-656c74>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`Evalable <l4576616c61626c65>`\  R


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  R, \ :ref:`List <l4c697374>`\  R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, R, R) -> % if R has \ :ref:`Evalable <l4576616c61626c65>`\  R
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R)

.. _l4d617472697843617465676f7279-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (R -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-657871756f:

.. index::
   pair: MatrixCategory; exquo

:spadfun:`exquo`\: (%, R) -> Union(%, failed) if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``exquo(m, r)``\  computes the exact quotient of the elements of \ ``m``\  by \ ``r``\ , returning \ ``"failed"``\  if this is not possible.

.. _l4d617472697843617465676f7279-66696c6c21:

\ :ref:`fill! <l54776f44696d656e73696f6e616c417272617943617465676f7279-66696c6c21>`\ \: (%, R) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-68617368:

\ :ref:`hash <l4861736861626c65-68617368>`\ \: % -> \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l4d617472697843617465676f7279-6861736855706461746521:

\ :ref:`hashUpdate! <l4861736861626c65-6861736855706461746521>`\ \: (\ :ref:`HashState <l486173685374617465>`\ , %) -> \ :ref:`HashState <l486173685374617465>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 
  from \ :ref:`Hashable <l4861736861626c65>`\ 

.. _l4d617472697843617465676f7279-686f72697a436f6e636174:

\ :ref:`horizConcat <l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a436f6e636174>`\ \: (%, %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`horizConcat <l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a436f6e636174>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-686f72697a53706c6974:

\ :ref:`horizSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a53706c6974>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`horizSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-686f72697a53706c6974>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-696e7665727365:

.. index::
   pair: MatrixCategory; inverse

:spadfun:`inverse`\: % -> Union(%, failed) if R has \ :ref:`Field <l4669656c64>`\ 
  \ ``inverse(m)``\  returns the inverse of the matrix \ ``m``\ . If the matrix is not invertible, "failed" is returned. Error: if the matrix is not square.

.. _l4d617472697843617465676f7279-6b726f6e65636b65725f70726f6431:

.. index::
   pair: MatrixCategory; kronecker_prod1

:spadfun:`kronecker_prod1`\: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  %, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , Union(R, one)) -> \ :ref:`Void <l566f6964>`\  
  Should be local but conditional.

.. _l4d617472697843617465676f7279-6b726f6e65636b657250726f64756374:

.. index::
   pair: MatrixCategory; kroneckerProduct

:spadfun:`kroneckerProduct`\: (%, %) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``kroneckerProduct(a, b)``\  calculates the Kronecker product of the matrices a and \ ``b``\ . This corresponds to tensor product of corresponding operators.


.. index::
   pair: MatrixCategory; kroneckerProduct

:spadfun:`kroneckerProduct`\: \ :ref:`List <l4c697374>`\  % -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``kroneckerProduct([a1, a2, ..., an])``\  calculates the Kronecker product of the matrices \ ``a1``\ , \ ``a2``\ , ..., an. This corresponds to tensor product of corresponding operators.

.. _l4d617472697843617465676f7279-6b726f6e65636b657253756d:

.. index::
   pair: MatrixCategory; kroneckerSum

:spadfun:`kroneckerSum`\: (%, %) -> % 
  \ ``kroneckerSum(a, b)``\  calculates the Kronecker sum of the matrices a and \ ``b``\ .


.. index::
   pair: MatrixCategory; kroneckerSum

:spadfun:`kroneckerSum`\: \ :ref:`List <l4c697374>`\  % -> % 
  \ ``kroneckerSum([a1, a2, ..., an])``\  calculates the Kronecker sum of the matrices \ ``a1``\ , \ ``a2``\ , ..., an.

.. _l4d617472697843617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4d617472697843617465676f7279-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-6c6973744f664c69737473:

\ :ref:`listOfLists <l54776f44696d656e73696f6e616c417272617943617465676f7279-6c6973744f664c69737473>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d617021:

\ :ref:`map! <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d617021>`\ \: (R -> R, %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d6170:

\ :ref:`map <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6170>`\ \: ((R, R) -> R, %, %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`map <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6170>`\ \: ((R, R) -> R, %, %, R) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`map <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6170>`\ \: (R -> R, %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d6174726978:

.. index::
   pair: MatrixCategory; matrix

:spadfun:`matrix`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R) -> % 
  \ ``matrix(n,m,f)``\  constructs an \ ``n * m``\  matrix with the \ ``(i,j)``\  entry equal to \ ``f(i,j)``\ .


.. index::
   pair: MatrixCategory; matrix

:spadfun:`matrix`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  R -> % 
  \ ``matrix(l)``\  converts the list of lists \ ``l``\  to a matrix, where the list of lists is viewed as a list of the rows of the matrix.

.. _l4d617472697843617465676f7279-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((R, R) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-6d6178436f6c496e646578:

\ :ref:`maxColIndex <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6178436f6c496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d6178526f77496e646578:

\ :ref:`maxRowIndex <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d6178526f77496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (R, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> R if R has \ :ref:`OrderedSet <l4f726465726564536574>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R

.. _l4d617472697843617465676f7279-6d696e436f6c496e646578:

\ :ref:`minColIndex <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d696e436f6c496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d696e6f72646574:

.. index::
   pair: MatrixCategory; minordet

:spadfun:`minordet`\: % -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``minordet(m)``\  computes the determinant of the matrix \ ``m``\  using minors. Error: if the matrix is not square.

.. _l4d617472697843617465676f7279-6d696e526f77496e646578:

\ :ref:`minRowIndex <l54776f44696d656e73696f6e616c417272617943617465676f7279-6d696e526f77496e646578>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-6e636f6c73:

\ :ref:`ncols <l54776f44696d656e73696f6e616c417272617943617465676f7279-6e636f6c73>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6e6577:

\ :ref:`new <l54776f44696d656e73696f6e616c417272617943617465676f7279-6e6577>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , R) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6e726f7773:

\ :ref:`nrows <l54776f44696d656e73696f6e616c417272617943617465676f7279-6e726f7773>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-6e756c6c697479:

.. index::
   pair: MatrixCategory; nullity

:spadfun:`nullity`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullity(m)``\  returns the nullity of the matrix \ ``m``\ . This is the dimension of the null space of the matrix \ ``m``\ .

.. _l4d617472697843617465676f7279-6e756c6c5370616365:

.. index::
   pair: MatrixCategory; nullSpace

:spadfun:`nullSpace`\: % -> \ :ref:`List <l4c697374>`\  Col if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``nullSpace(m)``\  returns a basis for the null space of the matrix \ ``m``\ .

.. _l4d617472697843617465676f7279-7061727473:

\ :ref:`parts <l54776f44696d656e73696f6e616c417272617943617465676f7279-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-506661666669616e:

.. index::
   pair: MatrixCategory; Pfaffian

:spadfun:`Pfaffian`\: % -> R if R has \ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\ 
  \ ``Pfaffian(m)``\  returns the Pfaffian of the matrix \ ``m``\ . Error: if the matrix is not antisymmetric.

.. _l4d617472697843617465676f7279-706f736974697665506f776572:

.. index::
   pair: MatrixCategory; positivePower

:spadfun:`positivePower`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % if R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``positivePower(x, n)``\  computes a positive integral power of the matrix \ ``x``\ . Error: if the matrix is not square.

.. _l4d617472697843617465676f7279-71656c74:

\ :ref:`qelt <l54776f44696d656e73696f6e616c417272617943617465676f7279-71656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-716e6577:

\ :ref:`qnew <l54776f44696d656e73696f6e616c417272617943617465676f7279-716e6577>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-71736574656c7421:

\ :ref:`qsetelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-71736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-72616e6b:

.. index::
   pair: MatrixCategory; rank

:spadfun:`rank`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if R has \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ 
  \ ``rank(m)``\  returns the rank of the matrix \ ``m``\ .

.. _l4d617472697843617465676f7279-726f77:

\ :ref:`row <l54776f44696d656e73696f6e616c417272617943617465676f7279-726f77>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> Row 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-726f77456368656c6f6e:

.. index::
   pair: MatrixCategory; rowEchelon

:spadfun:`rowEchelon`\: % -> % if R has \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 
  \ ``rowEchelon(m)``\  returns the row echelon form of the matrix \ ``m``\ .

.. _l4d617472697843617465676f7279-726f77536c696365:

\ :ref:`rowSlice <l54776f44696d656e73696f6e616c417272617943617465676f7279-726f77536c696365>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-7363616c61724d6174726978:

.. index::
   pair: MatrixCategory; scalarMatrix

:spadfun:`scalarMatrix`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , R) -> % 
  \ ``scalarMatrix(n, r)``\  returns an \ ``n``\ -by-\ ``n``\  matrix with \ ``r``\ \ ``'s``\  on the diagonal and zeroes elsewhere.

.. _l4d617472697843617465676f7279-736574436f6c756d6e21:

\ :ref:`setColumn! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574436f6c756d6e21>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , Col) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-736574656c7421:

\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , R) -> R 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`setelt! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574656c7421>`\ \: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-736574526f7721:

\ :ref:`setRow! <l54776f44696d656e73696f6e616c417272617943617465676f7279-736574526f7721>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , Row) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-7365747375624d617472697821:

\ :ref:`setsubMatrix! <l54776f44696d656e73696f6e616c417272617943617465676f7279-7365747375624d617472697821>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4d617472697843617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l4d617472697843617465676f7279-7371756172653f:

.. index::
   pair: MatrixCategory; square?

:spadfun:`square?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``square?(m)``\  returns \ ``true``\  if \ ``m``\  is a square matrix (i.e. if \ ``m``\  has the same number of rows as columns) and \ ``false``\  otherwise.

.. _l4d617472697843617465676f7279-737175617265546f70:

\ :ref:`squareTop <l54776f44696d656e73696f6e616c417272617943617465676f7279-737175617265546f70>`\ \: % -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-7375624d6174726978:

\ :ref:`subMatrix <l54776f44696d656e73696f6e616c417272617943617465676f7279-7375624d6174726978>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-73776170436f6c756d6e7321:

\ :ref:`swapColumns! <l54776f44696d656e73696f6e616c417272617943617465676f7279-73776170436f6c756d6e7321>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-73776170526f777321:

\ :ref:`swapRows! <l54776f44696d656e73696f6e616c417272617943617465676f7279-73776170526f777321>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-73796d6d65747269633f:

.. index::
   pair: MatrixCategory; symmetric?

:spadfun:`symmetric?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``symmetric?(m)``\  returns \ ``true``\  if the matrix \ ``m``\  is square and symmetric (i.e. \ ``m[i, j] = m[j, i]``\  for all \ ``i``\  and \ ``j``\ ) and \ ``false``\  otherwise.

.. _l4d617472697843617465676f7279-7472616e73706f7365:

\ :ref:`transpose <l54776f44696d656e73696f6e616c417272617943617465676f7279-7472616e73706f7365>`\ \: % -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


.. index::
   pair: MatrixCategory; transpose

:spadfun:`transpose`\: Row -> % 
  \ ``transpose(r)``\  converts the row \ ``r``\  to a row matrix.

.. _l4d617472697843617465676f7279-76657274436f6e636174:

\ :ref:`vertConcat <l54776f44696d656e73696f6e616c417272617943617465676f7279-76657274436f6e636174>`\ \: (%, %) -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`vertConcat <l54776f44696d656e73696f6e616c417272617943617465676f7279-76657274436f6e636174>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-7665727453706c6974:

\ :ref:`vertSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-7665727453706c6974>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)


\ :ref:`vertSplit <l54776f44696d656e73696f6e616c417272617943617465676f7279-7665727453706c6974>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col)

.. _l4d617472697843617465676f7279-7a65726f3f:

.. index::
   pair: MatrixCategory; zero?

:spadfun:`zero?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``zero?(m)``\  returns \ ``true``\  if \ ``m``\  is a zero matrix and \ ``false``\  otherwise.

.. _l4d617472697843617465676f7279-7a65726f:

.. index::
   pair: MatrixCategory; zero

:spadfun:`zero`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``zero(m, n)``\  returns an \ ``m``\ -by-\ ``n``\  zero matrix.


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  if R has \ :ref:`Comparable <l436f6d70617261626c65>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  R if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  

\ :ref:`Hashable <l4861736861626c65>`\  if R has \ :ref:`Hashable <l4861736861626c65>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  R 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (R, R) if R has \ :ref:`Evalable <l4576616c61626c65>`\  R

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\  

\ :ref:`TwoDimensionalArrayCategory <l54776f44696d656e73696f6e616c417272617943617465676f7279>`\ (R, Row, Col) 

