.. index:: Guess

.. _l4775657373:

Guess(F, S, EXPRR, retract, coerce)
===================================

:viewcode:`mantepse.spad line 1292 <mantepse.spad#L1292>` :editcode:`[edit on github] <mantepse.spad#L1292>`

* F: Join(\ :ref:`Field <l4669656c64>`\ , \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ )

* S: \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

* EXPRR: Join(\ :ref:`FunctionSpace <l46756e6374696f6e5370616365>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`CombinatorialOpsCategory <l436f6d62696e61746f7269616c4f707343617465676f7279>`\ , \ :ref:`PartialDifferentialRing <l5061727469616c446966666572656e7469616c52696e67>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) with

    \*\: (%, %) -> %

    /\: (%, %) -> %

    ^\: (%, %) -> %

    denominator\: % -> %

    ground?\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\ 

    numerator\: % -> %

* retract: EXPRR -> F

* coerce: F -> EXPRR


This package implements guessing of sequences. Packages for the most common cases are provided as \ :ref:`GuessInteger <l4775657373496e7465676572>`\ , \ :ref:`GuessPolynomial <l4775657373506f6c796e6f6d69616c>`\ , etc.


.. _l4775657373-616c674465704850:

.. index::
   pair: Guess; algDepHP

:spadfun:`algDepHP`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) 
  \ ``algDepHP(list, options)``\  returns a specification for Hermite-Pade approximation looking for algebraic dependencies

.. _l4775657373-646966664850:

.. index::
   pair: Guess; diffHP

:spadfun:`diffHP`\: \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\  -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) 
  \ ``diffHP options``\  returns a specification for Hermite-Pade approximation with the differential operator


.. index::
   pair: Guess; diffHP

:spadfun:`diffHP`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\  -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``diffHP options``\  returns a specification for Hermite-Pade approximation with the \$\ ``q``\ \$-dilation operator

.. _l4775657373-6775657373:

.. index::
   pair: Guess; guess

:spadfun:`guess`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guess(l, options)``\  applies recursively \ :spadfun:`guessRat`\  to the successive differences and quotients of the list. The given options are used.


.. index::
   pair: Guess; guess

:spadfun:`guess`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\ ((\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR), \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guess(l, guessers, ops)``\  applies recursively the given \ ``guessers``\  to the successive differences if ops contains the symbol guessSum and quotients if ops contains the symbol guessProduct to the list. Default options as described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\  are used.


.. index::
   pair: Guess; guess

:spadfun:`guess`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\ ((\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR), \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guess(l, guessers, ops)``\  applies recursively the given \ ``guessers``\  to the successive differences if ops contains the symbol \ ``guessSum``\  and quotients if ops contains the symbol \ ``guessProduct``\  to the list. The given options are used.


.. index::
   pair: Guess; guess

:spadfun:`guess`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guess l``\  applies recursively \ :spadfun:`guessRat`\  to the successive differences and quotients of the list. Default options as described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\  are used.

.. _l4775657373-6775657373414445:

.. index::
   pair: Guess; guessADE

:spadfun:`guessADE`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessADE(l, options)``\  tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options.


.. index::
   pair: Guess; guessADE

:spadfun:`guessADE`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessADE l``\  tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ .


.. index::
   pair: Guess; guessADE

:spadfun:`guessADE`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessADE q``\  returns a guesser that tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options.

.. _l4775657373-6775657373416c67:

.. index::
   pair: Guess; guessAlg

:spadfun:`guessAlg`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessAlg(l, options)``\  tries to find an algebraic equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessADE`\ (\ ``l``\ , options) with \ ``maxDerivative == 0``\ .


.. index::
   pair: Guess; guessAlg

:spadfun:`guessAlg`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessAlg l``\  tries to find an algebraic equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ . It is equivalent to \ :spadfun:`guessADE`\ (\ ``l``\ , maxDerivative \ ``==``\  0).

.. _l4775657373-6775657373416c67446570:

.. index::
   pair: Guess; guessAlgDep

:spadfun:`guessAlgDep`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessAlgDep ll``\  tries to find an algebraic dependence between several power series whose first Taylor coefficients are given by members of \ ``ll``\ , using the given options.


.. index::
   pair: Guess; guessAlgDep

:spadfun:`guessAlgDep`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessAlgDep ll``\  tries to find an algebraic dependence between several power series whose first Taylor coefficients are given by members of \ ``ll``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ .

.. _l4775657373-677565737342696e526174:

.. index::
   pair: Guess; guessBinRat

:spadfun:`guessBinRat`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessBinRat(l, options)``\  tries to find a function of the form \ ``n+``\ ->binomial(a+b \ ``n``\ , \ ``n``\ ) \ ``r``\ (\ ``n``\ ), where \ ``r``\ (\ ``n``\ ) is a rational function, that fits \ ``l``\ .


.. index::
   pair: Guess; guessBinRat

:spadfun:`guessBinRat`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessBinRat(l, options)``\  tries to find a function of the form \ ``n+``\ ->binomial(a+b \ ``n``\ , \ ``n``\ ) \ ``r``\ (\ ``n``\ ), where \ ``r``\ (\ ``n``\ ) is a rational function, that fits \ ``l``\ .


.. index::
   pair: Guess; guessBinRat

:spadfun:`guessBinRat`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessBinRat q``\  returns a guesser that tries to find a function of the form \ ``n+``\ ->qbinomial(a+b \ ``n``\ , \ ``n``\ ) \ ``r``\ (\ ``n``\ ), where \ ``r``\ (\ ``q^n``\ ) is a \ ``q``\ -rational function, that fits \ ``l``\ .

.. _l4775657373-6775657373457870526174:

.. index::
   pair: Guess; guessExpRat

:spadfun:`guessExpRat`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessExpRat(l, options)``\  tries to find a function of the form \ ``n+``\ ->(a+b \ ``n``\ )\ ``^n``\  \ ``r``\ (\ ``n``\ ), where \ ``r``\ (\ ``n``\ ) is a rational function, that fits \ ``l``\ .


.. index::
   pair: Guess; guessExpRat

:spadfun:`guessExpRat`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessExpRat l``\  tries to find a function of the form \ ``n+``\ ->(a+b \ ``n``\ )\ ``^n``\  \ ``r``\ (\ ``n``\ ), where \ ``r``\ (\ ``n``\ ) is a rational function, that fits \ ``l``\ .


.. index::
   pair: Guess; guessExpRat

:spadfun:`guessExpRat`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessExpRat q``\  returns a guesser that tries to find a function of the form \ ``n+``\ ->(a+b \ ``q^n``\ )\ ``^n``\  \ ``r``\ (\ ``q^n``\ ), where \ ``r``\ (\ ``q^n``\ ) is a \ ``q``\ -rational function, that fits \ ``l``\ .

.. _l4775657373-67756573734645:

.. index::
   pair: Guess; guessFE

:spadfun:`guessFE`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessFE(l, options)``\  tries to find an algebraic substitution equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options.


.. index::
   pair: Guess; guessFE

:spadfun:`guessFE`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessFE l``\  tries to find an algebraic substitution equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ .

.. _l4775657373-6775657373486f6c6f:

.. index::
   pair: Guess; guessHolo

:spadfun:`guessHolo`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessHolo(l, options)``\  tries to find an ordinary linear differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessADE`\ \ ``(l, options)``\  with \ ``maxPower == 1``\ .


.. index::
   pair: Guess; guessHolo

:spadfun:`guessHolo`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessHolo l``\  tries to find an ordinary linear differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ . It is equivalent to \ :spadfun:`guessADE`\ \ ``(l, maxPower == 1)``\ .


.. index::
   pair: Guess; guessHolo

:spadfun:`guessHolo`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessHolo q``\  returns a guesser that tries to find a linear differential equation for a generating function whose first Taylor coefficients are given by \ ``l``\ , using the given options.

.. _l4775657373-677565737350616465:

.. index::
   pair: Guess; guessPade

:spadfun:`guessPade`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessPade(l, options)``\  tries to find a rational function whose first Taylor coefficients are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessADE`\ \ ``(l, maxDerivative == 0, maxPower == 1, allDegrees == true)``\ .


.. index::
   pair: Guess; guessPade

:spadfun:`guessPade`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessPade(l, options)``\  tries to find a rational function whose first Taylor coefficients are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ . It is equivalent to \ :spadfun:`guessADE`\ \ ``(l, options)``\  with \ ``maxDerivative == 0, maxPower == 1, allDegrees == true``\ .

.. _l4775657373-677565737350526563:

.. index::
   pair: Guess; guessPRec

:spadfun:`guessPRec`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessPRec(l, options)``\  tries to find a linear recurrence with polynomial coefficients whose first values are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessRec`\ \ ``(l, options)``\  with \ ``maxPower == 1``\ .


.. index::
   pair: Guess; guessPRec

:spadfun:`guessPRec`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessPRec l``\  tries to find a linear recurrence with polynomial coefficients whose first values are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ . It is equivalent to \ :spadfun:`guessRec`\ \ ``(l, maxPower == 1)``\ .


.. index::
   pair: Guess; guessPRec

:spadfun:`guessPRec`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessPRec q``\  returns a guesser that tries to find a linear \ ``q``\ -recurrence with polynomial coefficients whose first values are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessRec`\ \ ``(q)``\  with \ ``maxPower == 1``\ .

.. _l4775657373-6775657373526174:

.. index::
   pair: Guess; guessRat

:spadfun:`guessRat`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessRat(l, options)``\  tries to find a rational function whose first values are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessRec`\ \ ``(l, maxShift == 0, maxPower == 1, allDegrees == true)``\ .


.. index::
   pair: Guess; guessRat

:spadfun:`guessRat`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessRat l``\  tries to find a rational function whose first values are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ . It is equivalent to \ :spadfun:`guessRec`\ \ ``(l, maxShift == 0, maxPower == 1, allDegrees == true)``\ .


.. index::
   pair: Guess; guessRat

:spadfun:`guessRat`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessRat q``\  returns a guesser that tries to find a \ ``q``\ -rational function whose first values are given by \ ``l``\ , using the given options. It is equivalent to \ :spadfun:`guessRec`\  with \ ``(l, maxShift == 0, maxPower == 1, allDegrees == true)``\ .

.. _l4775657373-6775657373526563:

.. index::
   pair: Guess; guessRec

:spadfun:`guessRec`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessRec(l, options)``\  tries to find an ordinary difference equation whose first values are given by \ ``l``\ , using the given options.


.. index::
   pair: Guess; guessRec

:spadfun:`guessRec`\: \ :ref:`List <l4c697374>`\  F -> \ :ref:`List <l4c697374>`\  EXPRR 
  \ ``guessRec l``\  tries to find an ordinary difference equation whose first values are given by \ ``l``\ , using the default options described in \ :ref:`GuessOptionFunctions0 <l47756573734f7074696f6e46756e6374696f6e7330>`\ .


.. index::
   pair: Guess; guessRec

:spadfun:`guessRec`\: \ :ref:`Symbol <l53796d626f6c>`\  -> (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\ ) -> \ :ref:`List <l4c697374>`\  EXPRR if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``guessRec q``\  returns a guesser that finds an ordinary \ ``q``\ -difference equation whose first values are given by \ ``l``\ , using the given options.

.. _l4775657373-73686966744850:

.. index::
   pair: Guess; shiftHP

:spadfun:`shiftHP`\: \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\  -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) 
  \ ``shiftHP options``\  returns a specification for Hermite-Pade approximation with the shift operator


.. index::
   pair: Guess; shiftHP

:spadfun:`shiftHP`\: \ :ref:`Symbol <l53796d626f6c>`\  -> \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\  -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) if F has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\  and S has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Symbol <l53796d626f6c>`\ 
  \ ``shiftHP options``\  returns a specification for Hermite-Pade approximation with the \$\ ``q``\ \$-shift operator, or, if \ ``maxMixedDegree > 0``\  for mixed shifts

.. _l4775657373-73756273744850:

.. index::
   pair: Guess; substHP

:spadfun:`substHP`\: \ :ref:`List <l4c697374>`\  \ :ref:`GuessOption <l47756573734f7074696f6e>`\  -> Record(degreeStream: \ :ref:`Stream <l53747265616d>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , guessStream: \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F -> \ :ref:`Stream <l53747265616d>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  F, guessModGen: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> (\ :ref:`List <l4c697374>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`U32Vector <l553332566563746f72>`\ , testGen: \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), exprStream: (EXPRR, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Stream <l53747265616d>`\  EXPRR, kind: \ :ref:`Symbol <l53796d626f6c>`\ , qvar: \ :ref:`Symbol <l53796d626f6c>`\ , A: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  S) -> S, AF: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`UnivariateFormalPowerSeries <l556e6976617269617465466f726d616c506f776572536572696573>`\  \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> \ :ref:`SparseMultivariatePolynomial <l5370617273654d756c746976617269617465506f6c796e6f6d69616c>`\ (F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), AX: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Symbol <l53796d626f6c>`\ , EXPRR) -> EXPRR, C: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`List <l4c697374>`\  S) 
  \ ``substHP options``\  returns a specification for Hermite-Pade approximation with the substitution operator


