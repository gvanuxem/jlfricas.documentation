.. index:: JuliaDataFrame

.. _l4a756c6961446174614672616d65:

JuliaDataFrame
==============

:viewcode:`jobject.spad line 1066 <jobject.spad#L1066>` :editcode:`[edit on github] <jobject.spad#L1066>`


Julia DataFrame support


.. _l4a756c6961446174614672616d65-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a756c6961446174614672616d65-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4a756c6961446174614672616d65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4a756c6961446174614672616d65-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 

.. _l4a756c6961446174614672616d65-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-656c74:

\ :ref:`elt <l4a756c69614f626a656374416767726567617465-656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaObjectAggregate <l4a756c69614f626a656374416767726567617465>`\ 


.. index::
   pair: JuliaDataFrame; elt

:spadfun:`elt`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`JuliaVector <l4a756c6961566563746f72>`\  \ :ref:`JuliaObject <l4a756c69614f626a656374>`\  
  \ ``elt(obj, ind)``\  returns the element at index ind of \ ``obj``\ . For example for a Tuple or a vector.


\ :ref:`elt <l4a756c69614f626a656374416767726567617465-656c74>`\ \: (%, \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> % 
  from \ :ref:`JuliaObjectAggregate <l4a756c69614f626a656374416767726567617465>`\ 


.. index::
   pair: JuliaDataFrame; elt

:spadfun:`elt`\: (%, \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> \ :ref:`JuliaVector <l4a756c6961566563746f72>`\  \ :ref:`JuliaObject <l4a756c69614f626a656374>`\  
  \ ``elt(obj, sym)``\  returns the property \ ``sym``\  of \ ``obj``\ . For example, using JuliaObject: \example{ret := jlApply("svd",jobject("rand(4,4)")); ret.U}

.. _l4a756c6961446174614672616d65-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-6a646672616d65:

.. index::
   pair: JuliaDataFrame; jdframe

:spadfun:`jdframe`\: (\ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> % 
  \ ``jdframe(a, ls)``\  returns a data frame from data a and column names \ ``ls``\ .


.. index::
   pair: JuliaDataFrame; jdframe

:spadfun:`jdframe`\: \ :ref:`JuliaFloat64Matrix <l4a756c6961466c6f617436344d6174726978>`\  -> % 
  \ ``jdframe(array)``\  returns an automatically created data frame.

.. _l4a756c6961446174614672616d65-6a6c41626f7574:

\ :ref:`jlAbout <l4a756c69614f626a65637454797065-6a6c41626f7574>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6a6c4170706c79:

\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`jlApply <l4a756c69614f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %, %) -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6a6c4465736372696265:

.. index::
   pair: JuliaDataFrame; jlDescribe

:spadfun:`jlDescribe`\: % -> % 
  \ ``jlDescribe(df)``\  returns basic statistics about \ ``df``\ .

.. _l4a756c6961446174614672616d65-6a6c4964:

\ :ref:`jlId <l4a756c69614f626a65637454797065-6a6c4964>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6a6c526566:

\ :ref:`jlRef <l4a756c69614f626a65637454797065-6a6c526566>`\ \: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6a6c726566:

\ :ref:`jlref <l4a756c69614f626a65637454797065-6a6c726566>`\ \: \ :ref:`String <l537472696e67>`\  -> % 
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6a6c54797065:

\ :ref:`jlType <l4a756c69614f626a65637454797065-6a6c54797065>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4a756c6961446174614672616d65-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-6d6174726978:

.. index::
   pair: JuliaDataFrame; matrix

:spadfun:`matrix`\: % -> \ :ref:`JuliaObject <l4a756c69614f626a656374>`\  
  \ ``matrix(df)``\  returns a copy of the internal DataFrame matrix.

.. _l4a756c6961446174614672616d65-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-6d757461626c653f:

\ :ref:`mutable? <l4a756c69614f626a65637454797065-6d757461626c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-6e6f7468696e673f:

\ :ref:`nothing? <l4a756c69614f626a65637454797065-6e6f7468696e673f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 

.. _l4a756c6961446174614672616d65-71656c74:

\ :ref:`qelt <l4a756c69614f626a656374416767726567617465-71656c74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`JuliaObjectAggregate <l4a756c69614f626a656374416767726567617465>`\ 


.. index::
   pair: JuliaDataFrame; qelt

:spadfun:`qelt`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`JuliaVector <l4a756c6961566563746f72>`\  \ :ref:`JuliaObject <l4a756c69614f626a656374>`\  
  \ ``qelt(obj, ind)``\  returns the element at index ind of \ ``obj``\ . For example for a Tuple or a vector.


\ :ref:`qelt <l4a756c69614f626a656374416767726567617465-71656c74>`\ \: (%, \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> % 
  from \ :ref:`JuliaObjectAggregate <l4a756c69614f626a656374416767726567617465>`\ 


.. index::
   pair: JuliaDataFrame; qelt

:spadfun:`qelt`\: (%, \ :ref:`JuliaSymbol <l4a756c696153796d626f6c>`\ ) -> \ :ref:`JuliaVector <l4a756c6961566563746f72>`\  \ :ref:`JuliaObject <l4a756c69614f626a656374>`\  
  elt(obj, \ ``sym``\ ) returns the property \ ``sym``\  of obj. No checks are done regarding the existence of the \ ``sym``\  property. If it does not exist, Julia will throw an error.

.. _l4a756c6961446174614672616d65-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l4a756c6961446174614672616d65-737472696e67:

\ :ref:`string <l4a756c69614f626a65637454797065-737472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\ 


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`JuliaObjectAggregate <l4a756c69614f626a656374416767726567617465>`\  

\ :ref:`JuliaObjectType <l4a756c69614f626a65637454797065>`\  

\ :ref:`JuliaType <l4a756c696154797065>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

