.. index:: SpecialFunctionCategory

.. _l5370656369616c46756e6374696f6e43617465676f7279:

SpecialFunctionCategory
=======================

:viewcode:`trigcat.spad line 235 <trigcat.spad#L235>` :editcode:`[edit on github] <trigcat.spad#L235>`


Category for the other special functions.


.. _l5370656369616c46756e6374696f6e43617465676f7279-616273:

.. index::
   pair: SpecialFunctionCategory; abs

:spadfun:`abs`\: % -> % 
  \ ``abs(x)``\  returns the absolute value of \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-616972794169:

.. index::
   pair: SpecialFunctionCategory; airyAi

:spadfun:`airyAi`\: % -> % 
  \ ``airyAi(x)``\  is the Airy function \ ``Ai(x)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6169727941695072696d65:

.. index::
   pair: SpecialFunctionCategory; airyAiPrime

:spadfun:`airyAiPrime`\: % -> % 
  \ ``airyAiPrime(x)``\  is the derivative of the Airy function \ ``Ai(x)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-616972794269:

.. index::
   pair: SpecialFunctionCategory; airyBi

:spadfun:`airyBi`\: % -> % 
  \ ``airyBi(x)``\  is the Airy function \ ``Bi(x)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6169727942695072696d65:

.. index::
   pair: SpecialFunctionCategory; airyBiPrime

:spadfun:`airyBiPrime`\: % -> % 
  \ ``airyBiPrime(x)``\  is the derivative of the Airy function \ ``Bi(x)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-616e6765724a:

.. index::
   pair: SpecialFunctionCategory; angerJ

:spadfun:`angerJ`\: (%, %) -> % 
  \ ``angerJ(v, z)``\  is the Anger \ ``J``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-62657373656c49:

.. index::
   pair: SpecialFunctionCategory; besselI

:spadfun:`besselI`\: (%, %) -> % 
  \ ``besselI(v, z)``\  is the modified Bessel function of the first kind.

.. _l5370656369616c46756e6374696f6e43617465676f7279-62657373656c4a:

.. index::
   pair: SpecialFunctionCategory; besselJ

:spadfun:`besselJ`\: (%, %) -> % 
  \ ``besselJ(v, z)``\  is the Bessel function of the first kind.

.. _l5370656369616c46756e6374696f6e43617465676f7279-62657373656c4b:

.. index::
   pair: SpecialFunctionCategory; besselK

:spadfun:`besselK`\: (%, %) -> % 
  \ ``besselK(v, z)``\  is the modified Bessel function of the second kind.

.. _l5370656369616c46756e6374696f6e43617465676f7279-62657373656c59:

.. index::
   pair: SpecialFunctionCategory; besselY

:spadfun:`besselY`\: (%, %) -> % 
  \ ``besselY(v, z)``\  is the Bessel function of the second kind.

.. _l5370656369616c46756e6374696f6e43617465676f7279-42657461:

.. index::
   pair: SpecialFunctionCategory; Beta

:spadfun:`Beta`\: (%, %) -> % 
  \ ``Beta(x, y)``\  is \ ``Gamma(x) * Gamma(y)/Gamma(x+y)``\ .


.. index::
   pair: SpecialFunctionCategory; Beta

:spadfun:`Beta`\: (%, %, %) -> % 
  \ ``Beta(x, a, b)``\  is the incomplete Beta function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6365696c696e67:

.. index::
   pair: SpecialFunctionCategory; ceiling

:spadfun:`ceiling`\: % -> % 
  \ ``ceiling(x)``\  returns the smallest integer above or equal \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-636861726c69657243:

.. index::
   pair: SpecialFunctionCategory; charlierC

:spadfun:`charlierC`\: (%, %, %) -> % 
  \ ``charlierC(n, a, z)``\  is the Charlier polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-636f6e6a7567617465:

.. index::
   pair: SpecialFunctionCategory; conjugate

:spadfun:`conjugate`\: % -> % 
  \ ``conjugate(x)``\  returns the conjugate of \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-646967616d6d61:

.. index::
   pair: SpecialFunctionCategory; digamma

:spadfun:`digamma`\: % -> % 
  \ ``digamma(x)``\  is the logarithmic derivative of \ ``Gamma(x)``\  (often written \ ``psi(x)``\  in the literature).

.. _l5370656369616c46756e6374696f6e43617465676f7279-646972616344656c7461:

.. index::
   pair: SpecialFunctionCategory; diracDelta

:spadfun:`diracDelta`\: % -> % 
  \ ``diracDelta(x)``\  is unit mass at zeros of \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-656c6c697074696345:

.. index::
   pair: SpecialFunctionCategory; ellipticE

:spadfun:`ellipticE`\: % -> % 
  \ ``ellipticE(m)``\  is the complete elliptic integral of the second kind: \ ``ellipticE(m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..1)``\ .


.. index::
   pair: SpecialFunctionCategory; ellipticE

:spadfun:`ellipticE`\: (%, %) -> % 
  \ ``ellipticE(z, m)``\  is the incomplete elliptic integral of the second kind: \ ``ellipticE(z, m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..z)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-656c6c697074696346:

.. index::
   pair: SpecialFunctionCategory; ellipticF

:spadfun:`ellipticF`\: (%, %) -> % 
  \ ``ellipticF(z, m)``\  is the incomplete elliptic integral of the first kind : \ ``ellipticF(z, m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..z)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-656c6c69707469634b:

.. index::
   pair: SpecialFunctionCategory; ellipticK

:spadfun:`ellipticK`\: % -> % 
  \ ``ellipticK(m)``\  is the complete elliptic integral of the first kind: \ ``ellipticK(m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..1)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-656c6c69707469635069:

.. index::
   pair: SpecialFunctionCategory; ellipticPi

:spadfun:`ellipticPi`\: (%, %, %) -> % 
  \ ``ellipticPi(z, n, m)``\  is the incomplete elliptic integral of the third kind: \ ``ellipticPi(z, n, m) = integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))), t = 0..z)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-666c6f6f72:

.. index::
   pair: SpecialFunctionCategory; floor

:spadfun:`floor`\: % -> % 
  \ ``floor(x)``\  returns the largest integer below or equal \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6672616374696f6e50617274:

.. index::
   pair: SpecialFunctionCategory; fractionPart

:spadfun:`fractionPart`\: % -> % 
  \ ``fractionPart(x)``\  returns the fractional part of \ ``x``\ . Note: fractionPart(\ ``x``\ ) = \ ``x``\  - floor(\ ``x``\ ).

.. _l5370656369616c46756e6374696f6e43617465676f7279-47616d6d61:

.. index::
   pair: SpecialFunctionCategory; Gamma

:spadfun:`Gamma`\: % -> % 
  \ ``Gamma(x)``\  is the Euler Gamma function.


.. index::
   pair: SpecialFunctionCategory; Gamma

:spadfun:`Gamma`\: (%, %) -> % 
  \ ``Gamma(a, x)``\  is the incomplete Gamma function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6861686e5f70:

.. index::
   pair: SpecialFunctionCategory; hahn_p

:spadfun:`hahn_p`\: (%, %, %, %, %) -> % 
  \ ``hahn_p(n, a, b, bar_a, bar_b, z)``\  is the continuous Hahn polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6861686e51:

.. index::
   pair: SpecialFunctionCategory; hahnQ

:spadfun:`hahnQ`\: (%, %, %, %, %) -> % 
  \ ``hahnQ(n, a, b, N, z)``\  \ ``s``\  the Hahn polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6861686e52:

.. index::
   pair: SpecialFunctionCategory; hahnR

:spadfun:`hahnR`\: (%, %, %, %, %) -> % 
  \ ``hahnR(n, c, d, N, z)``\  is the dual Hahn polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6861686e53:

.. index::
   pair: SpecialFunctionCategory; hahnS

:spadfun:`hahnS`\: (%, %, %, %, %) -> % 
  \ ``hahnS(n, a, b, c, z)``\  is the continuous dual Hahn polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-68616e6b656c4831:

.. index::
   pair: SpecialFunctionCategory; hankelH1

:spadfun:`hankelH1`\: (%, %) -> % 
  \ ``hankelH1(v, z)``\  is first Hankel function (Bessel function of the third kind).

.. _l5370656369616c46756e6374696f6e43617465676f7279-68616e6b656c4832:

.. index::
   pair: SpecialFunctionCategory; hankelH2

:spadfun:`hankelH2`\: (%, %) -> % 
  \ ``hankelH2(v, z)``\  is the second Hankel function (Bessel function of the third kind).

.. _l5370656369616c46756e6374696f6e43617465676f7279-6865726d69746548:

.. index::
   pair: SpecialFunctionCategory; hermiteH

:spadfun:`hermiteH`\: (%, %) -> % 
  \ ``hermiteH(n, z)``\  is the Hermite polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-687970657267656f6d657472696346:

.. index::
   pair: SpecialFunctionCategory; hypergeometricF

:spadfun:`hypergeometricF`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %, %) -> % if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``hypergeometricF(la, lb, z)``\  is the generalized hypergeometric function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269436e:

.. index::
   pair: SpecialFunctionCategory; jacobiCn

:spadfun:`jacobiCn`\: (%, %) -> % 
  \ ``jacobiCn(z, m)``\  is the Jacobi elliptic \ ``cn``\  function, defined by \ ``jacobiCn(z, m)^2 + jacobiSn(z, m)^2 = 1``\  and \ ``jacobiCn(0, m) = 1``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269446e:

.. index::
   pair: SpecialFunctionCategory; jacobiDn

:spadfun:`jacobiDn`\: (%, %) -> % 
  \ ``jacobiDn(z, m)``\  is the Jacobi elliptic \ ``dn``\  function, defined by \ ``jacobiDn(z, m)^2 + m*jacobiSn(z, m)^2 = 1``\  and \ ``jacobiDn(0, m) = 1``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f626950:

.. index::
   pair: SpecialFunctionCategory; jacobiP

:spadfun:`jacobiP`\: (%, %, %, %) -> % 
  \ ``jacobiP(n, a, b, z)``\  is the Jacobi polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f6269536e:

.. index::
   pair: SpecialFunctionCategory; jacobiSn

:spadfun:`jacobiSn`\: (%, %) -> % 
  \ ``jacobiSn(z, m)``\  is the Jacobi elliptic \ ``sn``\  function, defined by the formula \ ``jacobiSn(ellipticF(z, m), m) = z``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f62695468657461:

.. index::
   pair: SpecialFunctionCategory; jacobiTheta

:spadfun:`jacobiTheta`\: (%, %) -> % 
  \ ``jacobiTheta(z, m)``\  is the Jacobi Theta function in Jacobi notation.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6a61636f62695a657461:

.. index::
   pair: SpecialFunctionCategory; jacobiZeta

:spadfun:`jacobiZeta`\: (%, %) -> % 
  \ ``jacobiZeta(z, m)``\  is the Jacobi elliptic zeta function, defined by \ ``D(jacobiZeta(z, m), z) = jacobiDn(z, m)^2 - ellipticE(m)/ellipticK(m)``\  and \ ``jacobiZeta(0, m) = 0``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e426569:

.. index::
   pair: SpecialFunctionCategory; kelvinBei

:spadfun:`kelvinBei`\: (%, %) -> % 
  \ ``kelvinBei(v, z)``\  is the Kelvin bei function defined by equality \ ``kelvinBei(v, z) = imag(besselJ(v, exp(3*\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e426572:

.. index::
   pair: SpecialFunctionCategory; kelvinBer

:spadfun:`kelvinBer`\: (%, %) -> % 
  \ ``kelvinBer(v, z)``\  is the Kelvin ber function defined by equality \ ``kelvinBer(v, z) = real(besselJ(v, exp(3*\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e4b6569:

.. index::
   pair: SpecialFunctionCategory; kelvinKei

:spadfun:`kelvinKei`\: (%, %) -> % 
  \ ``kelvinKei(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKei(v, z) = imag(exp(-v*\%pi*\%i/2)*besselK(v, exp(\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b656c76696e4b6572:

.. index::
   pair: SpecialFunctionCategory; kelvinKer

:spadfun:`kelvinKer`\: (%, %) -> % 
  \ ``kelvinKer(v, z)``\  is the Kelvin kei function defined by equality \ ``kelvinKer(v, z) = real(exp(-v*\%pi*\%i/2)*besselK(v, exp(\%pi*\%i/4)*z))``\  for \ ``z``\  and \ ``v``\  real.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b7261777463686f756b4b:

.. index::
   pair: SpecialFunctionCategory; krawtchoukK

:spadfun:`krawtchoukK`\: (%, %, %, %) -> % 
  \ ``krawtchoukK(n, p, N, z)``\  is the Krawtchouk polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b756d6d65724d:

.. index::
   pair: SpecialFunctionCategory; kummerM

:spadfun:`kummerM`\: (%, %, %) -> % 
  \ ``kummerM(mu, nu, z)``\  is the Kummer \ ``M``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6b756d6d657255:

.. index::
   pair: SpecialFunctionCategory; kummerU

:spadfun:`kummerU`\: (%, %, %) -> % 
  \ ``kummerU(mu, nu, z)``\  is the Kummer \ ``U``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c616775657272654c:

.. index::
   pair: SpecialFunctionCategory; laguerreL

:spadfun:`laguerreL`\: (%, %, %) -> % 
  \ ``laguerreL(n, a, z)``\  is the Laguerre polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c616d6265727457:

.. index::
   pair: SpecialFunctionCategory; lambertW

:spadfun:`lambertW`\: % -> % 
  \ ``lambertW(z)``\  = \ ``w``\  is the principal branch of the solution to the equation \ ``we^w = z``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c6567656e64726550:

.. index::
   pair: SpecialFunctionCategory; legendreP

:spadfun:`legendreP`\: (%, %, %) -> % 
  \ ``legendreP(nu, mu, z)``\  is the Legendre \ ``P``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c6567656e64726551:

.. index::
   pair: SpecialFunctionCategory; legendreQ

:spadfun:`legendreQ`\: (%, %, %) -> % 
  \ ``legendreQ(nu, mu, z)``\  is the Legendre \ ``Q``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c65726368506869:

.. index::
   pair: SpecialFunctionCategory; lerchPhi

:spadfun:`lerchPhi`\: (%, %, %) -> % 
  \ ``lerchPhi(z, s, a)``\  is the Lerch Phi function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c6f6d6d656c5331:

.. index::
   pair: SpecialFunctionCategory; lommelS1

:spadfun:`lommelS1`\: (%, %, %) -> % 
  \ ``lommelS1(mu, nu, z)``\  is the Lommel \ ``s``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6c6f6d6d656c5332:

.. index::
   pair: SpecialFunctionCategory; lommelS2

:spadfun:`lommelS2`\: (%, %, %) -> % 
  \ ``lommelS2(mu, nu, z)``\  is the Lommel \ ``S``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6d65696a657247:

.. index::
   pair: SpecialFunctionCategory; meijerG

:spadfun:`meijerG`\: (\ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %, \ :ref:`List <l4c697374>`\  %, %) -> % if % has \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 
  \ ``meijerG(la, lb, lc, ld, z)``\  is the meijerG function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6d6569786e65724d:

.. index::
   pair: SpecialFunctionCategory; meixnerM

:spadfun:`meixnerM`\: (%, %, %, %) -> % 
  \ ``meixnerM(n, b, c, z)``\  is the Meixner polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-6d6569786e657250:

.. index::
   pair: SpecialFunctionCategory; meixnerP

:spadfun:`meixnerP`\: (%, %, %, %) -> % 
  \ ``meixnerP(n, phi, lambda, z)``\  is the Meixner–Pollaczek polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-706f6c7967616d6d61:

.. index::
   pair: SpecialFunctionCategory; polygamma

:spadfun:`polygamma`\: (%, %) -> % 
  \ ``polygamma(k, x)``\  is the \ ``k-th``\  derivative of \ ``digamma(x)``\ , (often written \ ``psi(k, x)``\  in the literature).

.. _l5370656369616c46756e6374696f6e43617465676f7279-706f6c796c6f67:

.. index::
   pair: SpecialFunctionCategory; polylog

:spadfun:`polylog`\: (%, %) -> % 
  \ ``polylog(s, x)``\  is the polylogarithm of order \ ``s``\  at \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-726163616852:

.. index::
   pair: SpecialFunctionCategory; racahR

:spadfun:`racahR`\: (%, %, %, %, %, %) -> % 
  \ ``racahR(n, a, b, c, d, z)``\  is the Racah polynomial.

.. _l5370656369616c46756e6374696f6e43617465676f7279-7269656d616e6e5a657461:

.. index::
   pair: SpecialFunctionCategory; riemannZeta

:spadfun:`riemannZeta`\: % -> % 
  \ ``riemannZeta(z)``\  is the Riemann Zeta function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-7369676e:

.. index::
   pair: SpecialFunctionCategory; sign

:spadfun:`sign`\: % -> % 
  \ ``sign(x)``\  returns the sign of \ ``x``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-73747275766548:

.. index::
   pair: SpecialFunctionCategory; struveH

:spadfun:`struveH`\: (%, %) -> % 
  \ ``struveH(v, z)``\  is the Struve \ ``H``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-7374727576654c:

.. index::
   pair: SpecialFunctionCategory; struveL

:spadfun:`struveL`\: (%, %) -> % 
  \ ``struveL(v, z)``\  is the Struve \ ``L``\  function defined by the formula \ ``struveL(v, z) = -\%i^exp(-v*\%pi*\%i/2)*struveH(v, \%i*z)``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-756e697453746570:

.. index::
   pair: SpecialFunctionCategory; unitStep

:spadfun:`unitStep`\: % -> % 
  \ ``unitStep(x)``\  is 0 for \ ``x``\  less than 0, 1 for \ ``x``\  bigger or equal 0.

.. _l5370656369616c46756e6374696f6e43617465676f7279-776562657245:

.. index::
   pair: SpecialFunctionCategory; weberE

:spadfun:`weberE`\: (%, %) -> % 
  \ ``weberE(v, z)``\  is the Weber \ ``E``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-776569657273747261737350:

.. index::
   pair: SpecialFunctionCategory; weierstrassP

:spadfun:`weierstrassP`\: (%, %, %) -> % 
  \ ``weierstrassP(g2, g3, z)``\  is the Weierstrass \ ``P``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-776569657273747261737350496e7665727365:

.. index::
   pair: SpecialFunctionCategory; weierstrassPInverse

:spadfun:`weierstrassPInverse`\: (%, %, %) -> % 
  \ ``weierstrassPInverse(g2, g3, z)``\  is the inverse of Weierstrass \ ``P``\  function, defined by the formula \ ``weierstrassP(g2, g3, weierstrassPInverse(g2, g3, z)) = z``\ .

.. _l5370656369616c46756e6374696f6e43617465676f7279-7765696572737472617373505072696d65:

.. index::
   pair: SpecialFunctionCategory; weierstrassPPrime

:spadfun:`weierstrassPPrime`\: (%, %, %) -> % 
  \ ``weierstrassPPrime(g2, g3, z)``\  is the derivative of Weierstrass \ ``P``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-77656965727374726173735369676d61:

.. index::
   pair: SpecialFunctionCategory; weierstrassSigma

:spadfun:`weierstrassSigma`\: (%, %, %) -> % 
  \ ``weierstrassSigma(g2, g3, z)``\  is the Weierstrass Sigma function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-77656965727374726173735a657461:

.. index::
   pair: SpecialFunctionCategory; weierstrassZeta

:spadfun:`weierstrassZeta`\: (%, %, %) -> % 
  \ ``weierstrassZeta(g2, g3, z)``\  is the Weierstrass Zeta function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-7768697474616b65724d:

.. index::
   pair: SpecialFunctionCategory; whittakerM

:spadfun:`whittakerM`\: (%, %, %) -> % 
  \ ``whittakerM(k, m, z)``\  is the Whittaker \ ``M``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-7768697474616b657257:

.. index::
   pair: SpecialFunctionCategory; whittakerW

:spadfun:`whittakerW`\: (%, %, %) -> % 
  \ ``whittakerW(k, m, z)``\  is the Whittaker \ ``W``\  function.

.. _l5370656369616c46756e6374696f6e43617465676f7279-77696c736f6e57:

.. index::
   pair: SpecialFunctionCategory; wilsonW

:spadfun:`wilsonW`\: (%, %, %, %, %, %) -> % 
  \ ``wilsonW(n, a, b, c, d, z)``\  is the Wilson polynomial.


