.. index:: XDistributedPolynomialFunctions

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73:

XDistributedPolynomialFunctions(VAR, F)
=======================================

:viewcode:`xdpolyf.spad line 5 <xdpolyf.spad#L5>` :editcode:`[edit on github] <xdpolyf.spad#L5>`

* VAR: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* F: \ :ref:`Field <l4669656c64>`\ 


Using the Hankel matrix of a noncommutative polynomial one can determine the rank (Matrices de Hankel by Fliess). The extended Ho-Algorithmus (Fornasini+Marchesini) is used to create a minimal linear representation. Another approach is implemented in NonCommutativeRationalFunctions.


.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-646973706c6179:

.. index::
   pair: XDistributedPolynomialFunctions; display

:spadfun:`display`\: Record(rows: \ :ref:`List <l4c697374>`\  \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VAR, cols: \ :ref:`List <l4c697374>`\  \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VAR, H: \ :ref:`Matrix <l4d6174726978>`\  F) -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``display(sys)``\  prints the Hankel matrix in an extended form with row-indices as column 0 and column-indices as row 0.

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-66696e644e6f6e5a65726f456e747279:

.. index::
   pair: XDistributedPolynomialFunctions; findNonZeroEntry

:spadfun:`findNonZeroEntry`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``findNonZeroEntry(A,i,j)``\  returns the indices [\ ``k``\ ,\ ``l``\ ] with i<=k<=m and j<=l<=n such that A(\ ``k``\ ,\ ``l``\ ) is non-zero and [0,0] otherwise. A is of size \ ``m``\  \ ``x``\  \ ``n``\ .

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-68616e6b656c496e6469636573:

.. index::
   pair: XDistributedPolynomialFunctions; hankelIndices

:spadfun:`hankelIndices`\: \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VAR, F) -> \ :ref:`List <l4c697374>`\  \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VAR 
  \ ``hankelIndices(p)``\  returns a list of all left and right factors of the monomials of a given multivariate noncommutative polynomial. Factorization: \ ``w``\  = u*v

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-68616e6b656c4d6174726978:

.. index::
   pair: XDistributedPolynomialFunctions; hankelMatrix

:spadfun:`hankelMatrix`\: (\ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VAR, F), VAR) -> \ :ref:`Matrix <l4d6174726978>`\  F 
  \ ``hankelMatrix(p,x)``\  returns a matrix with the entries of the coefficients of \ ``p``\  at (\ ``u``\ ,\ ``v``\ ) where the monomials factorizes through \ ``w``\  = u*x*v. This matrix is indexed by all words of the Hankel matrix.


.. index::
   pair: XDistributedPolynomialFunctions; hankelMatrix

:spadfun:`hankelMatrix`\: \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VAR, F) -> \ :ref:`Matrix <l4d6174726978>`\  F 
  \ ``hankelMatrix(p)``\  returns the Hankel matrix \ ``H``\ (\ ``p``\ ) of given polynomial \ ``p``\ , i.e. the entries at (\ ``u``\ ,\ ``v``\ ) are the coefficients of the monomials \ ``w``\  = u*v. Rows and columns are indexed by words.

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-68616e6b656c53797374656d:

.. index::
   pair: XDistributedPolynomialFunctions; hankelSystem

:spadfun:`hankelSystem`\: \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VAR, F) -> Record(rows: \ :ref:`List <l4c697374>`\  \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VAR, cols: \ :ref:`List <l4c697374>`\  \ :ref:`FreeMonoid <l467265654d6f6e6f6964>`\  VAR, H: \ :ref:`Matrix <l4d6174726978>`\  F) 
  \ ``hankelSystem(p)``\  creates a Hankel-matrix for the polynomial \ ``p``\  with respect to the basis of all factors in \ ``p``\ . Row- and column-indices can be different.

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-6d696e696d616c4d6174726978:

.. index::
   pair: XDistributedPolynomialFunctions; minimalMatrix

:spadfun:`minimalMatrix`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Matrix <l4d6174726978>`\  F 
  \ ``minimalMatrix(A,r)``\  returns the minimal (upper-left) submatrix of A such that the rank corresponds to the given.

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-6d696e696d616c526570726573656e746174696f6e:

.. index::
   pair: XDistributedPolynomialFunctions; minimalRepresentation

:spadfun:`minimalRepresentation`\: \ :ref:`XDistributedPolynomial <l584469737472696275746564506f6c796e6f6d69616c>`\ (VAR, F) -> Record(alpha: \ :ref:`Matrix <l4d6174726978>`\  F, mu: \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  F, var: \ :ref:`List <l4c697374>`\  VAR, beta: \ :ref:`Matrix <l4d6174726978>`\  F) 
  \ ``minimalRepresentation(p)``\  returns a minimal representation using the generalized Ho algorithm [Fornasini, 1978] \ ``p``\  = sum_w alpha*mu(\ ``w``\ )*beta*w [Theorem 3.3, Salomaa--Soittola 1978]

.. _l584469737472696275746564506f6c796e6f6d69616c46756e6374696f6e73-7472616e73666f726d6174696f6e4d61747269636573:

.. index::
   pair: XDistributedPolynomialFunctions; transformationMatrices

:spadfun:`transformationMatrices`\: \ :ref:`Matrix <l4d6174726978>`\  F -> \ :ref:`List <l4c697374>`\  \ :ref:`Matrix <l4d6174726978>`\  F 
  \ ``transformationMatrices(A)``\  returns a list of two matrices \ ``P``\  and \ ``Q``\  such that P*A*Q = \ ``J``\  where the upper diagonal block of \ ``J``\  is I_k for \ ``k``\  = rank(A).


