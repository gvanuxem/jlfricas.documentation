.. index:: EuclideanGroebnerBasisPackage

.. _l4575636c696465616e47726f65626e657242617369735061636b616765:

EuclideanGroebnerBasisPackage(Dom, Expon, VarSet, Dpol)
=======================================================

:viewcode:`gbeuclid.spad line 37 <gbeuclid.spad#L37>` :editcode:`[edit on github] <gbeuclid.spad#L37>`

* Dom: \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

* Expon: \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\ 

* VarSet: \ :ref:`OrderedSet <l4f726465726564536574>`\ 

* Dpol: \ :ref:`PolynomialCategory <l506f6c796e6f6d69616c43617465676f7279>`\ (Dom, Expon, VarSet)


\ :ref:`EuclideanGroebnerBasisPackage <l4575636c696465616e47726f65626e657242617369735061636b616765>`\  computes groebner bases for polynomial ideals over euclidean domains. The basic computation provides a distinguished set of generators for these ideals. This basis allows an easy test for membership: the operation \ :spadfun:`euclideanNormalForm`\  returns zero on ideal members. The string "info" and "redcrit" can be given as additional args to provide incremental information during the computation. If "info" is given, a computational summary is given for each \ ``s``\ -polynomial. If "redcrit" is given, the reduced critical pairs are printed. The term ordering is determined by the polynomial type used. Suggested types include \ :ref:`DistributedMultivariatePolynomial <l44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ , \ :ref:`HomogeneousDistributedMultivariatePolynomial <l486f6d6f67656e656f757344697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ , \ :ref:`GeneralDistributedMultivariatePolynomial <l47656e6572616c44697374726962757465644d756c746976617269617465506f6c796e6f6d69616c>`\ .


.. _l4575636c696465616e47726f65626e657242617369735061636b616765-6575636c696465616e47726f65626e6572:

.. index::
   pair: EuclideanGroebnerBasisPackage; euclideanGroebner

:spadfun:`euclideanGroebner`\: (\ :ref:`List <l4c697374>`\  Dpol, \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`List <l4c697374>`\  Dpol 
  \ ``euclideanGroebner(lp, infoflag)``\  computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \ ``lp``\ . During computation, additional information is printed out if infoflag is given as either "info" (for summary information) or "redcrit" (for reduced critical pairs)


.. index::
   pair: EuclideanGroebnerBasisPackage; euclideanGroebner

:spadfun:`euclideanGroebner`\: (\ :ref:`List <l4c697374>`\  Dpol, \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`List <l4c697374>`\  Dpol 
  \ ``euclideanGroebner(lp, "info", "redcrit")``\  computes a groebner basis for a polynomial ideal generated by the list of polynomials \ ``lp``\ . If the second argument is \ ``"info"``\ , a summary is given of the critical pairs. If the third argument is "redcrit", critical pairs are printed.


.. index::
   pair: EuclideanGroebnerBasisPackage; euclideanGroebner

:spadfun:`euclideanGroebner`\: \ :ref:`List <l4c697374>`\  Dpol -> \ :ref:`List <l4c697374>`\  Dpol 
  \ ``euclideanGroebner(lp)``\  computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \ ``lp``\ .

.. _l4575636c696465616e47726f65626e657242617369735061636b616765-6575636c696465616e4e6f726d616c466f726d:

.. index::
   pair: EuclideanGroebnerBasisPackage; euclideanNormalForm

:spadfun:`euclideanNormalForm`\: (Dpol, \ :ref:`List <l4c697374>`\  Dpol) -> Dpol 
  \ ``euclideanNormalForm(poly, gb)``\  reduces the polynomial \ ``poly``\  modulo the precomputed groebner basis \ ``gb``\  giving a canonical representative of the residue class.


