.. index:: UnaryRecursiveAggregate

.. _l556e617279526563757273697665416767726567617465:

UnaryRecursiveAggregate S
=========================

:viewcode:`aggcat.spad line 1296 <aggcat.spad#L1296>` :editcode:`[edit on github] <aggcat.spad#L1296>`

* S: \ :ref:`Type <l54797065>`\ 


A unary-recursive aggregate is an aggregate where nodes may have either 0 or 1 children. This aggregate models, though not precisely, a linked list possibly with a single cycle. A node with one children models a non-empty list, with the \ :spadfun:`value`\  of the list designating the head, or \ :spadfun:`first`\ , of the list, and the child designating the tail, or \ :spadfun:`rest`\ , of the list. Since these aggregates are recursive aggregates, they may be cyclic.


.. _l556e617279526563757273697665416767726567617465-23:

\ :ref:`# <l416767726567617465-23>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l556e617279526563757273697665416767726567617465-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\  or S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l556e617279526563757273697665416767726567617465-616e793f:

\ :ref:`any? <l486f6d6f67656e656f7573416767726567617465-616e793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6368696c643f:

\ :ref:`child? <l526563757273697665416767726567617465-6368696c643f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6368696c6472656e:

\ :ref:`children <l526563757273697665416767726567617465-6368696c6472656e>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l556e617279526563757273697665416767726567617465-636f6e63617421:

.. index::
   pair: UnaryRecursiveAggregate; concat!

:spadfun:`concat!`\: (%, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``concat!(u, v)``\  destructively concatenates \ ``v``\  to the end of \ ``u``\ .


.. index::
   pair: UnaryRecursiveAggregate; concat!

:spadfun:`concat!`\: (%, S) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``concat!(u, x)``\  destructively adds element \ ``x``\  to the end of \ ``u``\ . Note: \ ``concat!(a, x) = concat!(a, [x])``\ .


.. index::
   pair: UnaryRecursiveAggregate; concat!

:spadfun:`concat!`\: \ :ref:`List <l4c697374>`\  % -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``concat!(lu)``\ , where \ ``lu``\  is a list of aggregates \ ``[a, b, ..., c]``\ , returns a single aggregate consisting of the elements of \ ``a``\  followed by those of \ ``b``\  followed ... by the elements of \ ``c``\ . This function may destructively modify the aggregates in \ ``lu``\ .

.. _l556e617279526563757273697665416767726567617465-636f6e636174:

.. index::
   pair: UnaryRecursiveAggregate; concat

:spadfun:`concat`\: (%, %) -> % 
  \ ``concat(u, v)``\  returns an aggregate \ ``w``\  consisting of the elements of \ ``u``\  followed by the elements of \ ``v``\ . Note: \ ``v = rest(w, \#u)``\ .


.. index::
   pair: UnaryRecursiveAggregate; concat

:spadfun:`concat`\: (S, %) -> % 
  \ ``concat(x, u)``\  returns aggregate consisting of \ ``x``\  followed by the elements of \ ``u``\ . Note: if \ ``v = concat(x, u)``\  then \ ``x = first v``\  and \ ``u = rest v``\ .

.. _l556e617279526563757273697665416767726567617465-636f7079:

\ :ref:`copy <l416767726567617465-636f7079>`\ \: % -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-636f756e74:

\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`count <l486f6d6f67656e656f7573416767726567617465-636f756e74>`\ \: (S, %) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6379636c65456e747279:

.. index::
   pair: UnaryRecursiveAggregate; cycleEntry

:spadfun:`cycleEntry`\: % -> % 
  \ ``cycleEntry(u)``\  returns the head of a top-level cycle contained in aggregate \ ``u``\ , or \ ``empty()``\  if none exists.

.. _l556e617279526563757273697665416767726567617465-6379636c654c656e677468:

.. index::
   pair: UnaryRecursiveAggregate; cycleLength

:spadfun:`cycleLength`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``cycleLength(u)``\  returns the length of a top-level cycle contained in aggregate \ ``u``\ , or 0 if \ ``u``\  has no such cycle.

.. _l556e617279526563757273697665416767726567617465-6379636c6553706c697421:

.. index::
   pair: UnaryRecursiveAggregate; cycleSplit!

:spadfun:`cycleSplit!`\: % -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``cycleSplit!(u)``\  splits the aggregate by dropping off the cycle. The value returned is the cycle entry, or empty() if none exists. For example, if \ ``w = concat(u, v)``\  is the cyclic list where \ ``v``\  is the head of the cycle, \ ``cycleSplit!(w)``\  will drop \ ``v``\  off \ ``w``\  thus destructively changing \ ``w``\  to \ ``u``\ , and returning \ ``v``\ .

.. _l556e617279526563757273697665416767726567617465-6379636c655461696c:

.. index::
   pair: UnaryRecursiveAggregate; cycleTail

:spadfun:`cycleTail`\: % -> % 
  \ ``cycleTail(u)``\  returns the last node in the cycle, or empty() if none exists.

.. _l556e617279526563757273697665416767726567617465-6379636c69633f:

\ :ref:`cyclic? <l526563757273697665416767726567617465-6379636c69633f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-64697374616e6365:

\ :ref:`distance <l526563757273697665416767726567617465-64697374616e6365>`\ \: (%, %) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-656c74:

.. index::
   pair: UnaryRecursiveAggregate; elt

:spadfun:`elt`\: (%, first) -> S 
  \ ``elt(u, "first")``\  (also written: \ ``u.first``\ ) is equivalent to first(\ ``u``\ ).


.. index::
   pair: UnaryRecursiveAggregate; elt

:spadfun:`elt`\: (%, last) -> S 
  \ ``elt(u, "last")``\  (also written: \ ``u.last``\ ) is equivalent to last(\ ``u``\ ).


.. index::
   pair: UnaryRecursiveAggregate; elt

:spadfun:`elt`\: (%, rest) -> % 
  \ ``elt(\%, "rest")``\  (also written: \ ``u.rest``\ ) is equivalent to \ ``rest u``\ .


\ :ref:`elt <l526563757273697665416767726567617465-656c74>`\ \: (%, value) -> S 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-656d7074793f:

\ :ref:`empty? <l416767726567617465-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-656d707479:

\ :ref:`empty <l416767726567617465-656d707479>`\ \: () -> % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-65713f:

\ :ref:`eq? <l416767726567617465-65713f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-6576616c:

\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l4576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`Evalable <l4576616c61626c65>`\  S


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, \ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)


\ :ref:`eval <l496e6e65724576616c61626c65-6576616c>`\ \: (%, S, S) -> % if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S)

.. _l556e617279526563757273697665416767726567617465-65766572793f:

\ :ref:`every? <l486f6d6f67656e656f7573416767726567617465-65766572793f>`\ \: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6669727374:

.. index::
   pair: UnaryRecursiveAggregate; first

:spadfun:`first`\: % -> S 
  \ ``first(u)``\  returns the first element of \ ``u``\  (equivalently, the value at the current node).


.. index::
   pair: UnaryRecursiveAggregate; first

:spadfun:`first`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``first(u, n)``\  returns a copy of the first \ ``n``\  elements of \ ``u``\ .

.. _l556e617279526563757273697665416767726567617465-6c617374:

.. index::
   pair: UnaryRecursiveAggregate; last

:spadfun:`last`\: % -> S 
  \ ``last(u)``\  returns the last element of \ ``u``\ . Note: for lists, \ ``last(u) = u.(maxIndex u)``\ .


.. index::
   pair: UnaryRecursiveAggregate; last

:spadfun:`last`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``last(u, n)``\  returns a copy of the last \ ``n``\  nodes of \ ``u``\ . Note: \ ``last(u, n)``\  is a list of \ ``n``\  elements.

.. _l556e617279526563757273697665416767726567617465-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l556e617279526563757273697665416767726567617465-6c6561663f:

\ :ref:`leaf? <l526563757273697665416767726567617465-6c6561663f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6c6561766573:

\ :ref:`leaves <l526563757273697665416767726567617465-6c6561766573>`\ \: % -> \ :ref:`List <l4c697374>`\  S 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6c6573733f:

\ :ref:`less? <l416767726567617465-6c6573733f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-6d617021:

\ :ref:`map! <l486f6d6f67656e656f7573416767726567617465-6d617021>`\ \: (S -> S, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d6170:

\ :ref:`map <l486f6d6f67656e656f7573416767726567617465-6d6170>`\ \: (S -> S, %) -> % 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d6178:

\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S


\ :ref:`max <l486f6d6f67656e656f7573416767726567617465-6d6178>`\ \: ((S, S) -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d656d6265723f:

\ :ref:`member? <l486f6d6f67656e656f7573416767726567617465-6d656d6265723f>`\ \: (S, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d656d62657273:

\ :ref:`members <l486f6d6f67656e656f7573416767726567617465-6d656d62657273>`\ \: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d696e:

\ :ref:`min <l486f6d6f67656e656f7573416767726567617465-6d696e>`\ \: % -> S if S has \ :ref:`OrderedSet <l4f726465726564536574>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6d6f72653f:

\ :ref:`more? <l416767726567617465-6d6f72653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-6e6f64653f:

\ :ref:`node? <l526563757273697665416767726567617465-6e6f64653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`BasicType <l426173696354797065>`\ 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-6e6f646573:

\ :ref:`nodes <l526563757273697665416767726567617465-6e6f646573>`\ \: % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-7061727473:

\ :ref:`parts <l486f6d6f67656e656f7573416767726567617465-7061727473>`\ \: % -> \ :ref:`List <l4c697374>`\  S if % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 
  from \ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-71736574666972737421:

.. index::
   pair: UnaryRecursiveAggregate; qsetfirst!

:spadfun:`qsetfirst!`\: (%, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``qsetfirst!(u, x)``\  destructively changes the first element of \ ``u``\  to \ ``x``\  without checking for errors.

.. _l556e617279526563757273697665416767726567617465-717365747265737421:

.. index::
   pair: UnaryRecursiveAggregate; qsetrest!

:spadfun:`qsetrest!`\: (%, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``qsetrest!(u, v)``\  destructively changes the rest of \ ``u``\  to \ ``v``\  without checking for errors.

.. _l556e617279526563757273697665416767726567617465-72657374:

.. index::
   pair: UnaryRecursiveAggregate; rest

:spadfun:`rest`\: % -> % 
  \ ``rest(u)``\  returns an aggregate consisting of all but the first element of \ ``u``\  (equivalently, the next node of \ ``u``\ ).


.. index::
   pair: UnaryRecursiveAggregate; rest

:spadfun:`rest`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``rest(u, n)``\  returns the \ ``n``\ th node of \ ``u``\ . Note: \ ``rest(u, 0) = u``\ .

.. _l556e617279526563757273697665416767726567617465-73616d706c65:

\ :ref:`sample <l416767726567617465-73616d706c65>`\ \: % 
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-7365636f6e64:

.. index::
   pair: UnaryRecursiveAggregate; second

:spadfun:`second`\: % -> S 
  \ ``second(u)``\  returns the second element of \ ``u``\ . Note: \ ``second(u) = first(rest(u))``\ .

.. _l556e617279526563757273697665416767726567617465-7365746368696c6472656e21:

\ :ref:`setchildren! <l526563757273697665416767726567617465-7365746368696c6472656e21>`\ \: (%, \ :ref:`List <l4c697374>`\  %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-736574656c7421:

.. index::
   pair: UnaryRecursiveAggregate; setelt!

:spadfun:`setelt!`\: (%, first, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setelt!(u, "first", x)``\  (also written: \ ``u.first := x``\ ) is equivalent to \ ``setfirst!(u, x)``\ .


.. index::
   pair: UnaryRecursiveAggregate; setelt!

:spadfun:`setelt!`\: (%, last, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setelt!(u, "last", x)``\  (also written: \ ``u.last := x``\ ) is equivalent to \ ``setlast!(u, x)``\ .


.. index::
   pair: UnaryRecursiveAggregate; setelt!

:spadfun:`setelt!`\: (%, rest, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setelt!(u, "rest", v)``\  (also written: \ ``u.rest := v``\ ) is equivalent to \ ``setrest!(u, v)``\ .


\ :ref:`setelt! <l526563757273697665416767726567617465-736574656c7421>`\ \: (%, value, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-736574666972737421:

.. index::
   pair: UnaryRecursiveAggregate; setfirst!

:spadfun:`setfirst!`\: (%, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setfirst!(u, x)``\  destructively changes the first element of \ ``u``\  to \ ``x``\ . Error if \ ``u``\  is empty.

.. _l556e617279526563757273697665416767726567617465-7365746c61737421:

.. index::
   pair: UnaryRecursiveAggregate; setlast!

:spadfun:`setlast!`\: (%, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setlast!(u, x)``\  destructively changes the last element of \ ``u``\  to \ ``x``\ . Error if \ ``u``\  is empty.

.. _l556e617279526563757273697665416767726567617465-7365747265737421:

.. index::
   pair: UnaryRecursiveAggregate; setrest!

:spadfun:`setrest!`\: (%, %) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``setrest!(u, v)``\  destructively changes the rest of \ ``u``\  to \ ``v``\ . Error if \ ``u``\  is empty.

.. _l556e617279526563757273697665416767726567617465-73657476616c756521:

\ :ref:`setvalue! <l526563757273697665416767726567617465-73657476616c756521>`\ \: (%, S) -> S if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S

.. _l556e617279526563757273697665416767726567617465-73697a653f:

\ :ref:`size? <l416767726567617465-73697a653f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Aggregate <l416767726567617465>`\ 

.. _l556e617279526563757273697665416767726567617465-73706c697421:

.. index::
   pair: UnaryRecursiveAggregate; split!

:spadfun:`split!`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if % has \ :ref:`shallowlyMutable <l7368616c6c6f776c794d757461626c65>`\ 
  \ ``split!(u, n)``\  splits \ ``u``\  into two aggregates: \ ``v = rest(u, n)``\  and \ ``w = first(u, n)``\ , returning \ ``v``\  and setting \ ``u``\  to \ ``w``\ . If \ ``n``\  is 0, split! currently only works for Stream and gives error for List. Note: afterwards \ ``rest(u, n)``\  returns \ ``empty()``\ .

.. _l556e617279526563757273697665416767726567617465-7461696c:

.. index::
   pair: UnaryRecursiveAggregate; tail

:spadfun:`tail`\: % -> % 
  \ ``tail(u)``\  returns the last node of \ ``u``\ . Error if \ ``u``\  is empty.

.. _l556e617279526563757273697665416767726567617465-7468697264:

.. index::
   pair: UnaryRecursiveAggregate; third

:spadfun:`third`\: % -> S 
  \ ``third(u)``\  returns the third element of \ ``u``\ . Note: \ ``third(u) = first(rest(rest(u)))``\ .

.. _l556e617279526563757273697665416767726567617465-76616c7565:

\ :ref:`value <l526563757273697665416767726567617465-76616c7565>`\ \: % -> S 
  from \ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S


\ :ref:`Aggregate <l416767726567617465>`\  

\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\  or S has \ :ref:`BasicType <l426173696354797065>`\  and % has \ :ref:`finiteAggregate <l66696e697465416767726567617465>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

\ :ref:`Evalable <l4576616c61626c65>`\  S if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`HomogeneousAggregate <l486f6d6f67656e656f7573416767726567617465>`\  S 

\ :ref:`InnerEvalable <l496e6e65724576616c61626c65>`\ (S, S) if S has \ :ref:`Evalable <l4576616c61626c65>`\  S and S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`RecursiveAggregate <l526563757273697665416767726567617465>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

