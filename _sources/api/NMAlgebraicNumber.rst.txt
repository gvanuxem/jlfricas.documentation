.. index:: NMAlgebraicNumber

.. _l4e4d416c676562726169634e756d626572:

NMAlgebraicNumber
=================

:viewcode:`jnemo.spad line 207 <jnemo.spad#L207>` :editcode:`[edit on github] <jnemo.spad#L207>`


This domain allows the manipulation of Nemo algebraic numbers, i.e. algebraic closure of rational field, represented by minimal polynomials using the Nemo package for Julia (Calcium based). https://fredrikj.net/calcium/


.. _l4e4d416c676562726169634e756d626572-30:

\ :ref:`0 <l4162656c69616e4d6f6e6f6964-30>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4e4d416c676562726169634e756d626572-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4e4d416c676562726169634e756d626572-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 


\ :ref:`\* <l52696768744d6f64756c65-2a>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


.. index::
   pair: NMAlgebraicNumber; *

:spadfun:`\*`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``x*n``\  is the product of \ ``x``\  by the integer \ ``n``\ .


.. index::
   pair: NMAlgebraicNumber; *

:spadfun:`\*`\: (%, \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ ) -> % 
  \ ``x*i``\  is the multiplication by an rational number.


.. index::
   pair: NMAlgebraicNumber; *

:spadfun:`\*`\: (%, \ :ref:`NMInteger <l4e4d496e7465676572>`\ ) -> % 
  \ ``x*i``\  is the multiplication by an integer.


\ :ref:`\* <l4c6566744d6f64756c65-2a>`\ \: (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`\* <l4162656c69616e47726f7570-2a>`\ \: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`\* <l4a4c4f626a65637452696e67-2a>`\ \: (\ :ref:`NMInteger <l4e4d496e7465676572>`\ , %) -> \ :ref:`JLObject <l4a4c4f626a656374>`\  
  from \ :ref:`JLObjectRing <l4a4c4f626a65637452696e67>`\ 


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


\ :ref:`\* <l4162656c69616e53656d6947726f7570-2a>`\ \: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4e4d416c676562726169634e756d626572-2b:

\ :ref:`+ <l4162656c69616e53656d6947726f7570-2b>`\ \: (%, %) -> % 
  from \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 

.. _l4e4d416c676562726169634e756d626572-2d:

\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: % -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 


\ :ref:`- <l4162656c69616e47726f7570-2d>`\ \: (%, %) -> % 
  from \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

.. _l4e4d416c676562726169634e756d626572-2f:

\ :ref:`/ <l4669656c64-2f>`\ \: (%, %) -> % 
  from \ :ref:`Field <l4669656c64>`\ 

.. _l4e4d416c676562726169634e756d626572-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4e4d416c676562726169634e756d626572-5e:

.. index::
   pair: NMAlgebraicNumber; ^

:spadfun:`^`\: (%, %) -> % 
  \ ``a^b``\  returns the value of a raised to power \ ``b``\ .


\ :ref:`^ <l5261646963616c43617465676f7279-5e>`\ \: (%, \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 


\ :ref:`^ <l4469766973696f6e52696e67-5e>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 


\ :ref:`^ <l4d61676d6157697468556e6974-5e>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4e4d416c676562726169634e756d626572-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4e4d416c676562726169634e756d626572-61627332:

.. index::
   pair: NMAlgebraicNumber; abs2

:spadfun:`abs2`\: % -> % 
  \ ``abs2(a)``\  returns the squared absolute value of a.

.. _l4e4d416c676562726169634e756d626572-616273:

.. index::
   pair: NMAlgebraicNumber; abs

:spadfun:`abs`\: % -> % 
  \ ``abs(a)``\  returns the absolute value of a.

.. _l4e4d416c676562726169634e756d626572-61636f737069:

.. index::
   pair: NMAlgebraicNumber; acospi

:spadfun:`acospi`\: % -> % 
  \ ``acospi(x)``\  returns acos(\ ``x``\ )/\%\ ``pi``\ 

.. _l4e4d416c676562726169634e756d626572-616c67656272616963496e74656765723f:

.. index::
   pair: NMAlgebraicNumber; algebraicInteger?

:spadfun:`algebraicInteger?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``algebraicInteger?(a)``\  tests whether or not a is an algebraic integer.

.. _l4e4d416c676562726169634e756d626572-616e6e6968696c6174653f:

\ :ref:`annihilate? <l526e67-616e6e6968696c6174653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Rng <l526e67>`\ 

.. _l4e4d416c676562726169634e756d626572-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6173696e7069:

.. index::
   pair: NMAlgebraicNumber; asinpi

:spadfun:`asinpi`\: % -> % 
  \ ``asinpi(x)``\  returns asin(\ ``x``\ )/\%\ ``pi``\ 

.. _l4e4d416c676562726169634e756d626572-6173736f6369617465733f:

\ :ref:`associates? <l456e7469726552696e67-6173736f6369617465733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6173736f636961746f72:

\ :ref:`associator <l4e6f6e4173736f63696174697665526e67-6173736f636961746f72>`\ \: (%, %, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6174616e7069:

.. index::
   pair: NMAlgebraicNumber; atanpi

:spadfun:`atanpi`\: % -> % 
  \ ``atanpi(x)``\  returns atan(\ ``x``\ )/\%\ ``pi``\ 

.. _l4e4d416c676562726169634e756d626572-6365696c696e67:

.. index::
   pair: NMAlgebraicNumber; ceiling

:spadfun:`ceiling`\: % -> % 
  \ ``ceiling(a)``\  returns the smallest integer above or equal to a.

.. _l4e4d416c676562726169634e756d626572-6368617261637465726973746963:

\ :ref:`characteristic <l4e6f6e4173736f6369617469766552696e67-6368617261637465726973746963>`\ \: () -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-636f65726365:

\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: % -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  %


.. index::
   pair: NMAlgebraicNumber; coerce

:spadfun:`coerce`\: % -> \ :ref:`AlgebraicNumber <l416c676562726169634e756d626572>`\  
  \ ``coerce(nan)``\  coerces \ ``nan``\  to AlgebraicNumber using the root of the minimal polynomial.


\ :ref:`coerce <l4a4c4f626a65637454797065-636f65726365>`\ \: % -> \ :ref:`JLObject <l4a4c4f626a656374>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


\ :ref:`coerce <l416c6765627261-636f65726365>`\ \: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`coerce <l4e6f6e4173736f6369617469766552696e67-636f65726365>`\ \: \ :ref:`Integer <l496e7465676572>`\  -> % 
  from \ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 


\ :ref:`coerce <l436f65726369626c6546726f6d-636f65726365>`\ \: \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  from \ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 

.. _l4e4d416c676562726169634e756d626572-636f6d6d757461746f72:

\ :ref:`commutator <l4e6f6e4173736f63696174697665526e67-636f6d6d757461746f72>`\ \: (%, %) -> % 
  from \ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\ 

.. _l4e4d416c676562726169634e756d626572-636f6e6a7567617465:

.. index::
   pair: NMAlgebraicNumber; conjugate

:spadfun:`conjugate`\: % -> % 
  \ ``conjugate(a)``\  returns the complex conjugate of a.

.. _l4e4d416c676562726169634e756d626572-636f6e6a756761746573:

.. index::
   pair: NMAlgebraicNumber; conjugates

:spadfun:`conjugates`\: % -> \ :ref:`JLVector <l4a4c566563746f72>`\  % 
  \ ``conjugates(a)``\  returns all the roots of a.

.. _l4e4d416c676562726169634e756d626572-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`NMComplexField <l4e4d436f6d706c65784669656c64>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`NMComplexField <l4e4d436f6d706c65784669656c64>`\ 


\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-636f737069:

.. index::
   pair: NMAlgebraicNumber; cospi

:spadfun:`cospi`\: % -> % 
  \ ``cospi(x)``\  returns cos(\%pi*x).

.. _l4e4d416c676562726169634e756d626572-6372616e646f6d:

.. index::
   pair: NMAlgebraicNumber; crandom

:spadfun:`crandom`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``crandom(deg, bits)``\  returns a random algebraic number (complex) of degree up to \ ``deg``\  and coefficients size up to bits. Requires at least degree 2.

.. _l4e4d416c676562726169634e756d626572-637369676e:

.. index::
   pair: NMAlgebraicNumber; csign

:spadfun:`csign`\: % -> % 
  \ ``csign(a)``\  returns an extension of the real sign function equivalent to a/sqrt(\ ``a^2``\ ).

.. _l4e4d416c676562726169634e756d626572-44:

\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: % -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`D <l446966666572656e7469616c52696e67-44>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-646567726565:

.. index::
   pair: NMAlgebraicNumber; degree

:spadfun:`degree`\: % -> \ :ref:`JLInt64 <l4a4c496e743634>`\  
  \ ``degree(a)``\  returns the degree of the minimal polynomial of a.

.. _l4e4d416c676562726169634e756d626572-64656e6f6d696e61746f72:

.. index::
   pair: NMAlgebraicNumber; denominator

:spadfun:`denominator`\: % -> \ :ref:`NMInteger <l4e4d496e7465676572>`\  
  \ ``denominator(anum)``\  returns the denominator of \ ``anum``\ , i.e. the leading coefficient of the minimal polynomial of a.

.. _l4e4d416c676562726169634e756d626572-646966666572656e7469617465:

\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: % -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 


\ :ref:`differentiate <l446966666572656e7469616c52696e67-646966666572656e7469617465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-646976696465:

\ :ref:`divide <l4575636c696465616e446f6d61696e-646976696465>`\ \: (%, %) -> Record(quotient: %, remainder: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-657175616c3f:

\ :ref:`equal? <l4e4d52696e67-657175616c3f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`NMRing <l4e4d52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6575636c696465616e53697a65:

\ :ref:`euclideanSize <l4575636c696465616e446f6d61696e-6575636c696465616e53697a65>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-65786163743f:

\ :ref:`exact? <l4e4d52696e67-65786163743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`NMRing <l4e4d52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6578616374446976696465:

\ :ref:`exactDivide <l4e4d52696e67-6578616374446976696465>`\ \: (%, %) -> % 
  from \ :ref:`NMRing <l4e4d52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-657870506949:

.. index::
   pair: NMAlgebraicNumber; expPiI

:spadfun:`expPiI`\: % -> % 
  \ ``expPiI(a)``\  returns exp(\%pi*\%i*a).

.. _l4e4d416c676562726169634e756d626572-65787072657373496465616c4d656d626572:

\ :ref:`expressIdealMember <l5072696e636970616c496465616c446f6d61696e-65787072657373496465616c4d656d626572>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-657871756f:

\ :ref:`exquo <l456e7469726552696e67-657871756f>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-657874656e6465644575636c696465616e:

\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %) -> Record(coef1: %, coef2: %, generator: %) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 


\ :ref:`extendedEuclidean <l4575636c696465616e446f6d61696e-657874656e6465644575636c696465616e>`\ \: (%, %, %) -> Union(Record(coef1: %, coef2: %), failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-666163746f72:

\ :ref:`factor <l556e69717565466163746f72697a6174696f6e446f6d61696e-666163746f72>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-666163746f72506f6c796e6f6d69616c:

\ :ref:`factorPolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f72506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4e4d416c676562726169634e756d626572-666163746f7253717561726546726565506f6c796e6f6d69616c:

\ :ref:`factorSquareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-666163746f7253717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4e4d416c676562726169634e756d626572-666c6f6f72:

.. index::
   pair: NMAlgebraicNumber; floor

:spadfun:`floor`\: % -> % 
  \ ``floor(a)``\  returns the largest integer below or equal ot a.

.. _l4e4d416c676562726169634e756d626572-676364:

\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`gcd <l476364446f6d61696e-676364>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-676364506f6c796e6f6d69616c:

\ :ref:`gcdPolynomial <l476364446f6d61696e-676364506f6c796e6f6d69616c>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-686569676874:

.. index::
   pair: NMAlgebraicNumber; height

:spadfun:`height`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``height(a)``\  returns the height of a.

.. _l4e4d416c676562726169634e756d626572-68656967687442697473:

.. index::
   pair: NMAlgebraicNumber; heightBits

:spadfun:`heightBits`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``heightBits(a)``\  returns the height of a as a number of bits.

.. _l4e4d416c676562726169634e756d626572-696d6167:

.. index::
   pair: NMAlgebraicNumber; imag

:spadfun:`imag`\: % -> % 
  \ ``imag(x)``\  returns imaginary part of \ ``x``\ .

.. _l4e4d416c676562726169634e756d626572-696e74656765723f:

.. index::
   pair: NMAlgebraicNumber; integer?

:spadfun:`integer?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``integer?(x)``\  tests whether or not \ ``x``\  is an integer.

.. _l4e4d416c676562726169634e756d626572-696e76:

\ :ref:`inv <l4469766973696f6e52696e67-696e76>`\ \: % -> % 
  from \ :ref:`DivisionRing <l4469766973696f6e52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c41626f7574:

\ :ref:`jlAbout <l4a4c4f626a65637454797065-6a6c41626f7574>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c4170706c79:

\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 


\ :ref:`jlApply <l4a4c4f626a65637454797065-6a6c4170706c79>`\ \: (\ :ref:`String <l537472696e67>`\ , %, %, %, %, %) -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c446973706c6179:

\ :ref:`jlDisplay <l4a4c4f626a65637454797065-6a6c446973706c6179>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c44756d70:

\ :ref:`jlDump <l4a4c4f626a65637454797065-6a6c44756d70>`\ \: \ :ref:`JLObject <l4a4c4f626a656374>`\  -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c4964:

\ :ref:`jlId <l4a4c4f626a65637454797065-6a6c4964>`\ \: % -> \ :ref:`JLInt64 <l4a4c496e743634>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c4e4d52696e67:

\ :ref:`jlNMRing <l4e4d52696e67-6a6c4e4d52696e67>`\ \: () -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`NMRing <l4e4d52696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c4f626a656374:

\ :ref:`jlObject <l4a4c4f626a65637454797065-6a6c4f626a656374>`\ \: () -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c526566:

\ :ref:`jlRef <l4a4c4f626a65637454797065-6a6c526566>`\ \: % -> \ :ref:`SExpression <l5345787072657373696f6e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c726566:

\ :ref:`jlref <l4a4c4f626a65637454797065-6a6c726566>`\ \: \ :ref:`String <l537472696e67>`\  -> % 
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6c54797065:

\ :ref:`jlType <l4a4c4f626a65637454797065-6a6c54797065>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6a6e616e:

.. index::
   pair: NMAlgebraicNumber; jnan

:spadfun:`jnan`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``jnan(q)``\  returns \ ``q``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; jnan

:spadfun:`jnan`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``jnan(x)``\  returns \ ``x``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; jnan

:spadfun:`jnan`\: \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  \ ``jnan(q)``\  returns \ ``q``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; jnan

:spadfun:`jnan`\: \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  \ ``jnan(x)``\  returns \ ``x``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; jnan

:spadfun:`jnan`\: \ :ref:`String <l537472696e67>`\  -> % 
  \ ``jnan(str)``\  evaluates \ ``str``\  in Julia that returns a NMAlgebraicNumber.

.. _l4e4d416c676562726169634e756d626572-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4e4d416c676562726169634e756d626572-6c636d:

\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: (%, %) -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 


\ :ref:`lcm <l476364446f6d61696e-6c636d>`\ \: \ :ref:`List <l4c697374>`\  % -> % 
  from \ :ref:`GcdDomain <l476364446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-6c636d436f6566:

\ :ref:`lcmCoef <l4c6566744f726552696e67-6c636d436f6566>`\ \: (%, %) -> Record(llcm_res: %, coeff1: %, coeff2: %) 
  from \ :ref:`LeftOreRing <l4c6566744f726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4e4d416c676562726169634e756d626572-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4e4d416c676562726169634e756d626572-6c6f67506949:

.. index::
   pair: NMAlgebraicNumber; logPiI

:spadfun:`logPiI`\: % -> % 
  \ ``logPiI(a)``\  returns log(a)/(\%pi*\%\ ``i``\ ).

.. _l4e4d416c676562726169634e756d626572-6d696e696d616c506f6c796e6f6d69616c:

.. index::
   pair: NMAlgebraicNumber; minimalPolynomial

:spadfun:`minimalPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  \ ``minimalPolynomial(an)``\  returns the minimal polynomial of \ ``an``\  over algebraic numbers.


.. index::
   pair: NMAlgebraicNumber; minimalPolynomial

:spadfun:`minimalPolynomial`\: % -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``minimalPolynomial(an)``\  returns the minimal polynomial of \ ``an``\ .

.. _l4e4d416c676562726169634e756d626572-6d756c74694575636c696465616e:

\ :ref:`multiEuclidean <l4575636c696465616e446f6d61696e-6d756c74694575636c696465616e>`\ \: (\ :ref:`List <l4c697374>`\  %, %) -> Union(\ :ref:`List <l4c697374>`\  %, failed) 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-6d757461626c653f:

\ :ref:`mutable? <l4a4c4f626a65637454797065-6d757461626c653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6e6f7468696e673f:

\ :ref:`nothing? <l4a4c4f626a65637454797065-6e6f7468696e673f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\ 

.. _l4e4d416c676562726169634e756d626572-6e7468526f6f74:

\ :ref:`nthRoot <l5261646963616c43617465676f7279-6e7468526f6f74>`\ \: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l4e4d416c676562726169634e756d626572-6e756d657261746f72:

.. index::
   pair: NMAlgebraicNumber; numerator

:spadfun:`numerator`\: % -> % 
  \ ``numerator(anum)``\  returns \ ``anum``\  multiplied by its denominator i.e. an algebraic integer.

.. _l4e4d416c676562726169634e756d626572-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4e4d416c676562726169634e756d626572-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4e4d416c676562726169634e756d626572-706c656e617279506f776572:

\ :ref:`plenaryPower <l4e6f6e4173736f63696174697665416c6765627261-706c656e617279506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  %

.. _l4e4d416c676562726169634e756d626572-7072696d653f:

\ :ref:`prime? <l556e69717565466163746f72697a6174696f6e446f6d61696e-7072696d653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-7072696e636970616c496465616c:

\ :ref:`principalIdeal <l5072696e636970616c496465616c446f6d61696e-7072696e636970616c496465616c>`\ \: \ :ref:`List <l4c697374>`\  % -> Record(coef: \ :ref:`List <l4c697374>`\  %, generator: %) 
  from \ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-5151626172:

.. index::
   pair: NMAlgebraicNumber; QQbar

:spadfun:`QQbar`\: \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  jnan(\ ``q``\ ) returns \ ``q``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; QQbar

:spadfun:`QQbar`\: \ :ref:`Integer <l496e7465676572>`\  -> % 
  jnan(\ ``x``\ ) returns \ ``x``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; QQbar

:spadfun:`QQbar`\: \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  jnan(\ ``q``\ ) returns \ ``q``\  as a NMAlgebraicNumber.


.. index::
   pair: NMAlgebraicNumber; QQbar

:spadfun:`QQbar`\: \ :ref:`NMInteger <l4e4d496e7465676572>`\  -> % 
  jnan(\ ``x``\ ) returns \ ``x``\  as a NMAlgebraicNumber.

.. _l4e4d416c676562726169634e756d626572-71756f:

\ :ref:`quo <l4575636c696465616e446f6d61696e-71756f>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-72616e646f6d:

.. index::
   pair: NMAlgebraicNumber; random

:spadfun:`random`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``random(deg, bits)``\  returns a random algebraic number (real) of degree up to \ ``deg``\  and coefficients size up to bits.

.. _l4e4d416c676562726169634e756d626572-726174696f6e616c3f:

.. index::
   pair: NMAlgebraicNumber; rational?

:spadfun:`rational?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``rational?(x)``\  tests whether or not \ ``x``\  is a rational number.

.. _l4e4d416c676562726169634e756d626572-7265616c3f:

.. index::
   pair: NMAlgebraicNumber; real?

:spadfun:`real?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``real?(x)``\  tests whether or not \ ``x``\  is a real number.

.. _l4e4d416c676562726169634e756d626572-7265616c:

.. index::
   pair: NMAlgebraicNumber; real

:spadfun:`real`\: % -> % 
  \ ``real(x)``\  returns real part of \ ``x``\ .

.. _l4e4d416c676562726169634e756d626572-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4e4d416c676562726169634e756d626572-72656d:

\ :ref:`rem <l4575636c696465616e446f6d61696e-72656d>`\ \: (%, %) -> % 
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 


\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> \ :ref:`NMInteger <l4e4d496e7465676572>`\  
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 

.. _l4e4d416c676562726169634e756d626572-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`Integer <l496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 


\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(\ :ref:`NMInteger <l4e4d496e7465676572>`\ , failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\ 

.. _l4e4d416c676562726169634e756d626572-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4e4d416c676562726169634e756d626572-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l4e4d416c676562726169634e756d626572-726f6f744f66:

\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f744f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4e4d416c676562726169634e756d626572-726f6f744f66556e6974793f:

.. index::
   pair: NMAlgebraicNumber; rootOfUnity?

:spadfun:`rootOfUnity?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``rootOfUnity?(x)``\  tests whether or not \ ``x``\  is a root of unity.

.. _l4e4d416c676562726169634e756d626572-726f6f744f66556e697479:

.. index::
   pair: NMAlgebraicNumber; rootOfUnity

:spadfun:`rootOfUnity`\: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``rootOfUnity(n,k)``\ Return the root of unity exp(2*\%pi*\%i*k/n).


.. index::
   pair: NMAlgebraicNumber; rootOfUnity

:spadfun:`rootOfUnity`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> % 
  \ ``rootOfUnity(n)``\ Return the root of unity exp(2*\%pi*\%i/n).

.. _l4e4d416c676562726169634e756d626572-726f6f74734f66:

\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`rootsOf <l416c67656272616963616c6c79436c6f7365644669656c64-726f6f74734f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4e4d416c676562726169634e756d626572-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4e4d416c676562726169634e756d626572-7369676e:

.. index::
   pair: NMAlgebraicNumber; sign

:spadfun:`sign`\: % -> % 
  \ ``sign(a)``\  returns the complex sign of a.

.. _l4e4d416c676562726169634e756d626572-7369676e496d6167:

.. index::
   pair: NMAlgebraicNumber; signImag

:spadfun:`signImag`\: % -> % 
  \ ``signImag(a)``\  returns the sign of the imaginary part.

.. _l4e4d416c676562726169634e756d626572-7369676e5265616c:

.. index::
   pair: NMAlgebraicNumber; signReal

:spadfun:`signReal`\: % -> % 
  \ ``signReal(a)``\  returns the sign of the real part.

.. _l4e4d416c676562726169634e756d626572-73696e7069:

.. index::
   pair: NMAlgebraicNumber; sinpi

:spadfun:`sinpi`\: % -> % 
  \ ``sinpi(x)``\  returns sin(\%pi*x).

.. _l4e4d416c676562726169634e756d626572-73697a654c6573733f:

\ :ref:`sizeLess? <l4575636c696465616e446f6d61696e-73697a654c6573733f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

\ :ref:`solveLinearPolynomialEquation <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e>`\ \: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, failed) 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4e4d416c676562726169634e756d626572-73717274:

\ :ref:`sqrt <l5261646963616c43617465676f7279-73717274>`\ \: % -> % 
  from \ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\ 

.. _l4e4d416c676562726169634e756d626572-73717561726546726565:

\ :ref:`squareFree <l556e69717565466163746f72697a6174696f6e446f6d61696e-73717561726546726565>`\ \: % -> \ :ref:`Factored <l466163746f726564>`\  % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-7371756172654672656550617274:

\ :ref:`squareFreePart <l556e69717565466163746f72697a6174696f6e446f6d61696e-7371756172654672656550617274>`\ \: % -> % 
  from \ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\ 

.. _l4e4d416c676562726169634e756d626572-73717561726546726565506f6c796e6f6d69616c:

\ :ref:`squareFreePolynomial <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974-73717561726546726565506f6c796e6f6d69616c>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`Factored <l466163746f726564>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % 
  from \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ 

.. _l4e4d416c676562726169634e756d626572-737472696e67:

\ :ref:`string <l4a4c54797065-737472696e67>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`JLType <l4a4c54797065>`\ 

.. _l4e4d416c676562726169634e756d626572-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l4e4d416c676562726169634e756d626572-74616e7069:

.. index::
   pair: NMAlgebraicNumber; tanpi

:spadfun:`tanpi`\: % -> % 
  \ ``tanpi(x)``\  returns tan(\%pi*x).

.. _l4e4d416c676562726169634e756d626572-756e69743f:

\ :ref:`unit? <l456e7469726552696e67-756e69743f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-756e697443616e6f6e6963616c:

\ :ref:`unitCanonical <l456e7469726552696e67-756e697443616e6f6e6963616c>`\ \: % -> % 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-756e69744e6f726d616c:

\ :ref:`unitNormal <l456e7469726552696e67-756e69744e6f726d616c>`\ \: % -> Record(unit: %, canonical: %, associate: %) 
  from \ :ref:`EntireRing <l456e7469726552696e67>`\ 

.. _l4e4d416c676562726169634e756d626572-7a65726f3f:

\ :ref:`zero? <l4162656c69616e4d6f6e6f6964-7a65726f3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l4e4d416c676562726169634e756d626572-7a65726f4f66:

\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zeroOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f4f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 

.. _l4e4d416c676562726169634e756d626572-7a65726f734f66:

\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: (\ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  %, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`zerosOf <l416c67656272616963616c6c79436c6f7365644669656c64-7a65726f734f66>`\ \: \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  % -> \ :ref:`List <l4c697374>`\  % 
  from \ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\ 


\ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  

\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`Algebra <l416c6765627261>`\  % 

\ :ref:`Algebra <l416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`AlgebraicallyClosedField <l416c67656272616963616c6c79436c6f7365644669656c64>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) 

\ :ref:`BiModule <l42694d6f64756c65>`\ (\ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\ ) 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  

\ :ref:`canonicalsClosed <l63616e6f6e6963616c73436c6f736564>`\  

\ :ref:`canonicalUnitNormal <l63616e6f6e6963616c556e69744e6f726d616c>`\  

\ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`CommutativeRing <l436f6d6d7574617469766552696e67>`\  

\ :ref:`CommutativeStar <l436f6d6d7574617469766553746172>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`NMComplexField <l4e4d436f6d706c65784669656c64>`\  

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`String <l537472696e67>`\  

\ :ref:`DifferentialRing <l446966666572656e7469616c52696e67>`\  

\ :ref:`DivisionRing <l4469766973696f6e52696e67>`\  

\ :ref:`EntireRing <l456e7469726552696e67>`\  

\ :ref:`EuclideanDomain <l4575636c696465616e446f6d61696e>`\  

\ :ref:`Field <l4669656c64>`\  

\ :ref:`GcdDomain <l476364446f6d61696e>`\  

\ :ref:`IntegralDomain <l496e74656772616c446f6d61696e>`\  

\ :ref:`JLObjectRing <l4a4c4f626a65637452696e67>`\  

\ :ref:`JLObjectType <l4a4c4f626a65637454797065>`\  

\ :ref:`JLRing <l4a4c52696e67>`\  

\ :ref:`JLType <l4a4c54797065>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % 

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`LeftOreRing <l4c6566744f726552696e67>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  

\ :ref:`Module <l4d6f64756c65>`\  % 

\ :ref:`Module <l4d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Monoid <l4d6f6e6f6964>`\  

\ :ref:`NMCommutativeRing <l4e4d436f6d6d7574617469766552696e67>`\  

\ :ref:`NMRing <l4e4d52696e67>`\  

\ :ref:`NMType <l4e4d54797065>`\  

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  % 

\ :ref:`NonAssociativeAlgebra <l4e6f6e4173736f63696174697665416c6765627261>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`NonAssociativeRing <l4e6f6e4173736f6369617469766552696e67>`\  

\ :ref:`NonAssociativeRng <l4e6f6e4173736f63696174697665526e67>`\  

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  

\ :ref:`noZeroDivisors <l6e6f5a65726f44697669736f7273>`\  

\ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\  

\ :ref:`PrincipalIdealDomain <l5072696e636970616c496465616c446f6d61696e>`\  

\ :ref:`RadicalCategory <l5261646963616c43617465676f7279>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMFraction <l4e4d4672616374696f6e>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`NMInteger <l4e4d496e7465676572>`\  

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  

\ :ref:`Ring <l52696e67>`\  

\ :ref:`Rng <l526e67>`\  

\ :ref:`SemiGroup <l53656d6947726f7570>`\  

\ :ref:`SemiRing <l53656d6952696e67>`\  

\ :ref:`SemiRng <l53656d69526e67>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

\ :ref:`TwoSidedRecip <l54776f53696465645265636970>`\  

\ :ref:`UniqueFactorizationDomain <l556e69717565466163746f72697a6174696f6e446f6d61696e>`\  

\ :ref:`unitsKnown <l756e6974734b6e6f776e>`\  

