.. index:: OpenMath

.. _l4f70656e4d617468:

OpenMath
========

:viewcode:`omcat.spad line 1 <omcat.spad#L1>` :editcode:`[edit on github] <omcat.spad#L1>`


\ :ref:`OpenMath <l4f70656e4d617468>`\  provides operations for exporting an object in OpenMath format.


.. _l4f70656e4d617468-4f4d7772697465:

.. index::
   pair: OpenMath; OMwrite

:spadfun:`OMwrite`\: % -> \ :ref:`String <l537472696e67>`\  
  \ ``OMwrite(u)``\  returns the OpenMath \ ``XML``\  encoding of \ ``u``\  as a complete OpenMath object.


.. index::
   pair: OpenMath; OMwrite

:spadfun:`OMwrite`\: (%, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`String <l537472696e67>`\  
  \ ``OMwrite(u, true)``\  returns the OpenMath \ ``XML``\  encoding of \ ``u``\  as a complete OpenMath object; OMwrite(\ ``u``\ , \ ``false``\ ) returns the OpenMath \ ``XML``\  encoding of \ ``u``\  as an OpenMath fragment.


.. index::
   pair: OpenMath; OMwrite

:spadfun:`OMwrite`\: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %) -> \ :ref:`Void <l566f6964>`\  
  \ ``OMwrite(dev, u)``\  writes the OpenMath form of \ ``u``\  to the OpenMath device \ ``dev``\  as a complete OpenMath object.


.. index::
   pair: OpenMath; OMwrite

:spadfun:`OMwrite`\: (\ :ref:`OpenMathDevice <l4f70656e4d617468446576696365>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``OMwrite(dev, u, true)``\  writes the OpenMath form of \ ``u``\  to the OpenMath device \ ``dev``\  as a complete OpenMath object; OMwrite(\ ``dev``\ , \ ``u``\ , \ ``false``\ ) writes the object as an OpenMath fragment.


