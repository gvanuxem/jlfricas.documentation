.. index:: SegmentCategory

.. _l5365676d656e7443617465676f7279:

SegmentCategory S
=================

:viewcode:`seg.spad line 1 <seg.spad#L1>` :editcode:`[edit on github] <seg.spad#L1>`

* S: \ :ref:`Type <l54797065>`\ 


This category provides operations on ranges, or \ *segments*\  as they are called.


.. _l5365676d656e7443617465676f7279-2b:

.. index::
   pair: SegmentCategory; +

:spadfun:`+`\: (%, S) -> % if S has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  \ ``(l..h)+i``\  returns segment \ ``l+i .. h+i``\ .


.. index::
   pair: SegmentCategory; +

:spadfun:`+`\: (S, %) -> % if S has \ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\ 
  \ ``i+(l..h)``\  returns segment \ ``i+l .. i+h``\ .

.. _l5365676d656e7443617465676f7279-2d:

.. index::
   pair: SegmentCategory; -

:spadfun:`-`\: (%, S) -> % if S has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``(l..h)-i``\  returns segment \ ``l-i .. h-i``\ .

.. _l5365676d656e7443617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5365676d656e7443617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l5365676d656e7443617465676f7279-4259:

.. index::
   pair: SegmentCategory; BY

:spadfun:`BY`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  \ ``s by n``\  creates a new segment in which only every \ ``n``\ \ ``-``\ th element is used.

.. _l5365676d656e7443617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l5365676d656e7443617465676f7279-636f6e76657274:

\ :ref:`convert <l436f6e7665727469626c65546f-636f6e76657274>`\ \: % -> \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 
  from \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 


.. index::
   pair: SegmentCategory; convert

:spadfun:`convert`\: S -> % 
  \ ``convert(i)``\  creates the segment \ ``i..i``\ .

.. _l5365676d656e7443617465676f7279-68696768:

.. index::
   pair: SegmentCategory; high

:spadfun:`high`\: % -> S 
  \ ``high(s)``\  returns the second endpoint of \ ``s``\ . Note: \ ``high(l..h) = h``\ .

.. _l5365676d656e7443617465676f7279-696e6372:

.. index::
   pair: SegmentCategory; incr

:spadfun:`incr`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``incr(s)``\  returns \ ``n``\ , where \ ``s``\  is a segment in which every \ ``n``\ \ ``-``\ th element is used. Note: \ ``incr(l..h by n) = n``\ .

.. _l5365676d656e7443617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l5365676d656e7443617465676f7279-6c6f77:

.. index::
   pair: SegmentCategory; low

:spadfun:`low`\: % -> S 
  \ ``low(s)``\  returns the first endpoint of \ ``s``\ . Note: \ ``low(l..h) = l``\ .

.. _l5365676d656e7443617465676f7279-72657665727365:

.. index::
   pair: SegmentCategory; reverse

:spadfun:`reverse`\: % -> % if S has \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 
  \ ``reverse(s)``\  returns segment \ ``s``\  in reverse order.

.. _l5365676d656e7443617465676f7279-7365676d656e74:

.. index::
   pair: SegmentCategory; segment

:spadfun:`segment`\: (S, S) -> % 
  \ ``segment(i, j)``\  is an alternate way to create the segment \ ``i..j``\ .

.. _l5365676d656e7443617465676f7279-5345474d454e54:

.. index::
   pair: SegmentCategory; SEGMENT

:spadfun:`SEGMENT`\: (S, S) -> % 
  \ ``l..h``\  creates a segment with \ ``l``\  and \ ``h``\  as the endpoints.


\ :ref:`BasicType <l426173696354797065>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

\ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\  if S has \ :ref:`ConvertibleTo <l436f6e7665727469626c65546f>`\  \ :ref:`InputForm <l496e707574466f726d>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  if S has \ :ref:`SetCategory <l53657443617465676f7279>`\ 

