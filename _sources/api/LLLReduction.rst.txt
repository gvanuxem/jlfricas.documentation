.. index:: LLLReduction

.. _l4c4c4c526564756374696f6e:

LLLReduction
============

:viewcode:`lll.spad line 1 <lll.spad#L1>` :editcode:`[edit on github] <lll.spad#L1>`


This package implements \ ``LLL``\  reduction. Before use user must set appropriate floating point precision. Too low precision may cause nontermination. Higher precisions require more compute time.


.. _l4c4c4c526564756374696f6e-657874656e6465644c4c4c21:

.. index::
   pair: LLLReduction; extendedLLL!

:spadfun:`extendedLLL!`\: (\ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``extendedLLL!(m, n)``\  with 1 \ ``<=``\  \ ``n``\  \ ``<=``\  ncols(\ ``m``\ ) performs the \ ``LLL``\  reduction of \ ``m``\  where only the first \ ``n``\  columns are considered significant. All matrix transformations, however, will be executed on the full matrix. \ ``m``\  is destructively modified and will be lost after this call.

.. _l4c4c4c526564756374696f6e-657874656e6465644c4c4c:

.. index::
   pair: LLLReduction; extendedLLL

:spadfun:`extendedLLL`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  -> Record(lll: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ , trf: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\ ) 
  \ ``extendedLLL(m)``\  returns the \ ``LLL``\  reductions of \ ``m``\  together with the transformation matrix, i.e. if [\ ``l``\ , \ ``t``\ ] is returned then it holds \ ``l``\  = \ ``t*m``\ .

.. _l4c4c4c526564756374696f6e-66696e645f72656c6174696f6e:

.. index::
   pair: LLLReduction; find_relation

:spadfun:`find_relation`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Float <l466c6f6174>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``find_relation(lf, k)``\  finds short integer relation between elements of \ ``lf``\  rounded to \ ``k``\  decimal places.

.. _l4c4c4c526564756374696f6e-4c4c4c:

.. index::
   pair: LLLReduction; LLL

:spadfun:`LLL`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  \ ``LLL(m)``\  computes \ ``LLL``\  reduction of \ ``m``\  \ ``LLL``\ (\ ``m``\ ) is the same as extendedLLL!(copy \ ``m``\ , ncols \ ``m``\ ).


