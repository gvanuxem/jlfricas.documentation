.. index:: GraphImage

.. _l4772617068496d616765:

GraphImage
==========

:viewcode:`view2D.spad line 1 <view2D.spad#L1>` :editcode:`[edit on github] <view2D.spad#L1>`


TwoDimensionalGraph creates virtual two dimensional graphs (to be displayed on TwoDimensionalViewports).


.. _l4772617068496d616765-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4772617068496d616765-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4772617068496d616765-617070656e64506f696e74:

.. index::
   pair: GraphImage; appendPoint

:spadfun:`appendPoint`\: (%, \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``appendPoint(gi, pt)``\  appends the point \ ``pt``\  to the end of the list of points component for the graph, \ ``gi``\ , which is of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ .

.. _l4772617068496d616765-636f65726365:

.. index::
   pair: GraphImage; coerce

:spadfun:`coerce`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``coerce(gi)``\  returns the indicated graph, \ ``gi``\ , of domain \ :ref:`GraphImage <l4772617068496d616765>`\  as output of the domain \ :ref:`OutputForm <l4f7574707574466f726d>`\ .


.. index::
   pair: GraphImage; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``coerce(llp)``\  creates and returns a graph of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  which is composed of the list of list of points given by \ ``llp``\ , and whose point colors, line colors and point sizes are determined by the default functions \ :spadfun:`pointColorDefault`\ , \ :spadfun:`lineColorDefault`\ , and \ :spadfun:`pointSizeDefault`\ . The graph data is then sent to the viewport manager where it waits to be included in a two-dimensional viewport window.

.. _l4772617068496d616765-636f6d706f6e656e74:

.. index::
   pair: GraphImage; component

:spadfun:`component`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``component(gi, lp, pal1, pal2, p)``\  sets the components of the graph, \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ , to the values given. The point list for \ ``gi``\  is set to the list \ ``lp``\ , the color of the points in \ ``lp``\  is set to the palette color \ ``pal1``\ , the color of the lines which connect the points \ ``lp``\  is set to the palette color \ ``pal2``\ , and the size of the points in \ ``lp``\  is given by the integer \ ``p``\ .


.. index::
   pair: GraphImage; component

:spadfun:`component`\: (%, \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``component(gi, pt)``\  modifies the graph \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  to contain one point component, \ ``pt``\  whose point color, line color and point size are determined by the default functions \ :spadfun:`pointColorDefault`\ , \ :spadfun:`lineColorDefault`\ , and \ :spadfun:`pointSizeDefault`\ .


.. index::
   pair: GraphImage; component

:spadfun:`component`\: (%, \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``component(gi, pt, pal1, pal2, ps)``\  modifies the graph \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  to contain one point component, \ ``pt``\  whose point color is set to the palette color \ ``pal1``\ , line color is set to the palette color \ ``pal2``\ , and point size is set to the positive integer \ ``ps``\ .

.. _l4772617068496d616765-6772617068496d616765:

.. index::
   pair: GraphImage; graphImage

:spadfun:`graphImage`\: () -> % 
  \ ``graphImage()``\  returns an empty graph with 0 point lists of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ . A graph image contains the graph data component of a two dimensional viewport.

.. _l4772617068496d616765-6b6579:

.. index::
   pair: GraphImage; key

:spadfun:`key`\: % -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``key(gi)``\  returns the process ID of the given graph, \ ``gi``\ , of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ .

.. _l4772617068496d616765-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4772617068496d616765-6d616b654772617068496d616765:

.. index::
   pair: GraphImage; makeGraphImage

:spadfun:`makeGraphImage`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  \ ``makeGraphImage(llp, lpal1, lpal2, lp)``\  returns a graph of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  which is composed of the points and lines from the list of lists of points, \ ``llp``\ , whose point colors are indicated by the list of palette colors, \ ``lpal1``\ , and whose lines are colored according to the list of palette colors, \ ``lpal2``\ . The parameter \ ``lp``\  is a list of integers which denote the size of the data points.


.. index::
   pair: GraphImage; makeGraphImage

:spadfun:`makeGraphImage`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Palette <l50616c65747465>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`DrawOption <l447261774f7074696f6e>`\ ) -> % 
  \ ``makeGraphImage(llp, lpal1, lpal2, lp, lopt)``\  returns a graph of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  which is composed of the points and lines from the list of lists of points, \ ``llp``\ , whose point colors are indicated by the list of palette colors, \ ``lpal1``\ , and whose lines are colored according to the list of palette colors, \ ``lpal2``\ . The parameter \ ``lp``\  is a list of integers which denote the size of the data points, and \ ``lopt``\  is the list of draw command options.


.. index::
   pair: GraphImage; makeGraphImage

:spadfun:`makeGraphImage`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``makeGraphImage(llp)``\  returns a graph of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  which is composed of the points and lines from the list of lists of points, \ ``llp``\ , with default point size and default point and line colours.

.. _l4772617068496d616765-706f696e74:

.. index::
   pair: GraphImage; point

:spadfun:`point`\: (%, \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Palette <l50616c65747465>`\ ) -> \ :ref:`Void <l566f6964>`\  
  \ ``point(gi, pt, pal)``\  modifies the graph \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\  to contain one point component, \ ``pt``\  whose point color is set to be the palette color \ ``pal``\ , and whose line color and point size are determined by the default functions \ :spadfun:`lineColorDefault`\  and \ :spadfun:`pointSizeDefault`\ .

.. _l4772617068496d616765-706f696e744c69737473:

.. index::
   pair: GraphImage; pointLists

:spadfun:`pointLists`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``pointLists(gi)``\  returns the list of lists of points which compose the given graph, \ ``gi``\ , of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ .

.. _l4772617068496d616765-707574436f6c6f72496e666f:

.. index::
   pair: GraphImage; putColorInfo

:spadfun:`putColorInfo`\: (\ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`Palette <l50616c65747465>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``putColorInfo(llp, lpal)``\  takes a list of list of points, \ ``llp``\ , and returns the points with their hue and shade components set according to the list of palette colors, \ ``lpal``\ .

.. _l4772617068496d616765-72616e676573:

.. index::
   pair: GraphImage; ranges

:spadfun:`ranges`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``ranges(gi)``\  returns the list of ranges of the point components from the indicated graph, \ ``gi``\ , of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ .


.. index::
   pair: GraphImage; ranges

:spadfun:`ranges`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``ranges(gi, lr)``\  modifies the list of ranges for the given graph, \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ , to be that of the list of range segments, \ ``lr``\ , and returns the new range list for \ ``gi``\ .

.. _l4772617068496d616765-73656e644772617068496d616765:

.. index::
   pair: GraphImage; sendGraphImage

:spadfun:`sendGraphImage`\: % -> \ :ref:`Void <l566f6964>`\  
  \ ``sendGraphImage(gi)``\  takes the given graph, \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ , and sends it\ ``'s``\  data to the viewport manager where it waits to be included in a two-dimensional viewport window. \ ``gi``\  cannot be an empty graph.

.. _l4772617068496d616765-756e697473:

.. index::
   pair: GraphImage; units

:spadfun:`units`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``units(gi)``\  returns the list of unit increments for the \ ``x``\  and \ ``y``\  axes of the indicated graph, \ ``gi``\ , of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ .


.. index::
   pair: GraphImage; units

:spadfun:`units`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`Float <l466c6f6174>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Float <l466c6f6174>`\  
  \ ``units(gi, lu)``\  modifies the list of unit increments for the \ ``x``\  and \ ``y``\  axes of the given graph, \ ``gi``\  of the domain \ :ref:`GraphImage <l4772617068496d616765>`\ , to be that of the list of unit increments, \ ``lu``\ , and returns the new list of units for \ ``gi``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

