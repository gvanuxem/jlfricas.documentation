.. index:: FortranMatrixFunctionCategory

.. _l466f727472616e4d617472697846756e6374696f6e43617465676f7279:

FortranMatrixFunctionCategory
=============================

:viewcode:`fortcat.spad line 139 <fortcat.spad#L139>` :editcode:`[edit on github] <fortcat.spad#L139>`


\ :ref:`FortranMatrixFunctionCategory <l466f727472616e4d617472697846756e6374696f6e43617465676f7279>`\  provides support for producing Functions and Subroutines representing matrices of expressions.


.. _l466f727472616e4d617472697846756e6374696f6e43617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: FortranMatrixFunctionCategory; coerce

:spadfun:`coerce`\: \ :ref:`FortranCode <l466f727472616e436f6465>`\  -> % 
  \ ``coerce(e)``\  takes an object from \ :ref:`FortranCode <l466f727472616e436f6465>`\  and uses it as the body of an ASP.


.. index::
   pair: FortranMatrixFunctionCategory; coerce

:spadfun:`coerce`\: \ :ref:`List <l4c697374>`\  \ :ref:`FortranCode <l466f727472616e436f6465>`\  -> % 
  \ ``coerce(e)``\  takes an object from List FortranCode and uses it as the body of an ASP.


.. index::
   pair: FortranMatrixFunctionCategory; coerce

:spadfun:`coerce`\: Record(localSymbols: \ :ref:`SymbolTable <l53796d626f6c5461626c65>`\ , code: \ :ref:`List <l4c697374>`\  \ :ref:`FortranCode <l466f727472616e436f6465>`\ ) -> % 
  \ ``coerce(e)``\  takes the component of \ ``e``\  from List FortranCode and uses it as the body of the ASP, making the declarations in the \ :ref:`SymbolTable <l53796d626f6c5461626c65>`\  component.

.. _l466f727472616e4d617472697846756e6374696f6e43617465676f7279-6f75747075744173466f727472616e:

\ :ref:`outputAsFortran <l466f727472616e50726f6772616d43617465676f7279-6f75747075744173466f727472616e>`\ \: % -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FortranProgramCategory <l466f727472616e50726f6772616d43617465676f7279>`\ 

.. _l466f727472616e4d617472697846756e6374696f6e43617465676f7279-72657472616374:

.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retract

:spadfun:`retract`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> % 
  \ ``retract(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.

.. _l466f727472616e4d617472697846756e6374696f6e43617465676f7279-72657472616374496643616e:

.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Expression <l45787072657373696f6e>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Fraction <l4672616374696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Float <l466c6f6174>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


.. index::
   pair: FortranMatrixFunctionCategory; retractIfCan

:spadfun:`retractIfCan`\: \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Union(%, failed) 
  \ ``retractIfCan(e)``\  tries to convert \ ``e``\  into an ASP, checking that legal Fortran-77 is produced.


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`FortranProgramCategory <l466f727472616e50726f6772616d43617465676f7279>`\  

