.. index:: AIntervalCategory

.. _l41496e74657276616c43617465676f7279:

AIntervalCategory R
===================

:viewcode:`ainterval.spad line 8 <ainterval.spad#L8>` :editcode:`[edit on github] <ainterval.spad#L8>`

* R: \ :ref:`OrderedAbelianSemiGroup <l4f7264657265644162656c69616e53656d6947726f7570>`\ 


AIntervalCategory(\ ``R``\ ) exports operations that can be done with intervals. Although these operations should be similar to the arithmetic operations of a Ring, we do not export Ring, since the ring axioms are not fulfilled.


.. _l41496e74657276616c43617465676f7279-30:

.. index::
   pair: AIntervalCategory; 0

:spadfun:`0`\: % if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and % has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\ 
  0 is interval(0,0).

.. _l41496e74657276616c43617465676f7279-31:

\ :ref:`1 <l4d61676d6157697468556e6974-31>`\ \: % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l41496e74657276616c43617465676f7279-2a:

.. index::
   pair: AIntervalCategory; *

:spadfun:`\*`\: (%, %) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``x*y``\  creates an interval such that for any elements \ ``u``\  and \ ``v``\  with contains?(\ ``x``\ ,\ ``u``\ ) and contains?(\ ``y``\ ,\ ``v``\ ) it holds contains?(x*y,u*v).


.. index::
   pair: AIntervalCategory; *

:spadfun:`\*`\: (\ :ref:`Integer <l496e7465676572>`\ , %) -> % if R has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``z*x``\  creates interval(\ ``z``\  * inf \ ``x``\ , \ ``z``\  * sup \ ``x``\ ).


\ :ref:`\* <l4162656c69616e4d6f6e6f6964-2a>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , %) -> % if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and % has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 


.. index::
   pair: AIntervalCategory; *

:spadfun:`\*`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , %) -> % 
  \ ``z*x``\  creates the interval \ ``[z * inf x, z * sup x]``\ .


.. index::
   pair: AIntervalCategory; *

:spadfun:`\*`\: (R, %) -> % if R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``r*x``\  creates the interval(\ ``r``\  * inf \ ``x``\ , \ ``r``\  * sup \ ``x``\ ).

.. _l41496e74657276616c43617465676f7279-2b:

.. index::
   pair: AIntervalCategory; +

:spadfun:`+`\: (%, %) -> % 
  \ ``x+y``\  creates the interval \ ``[inf x + inf y, sup x + sup y]``\ . x+y creates an interval such that for any \ ``u``\  and \ ``v``\  with contains?(\ ``x``\ ,\ ``u``\ ) and contains?(\ ``y``\ ,\ ``v``\ ) it holds contains?(x+y,u+v).


.. index::
   pair: AIntervalCategory; +

:spadfun:`+`\: (%, R) -> % 
  \ ``x+r``\  creates the interval \ ``[inf x + r, sup x + r]``\ .

.. _l41496e74657276616c43617465676f7279-2d:

.. index::
   pair: AIntervalCategory; -

:spadfun:`-`\: % -> % if R has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``-x``\  creates the interval \ ``[- sup x, - inf x]``\ .


.. index::
   pair: AIntervalCategory; -

:spadfun:`-`\: (%, %) -> % if R has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  \ ``x-y``\  creates the interval \ ``x+(-y)``\ .

.. _l41496e74657276616c43617465676f7279-2f:

.. index::
   pair: AIntervalCategory; /

:spadfun:`/`\: (%, %) -> % if R has \ :ref:`Field <l4669656c64>`\  and R has \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 
  \ ``x/y``\  returns x*inv(\ ``y``\ ). If positive?(\ ``x``\ ) and positive?(\ ``y``\ ), then this is equal to interval(inf(\ ``x``\ )/sup(\ ``y``\ ),sup(\ ``x``\ )/inf(\ ``y``\ )).

.. _l41496e74657276616c43617465676f7279-3d:

.. index::
   pair: AIntervalCategory; =

:spadfun:`=`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``x=y``\  returns \ ``true``\  iff inf(\ ``x``\ )=inf(\ ``y``\ ) and sup(\ ``x``\ )=sup(\ ``y``\ ).

.. _l41496e74657276616c43617465676f7279-5e:

.. index::
   pair: AIntervalCategory; ^

:spadfun:`^`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  \ ``x^n``\  returns interval(1,1) if \ ``x``\  is not zero and \ ``n=0``\ . Otherwise it creates an interval such that for any elements \ ``u``\  and \ ``v``\  with contains?(\ ``x``\ ,\ ``u``\ ) it holds contains?(\ ``x^n``\ ,u^n).


.. index::
   pair: AIntervalCategory; ^

:spadfun:`^`\: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  \ ``x^n``\  creates an interval such that for any elements \ ``u``\  with contains?(\ ``x``\ ,\ ``u``\ ) it holds contains?(\ ``x^n``\ ,u^n).

.. _l41496e74657276616c43617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l41496e74657276616c43617465676f7279-616273:

.. index::
   pair: AIntervalCategory; abs

:spadfun:`abs`\: % -> % if R has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  \ ``abs(x)``\  returns the tightest interval such that for all \ ``r``\  with contains?(\ ``x``\ ,\ ``r``\ ) it holds contains?(abs(\ ``x``\ ),abs(\ ``r``\ )).

.. _l41496e74657276616c43617465676f7279-616e7469436f6d6d757461746f72:

\ :ref:`antiCommutator <l4e6f6e4173736f6369617469766553656d69526e67-616e7469436f6d6d757461746f72>`\ \: (%, %) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  from \ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\ 

.. _l41496e74657276616c43617465676f7279-636f65726365:

.. index::
   pair: AIntervalCategory; coerce

:spadfun:`coerce`\: % -> \ :ref:`List <l4c697374>`\  R 
  \ ``coerce(x)``\  returns [inf(\ ``x``\ ),sup(\ ``x``\ )].


\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l41496e74657276616c43617465676f7279-636f6e7461696e733f:

.. index::
   pair: AIntervalCategory; contains?

:spadfun:`contains?`\: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``contains?(x,y)``\  returns \ ``true``\  if \ ``inf(x)<=inf(y)``\  and \ ``sup(y)<=sup(x)``\  and \ ``false``\  otherwise.


.. index::
   pair: AIntervalCategory; contains?

:spadfun:`contains?`\: (%, R) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``contains?(x,r)``\  returns \ ``true``\  if \ ``inf(x)<=r<=sup(x)``\  and \ ``false``\  otherwise.

.. _l41496e74657276616c43617465676f7279-6572726f723f:

.. index::
   pair: AIntervalCategory; error?

:spadfun:`error?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``error?(x)``\  returns \ ``true``\  if the lower bound is bigger than the upper bound. That can happen if such an interval is created by the qinterval function.

.. _l41496e74657276616c43617465676f7279-696e66:

.. index::
   pair: AIntervalCategory; inf

:spadfun:`inf`\: % -> R 
  \ ``inf(x)``\  returns the infinum of \ ``x``\ .

.. _l41496e74657276616c43617465676f7279-696e74657276616c:

.. index::
   pair: AIntervalCategory; interval

:spadfun:`interval`\: (R, R) -> % 
  \ ``interval(x,y)``\  creates a new interval \ ``[x,y]``\ , if \ ``x<=y``\  and \$\ ``[y,x]``\ , if \ ``y<x``\ .

.. _l41496e74657276616c43617465676f7279-696e76:

.. index::
   pair: AIntervalCategory; inv

:spadfun:`inv`\: % -> % if R has \ :ref:`Field <l4669656c64>`\  and R has \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 
  \ ``inv(x)``\  returns interval(1/sup(\ ``x``\ ),1/inf(\ ``x``\ )) if not contains?(\ ``x``\ ,0). It is an error, if the interval contains 0.

.. _l41496e74657276616c43617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l41496e74657276616c43617465676f7279-6c656674506f776572:

\ :ref:`leftPower <l4d61676d6157697468556e6974-6c656674506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l41496e74657276616c43617465676f7279-6c6566745265636970:

\ :ref:`leftRecip <l4d61676d6157697468556e6974-6c6566745265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l41496e74657276616c43617465676f7279-6e656761746976653f:

.. index::
   pair: AIntervalCategory; negative?

:spadfun:`negative?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\ 
  \ ``negative?(u)``\  returns \ ``true``\  iff \ ``u<0``\  for every element of \ ``u``\  of \ ``x``\ , i.e. sup(\ ``x``\ )\ ``<0``\ .

.. _l41496e74657276616c43617465676f7279-6f6e653f:

\ :ref:`one? <l4d61676d6157697468556e6974-6f6e653f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l41496e74657276616c43617465676f7279-6f70706f736974653f:

\ :ref:`opposite? <l4162656c69616e4d6f6e6f6964-6f70706f736974653f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and % has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l41496e74657276616c43617465676f7279-706f7369746976653f:

.. index::
   pair: AIntervalCategory; positive?

:spadfun:`positive?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\ 
  \ ``positive?(x)``\  returns \ ``true``\  iff \ ``u>0``\  for every element of \ ``u``\  of \ ``x``\ , i.e. 0<inf(\ ``x``\ ).

.. _l41496e74657276616c43617465676f7279-71696e74657276616c:

.. index::
   pair: AIntervalCategory; qinterval

:spadfun:`qinterval`\: (R, R) -> % 
  \ ``qinterval(inf,sup)``\  creates a new interval without checking the ordering on the elements.

.. _l41496e74657276616c43617465676f7279-7265636970:

\ :ref:`recip <l4d61676d6157697468556e6974-7265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l41496e74657276616c43617465676f7279-7269676874506f776572:

\ :ref:`rightPower <l4d61676d6157697468556e6974-7269676874506f776572>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l41496e74657276616c43617465676f7279-72696768745265636970:

\ :ref:`rightRecip <l4d61676d6157697468556e6974-72696768745265636970>`\ \: % -> Union(%, failed) if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 
  from \ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\ 

.. _l41496e74657276616c43617465676f7279-73616d706c65:

\ :ref:`sample <l4162656c69616e4d6f6e6f6964-73616d706c65>`\ \: % if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and % has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\ 
  from \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\ 

.. _l41496e74657276616c43617465676f7279-7375627472616374496643616e:

\ :ref:`subtractIfCan <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964-7375627472616374496643616e>`\ \: (%, %) -> Union(%, failed) if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 
  from \ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\ 

.. _l41496e74657276616c43617465676f7279-737570:

.. index::
   pair: AIntervalCategory; sup

:spadfun:`sup`\: % -> R 
  \ ``sup(x)``\  returns the supremum of \ ``x``\ .

.. _l41496e74657276616c43617465676f7279-756e69743f:

.. index::
   pair: AIntervalCategory; unit?

:spadfun:`unit?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`Field <l4669656c64>`\  and R has \ :ref:`OrderedRing <l4f72646572656452696e67>`\ 
  \ ``unit?(x)``\  returns \ ``true``\  if every element in \ ``x``\  can be inverted, i.e. if not contains?(\ ``x``\ ,0).

.. _l41496e74657276616c43617465676f7279-7769647468:

.. index::
   pair: AIntervalCategory; width

:spadfun:`width`\: % -> R if R has \ :ref:`OrderedAbelianGroup <l4f7264657265644162656c69616e47726f7570>`\ 
  \ ``width(x)``\  returns \ ``sup(x) - inf(x)``\ .

.. _l41496e74657276616c43617465676f7279-7a65726f3f:

.. index::
   pair: AIntervalCategory; zero?

:spadfun:`zero?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  if R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\  or R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and % has \ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\ 
  \ ``zero?(x)``\  returns \ ``true``\  if x=interval(0,0).


\ :ref:`AbelianMonoid <l4162656c69616e4d6f6e6f6964>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedAbelianMonoid <l4f7264657265644162656c69616e4d6f6e6f6964>`\ 

\ :ref:`AbelianSemiGroup <l4162656c69616e53656d6947726f7570>`\  

\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`BiModule <l42694d6f64756c65>`\ (%, %) if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`CancellationAbelianMonoid <l43616e63656c6c6174696f6e4162656c69616e4d6f6e6f6964>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\  or R has \ :ref:`SemiRng <l53656d69526e67>`\  and R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and % has \ :ref:`AbelianGroup <l4162656c69616e47726f7570>`\ 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`LeftModule <l4c6566744d6f64756c65>`\  % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`Magma <l4d61676d61>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`MagmaWithUnit <l4d61676d6157697468556e6974>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 

\ :ref:`Monoid <l4d6f6e6f6964>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 

\ :ref:`NonAssociativeSemiRing <l4e6f6e4173736f6369617469766553656d6952696e67>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 

\ :ref:`NonAssociativeSemiRng <l4e6f6e4173736f6369617469766553656d69526e67>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`RightModule <l52696768744d6f64756c65>`\  % if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`SemiGroup <l53656d6947726f7570>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`SemiRing <l53656d6952696e67>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\ 

\ :ref:`SemiRng <l53656d69526e67>`\  if R has \ :ref:`OrderedMonoid <l4f7264657265644d6f6e6f6964>`\  and R has \ :ref:`SemiRing <l53656d6952696e67>`\  or R has \ :ref:`OrderedSemiGroup <l4f72646572656453656d6947726f7570>`\  and R has \ :ref:`SemiRng <l53656d69526e67>`\ 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

