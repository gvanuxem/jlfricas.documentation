.. index:: ElementaryFunctionODESolver

.. _l456c656d656e7461727946756e6374696f6e4f4445536f6c766572:

ElementaryFunctionODESolver(R, F)
=================================

:viewcode:`odeef.spad line 831 <odeef.spad#L831>` :editcode:`[edit on github] <odeef.spad#L831>`

* R: Join(\ :ref:`Comparable <l436f6d70617261626c65>`\ , \ :ref:`PolynomialFactorizationExplicit <l506f6c796e6f6d69616c466163746f72697a6174696f6e4578706c69636974>`\ , \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`LinearlyExplicitOver <l4c696e6561726c794578706c696369744f766572>`\  \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`CharacteristicZero <l43686172616374657269737469635a65726f>`\ )

* F: Join(\ :ref:`AlgebraicallyClosedFunctionSpace <l416c67656272616963616c6c79436c6f73656446756e6374696f6e5370616365>`\  R, \ :ref:`TranscendentalFunctionCategory <l5472616e7363656e64656e74616c46756e6374696f6e43617465676f7279>`\ , \ :ref:`PrimitiveFunctionCategory <l5072696d697469766546756e6374696f6e43617465676f7279>`\ )


\ ``ElementaryFunctionODESolver``\  provides the top-level functions for finding closed form solutions of ordinary differential equations and initial value problems.


.. _l456c656d656e7461727946756e6374696f6e4f4445536f6c766572-736f6c7665:

.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> Union(F, failed) 
  \ ``solve(eq, y, x = a, [y0, ..., ym])``\  returns either the solution of the initial value problem \ ``eq, y(a) = y0, y'(a) = y1, ...``\  or "failed" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \ ``dy/dx = f(x, y)``\ .


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(particular: F, basis: \ :ref:`List <l4c697374>`\  F), F, failed) 
  \ ``solve(eq, y, x)``\  returns either a solution of the ordinary differential equation \ ``eq``\  or "failed" if no non-trivial solution can be found; If the equation is linear ordinary, a solution is of the form \ ``[h, [b1, ..., bm]]``\  where \ ``h``\  is a particular solution and \ ``[b1, ...bm]``\  are linearly independent solutions of the associated homogeneous equation \ ``f(x, y) = 0``\ ; A full basis for the solutions of the homogeneous equation is not always returned, only the solutions which were found; If the equation is of the form {dy/dx = \ ``f``\ (\ ``x``\ , \ ``y``\ )}, a solution is of the form \ ``h(x, y)``\  where \ ``h(x, y) = c``\  is a first integral of the equation for any constant \ ``c``\ ; error if the equation is not one of those 2 forms.


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  F) -> Union(F, failed) 
  \ ``solve(eq, y, x = a, [y0, ..., ym])``\  returns either the solution of the initial value problem \ ``eq, y(a) = y0, y'(a) = y1, ...``\  or "failed" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \ ``dy/dx = f(x, y)``\ .


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (F, \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(particular: F, basis: \ :ref:`List <l4c697374>`\  F), F, failed) 
  \ ``solve(eq, y, x)``\  returns either a solution of the ordinary differential equation \ ``eq``\  or "failed" if no non-trivial solution can be found; If the equation is linear ordinary, a solution is of the form \ ``[h, [b1, ..., bm]]``\  where \ ``h``\  is a particular solution and and \ ``[b1, ...bm]``\  are linearly independent solutions of the associated homogeneous equation \ ``f(x, y) = 0``\ ; A full basis for the solutions of the homogeneous equation is not always returned, only the solutions which were found; If the equation is of the form {dy/dx = \ ``f``\ (\ ``x``\ , \ ``y``\ )}, a solution is of the form \ ``h(x, y)``\  where \ ``h(x, y) = c``\  is a first integral of the equation for any constant \ ``c``\ .


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Equation <l4571756174696f6e>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(particular: \ :ref:`Vector <l566563746f72>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F), failed) 
  \ ``solve([eq_1,...,eq_n], [y_1,...,y_n], x)``\  returns either "failed" or, if the equations form a fist order linear system, a solution of the form \ ``[y_p, [b_1, ..., b_n]]``\  where \ ``h_p``\  is a particular solution and \ ``[b_1, ...b_m]``\  are linearly independent solutions of the associated homogeneous system. error if the equations do not form a first order linear system


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`List <l4c697374>`\  F, \ :ref:`List <l4c697374>`\  \ :ref:`BasicOperator <l42617369634f70657261746f72>`\ , \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(particular: \ :ref:`Vector <l566563746f72>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F), failed) 
  \ ``solve([eq_1,...,eq_n], [y_1,...,y_n], x)``\  returns either "failed" or, if the equations form a fist order linear system, a solution of the form \ ``[y_p, [b_1, ..., b_n]]``\  where \ ``h_p``\  is a particular solution and \ ``[b_1, ...b_m]``\  are linearly independent solutions of the associated homogeneous system. error if the equations do not form a first order linear system


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F, failed) 
  \ ``solve(m, x)``\  returns a basis for the solutions of \ ``D y = m y``\ . \ ``x``\  is the dependent variable.


.. index::
   pair: ElementaryFunctionODESolver; solve

:spadfun:`solve`\: (\ :ref:`Matrix <l4d6174726978>`\  F, \ :ref:`Vector <l566563746f72>`\  F, \ :ref:`Symbol <l53796d626f6c>`\ ) -> Union(Record(particular: \ :ref:`Vector <l566563746f72>`\  F, basis: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  F), failed) 
  \ ``solve(m, v, x)``\  returns \ ``[v_p, [v_1, ..., v_m]]``\  such that the solutions of the system \ ``D y = m y + v``\  are \ ``v_p + c_1 v_1 + ... + c_m v_m``\  where the \ ``c_i's``\  are constants, and the \ ``v_i's``\  form a basis for the solutions of \ ``D y = m y``\ . \ ``x``\  is the dependent variable.


