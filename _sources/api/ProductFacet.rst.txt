.. index:: ProductFacet

.. _l50726f647563744661636574:

ProductFacet
============

:viewcode:`alg_top.spad line 802 <alg_top.spad#L802>` :editcode:`[edit on github] <alg_top.spad#L802>`


Holds the product of two simplexes for more documentation see: http://www.euclideanspace.com/prog/scratchpad/mycode/topology/simplex/product/ Date Created: April 2016 Basic Operations: Related packages: Related categories: FacetCategory Related Domains: Also See: AMS Classifications:


.. _l50726f647563744661636574-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f647563744661636574-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f647563744661636574-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l50726f647563744661636574-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f647563744661636574-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l50726f647563744661636574-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l50726f647563744661636574-61646456657274657832:

.. index::
   pair: ProductFacet; addVertex2

:spadfun:`addVertex2`\: (%, Record(left: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , right: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  used by cone. Adds a vertex to face.

.. _l50726f647563744661636574-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l50726f647563744661636574-656d7074793f:

\ :ref:`empty? <l466163657443617465676f7279-656d7074793f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l50726f647563744661636574-676574496e64657873:

.. index::
   pair: ProductFacet; getIndexs

:spadfun:`getIndexs`\: % -> \ :ref:`List <l4c697374>`\  Record(left: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , right: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  returns left indexes

.. _l50726f647563744661636574-6765744d61784c656674:

.. index::
   pair: ProductFacet; getMaxLeft

:spadfun:`getMaxLeft`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  returns maximum left index

.. _l50726f647563744661636574-6765744d61785269676874:

.. index::
   pair: ProductFacet; getMaxRight

:spadfun:`getMaxRight`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  returns maximum right index

.. _l50726f647563744661636574-6765744d756c74:

\ :ref:`getMult <l466163657443617465676f7279-6765744d756c74>`\ \: % -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l50726f647563744661636574-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l50726f647563744661636574-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l50726f647563744661636574-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l50726f647563744661636574-6f72646572:

\ :ref:`order <l466163657443617465676f7279-6f72646572>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FacetCategory <l466163657443617465676f7279>`\ 

.. _l50726f647563744661636574-70726f647563744661636574:

.. index::
   pair: ProductFacet; productFacet

:spadfun:`productFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`List <l4c697374>`\  Record(left: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , right: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  Constructor for product facet


.. index::
   pair: ProductFacet; productFacet

:spadfun:`productFacet`\: (\ :ref:`Integer <l496e7465676572>`\ , \ :ref:`ProductFacet <l50726f647563744661636574>`\ ) -> % 
  Copy constructor to allow change of sign

.. _l50726f647563744661636574-7365744d756c7421:

.. index::
   pair: ProductFacet; setMult!

:spadfun:`setMult!`\: (%, \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  sets multiplier of face

.. _l50726f647563744661636574-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`FacetCategory <l466163657443617465676f7279>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

