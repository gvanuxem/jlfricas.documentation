.. index:: InfiniteTuple

.. _l496e66696e6974655475706c65:

InfiniteTuple S
===============

:viewcode:`ituple.spad line 1 <ituple.spad#L1>` :editcode:`[edit on github] <ituple.spad#L1>`

* S: \ :ref:`Type <l54797065>`\ 


This package implements 'infinite tuples' for the interpreter. The representation is a stream.


.. _l496e66696e6974655475706c65-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l496e66696e6974655475706c65-636f6e737472756374:

.. index::
   pair: InfiniteTuple; construct

:spadfun:`construct`\: % -> \ :ref:`Stream <l53747265616d>`\  S 
  \ ``construct(t)``\  converts an infinite tuple to a stream.

.. _l496e66696e6974655475706c65-66696c746572556e74696c:

.. index::
   pair: InfiniteTuple; filterUntil

:spadfun:`filterUntil`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  \ ``filterUntil(p, t)``\  returns \ ``[x for x in t while not p(x)]``\ .

.. _l496e66696e6974655475706c65-66696c7465725768696c65:

.. index::
   pair: InfiniteTuple; filterWhile

:spadfun:`filterWhile`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  \ ``filterWhile(p, t)``\  returns \ ``[x for x in t while p(x)]``\ .

.. _l496e66696e6974655475706c65-6d6170:

.. index::
   pair: InfiniteTuple; map

:spadfun:`map`\: (S -> S, %) -> % 
  \ ``map(f, t)``\  replaces the tuple \ ``t``\  by \ ``[f(x) for x in t]``\ .

.. _l496e66696e6974655475706c65-73656c656374:

.. index::
   pair: InfiniteTuple; select

:spadfun:`select`\: (S -> \ :ref:`Boolean <l426f6f6c65616e>`\ , %) -> % 
  \ ``select(p, t)``\  returns \ ``[x for x in t | p(x)]``\ .

.. _l496e66696e6974655475706c65-73747265616d:

.. index::
   pair: InfiniteTuple; stream

:spadfun:`stream`\: (S -> S, S) -> % 
  \ ``stream(f, s)``\  returns \ ``[s, f(s), f(f(s)), ...]``\ .


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

