.. index:: ComplexIntegerSolveLinearPolynomialEquation

.. _l436f6d706c6578496e7465676572536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

ComplexIntegerSolveLinearPolynomialEquation(R, CR)
==================================================

:viewcode:`gaussian.spad line 620 <gaussian.spad#L620>` :editcode:`[edit on github] <gaussian.spad#L620>`

* R: \ :ref:`IntegerNumberSystem <l496e74656765724e756d62657253797374656d>`\ 

* CR: \ :ref:`ComplexCategory <l436f6d706c657843617465676f7279>`\  R


This package provides the generalized euclidean algorithm which is needed as the basic step for factoring polynomials.


.. _l436f6d706c6578496e7465676572536f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e-736f6c76654c696e656172506f6c796e6f6d69616c4571756174696f6e:

.. index::
   pair: ComplexIntegerSolveLinearPolynomialEquation; solveLinearPolynomialEquation

:spadfun:`solveLinearPolynomialEquation`\: (\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  CR, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  CR) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  CR, failed) 
  \ ``solveLinearPolynomialEquation([f1, ..., fn], g)``\  where (\ ``fi``\  relatively prime to each other) returns a list of \ ``ai``\  such that \ ``g``\  = sum \ ``ai``\  prod \ ``fj``\  (\ ``j``\  \ ``\=``\  \ ``i``\ ) or equivalently g/prod \ ``fj``\  = sum (ai/fi) or returns "failed" if no such list exists


