.. index:: DiophantineSolutionPackage

.. _l44696f7068616e74696e65536f6c7574696f6e5061636b616765:

DiophantineSolutionPackage
==========================

:viewcode:`solvedio.spad line 1 <solvedio.spad#L1>` :editcode:`[edit on github] <solvedio.spad#L1>`


any solution of a homogeneous linear Diophantine equation can be represented as a sum of minimal solutions, which form a "basis" (a minimal solution cannot be represented as a nontrivial sum of solutions) in the case of an inhomogeneous linear Diophantine equation, each solution is the sum of a inhomogeneous solution and any number of homogeneous solutions therefore, it suffices to compute two sets: 1. all minimal inhomogeneous solutions 2. all minimal homogeneous solutions the algorithm implemented is a completion procedure, which enumerates all solutions in a recursive depth-first-search it can be seen as finding monotone paths in a graph for more details see Reference


.. _l44696f7068616e74696e65536f6c7574696f6e5061636b616765-64696f536f6c7665:

.. index::
   pair: DiophantineSolutionPackage; dioSolve

:spadfun:`dioSolve`\: \ :ref:`Equation <l4571756174696f6e>`\  \ :ref:`Polynomial <l506f6c796e6f6d69616c>`\  \ :ref:`Integer <l496e7465676572>`\  -> Record(varOrder: \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\ , inhom: Union(\ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed), hom: \ :ref:`List <l4c697374>`\  \ :ref:`Vector <l566563746f72>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  \ ``dioSolve(u)``\  computes a basis of all minimal solutions for linear homogeneous Diophantine equation \ ``u``\ , then all minimal solutions of inhomogeneous equation


