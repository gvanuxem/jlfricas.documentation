.. index:: MagmaWithUnit

.. _l4d61676d6157697468556e6974:

MagmaWithUnit
=============

:viewcode:`naalgc.spad line 44 <naalgc.spad#L44>` :editcode:`[edit on github] <naalgc.spad#L44>`


MagmaWithUnit is the class of multiplicative monads with unit, i.e. sets with a binary operation and a unit element. Axioms leftIdentity("*":(\%,\%)\ ``->``\ \%,1)   1*x=x rightIdentity("*":(\%,\%)\ ``->``\ \%,1)   x*1=x Common Additional Axioms unitsKnown---if "recip" says "failed", that PROVES input wasn\ ``'t``\  a unit


.. _l4d61676d6157697468556e6974-31:

.. index::
   pair: MagmaWithUnit; 1

:spadfun:`1`\: % 
  1 returns the unit element, denoted by 1.

.. _l4d61676d6157697468556e6974-2a:

\ :ref:`\* <l4d61676d61-2a>`\ \: (%, %) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4d61676d6157697468556e6974-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d61676d6157697468556e6974-5e:

.. index::
   pair: MagmaWithUnit; ^

:spadfun:`^`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``a^n``\  returns the \ ``n``\ \ ``-``\ th power of \ ``a``\ , defined by repeated squaring.


\ :ref:`^ <l4d61676d61-5e>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4d61676d6157697468556e6974-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d61676d6157697468556e6974-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l4d61676d6157697468556e6974-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4d61676d6157697468556e6974-6c656674506f776572:

.. index::
   pair: MagmaWithUnit; leftPower

:spadfun:`leftPower`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``leftPower(a, n)``\  returns the \ ``n``\ \ ``-``\ th left power of \ ``a``\ , i.e. \ ``leftPower(a, n) := a * leftPower(a, n-1)``\  and \ ``leftPower(a, 0) := 1``\ .


\ :ref:`leftPower <l4d61676d61-6c656674506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4d61676d6157697468556e6974-6c6566745265636970:

.. index::
   pair: MagmaWithUnit; leftRecip

:spadfun:`leftRecip`\: % -> Union(%, failed) 
  \ ``leftRecip(a)``\  returns an element, which is a left inverse of \ ``a``\ , or \ ``"failed"``\  if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l4d61676d6157697468556e6974-6f6e653f:

.. index::
   pair: MagmaWithUnit; one?

:spadfun:`one?`\: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``one?(a)``\  tests whether \ ``a``\  is the unit 1.

.. _l4d61676d6157697468556e6974-7265636970:

.. index::
   pair: MagmaWithUnit; recip

:spadfun:`recip`\: % -> Union(%, failed) 
  \ ``recip(a)``\  returns an element, which is both a left and a right inverse of \ ``a``\ , or \ ``"failed"``\  if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l4d61676d6157697468556e6974-7269676874506f776572:

.. index::
   pair: MagmaWithUnit; rightPower

:spadfun:`rightPower`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``rightPower(a, n)``\  returns the \ ``n``\ \ ``-``\ th right power of \ ``a``\ , i.e. \ ``rightPower(a, n) := rightPower(a, n-1) * a``\  and \ ``rightPower(a, 0) := 1``\ .


\ :ref:`rightPower <l4d61676d61-7269676874506f776572>`\ \: (%, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> % 
  from \ :ref:`Magma <l4d61676d61>`\ 

.. _l4d61676d6157697468556e6974-72696768745265636970:

.. index::
   pair: MagmaWithUnit; rightRecip

:spadfun:`rightRecip`\: % -> Union(%, failed) 
  \ ``rightRecip(a)``\  returns an element, which is a right inverse of \ ``a``\ , or \ ``"failed"``\  if such an element doesn\ ``'t``\  exist or cannot be determined (see unitsKnown).

.. _l4d61676d6157697468556e6974-73616d706c65:

.. index::
   pair: MagmaWithUnit; sample

:spadfun:`sample`\: % 
  \ ``sample yields``\  a value of type \%


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Magma <l4d61676d61>`\  

\ :ref:`SetCategory <l53657443617465676f7279>`\  

