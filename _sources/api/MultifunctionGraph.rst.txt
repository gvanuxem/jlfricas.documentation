.. index:: MultifunctionGraph

.. _l4d756c746966756e6374696f6e4772617068:

MultifunctionGraph S
====================

:viewcode:`graph.spad line 4104 <graph.spad#L4104>` :editcode:`[edit on github] <graph.spad#L4104>`

* S: \ :ref:`SetCategory <l53657443617465676f7279>`\ 


allows us to model graph theory  


.. _l4d756c746966756e6374696f6e4772617068-2a:

.. index::
   pair: MultifunctionGraph; *

:spadfun:`\*`\: (%, %) -> \ :ref:`MultifunctionGraph <l4d756c746966756e6374696f6e4772617068>`\  \ :ref:`Product <l50726f64756374>`\ (S, S) 
  tensor product : the tensor product \ ``G*H``\  of graphs \ ``G``\  and \ ``H``\  is a graph such that the vertex set of \ ``G*H``\  is the Cartesian product \ ``V``\ (\ ``G``\ ) \times \ ``V``\ (\ ``H``\ ); and any two vertices (\ ``u``\ , u') and (\ ``v``\ , \ ``v'``\ ) are adjacent in \ ``G``\  \times \ ``H``\  if and only if u' is adjacent with \ ``v'``\  and \ ``u``\  is adjacent with \ ``v``\ .

.. _l4d756c746966756e6374696f6e4772617068-2b:

\ :ref:`+ <l46696e6974654772617068-2b>`\ \: (%, %) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d756c746966756e6374696f6e4772617068-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l4d756c746966756e6374696f6e4772617068-7e:

.. index::
   pair: MultifunctionGraph; ~

:spadfun:`~`\: % -> % 
  The complement or inverse of a graph is a graph on the same vertices such that there is an arrow if and only if there is not an arrow in its compliment. That is, it is the compliment of the arrows but is not the set complement. for more information see: http://en.wikipedia.org/wiki/Complement_graph

.. _l4d756c746966756e6374696f6e4772617068-6164644172726f7721:

\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, Record(name: \ :ref:`String <l537472696e67>`\ , arrType: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , fromOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , toOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , xOffset: \ :ref:`Integer <l496e7465676572>`\ , yOffset: \ :ref:`Integer <l496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addArrow! <l46696e6974654772617068-6164644172726f7721>`\ \: (%, \ :ref:`String <l537472696e67>`\ , S, S) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6164644f626a65637421:

\ :ref:`addObject! <l46696e6974654772617068-6164644f626a65637421>`\ \: (%, Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`addObject! <l46696e6974654772617068-6164644f626a65637421>`\ \: (%, S) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-61646a6163656e63794d6174726978:

\ :ref:`adjacencyMatrix <l46696e6974654772617068-61646a6163656e63794d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6170706c79:

.. index::
   pair: MultifunctionGraph; apply

:spadfun:`apply`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``apply '``\ function' represented by this graph to vertex index 'a'

.. _l4d756c746966756e6374696f6e4772617068-6172726f774e616d65:

\ :ref:`arrowName <l46696e6974654772617068-6172726f774e616d65>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6172726f777346726f6d4172726f77:

\ :ref:`arrowsFromArrow <l46696e6974654772617068-6172726f777346726f6d4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6172726f777346726f6d4e6f6465:

\ :ref:`arrowsFromNode <l46696e6974654772617068-6172726f777346726f6d4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6172726f7773546f4172726f77:

\ :ref:`arrowsToArrow <l46696e6974654772617068-6172726f7773546f4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6172726f7773546f4e6f6465:

\ :ref:`arrowsToNode <l46696e6974654772617068-6172726f7773546f4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-63617274657369616e:

.. index::
   pair: MultifunctionGraph; cartesian

:spadfun:`cartesian`\: (%, %) -> \ :ref:`MultifunctionGraph <l4d756c746966756e6374696f6e4772617068>`\  \ :ref:`Product <l50726f64756374>`\ (S, S) 
  Cartesian product doubles the size of next list in each object, that is it produces two arrows out of every node

.. _l4d756c746966756e6374696f6e4772617068-636c6f73656443617274657369616e:

.. index::
   pair: MultifunctionGraph; closedCartesian

:spadfun:`closedCartesian`\: (%, %, (S, S) -> S) -> % 
  Cartesian product doubles the size of next list in each object, that is it produces two arrows out of every node

.. _l4d756c746966756e6374696f6e4772617068-636c6f73656454656e736f72:

.. index::
   pair: MultifunctionGraph; closedTensor

:spadfun:`closedTensor`\: (%, %, (S, S) -> S) -> % 
  as tensor product but returns \%.

.. _l4d756c746966756e6374696f6e4772617068-636f41646a6f696e74:

.. index::
   pair: MultifunctionGraph; coAdjoint

:spadfun:`coAdjoint`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph

.. _l4d756c746966756e6374696f6e4772617068-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: MultifunctionGraph; coerce

:spadfun:`coerce`\: \ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  S -> % 
  \ ``coerce PermutationGroup``\  to graph which represents the generators of the group

.. _l4d756c746966756e6374696f6e4772617068-636f6e74726141646a6f696e74:

.. index::
   pair: MultifunctionGraph; contraAdjoint

:spadfun:`contraAdjoint`\: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> Union(\ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , failed) 
  given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph

.. _l4d756c746966756e6374696f6e4772617068-6372656174655769647468:

\ :ref:`createWidth <l46696e6974654772617068-6372656174655769647468>`\ \: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-63726561746558:

\ :ref:`createX <l46696e6974654772617068-63726561746558>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-63726561746559:

\ :ref:`createY <l46696e6974654772617068-63726561746559>`\ \: (\ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6379636c65436c6f736564:

\ :ref:`cycleClosed <l46696e6974654772617068-6379636c65436c6f736564>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6379636c654f70656e:

\ :ref:`cycleOpen <l46696e6974654772617068-6379636c654f70656e>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-646565704469616772616d537667:

\ :ref:`deepDiagramSvg <l46696e6974654772617068-646565704469616772616d537667>`\ \: (\ :ref:`String <l537472696e67>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6469616772616d486569676874:

\ :ref:`diagramHeight <l46696e6974654772617068-6469616772616d486569676874>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6469616772616d73537667:

\ :ref:`diagramsSvg <l46696e6974654772617068-6469616772616d73537667>`\ \: (\ :ref:`String <l537472696e67>`\ , \ :ref:`List <l4c697374>`\  %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6469616772616d537667:

\ :ref:`diagramSvg <l46696e6974654772617068-6469616772616d537667>`\ \: (\ :ref:`String <l537472696e67>`\ , %, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6469616772616d5769647468:

\ :ref:`diagramWidth <l46696e6974654772617068-6469616772616d5769647468>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-64697374616e6365:

\ :ref:`distance <l46696e6974654772617068-64697374616e6365>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-64697374616e63654d6174726978:

\ :ref:`distanceMatrix <l46696e6974654772617068-64697374616e63654d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-666c617474656e:

\ :ref:`flatten <l46696e6974654772617068-666c617474656e>`\ \: \ :ref:`DirectedGraph <l44697265637465644772617068>`\  % -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6765744172726f77496e646578:

\ :ref:`getArrowIndex <l46696e6974654772617068-6765744172726f77496e646578>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6765744172726f7773:

\ :ref:`getArrows <l46696e6974654772617068-6765744172726f7773>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(name: \ :ref:`String <l537472696e67>`\ , arrType: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , fromOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , toOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , xOffset: \ :ref:`Integer <l496e7465676572>`\ , yOffset: \ :ref:`Integer <l496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-676574566572746578496e646578:

\ :ref:`getVertexIndex <l46696e6974654772617068-676574566572746578496e646578>`\ \: (%, S) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6765745665727469636573:

\ :ref:`getVertices <l46696e6974654772617068-6765745665727469636573>`\ \: % -> \ :ref:`List <l4c697374>`\  Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-696e636964656e63654d6174726978:

\ :ref:`incidenceMatrix <l46696e6974654772617068-696e636964656e63654d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-696e446567726565:

\ :ref:`inDegree <l46696e6974654772617068-696e446567726565>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-696e697469616c:

\ :ref:`initial <l46696e6974654772617068-696e697469616c>`\ \: () -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6973416379636c69633f:

\ :ref:`isAcyclic? <l46696e6974654772617068-6973416379636c69633f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-697344697265637465643f:

\ :ref:`isDirected? <l46696e6974654772617068-697344697265637465643f>`\ \: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6973446972656374537563636573736f723f:

\ :ref:`isDirectSuccessor? <l46696e6974654772617068-6973446972656374537563636573736f723f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6973466978506f696e743f:

\ :ref:`isFixPoint? <l46696e6974654772617068-6973466978506f696e743f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-697346756e6374696f6e616c3f:

\ :ref:`isFunctional? <l46696e6974654772617068-697346756e6374696f6e616c3f>`\ \: % -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6973477265617465725468616e3f:

\ :ref:`isGreaterThan? <l46696e6974654772617068-6973477265617465725468616e3f>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6b6772617068:

\ :ref:`kgraph <l46696e6974654772617068-6b6772617068>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6c61706c616369616e4d6174726978:

\ :ref:`laplacianMatrix <l46696e6974654772617068-6c61706c616369616e4d6174726978>`\ \: % -> \ :ref:`Matrix <l4d6174726978>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l4d756c746966756e6374696f6e4772617068-6c696d6974:

.. index::
   pair: MultifunctionGraph; limit

:spadfun:`limit`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Loop <l4c6f6f70>`\  
  apply 'function' represented by this graph to 'a' repeatedly until we reach a loop which is returned as a sequence of vertex indexes.

.. _l4d756c746966756e6374696f6e4772617068-6c6f6f70734172726f7773:

\ :ref:`loopsArrows <l46696e6974654772617068-6c6f6f70734172726f7773>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6c6f6f707341744e6f6465:

\ :ref:`loopsAtNode <l46696e6974654772617068-6c6f6f707341744e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6c6f6f70734e6f646573:

\ :ref:`loopsNodes <l46696e6974654772617068-6c6f6f70734e6f646573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Loop <l4c6f6f70>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6c6f6f7365457175616c73:

\ :ref:`looseEquals <l46696e6974654772617068-6c6f6f7365457175616c73>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d6170:

\ :ref:`map <l46696e6974654772617068-6d6170>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d6170436f6e747261:

\ :ref:`mapContra <l46696e6974654772617068-6d6170436f6e747261>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`List <l4c697374>`\  S, \ :ref:`Integer <l496e7465676572>`\ , \ :ref:`Integer <l496e7465676572>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d6178:

\ :ref:`max <l46696e6974654772617068-6d6178>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`max <l46696e6974654772617068-6d6178>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d65726765:

\ :ref:`merge <l46696e6974654772617068-6d65726765>`\ \: (%, %) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d696e:

\ :ref:`min <l46696e6974654772617068-6d696e>`\ \: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`min <l46696e6974654772617068-6d696e>`\ \: (%, \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6d756c746966756e6374696f6e4772617068:

.. index::
   pair: MultifunctionGraph; multifunctionGraph

:spadfun:`multifunctionGraph`\: (\ :ref:`List <l4c697374>`\  Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ), \ :ref:`List <l4c697374>`\  Record(name: \ :ref:`String <l537472696e67>`\ , arrType: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , fromOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , toOb: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , xOffset: \ :ref:`Integer <l496e7465676572>`\ , yOffset: \ :ref:`Integer <l496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ )) -> % 
  \ ``multifunctionGraph(lo, la)``\  constructs a graph with given list of objects la and list of arrows la. More objects and arrows can be added later if required.


.. index::
   pair: MultifunctionGraph; multifunctionGraph

:spadfun:`multifunctionGraph`\: (\ :ref:`List <l4c697374>`\  S, \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``multifunctionGraph(lo, am)``\  constructs a graph given list of objects \ ``lo``\  and adjacency matrix am.


.. index::
   pair: MultifunctionGraph; multifunctionGraph

:spadfun:`multifunctionGraph`\: \ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S -> % 
  construct graph from a list of permutations.


.. index::
   pair: MultifunctionGraph; multifunctionGraph

:spadfun:`multifunctionGraph`\: \ :ref:`List <l4c697374>`\  Record(value: S, posX: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , posY: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , next: \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , map: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``multifunctionGraph(l)``\  constructs a graph with given list \ ``l``\  of objects. More objects and arrows can be added later if required.


.. index::
   pair: MultifunctionGraph; multifunctionGraph

:spadfun:`multifunctionGraph`\: \ :ref:`List <l4c697374>`\  S -> % 
  \ ``multifunctionGraph(l)``\  constructs a graph with given list \ ``l``\  of object names. Use this version of the constructor if you don\ ``'t``\  intend to create diagrams and therefore don\ ``'t``\  care about \ ``x``\ , \ ``y``\  coordinates. More objects and arrows can be added later if required.

.. _l4d756c746966756e6374696f6e4772617068-6e6f646546726f6d4172726f77:

\ :ref:`nodeFromArrow <l46696e6974654772617068-6e6f646546726f6d4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6e6f646546726f6d4e6f6465:

\ :ref:`nodeFromNode <l46696e6974654772617068-6e6f646546726f6d4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6e6f6465546f4172726f77:

\ :ref:`nodeToArrow <l46696e6974654772617068-6e6f6465546f4172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6e6f6465546f4e6f6465:

\ :ref:`nodeToNode <l46696e6974654772617068-6e6f6465546f4e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-6f7574446567726565:

\ :ref:`outDegree <l46696e6974654772617068-6f7574446567726565>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-726f7574654172726f7773:

\ :ref:`routeArrows <l46696e6974654772617068-726f7574654172726f7773>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-726f7574654e6f646573:

\ :ref:`routeNodes <l46696e6974654772617068-726f7574654e6f646573>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`List <l4c697374>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7370616e6e696e67466f726573744172726f77:

\ :ref:`spanningForestArrow <l46696e6974654772617068-7370616e6e696e67466f726573744172726f77>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7370616e6e696e67466f726573744e6f6465:

\ :ref:`spanningForestNode <l46696e6974654772617068-7370616e6e696e67466f726573744e6f6465>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7370616e6e696e67547265654172726f77:

\ :ref:`spanningTreeArrow <l46696e6974654772617068-7370616e6e696e67547265654172726f77>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7370616e6e696e67547265654e6f6465:

\ :ref:`spanningTreeNode <l46696e6974654772617068-7370616e6e696e67547265654e6f6465>`\ \: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Tree <l54726565>`\  \ :ref:`Integer <l496e7465676572>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7375626469616772616d537667:

\ :ref:`subdiagramSvg <l46696e6974654772617068-7375626469616772616d537667>`\ \: (\ :ref:`Scene <l5363656e65>`\  \ :ref:`SCartesian <l5343617274657369616e>`\  2, %, \ :ref:`Boolean <l426f6f6c65616e>`\ , \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`Void <l566f6964>`\  
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-7465726d696e616c:

\ :ref:`terminal <l46696e6974654772617068-7465726d696e616c>`\ \: S -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S

.. _l4d756c746966756e6374696f6e4772617068-746f4361796c65794772617068:

.. index::
   pair: MultifunctionGraph; toCayleyGraph

:spadfun:`toCayleyGraph`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Permutation <l5065726d75746174696f6e>`\  S, \ :ref:`Boolean <l426f6f6c65616e>`\ ) -> \ :ref:`MultifunctionGraph <l4d756c746966756e6374696f6e4772617068>`\  \ :ref:`String <l537472696e67>`\  
  convert permutation generators to a Cayley graph permList should contain generator permutations and should not contain identity permutation. if permutationNames then names generated represent permutation


.. index::
   pair: MultifunctionGraph; toCayleyGraph

:spadfun:`toCayleyGraph`\: \ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  S -> \ :ref:`MultifunctionGraph <l4d756c746966756e6374696f6e4772617068>`\  \ :ref:`String <l537472696e67>`\  
  convert PermutationGroup to a Cayley graph

.. _l4d756c746966756e6374696f6e4772617068-746f5065726d75746174696f6e:

.. index::
   pair: MultifunctionGraph; toPermutation

:spadfun:`toPermutation`\: % -> \ :ref:`PermutationGroup <l5065726d75746174696f6e47726f7570>`\  \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  generates a permutation group from this graph assumes this graph represents a valid group

.. _l4d756c746966756e6374696f6e4772617068-756e6974:

\ :ref:`unit <l46696e6974654772617068-756e6974>`\ \: (\ :ref:`List <l4c697374>`\  S, \ :ref:`String <l537472696e67>`\ ) -> % 
  from \ :ref:`FiniteGraph <l46696e6974654772617068>`\  S


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`FiniteGraph <l46696e6974654772617068>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

