.. index:: Plot3D

.. _l506c6f743344:

Plot3D
======

:viewcode:`plot3d.spad line 1 <plot3d.spad#L1>` :editcode:`[edit on github] <plot3d.spad#L1>`


Plot3D supports parametric plots defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example, floating point numbers and infinite continued fractions are real number systems. The facilities at this point are limited to 3-dimensional parametric plots.


.. _l506c6f743344-616461707469766533443f:

.. index::
   pair: Plot3D; adaptive3D?

:spadfun:`adaptive3D?`\: () -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``adaptive3D?()``\  determines whether plotting be done adaptively.

.. _l506c6f743344-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l506c6f743344-64656275673344:

.. index::
   pair: Plot3D; debug3D

:spadfun:`debug3D`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``debug3D(true)``\  turns debug mode on; debug3D(\ ``false``\ ) turns debug mode off.

.. _l506c6f743344-6c6973744272616e63686573:

\ :ref:`listBranches <l506c6f747461626c655370616365437572766543617465676f7279-6c6973744272616e63686573>`\ \: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottableSpaceCurveCategory <l506c6f747461626c655370616365437572766543617465676f7279>`\ 

.. _l506c6f743344-6d6178506f696e74733344:

.. index::
   pair: Plot3D; maxPoints3D

:spadfun:`maxPoints3D`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``maxPoints3D()``\  returns the maximum number of points in a plot.

.. _l506c6f743344-6d696e506f696e74733344:

.. index::
   pair: Plot3D; minPoints3D

:spadfun:`minPoints3D`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``minPoints3D()``\  returns the minimum number of points in a plot.

.. _l506c6f743344-6e756d46756e4576616c733344:

.. index::
   pair: Plot3D; numFunEvals3D

:spadfun:`numFunEvals3D`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``numFunEvals3D()``\  returns the number of points computed.

.. _l506c6f743344-706c6f74:

.. index::
   pair: Plot3D; plot

:spadfun:`plot`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(x, r)``\  \undocumented


.. index::
   pair: Plot3D; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f, g, h, a..b)``\  plots \ ``x``\  = \ ``f``\ (\ ``t``\ ), \ ``y``\  = \ ``g``\ (\ ``t``\ ), \ ``z``\  = \ ``h``\ (\ ``t``\ ) as \ ``t``\  ranges over [a, \ ``b``\ ].


.. index::
   pair: Plot3D; plot

:spadfun:`plot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``plot(f1, f2, f3, f4, x, y, z, w)``\  \undocumented

.. _l506c6f743344-706f696e74506c6f74:

.. index::
   pair: Plot3D; pointPlot

:spadfun:`pointPlot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``pointPlot(f, g, h, a..b)``\  plots \ ``x``\  = \ ``f``\ (\ ``t``\ ), \ ``y``\  = \ ``g``\ (\ ``t``\ ), \ ``z``\  = \ ``h``\ (\ ``t``\ ) as \ ``t``\  ranges over [a, \ ``b``\ ].


.. index::
   pair: Plot3D; pointPlot

:spadfun:`pointPlot`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`Point <l506f696e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``pointPlot(f, x, y, z, w)``\  \undocumented

.. _l506c6f743344-726566696e65:

.. index::
   pair: Plot3D; refine

:spadfun:`refine`\: % -> % 
  \ ``refine(x)``\  \undocumented


.. index::
   pair: Plot3D; refine

:spadfun:`refine`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``refine(x, r)``\  \undocumented

.. _l506c6f743344-73637265656e5265736f6c7574696f6e3344:

.. index::
   pair: Plot3D; screenResolution3D

:spadfun:`screenResolution3D`\: () -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``screenResolution3D()``\  returns the screen resolution for a 3d graph.

.. _l506c6f743344-73657441646170746976653344:

.. index::
   pair: Plot3D; setAdaptive3D

:spadfun:`setAdaptive3D`\: \ :ref:`Boolean <l426f6f6c65616e>`\  -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``setAdaptive3D(true)``\  turns adaptive plotting on; setAdaptive3D(\ ``false``\ ) turns adaptive plotting off.

.. _l506c6f743344-7365744d6178506f696e74733344:

.. index::
   pair: Plot3D; setMaxPoints3D

:spadfun:`setMaxPoints3D`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setMaxPoints3D(i)``\  sets the maximum number of points in a plot to \ ``i``\ .

.. _l506c6f743344-7365744d696e506f696e74733344:

.. index::
   pair: Plot3D; setMinPoints3D

:spadfun:`setMinPoints3D`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setMinPoints3D(i)``\  sets the minimum number of points in a plot to \ ``i``\ .

.. _l506c6f743344-73657453637265656e5265736f6c7574696f6e3344:

.. index::
   pair: Plot3D; setScreenResolution3D

:spadfun:`setScreenResolution3D`\: \ :ref:`Integer <l496e7465676572>`\  -> \ :ref:`Integer <l496e7465676572>`\  
  \ ``setScreenResolution3D(i)``\  sets the screen resolution for a 3d graph to \ ``i``\ .

.. _l506c6f743344-7452616e6765:

.. index::
   pair: Plot3D; tRange

:spadfun:`tRange`\: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``tRange(p)``\  returns the range of the parameter in a parametric plot \ ``p``\ .

.. _l506c6f743344-7456616c756573:

.. index::
   pair: Plot3D; tValues

:spadfun:`tValues`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  \ ``tValues(p)``\  returns a list of lists of the values of the parameter for which a point is computed, one list for each curve in the plot \ ``p``\ .

.. _l506c6f743344-7852616e6765:

\ :ref:`xRange <l506c6f747461626c655370616365437572766543617465676f7279-7852616e6765>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottableSpaceCurveCategory <l506c6f747461626c655370616365437572766543617465676f7279>`\ 

.. _l506c6f743344-7952616e6765:

\ :ref:`yRange <l506c6f747461626c655370616365437572766543617465676f7279-7952616e6765>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottableSpaceCurveCategory <l506c6f747461626c655370616365437572766543617465676f7279>`\ 

.. _l506c6f743344-7a6f6f6d:

.. index::
   pair: Plot3D; zoom

:spadfun:`zoom`\: (%, \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``zoom(x, r, s, t)``\  \undocumented

.. _l506c6f743344-7a52616e6765:

\ :ref:`zRange <l506c6f747461626c655370616365437572766543617465676f7279-7a52616e6765>`\ \: % -> \ :ref:`Segment <l5365676d656e74>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  
  from \ :ref:`PlottableSpaceCurveCategory <l506c6f747461626c655370616365437572766543617465676f7279>`\ 


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`PlottableSpaceCurveCategory <l506c6f747461626c655370616365437572766543617465676f7279>`\  

