.. index:: CyclicStreamTools

.. _l4379636c696353747265616d546f6f6c73:

CyclicStreamTools(S, ST)
========================

:viewcode:`stream.spad line 487 <stream.spad#L487>` :editcode:`[edit on github] <stream.spad#L487>`

* S: \ :ref:`Type <l54797065>`\ 

* ST: \ :ref:`LazyStreamAggregate <l4c617a7953747265616d416767726567617465>`\  S


This package provides tools for working with cyclic streams.


.. _l4379636c696353747265616d546f6f6c73-636f6d707574654379636c65456e747279:

.. index::
   pair: CyclicStreamTools; computeCycleEntry

:spadfun:`computeCycleEntry`\: (ST, ST) -> ST 
  \ ``computeCycleEntry(x, cycElt)``\ , where cycElt is a pointer to a node in the cyclic part of the cyclic stream \ ``x``\ , returns a pointer to the first node in the cycle

.. _l4379636c696353747265616d546f6f6c73-636f6d707574654379636c654c656e677468:

.. index::
   pair: CyclicStreamTools; computeCycleLength

:spadfun:`computeCycleLength`\: ST -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``computeCycleLength(s)``\  returns the length of the cycle of a cyclic stream \ ``t``\ , where \ ``s``\  is a pointer to a node in the cyclic part of \ ``t``\ .

.. _l4379636c696353747265616d546f6f6c73-6379636c65456c74:

.. index::
   pair: CyclicStreamTools; cycleElt

:spadfun:`cycleElt`\: ST -> Union(ST, failed) 
  \ ``cycleElt(s)``\  returns a pointer to a node in the cycle if the stream \ ``s``\  is cyclic and returns "failed" if \ ``s``\  is not cyclic


