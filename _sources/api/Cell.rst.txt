.. index:: Cell

.. _l43656c6c:

Cell TheField
=============

:viewcode:`cyldec.spad line 174 <cyldec.spad#L174>` :editcode:`[edit on github] <cyldec.spad#L174>`

* TheField: \ :ref:`RealClosedField <l5265616c436c6f7365644669656c64>`\ 


undocumented


.. _l43656c6c-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 

.. _l43656c6c-64696d656e73696f6e:

.. index::
   pair: Cell; dimension

:spadfun:`dimension`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``dimension(c)``\  returns dimension of \ ``c``\ 

.. _l43656c6c-68617344696d656e73696f6e3f:

.. index::
   pair: Cell; hasDimension?

:spadfun:`hasDimension?`\: (%, \ :ref:`Symbol <l53796d626f6c>`\ ) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``hasDimension?(c)``\  returns \ ``true``\  if \ ``c``\  is of positive dimension. Otherwise hasDimension?(\ ``c``\ ) returns \ ``false``\ .

.. _l43656c6c-6d61696e5661726961626c654f66:

.. index::
   pair: Cell; mainVariableOf

:spadfun:`mainVariableOf`\: % -> \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``mainVariableOf(c)``\  returns main variable of \ ``c``\ 

.. _l43656c6c-6d616b6543656c6c:

.. index::
   pair: Cell; makeCell

:spadfun:`makeCell`\: (\ :ref:`SimpleCell <l53696d706c6543656c6c>`\ (TheField, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  TheField), %) -> % 
  \ ``makeCell(c, sc)``\  creates a cell which consists of \ ``sc``\  in main variable and which has projection \ ``c``\ 


.. index::
   pair: Cell; makeCell

:spadfun:`makeCell`\: \ :ref:`List <l4c697374>`\  \ :ref:`SimpleCell <l53696d706c6543656c6c>`\ (TheField, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  TheField) -> % 
  \ ``makeCell(lc)``\  creates a cell from list of simple cells \ ``lc``\ 

.. _l43656c6c-70726f6a656374696f6e:

.. index::
   pair: Cell; projection

:spadfun:`projection`\: % -> Union(%, failed) 
  \ ``projection(c)``\  projects \ ``c``\  with respect to main variable

.. _l43656c6c-73616d706c65506f696e74:

.. index::
   pair: Cell; samplePoint

:spadfun:`samplePoint`\: % -> \ :ref:`List <l4c697374>`\  TheField 
  \ ``samplePoint(c)``\  returns the sample point of \ ``c``\ 

.. _l43656c6c-73696d706c6543656c6c73:

.. index::
   pair: Cell; simpleCells

:spadfun:`simpleCells`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`SimpleCell <l53696d706c6543656c6c>`\ (TheField, \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  TheField) 
  \ ``simpleCells(c)``\  returns lists of simple cells determining \ ``c``\ . That is \ ``c``\  = makeCell(simpleCells(\ ``c``\ ))

.. _l43656c6c-7661726961626c65734f66:

.. index::
   pair: Cell; variablesOf

:spadfun:`variablesOf`\: % -> \ :ref:`List <l4c697374>`\  \ :ref:`Symbol <l53796d626f6c>`\  
  \ ``variablesOf(c)``\  returns list of variables of \ ``c``\ 


\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

