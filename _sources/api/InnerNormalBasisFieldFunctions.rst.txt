.. index:: InnerNormalBasisFieldFunctions

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73:

InnerNormalBasisFieldFunctions GF
=================================

:viewcode:`ffdoms.spad line 2000 <ffdoms.spad#L2000>` :editcode:`[edit on github] <ffdoms.spad#L2000>`

* GF: \ :ref:`FiniteFieldCategory <l46696e6974654669656c6443617465676f7279>`\ 


InnerNormalBasisFieldFunctions(\ ``GF``\ ) (unexposed): This package has functions used by every normal basis finite field extension domain.


.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-2a:

.. index::
   pair: InnerNormalBasisFieldFunctions; *

:spadfun:`\*`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`Vector <l566563746f72>`\  GF) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``x*y``\  is undocumented. See \ :ref:`\* <l53656d6947726f7570-2a>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-2f:

.. index::
   pair: InnerNormalBasisFieldFunctions; /

:spadfun:`/`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`Vector <l566563746f72>`\  GF) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``x/y``\  is undocumented. See \ :ref:`/ <l4669656c64-2f>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-5e:

.. index::
   pair: InnerNormalBasisFieldFunctions; ^

:spadfun:`^`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``x^n``\  is undocumented. See \ :ref:`^ <l4469766973696f6e52696e67-5e>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6261736973:

.. index::
   pair: InnerNormalBasisFieldFunctions; basis

:spadfun:`basis`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`Vector <l566563746f72>`\  \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``basis(n)``\  is undocumented. See \ :ref:`basis <l46696e697465416c67656272616963457874656e73696f6e4669656c64-6261736973>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-64416e6463457870:

.. index::
   pair: InnerNormalBasisFieldFunctions; dAndcExp

:spadfun:`dAndcExp`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ , \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``dAndcExp(v, n, k)``\  computes \ ``v^e``\  interpreting \ ``v``\  as an element of normal basis field. A divide and conquer algorithm similar to the one from \ ``D``\ .\ ``R``\ .Stinson, "Some observations on parallel Algorithms for fast exponentiation in \ ``GF``\ (2^n)", Siam \ ``J``\ . Computation, Vol.19, No.4, \ ``pp``\ .711-717, August 1990 is used. Argument \ ``k``\  is a parameter of this algorithm.

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-657870506f74:

.. index::
   pair: InnerNormalBasisFieldFunctions; expPot

:spadfun:`expPot`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\ , \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``expPot(v, e, d)``\  returns the sum from \ ``i = 0``\  to \ ``e - 1``\  of \ ``v^(q^i*d)``\ , interpreting \ ``v``\  as an element of a normal basis field and where \ ``q``\  is the size of the ground field. Note: for a description of the algorithm, see \ ``T``\ .Itoh and \ ``S``\ .Tsujii, "A fast algorithm for computing multiplicative inverses in \ ``GF``\ (2^m) using normal bases", Information and Computation 78, \ ``pp``\ .171-177, 1988.

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-696e646578:

.. index::
   pair: InnerNormalBasisFieldFunctions; index

:spadfun:`index`\: (\ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ , \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``index(n, m)``\  is a index function for vectors of length \ ``n``\  over the ground field.

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-696e76:

.. index::
   pair: InnerNormalBasisFieldFunctions; inv

:spadfun:`inv`\: \ :ref:`Vector <l566563746f72>`\  GF -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``inv x``\  is undocumented. See \ :ref:`inv <l4469766973696f6e52696e67-696e76>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6c6f6f6b7570:

.. index::
   pair: InnerNormalBasisFieldFunctions; lookup

:spadfun:`lookup`\: \ :ref:`Vector <l566563746f72>`\  GF -> \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  
  \ ``lookup(x)``\  is undocumented. See \ :ref:`lookup <l46696e697465-6c6f6f6b7570>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6d696e696d616c506f6c796e6f6d69616c:

.. index::
   pair: InnerNormalBasisFieldFunctions; minimalPolynomial

:spadfun:`minimalPolynomial`\: \ :ref:`Vector <l566563746f72>`\  GF -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  GF 
  \ ``minimalPolynomial(x)``\  is undocumented. See \ :ref:`minimalPolynomial <l46696e697465416c67656272616963457874656e73696f6e4669656c64-6d696e696d616c506f6c796e6f6d69616c>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6e6f726d:

.. index::
   pair: InnerNormalBasisFieldFunctions; norm

:spadfun:`norm`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``norm(x, n)``\  is undocumented. See \ :ref:`norm <l46696e697465416c67656272616963457874656e73696f6e4669656c64-6e6f726d>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6e6f726d616c3f:

.. index::
   pair: InnerNormalBasisFieldFunctions; normal?

:spadfun:`normal?`\: \ :ref:`Vector <l566563746f72>`\  GF -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  \ ``normal?(x)``\  is undocumented. See \ :ref:`normal? <l46696e697465416c67656272616963457874656e73696f6e4669656c64-6e6f726d616c3f>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-6e6f726d616c456c656d656e74:

.. index::
   pair: InnerNormalBasisFieldFunctions; normalElement

:spadfun:`normalElement`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``normalElement(n)``\  is undocumented. See \ :ref:`normalElement <l46696e697465416c67656272616963457874656e73696f6e4669656c64-6e6f726d616c456c656d656e74>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-706f6c:

.. index::
   pair: InnerNormalBasisFieldFunctions; pol

:spadfun:`pol`\: \ :ref:`Vector <l566563746f72>`\  GF -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  GF 
  \ ``pol(v)``\  turns the vector \ ``[v0, ..., vn]``\  into the polynomial \ ``v0+v1*x+ ... + vn*x^n``\ .

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-71506f74:

.. index::
   pair: InnerNormalBasisFieldFunctions; qPot

:spadfun:`qPot`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`Integer <l496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``qPot(v, e)``\  computes \ ``v^(q^e)``\ , interpreting \ ``v``\  as an element of normal basis field, \ ``q``\  the size of the ground field. This is done by a cyclic \ ``e``\ -shift of the vector \ ``v``\ .

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-72616e646f6d:

.. index::
   pair: InnerNormalBasisFieldFunctions; random

:spadfun:`random`\: \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\  -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``random(n)``\  creates a vector over the ground field with random entries.

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-7265705371:

.. index::
   pair: InnerNormalBasisFieldFunctions; repSq

:spadfun:`repSq`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``repSq(v, e)``\  computes \ ``v^e``\  by repeated squaring, interpreting \ ``v``\  as an element of a normal basis field.

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-7365744669656c64496e666f:

.. index::
   pair: InnerNormalBasisFieldFunctions; setFieldInfo

:spadfun:`setFieldInfo`\: (\ :ref:`Vector <l566563746f72>`\  \ :ref:`List <l4c697374>`\  Record(value: GF, index: \ :ref:`SingleInteger <l53696e676c65496e7465676572>`\ ), GF) -> \ :ref:`Void <l566f6964>`\  
  \ ``setFieldInfo(m, p)``\  initializes the field arithmetic, where \ ``m``\  is the multiplication table and \ ``p``\  is the respective normal element of the ground field \ ``GF``\ .

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-7472616365:

.. index::
   pair: InnerNormalBasisFieldFunctions; trace

:spadfun:`trace`\: (\ :ref:`Vector <l566563746f72>`\  GF, \ :ref:`PositiveInteger <l506f736974697665496e7465676572>`\ ) -> \ :ref:`Vector <l566563746f72>`\  GF 
  \ ``trace(x, n)``\  is undocumented. See \ :ref:`trace <l46696e697465416c67656272616963457874656e73696f6e4669656c64-7472616365>`\ 

.. _l496e6e65724e6f726d616c42617369734669656c6446756e6374696f6e73-786e:

.. index::
   pair: InnerNormalBasisFieldFunctions; xn

:spadfun:`xn`\: \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  -> \ :ref:`SparseUnivariatePolynomial <l537061727365556e6976617269617465506f6c796e6f6d69616c>`\  GF 
  \ ``xn(n)``\  returns the polynomial \ ``x^n-1``\ .


