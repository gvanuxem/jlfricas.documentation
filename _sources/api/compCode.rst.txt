.. index:: compCode

.. _l636f6d70436f6465:

compCode
========

:viewcode:`computation.spad line 2790 <computation.spad#L2790>` :editcode:`[edit on github] <computation.spad#L2790>`


Maps abstract computational structures to real-world FriCAS code   This allows FriCAS domains to be created from an instance of Lambda it also allows FriCAS categories to be created from an instance of intuitionisticLogic.   So by the Curry-Howard isomorphism we can coerce to the intuitionisticLogic from Lambda. This gives an isomorphism where theorems in intuitionistic logic correspond to type signatures in combinatory logic and programs in intuitionistic logic correspond to the proofs of those theorems in combinatory logic.   As an example of this in Haskell see "Djinn, a theorem prover in Haskell, for Haskell" here: http://lambda-the-ultimate.\ ``org/node/1178``\    see also: Philip Wadler - Theorems for free! http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html


.. _l636f6d70436f6465-777269746543617465676f7279:

.. index::
   pair: compCode; writeCategory

:spadfun:`writeCategory`\: (\ :ref:`List <l4c697374>`\  \ :ref:`ILogic <l494c6f676963>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`Void <l566f6964>`\  
  writes a category to a file.

.. _l636f6d70436f6465-77726974655061636b616765:

.. index::
   pair: compCode; writePackage

:spadfun:`writePackage`\: (\ :ref:`List <l4c697374>`\  \ :ref:`Lambda <l4c616d626461>`\  \ :ref:`Typed <l5479706564>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ , \ :ref:`String <l537472696e67>`\ ) -> \ :ref:`Void <l566f6964>`\  
  writes a package to a file.


