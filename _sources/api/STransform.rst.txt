.. index:: STransform

.. _l535472616e73666f726d:

STransform PT
=============

:viewcode:`scene.spad line 2931 <scene.spad#L2931>` :editcode:`[edit on github] <scene.spad#L2931>`

* PT: \ :ref:`SPointCategory <l53506f696e7443617465676f7279>`\ 


Domains for transform from SPoint to SPoint STransform transform domain can by used to represent linear transforms for instance when working with SCartesian where its Representation is a matrix of DoubleFloat Other transform domains may not necessarily be linear and will have different representations


.. _l535472616e73666f726d-636f65726365:

.. index::
   pair: STransform; coerce

:spadfun:`coerce`\: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  \ ``coerce(tr)``\  output

.. _l535472616e73666f726d-636f6d706f756e64:

.. index::
   pair: STransform; compound

:spadfun:`compound`\: (%, %) -> % 
  \ ``compound(tr, inpt)``\  combine two transforms

.. _l535472616e73666f726d-6964656e74697479:

.. index::
   pair: STransform; identity

:spadfun:`identity`\: () -> % 
  \ ``identity()``\  returns the identity element which is do nothing transform

.. _l535472616e73666f726d-737472616e73666f726d:

.. index::
   pair: STransform; stransform

:spadfun:`stransform`\: (\ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> \ :ref:`Complex <l436f6d706c6578>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``stransform(cpx)``\  construct transform as function of complex variable can only be used when \ ``PT``\  is SArgand so this can be converted to \ ``PT``\  \ ``->``\  \ ``PT``\ 


.. index::
   pair: STransform; stransform

:spadfun:`stransform`\: (PT -> PT) -> % 
  \ ``stransform(gen)``\  construct transform in general form as a mapping from \ ``PT``\  to \ ``PT``\ 


.. index::
   pair: STransform; stransform

:spadfun:`stransform`\: \ :ref:`List <l4c697374>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``stransform(m)``\  construct transform using a multivector


.. index::
   pair: STransform; stransform

:spadfun:`stransform`\: \ :ref:`List <l4c697374>`\  \ :ref:`List <l4c697374>`\  \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\  -> % 
  \ ``stransform(m)``\  constructs transform with given matrix elements

.. _l535472616e73666f726d-737472616e736c617465:

.. index::
   pair: STransform; stranslate

:spadfun:`stranslate`\: (\ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ , \ :ref:`DoubleFloat <l446f75626c65466c6f6174>`\ ) -> % 
  \ ``stranslate(offsetx, offsety, offsetz, scalex, scaley, scalez)``\  constructs a transform which represents pure translation we can also combine with scale which, for instance, is useful when writing to \ ``SVG``\  file because the \ ``y``\  dimension is inverted

.. _l535472616e73666f726d-78666f726d:

.. index::
   pair: STransform; xform

:spadfun:`xform`\: (%, PT) -> PT 
  \ ``xform(tr, inpt)``\  apply transform to a point producing another point


