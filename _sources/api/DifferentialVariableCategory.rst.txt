.. index:: DifferentialVariableCategory

.. _l446966666572656e7469616c5661726961626c6543617465676f7279:

DifferentialVariableCategory S
==============================

:viewcode:`dpolcat.spad line 1 <dpolcat.spad#L1>` :editcode:`[edit on github] <dpolcat.spad#L1>`

* S: \ :ref:`OrderedSet <l4f726465726564536574>`\ 


\ :ref:`DifferentialVariableCategory <l446966666572656e7469616c5661726961626c6543617465676f7279>`\  constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \ ``x``\ , ..., \ ``y``\  is an ordered set of differential indeterminates, and the prime notation is used for differentiation, then the set of derivatives (including zero-th order) of the differential indeterminates is \ ``x``\ , \ ``x'``\ , \ ``x''``\ , ..., \ ``y``\ , \ ``y'``\ , \ ``y''``\ , ... (Note: in the interpreter, the \ ``n``\ -th derivative of \ ``y``\  is displayed as \ ``y``\  with a subscript \ ``n``\ .) This set is viewed as a set of algebraic indeterminates, totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates.   A domain in this category is needed to construct a differential polynomial domain. Differential polynomials are ordered by a ranking on the derivatives, and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates, just as one associates a domain in the category \ :ref:`OrderedAbelianMonoidSup <l4f7264657265644162656c69616e4d6f6e6f6964537570>`\  with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \ :spadfun:`<`\ . For example, one may define one derivative to be less than another by lexicographically comparing first the \ :spadfun:`order`\ , then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation.   The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates, Very often, a grading is the first step in ordering the set of monomials. For differential polynomial domains, this constructor provides a function \ :spadfun:`weight`\ , which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example, one may define the weight of a derivative to be simply its \ :spadfun:`order`\  (this is the default assignment). This weight function can then be extended to the set of all differential polynomials, providing a graded ring structure.


.. _l446966666572656e7469616c5661726961626c6543617465676f7279-3c3d:

\ :ref:`<= <l5061727469616c4f72646572-3c3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-3c:

\ :ref:`< <l5061727469616c4f72646572-3c>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-3d:

\ :ref:`= <l426173696354797065-3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-3e3d:

\ :ref:`>= <l5061727469616c4f72646572-3e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-3e:

\ :ref:`> <l5061727469616c4f72646572-3e>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`PartialOrder <l5061727469616c4f72646572>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-7e3d:

\ :ref:`~= <l426173696354797065-7e3d>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`BasicType <l426173696354797065>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-636f65726365:

\ :ref:`coerce <l436f65726369626c65546f-636f65726365>`\ \: % -> \ :ref:`OutputForm <l4f7574707574466f726d>`\  
  from \ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\ 


.. index::
   pair: DifferentialVariableCategory; coerce

:spadfun:`coerce`\: S -> % 
  \ ``coerce(s)``\  returns \ ``s``\ , viewed as the zero-th order derivative of \ ``s``\ .

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-646966666572656e7469617465:

.. index::
   pair: DifferentialVariableCategory; differentiate

:spadfun:`differentiate`\: % -> % 
  \ ``differentiate(v)``\  returns the derivative of \ ``v``\ .


.. index::
   pair: DifferentialVariableCategory; differentiate

:spadfun:`differentiate`\: (%, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``differentiate(v, n)``\  returns the \ ``n``\ -th derivative of \ ``v``\ .

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-6c61746578:

\ :ref:`latex <l53657443617465676f7279-6c61746578>`\ \: % -> \ :ref:`String <l537472696e67>`\  
  from \ :ref:`SetCategory <l53657443617465676f7279>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-6d616b655661726961626c65:

.. index::
   pair: DifferentialVariableCategory; makeVariable

:spadfun:`makeVariable`\: (S, \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\ ) -> % 
  \ ``makeVariable(s, n)``\  returns the \ ``n``\ -th derivative of a differential indeterminate \ ``s``\  as an algebraic indeterminate.

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-6d6178:

\ :ref:`max <l4f726465726564536574-6d6178>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-6d696e:

\ :ref:`min <l4f726465726564536574-6d696e>`\ \: (%, %) -> % 
  from \ :ref:`OrderedSet <l4f726465726564536574>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-6f72646572:

.. index::
   pair: DifferentialVariableCategory; order

:spadfun:`order`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``order(v)``\  returns \ ``n``\  if \ ``v``\  is the \ ``n``\ -th derivative of any differential indeterminate.

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-72657472616374:

\ :ref:`retract <l5265747261637461626c65546f-72657472616374>`\ \: % -> S 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-72657472616374496643616e:

\ :ref:`retractIfCan <l5265747261637461626c65546f-72657472616374496643616e>`\ \: % -> Union(S, failed) 
  from \ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-736d616c6c65723f:

\ :ref:`smaller? <l436f6d70617261626c65-736d616c6c65723f>`\ \: (%, %) -> \ :ref:`Boolean <l426f6f6c65616e>`\  
  from \ :ref:`Comparable <l436f6d70617261626c65>`\ 

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-7661726961626c65:

.. index::
   pair: DifferentialVariableCategory; variable

:spadfun:`variable`\: % -> S 
  \ ``variable(v)``\  returns \ ``s``\  if \ ``v``\  is any derivative of the differential indeterminate \ ``s``\ .

.. _l446966666572656e7469616c5661726961626c6543617465676f7279-776569676874:

.. index::
   pair: DifferentialVariableCategory; weight

:spadfun:`weight`\: % -> \ :ref:`NonNegativeInteger <l4e6f6e4e65676174697665496e7465676572>`\  
  \ ``weight(v)``\  returns the weight of the derivative \ ``v``\ .


\ :ref:`BasicType <l426173696354797065>`\  

\ :ref:`CoercibleFrom <l436f65726369626c6546726f6d>`\  S 

\ :ref:`CoercibleTo <l436f65726369626c65546f>`\  \ :ref:`OutputForm <l4f7574707574466f726d>`\  

\ :ref:`Comparable <l436f6d70617261626c65>`\  

\ :ref:`OrderedSet <l4f726465726564536574>`\  

\ :ref:`PartialOrder <l5061727469616c4f72646572>`\  

\ :ref:`RetractableTo <l5265747261637461626c65546f>`\  S 

\ :ref:`SetCategory <l53657443617465676f7279>`\  

